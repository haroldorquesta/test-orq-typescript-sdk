/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type DeleteV2DeploymentsInvalidateDeploymentIdRequest = {
  deploymentId: string;
};

/** @internal */
export const DeleteV2DeploymentsInvalidateDeploymentIdRequest$inboundSchema:
  z.ZodType<
    DeleteV2DeploymentsInvalidateDeploymentIdRequest,
    z.ZodTypeDef,
    unknown
  > = z.object({
    deployment_id: z.string(),
  }).transform((v) => {
    return remap$(v, {
      "deployment_id": "deploymentId",
    });
  });

/** @internal */
export type DeleteV2DeploymentsInvalidateDeploymentIdRequest$Outbound = {
  deployment_id: string;
};

/** @internal */
export const DeleteV2DeploymentsInvalidateDeploymentIdRequest$outboundSchema:
  z.ZodType<
    DeleteV2DeploymentsInvalidateDeploymentIdRequest$Outbound,
    z.ZodTypeDef,
    DeleteV2DeploymentsInvalidateDeploymentIdRequest
  > = z.object({
    deploymentId: z.string(),
  }).transform((v) => {
    return remap$(v, {
      deploymentId: "deployment_id",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeleteV2DeploymentsInvalidateDeploymentIdRequest$ {
  /** @deprecated use `DeleteV2DeploymentsInvalidateDeploymentIdRequest$inboundSchema` instead. */
  export const inboundSchema =
    DeleteV2DeploymentsInvalidateDeploymentIdRequest$inboundSchema;
  /** @deprecated use `DeleteV2DeploymentsInvalidateDeploymentIdRequest$outboundSchema` instead. */
  export const outboundSchema =
    DeleteV2DeploymentsInvalidateDeploymentIdRequest$outboundSchema;
  /** @deprecated use `DeleteV2DeploymentsInvalidateDeploymentIdRequest$Outbound` instead. */
  export type Outbound =
    DeleteV2DeploymentsInvalidateDeploymentIdRequest$Outbound;
}

export function deleteV2DeploymentsInvalidateDeploymentIdRequestToJSON(
  deleteV2DeploymentsInvalidateDeploymentIdRequest:
    DeleteV2DeploymentsInvalidateDeploymentIdRequest,
): string {
  return JSON.stringify(
    DeleteV2DeploymentsInvalidateDeploymentIdRequest$outboundSchema.parse(
      deleteV2DeploymentsInvalidateDeploymentIdRequest,
    ),
  );
}

export function deleteV2DeploymentsInvalidateDeploymentIdRequestFromJSON(
  jsonString: string,
): SafeParseResult<
  DeleteV2DeploymentsInvalidateDeploymentIdRequest,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      DeleteV2DeploymentsInvalidateDeploymentIdRequest$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'DeleteV2DeploymentsInvalidateDeploymentIdRequest' from JSON`,
  );
}
