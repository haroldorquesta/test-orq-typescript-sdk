/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type DeleteV2ResourcesEvaluatorsIdRequest = {
  id: string;
};

/** @internal */
export const DeleteV2ResourcesEvaluatorsIdRequest$inboundSchema: z.ZodType<
  DeleteV2ResourcesEvaluatorsIdRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
});

/** @internal */
export type DeleteV2ResourcesEvaluatorsIdRequest$Outbound = {
  id: string;
};

/** @internal */
export const DeleteV2ResourcesEvaluatorsIdRequest$outboundSchema: z.ZodType<
  DeleteV2ResourcesEvaluatorsIdRequest$Outbound,
  z.ZodTypeDef,
  DeleteV2ResourcesEvaluatorsIdRequest
> = z.object({
  id: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeleteV2ResourcesEvaluatorsIdRequest$ {
  /** @deprecated use `DeleteV2ResourcesEvaluatorsIdRequest$inboundSchema` instead. */
  export const inboundSchema =
    DeleteV2ResourcesEvaluatorsIdRequest$inboundSchema;
  /** @deprecated use `DeleteV2ResourcesEvaluatorsIdRequest$outboundSchema` instead. */
  export const outboundSchema =
    DeleteV2ResourcesEvaluatorsIdRequest$outboundSchema;
  /** @deprecated use `DeleteV2ResourcesEvaluatorsIdRequest$Outbound` instead. */
  export type Outbound = DeleteV2ResourcesEvaluatorsIdRequest$Outbound;
}

export function deleteV2ResourcesEvaluatorsIdRequestToJSON(
  deleteV2ResourcesEvaluatorsIdRequest: DeleteV2ResourcesEvaluatorsIdRequest,
): string {
  return JSON.stringify(
    DeleteV2ResourcesEvaluatorsIdRequest$outboundSchema.parse(
      deleteV2ResourcesEvaluatorsIdRequest,
    ),
  );
}

export function deleteV2ResourcesEvaluatorsIdRequestFromJSON(
  jsonString: string,
): SafeParseResult<DeleteV2ResourcesEvaluatorsIdRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      DeleteV2ResourcesEvaluatorsIdRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DeleteV2ResourcesEvaluatorsIdRequest' from JSON`,
  );
}
