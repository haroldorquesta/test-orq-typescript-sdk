/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type FindOnePromptSnippetRequest = {
  /**
   * Prompt Snippet Key
   */
  key: string;
};

export const FindOnePromptSnippetOwnerPromptSnippets2 = {
  Vendor: "vendor",
} as const;
export type FindOnePromptSnippetOwnerPromptSnippets2 = ClosedEnum<
  typeof FindOnePromptSnippetOwnerPromptSnippets2
>;

export type FindOnePromptSnippetResponseBodyOwner =
  | string
  | FindOnePromptSnippetOwnerPromptSnippets2;

/**
 * The type of the model
 */
export const FindOnePromptSnippetResponseBodyPromptSnippetsModelType = {
  Chat: "chat",
  Completion: "completion",
  Embedding: "embedding",
  Vision: "vision",
  Image: "image",
  Tts: "tts",
  Stt: "stt",
  Rerank: "rerank",
} as const;
/**
 * The type of the model
 */
export type FindOnePromptSnippetResponseBodyPromptSnippetsModelType =
  ClosedEnum<typeof FindOnePromptSnippetResponseBodyPromptSnippetsModelType>;

/**
 * Only supported on `image` models.
 */
export const FindOnePromptSnippetResponseBodyPromptSnippetsFormat = {
  Url: "url",
  B64Json: "b64_json",
  Text: "text",
  JsonObject: "json_object",
} as const;
/**
 * Only supported on `image` models.
 */
export type FindOnePromptSnippetResponseBodyPromptSnippetsFormat = ClosedEnum<
  typeof FindOnePromptSnippetResponseBodyPromptSnippetsFormat
>;

/**
 * Only supported on `image` models.
 */
export const FindOnePromptSnippetResponseBodyPromptSnippetsQuality = {
  Standard: "standard",
  Hd: "hd",
} as const;
/**
 * Only supported on `image` models.
 */
export type FindOnePromptSnippetResponseBodyPromptSnippetsQuality = ClosedEnum<
  typeof FindOnePromptSnippetResponseBodyPromptSnippetsQuality
>;

export const FindOnePromptSnippetResponseFormatPromptSnippetsResponse200ApplicationJSONResponseBodyType =
  {
    JsonObject: "json_object",
  } as const;
export type FindOnePromptSnippetResponseFormatPromptSnippetsResponse200ApplicationJSONResponseBodyType =
  ClosedEnum<
    typeof FindOnePromptSnippetResponseFormatPromptSnippetsResponse200ApplicationJSONResponseBodyType
  >;

export type FindOnePromptSnippetResponseFormatPromptSnippetsResponse2 = {
  type:
    FindOnePromptSnippetResponseFormatPromptSnippetsResponse200ApplicationJSONResponseBodyType;
};

export const FindOnePromptSnippetResponseFormatPromptSnippetsResponse200ApplicationJSONType =
  {
    JsonSchema: "json_schema",
  } as const;
export type FindOnePromptSnippetResponseFormatPromptSnippetsResponse200ApplicationJSONType =
  ClosedEnum<
    typeof FindOnePromptSnippetResponseFormatPromptSnippetsResponse200ApplicationJSONType
  >;

export type FindOnePromptSnippetResponseFormatPromptSnippetsResponseJsonSchema =
  {
    name: string;
    strict: boolean;
    schema: { [k: string]: any };
  };

export type FindOnePromptSnippetResponseFormatPromptSnippetsResponse1 = {
  type:
    FindOnePromptSnippetResponseFormatPromptSnippetsResponse200ApplicationJSONType;
  jsonSchema:
    FindOnePromptSnippetResponseFormatPromptSnippetsResponseJsonSchema;
};

/**
 * An object specifying the format that the model must output.
 *
 * @remarks
 *
 *  Setting to `{ "type": "json_schema", "json_schema": {...} }` enables Structured Outputs which ensures the model will match your supplied JSON schema
 *
 *  Setting to `{ "type": "json_object" }` enables JSON mode, which ensures the message the model generates is valid JSON.
 *
 * Important: when using JSON mode, you must also instruct the model to produce JSON yourself via a system or user message. Without this, the model may generate an unending stream of whitespace until the generation reaches the token limit, resulting in a long-running and seemingly "stuck" request. Also note that the message content may be partially cut off if finish_reason="length", which indicates the generation exceeded max_tokens or the conversation exceeded the max context length.
 */
export type FindOnePromptSnippetResponseBodyPromptSnippetsResponseFormat =
  | FindOnePromptSnippetResponseFormatPromptSnippetsResponse2
  | FindOnePromptSnippetResponseFormatPromptSnippetsResponse1;

/**
 * The version of photoReal to use. Must be v1 or v2. Only available for `leonardoai` provider
 */
export const FindOnePromptSnippetResponseBodyPromptSnippetsPhotoRealVersion = {
  V1: "v1",
  V2: "v2",
} as const;
/**
 * The version of photoReal to use. Must be v1 or v2. Only available for `leonardoai` provider
 */
export type FindOnePromptSnippetResponseBodyPromptSnippetsPhotoRealVersion =
  ClosedEnum<
    typeof FindOnePromptSnippetResponseBodyPromptSnippetsPhotoRealVersion
  >;

/**
 * The format to return the embeddings
 */
export const FindOnePromptSnippetResponseBodyPromptSnippetsEncodingFormat = {
  Float: "float",
  Base64: "base64",
} as const;
/**
 * The format to return the embeddings
 */
export type FindOnePromptSnippetResponseBodyPromptSnippetsEncodingFormat =
  ClosedEnum<
    typeof FindOnePromptSnippetResponseBodyPromptSnippetsEncodingFormat
  >;

/**
 * Model Parameters: Not all parameters apply to every model
 */
export type FindOnePromptSnippetResponseBodyPromptSnippetsModelParameters = {
  /**
   * Only supported on `chat` and `completion` models.
   */
  temperature?: number | undefined;
  /**
   * Only supported on `chat` and `completion` models.
   */
  maxTokens?: number | undefined;
  /**
   * Only supported on `chat` and `completion` models.
   */
  topK?: number | undefined;
  /**
   * Only supported on `chat` and `completion` models.
   */
  topP?: number | undefined;
  /**
   * Only supported on `chat` and `completion` models.
   */
  frequencyPenalty?: number | undefined;
  /**
   * Only supported on `chat` and `completion` models.
   */
  presencePenalty?: number | undefined;
  /**
   * Only supported on `image` models.
   */
  numImages?: number | undefined;
  /**
   * Best effort deterministic seed for the model. Currently only OpenAI models support these
   */
  seed?: number | undefined;
  /**
   * Only supported on `image` models.
   */
  format?: FindOnePromptSnippetResponseBodyPromptSnippetsFormat | undefined;
  /**
   * Only supported on `image` models.
   */
  dimensions?: string | undefined;
  /**
   * Only supported on `image` models.
   */
  quality?: FindOnePromptSnippetResponseBodyPromptSnippetsQuality | undefined;
  /**
   * Only supported on `image` models.
   */
  style?: string | undefined;
  /**
   * An object specifying the format that the model must output.
   *
   * @remarks
   *
   *  Setting to `{ "type": "json_schema", "json_schema": {...} }` enables Structured Outputs which ensures the model will match your supplied JSON schema
   *
   *  Setting to `{ "type": "json_object" }` enables JSON mode, which ensures the message the model generates is valid JSON.
   *
   * Important: when using JSON mode, you must also instruct the model to produce JSON yourself via a system or user message. Without this, the model may generate an unending stream of whitespace until the generation reaches the token limit, resulting in a long-running and seemingly "stuck" request. Also note that the message content may be partially cut off if finish_reason="length", which indicates the generation exceeded max_tokens or the conversation exceeded the max context length.
   */
  responseFormat?:
    | FindOnePromptSnippetResponseFormatPromptSnippetsResponse2
    | FindOnePromptSnippetResponseFormatPromptSnippetsResponse1
    | null
    | undefined;
  /**
   * The version of photoReal to use. Must be v1 or v2. Only available for `leonardoai` provider
   */
  photoRealVersion?:
    | FindOnePromptSnippetResponseBodyPromptSnippetsPhotoRealVersion
    | undefined;
  /**
   * The format to return the embeddings
   */
  encodingFormat?:
    | FindOnePromptSnippetResponseBodyPromptSnippetsEncodingFormat
    | undefined;
};

export const FindOnePromptSnippetResponseBodyPromptSnippetsProvider = {
  Cohere: "cohere",
  Openai: "openai",
  Anthropic: "anthropic",
  Huggingface: "huggingface",
  Replicate: "replicate",
  Google: "google",
  GoogleAi: "google-ai",
  Azure: "azure",
  Aws: "aws",
  Anyscale: "anyscale",
  Perplexity: "perplexity",
  Groq: "groq",
  Fal: "fal",
  Leonardoai: "leonardoai",
  Nvidia: "nvidia",
} as const;
export type FindOnePromptSnippetResponseBodyPromptSnippetsProvider = ClosedEnum<
  typeof FindOnePromptSnippetResponseBodyPromptSnippetsProvider
>;

/**
 * The role of the prompt message
 */
export const FindOnePromptSnippetResponseBodyPromptSnippetsRole = {
  System: "system",
  Assistant: "assistant",
  User: "user",
  Exception: "exception",
  Tool: "tool",
  Prompt: "prompt",
  Correction: "correction",
  ExpectedOutput: "expected_output",
} as const;
/**
 * The role of the prompt message
 */
export type FindOnePromptSnippetResponseBodyPromptSnippetsRole = ClosedEnum<
  typeof FindOnePromptSnippetResponseBodyPromptSnippetsRole
>;

export const FindOnePromptSnippet2PromptSnippetsResponse200ApplicationJSONResponseBodyType =
  {
    ImageUrl: "image_url",
  } as const;
export type FindOnePromptSnippet2PromptSnippetsResponse200ApplicationJSONResponseBodyType =
  ClosedEnum<
    typeof FindOnePromptSnippet2PromptSnippetsResponse200ApplicationJSONResponseBodyType
  >;

export type FindOnePromptSnippet2PromptSnippetsResponseImageUrl = {
  /**
   * The orq.ai id of the image
   */
  id?: string | undefined;
  /**
   * Either a URL of the image or the base64 encoded data URI.
   */
  url: string;
  /**
   * Specifies the detail level of the image. Currently only supported with OpenAI models
   */
  detail?: string | undefined;
};

/**
 * The image part of the prompt message. Only supported with vision models.
 */
export type FindOnePromptSnippet2PromptSnippetsResponse2 = {
  type:
    FindOnePromptSnippet2PromptSnippetsResponse200ApplicationJSONResponseBodyType;
  imageUrl: FindOnePromptSnippet2PromptSnippetsResponseImageUrl;
};

export const FindOnePromptSnippet2PromptSnippetsResponse200ApplicationJSONType =
  {
    Text: "text",
  } as const;
export type FindOnePromptSnippet2PromptSnippetsResponse200ApplicationJSONType =
  ClosedEnum<
    typeof FindOnePromptSnippet2PromptSnippetsResponse200ApplicationJSONType
  >;

/**
 * Text content part of a prompt message
 */
export type FindOnePromptSnippet2PromptSnippetsResponse1 = {
  type: FindOnePromptSnippet2PromptSnippetsResponse200ApplicationJSONType;
  text: string;
};

export type FindOnePromptSnippetContentPromptSnippetsResponse2 =
  | FindOnePromptSnippet2PromptSnippetsResponse1
  | FindOnePromptSnippet2PromptSnippetsResponse2;

/**
 * The contents of the user message. Either the text content of the message or an array of content parts with a defined type, each can be of type `text` or `image_url` when passing in images. You can pass multiple images by adding multiple `image_url` content parts.
 */
export type FindOnePromptSnippetResponseBodyPromptSnippetsContent =
  | string
  | Array<
    | FindOnePromptSnippet2PromptSnippetsResponse1
    | FindOnePromptSnippet2PromptSnippetsResponse2
  >;

export const FindOnePromptSnippetResponseBodyPromptSnippetsResponse200Type = {
  Function: "function",
} as const;
export type FindOnePromptSnippetResponseBodyPromptSnippetsResponse200Type =
  ClosedEnum<
    typeof FindOnePromptSnippetResponseBodyPromptSnippetsResponse200Type
  >;

export type FindOnePromptSnippetResponseBodyPromptSnippetsFunction = {
  name: string;
  /**
   * JSON string arguments for the functions
   */
  arguments: string;
};

export type FindOnePromptSnippetResponseBodyPromptSnippetsToolCalls = {
  id?: string | undefined;
  index?: number | undefined;
  type: FindOnePromptSnippetResponseBodyPromptSnippetsResponse200Type;
  function: FindOnePromptSnippetResponseBodyPromptSnippetsFunction;
};

export type FindOnePromptSnippetResponseBodyPromptSnippetsMessages = {
  /**
   * The role of the prompt message
   */
  role: FindOnePromptSnippetResponseBodyPromptSnippetsRole;
  /**
   * The contents of the user message. Either the text content of the message or an array of content parts with a defined type, each can be of type `text` or `image_url` when passing in images. You can pass multiple images by adding multiple `image_url` content parts.
   */
  content:
    | string
    | Array<
      | FindOnePromptSnippet2PromptSnippetsResponse1
      | FindOnePromptSnippet2PromptSnippetsResponse2
    >;
  toolCalls?:
    | Array<FindOnePromptSnippetResponseBodyPromptSnippetsToolCalls>
    | undefined;
};

export type FindOnePromptSnippetResponseBodyPromptSnippetsPromptConfig = {
  stream?: boolean | undefined;
  model?: string | undefined;
  /**
   * The id of the resource
   */
  modelDbId?: string | undefined;
  /**
   * The type of the model
   */
  modelType?:
    | FindOnePromptSnippetResponseBodyPromptSnippetsModelType
    | undefined;
  /**
   * Model Parameters: Not all parameters apply to every model
   */
  modelParameters?:
    | FindOnePromptSnippetResponseBodyPromptSnippetsModelParameters
    | undefined;
  provider?: FindOnePromptSnippetResponseBodyPromptSnippetsProvider | undefined;
  /**
   * The id of the resource
   */
  integrationId?: string | null | undefined;
  version?: string | undefined;
  messages: Array<FindOnePromptSnippetResponseBodyPromptSnippetsMessages>;
};

export type FindOnePromptSnippetResponseBodyPromptSnippetsMetadata = {
  useCases?: Array<string> | undefined;
  language?: string | undefined;
};

/**
 * The type of the model
 */
export const FindOnePromptSnippetResponseBodyPromptSnippetsResponse200ApplicationJSONModelType =
  {
    Chat: "chat",
    Completion: "completion",
    Embedding: "embedding",
    Vision: "vision",
    Image: "image",
    Tts: "tts",
    Stt: "stt",
    Rerank: "rerank",
  } as const;
/**
 * The type of the model
 */
export type FindOnePromptSnippetResponseBodyPromptSnippetsResponse200ApplicationJSONModelType =
  ClosedEnum<
    typeof FindOnePromptSnippetResponseBodyPromptSnippetsResponse200ApplicationJSONModelType
  >;

/**
 * Only supported on `image` models.
 */
export const FindOnePromptSnippetResponseBodyPromptSnippetsResponse200ApplicationJson3Format =
  {
    Url: "url",
    B64Json: "b64_json",
    Text: "text",
    JsonObject: "json_object",
  } as const;
/**
 * Only supported on `image` models.
 */
export type FindOnePromptSnippetResponseBodyPromptSnippetsResponse200ApplicationJson3Format =
  ClosedEnum<
    typeof FindOnePromptSnippetResponseBodyPromptSnippetsResponse200ApplicationJson3Format
  >;

/**
 * Only supported on `image` models.
 */
export const FindOnePromptSnippetResponseBodyPromptSnippetsResponse200ApplicationJSONQuality =
  {
    Standard: "standard",
    Hd: "hd",
  } as const;
/**
 * Only supported on `image` models.
 */
export type FindOnePromptSnippetResponseBodyPromptSnippetsResponse200ApplicationJSONQuality =
  ClosedEnum<
    typeof FindOnePromptSnippetResponseBodyPromptSnippetsResponse200ApplicationJSONQuality
  >;

export const FindOnePromptSnippetResponseFormatPromptSnippetsResponse200ApplicationJSONResponseBody3VersionsType =
  {
    JsonObject: "json_object",
  } as const;
export type FindOnePromptSnippetResponseFormatPromptSnippetsResponse200ApplicationJSONResponseBody3VersionsType =
  ClosedEnum<
    typeof FindOnePromptSnippetResponseFormatPromptSnippetsResponse200ApplicationJSONResponseBody3VersionsType
  >;

export type FindOnePromptSnippetResponseFormatPromptSnippetsResponse200ApplicationJSONResponseBody2 =
  {
    type:
      FindOnePromptSnippetResponseFormatPromptSnippetsResponse200ApplicationJSONResponseBody3VersionsType;
  };

export const FindOnePromptSnippetResponseFormatPromptSnippetsResponse200ApplicationJSONResponseBody3Type =
  {
    JsonSchema: "json_schema",
  } as const;
export type FindOnePromptSnippetResponseFormatPromptSnippetsResponse200ApplicationJSONResponseBody3Type =
  ClosedEnum<
    typeof FindOnePromptSnippetResponseFormatPromptSnippetsResponse200ApplicationJSONResponseBody3Type
  >;

export type FindOnePromptSnippetResponseFormatPromptSnippetsResponse200ApplicationJSONResponseBodyJSONSchema =
  {
    name: string;
    strict: boolean;
    schema: { [k: string]: any };
  };

export type FindOnePromptSnippetResponseFormatPromptSnippetsResponse200ApplicationJSONResponseBody1 =
  {
    type:
      FindOnePromptSnippetResponseFormatPromptSnippetsResponse200ApplicationJSONResponseBody3Type;
    jsonSchema:
      FindOnePromptSnippetResponseFormatPromptSnippetsResponse200ApplicationJSONResponseBodyJSONSchema;
  };

/**
 * An object specifying the format that the model must output.
 *
 * @remarks
 *
 *  Setting to `{ "type": "json_schema", "json_schema": {...} }` enables Structured Outputs which ensures the model will match your supplied JSON schema
 *
 *  Setting to `{ "type": "json_object" }` enables JSON mode, which ensures the message the model generates is valid JSON.
 *
 * Important: when using JSON mode, you must also instruct the model to produce JSON yourself via a system or user message. Without this, the model may generate an unending stream of whitespace until the generation reaches the token limit, resulting in a long-running and seemingly "stuck" request. Also note that the message content may be partially cut off if finish_reason="length", which indicates the generation exceeded max_tokens or the conversation exceeded the max context length.
 */
export type FindOnePromptSnippetResponseBodyPromptSnippetsResponse200ApplicationJSONResponseFormat =
  | FindOnePromptSnippetResponseFormatPromptSnippetsResponse200ApplicationJSONResponseBody2
  | FindOnePromptSnippetResponseFormatPromptSnippetsResponse200ApplicationJSONResponseBody1;

/**
 * The version of photoReal to use. Must be v1 or v2. Only available for `leonardoai` provider
 */
export const FindOnePromptSnippetResponseBodyPromptSnippetsResponse200ApplicationJSONPhotoRealVersion =
  {
    V1: "v1",
    V2: "v2",
  } as const;
/**
 * The version of photoReal to use. Must be v1 or v2. Only available for `leonardoai` provider
 */
export type FindOnePromptSnippetResponseBodyPromptSnippetsResponse200ApplicationJSONPhotoRealVersion =
  ClosedEnum<
    typeof FindOnePromptSnippetResponseBodyPromptSnippetsResponse200ApplicationJSONPhotoRealVersion
  >;

/**
 * The format to return the embeddings
 */
export const FindOnePromptSnippetResponseBodyPromptSnippetsResponse200ApplicationJSONEncodingFormat =
  {
    Float: "float",
    Base64: "base64",
  } as const;
/**
 * The format to return the embeddings
 */
export type FindOnePromptSnippetResponseBodyPromptSnippetsResponse200ApplicationJSONEncodingFormat =
  ClosedEnum<
    typeof FindOnePromptSnippetResponseBodyPromptSnippetsResponse200ApplicationJSONEncodingFormat
  >;

/**
 * Model Parameters: Not all parameters apply to every model
 */
export type FindOnePromptSnippetResponseBodyPromptSnippetsResponse200ApplicationJSONModelParameters =
  {
    /**
     * Only supported on `chat` and `completion` models.
     */
    temperature?: number | undefined;
    /**
     * Only supported on `chat` and `completion` models.
     */
    maxTokens?: number | undefined;
    /**
     * Only supported on `chat` and `completion` models.
     */
    topK?: number | undefined;
    /**
     * Only supported on `chat` and `completion` models.
     */
    topP?: number | undefined;
    /**
     * Only supported on `chat` and `completion` models.
     */
    frequencyPenalty?: number | undefined;
    /**
     * Only supported on `chat` and `completion` models.
     */
    presencePenalty?: number | undefined;
    /**
     * Only supported on `image` models.
     */
    numImages?: number | undefined;
    /**
     * Best effort deterministic seed for the model. Currently only OpenAI models support these
     */
    seed?: number | undefined;
    /**
     * Only supported on `image` models.
     */
    format?:
      | FindOnePromptSnippetResponseBodyPromptSnippetsResponse200ApplicationJson3Format
      | undefined;
    /**
     * Only supported on `image` models.
     */
    dimensions?: string | undefined;
    /**
     * Only supported on `image` models.
     */
    quality?:
      | FindOnePromptSnippetResponseBodyPromptSnippetsResponse200ApplicationJSONQuality
      | undefined;
    /**
     * Only supported on `image` models.
     */
    style?: string | undefined;
    /**
     * An object specifying the format that the model must output.
     *
     * @remarks
     *
     *  Setting to `{ "type": "json_schema", "json_schema": {...} }` enables Structured Outputs which ensures the model will match your supplied JSON schema
     *
     *  Setting to `{ "type": "json_object" }` enables JSON mode, which ensures the message the model generates is valid JSON.
     *
     * Important: when using JSON mode, you must also instruct the model to produce JSON yourself via a system or user message. Without this, the model may generate an unending stream of whitespace until the generation reaches the token limit, resulting in a long-running and seemingly "stuck" request. Also note that the message content may be partially cut off if finish_reason="length", which indicates the generation exceeded max_tokens or the conversation exceeded the max context length.
     */
    responseFormat?:
      | FindOnePromptSnippetResponseFormatPromptSnippetsResponse200ApplicationJSONResponseBody2
      | FindOnePromptSnippetResponseFormatPromptSnippetsResponse200ApplicationJSONResponseBody1
      | null
      | undefined;
    /**
     * The version of photoReal to use. Must be v1 or v2. Only available for `leonardoai` provider
     */
    photoRealVersion?:
      | FindOnePromptSnippetResponseBodyPromptSnippetsResponse200ApplicationJSONPhotoRealVersion
      | undefined;
    /**
     * The format to return the embeddings
     */
    encodingFormat?:
      | FindOnePromptSnippetResponseBodyPromptSnippetsResponse200ApplicationJSONEncodingFormat
      | undefined;
  };

export const FindOnePromptSnippetResponseBodyPromptSnippetsResponse200ApplicationJSONProvider =
  {
    Cohere: "cohere",
    Openai: "openai",
    Anthropic: "anthropic",
    Huggingface: "huggingface",
    Replicate: "replicate",
    Google: "google",
    GoogleAi: "google-ai",
    Azure: "azure",
    Aws: "aws",
    Anyscale: "anyscale",
    Perplexity: "perplexity",
    Groq: "groq",
    Fal: "fal",
    Leonardoai: "leonardoai",
    Nvidia: "nvidia",
  } as const;
export type FindOnePromptSnippetResponseBodyPromptSnippetsResponse200ApplicationJSONProvider =
  ClosedEnum<
    typeof FindOnePromptSnippetResponseBodyPromptSnippetsResponse200ApplicationJSONProvider
  >;

/**
 * The role of the prompt message
 */
export const FindOnePromptSnippetResponseBodyPromptSnippetsResponse200ApplicationJSONRole =
  {
    System: "system",
    Assistant: "assistant",
    User: "user",
    Exception: "exception",
    Tool: "tool",
    Prompt: "prompt",
    Correction: "correction",
    ExpectedOutput: "expected_output",
  } as const;
/**
 * The role of the prompt message
 */
export type FindOnePromptSnippetResponseBodyPromptSnippetsResponse200ApplicationJSONRole =
  ClosedEnum<
    typeof FindOnePromptSnippetResponseBodyPromptSnippetsResponse200ApplicationJSONRole
  >;

export const FindOnePromptSnippet2PromptSnippetsResponse200ApplicationJSONResponseBody3VersionsType =
  {
    ImageUrl: "image_url",
  } as const;
export type FindOnePromptSnippet2PromptSnippetsResponse200ApplicationJSONResponseBody3VersionsType =
  ClosedEnum<
    typeof FindOnePromptSnippet2PromptSnippetsResponse200ApplicationJSONResponseBody3VersionsType
  >;

export type FindOnePromptSnippet2PromptSnippetsResponse200ApplicationJSONResponseBodyImageUrl =
  {
    /**
     * The orq.ai id of the image
     */
    id?: string | undefined;
    /**
     * Either a URL of the image or the base64 encoded data URI.
     */
    url: string;
    /**
     * Specifies the detail level of the image. Currently only supported with OpenAI models
     */
    detail?: string | undefined;
  };

/**
 * The image part of the prompt message. Only supported with vision models.
 */
export type FindOnePromptSnippet2PromptSnippetsResponse200ApplicationJSONResponseBody2 =
  {
    type:
      FindOnePromptSnippet2PromptSnippetsResponse200ApplicationJSONResponseBody3VersionsType;
    imageUrl:
      FindOnePromptSnippet2PromptSnippetsResponse200ApplicationJSONResponseBodyImageUrl;
  };

export const FindOnePromptSnippet2PromptSnippetsResponse200ApplicationJSONResponseBody3Type =
  {
    Text: "text",
  } as const;
export type FindOnePromptSnippet2PromptSnippetsResponse200ApplicationJSONResponseBody3Type =
  ClosedEnum<
    typeof FindOnePromptSnippet2PromptSnippetsResponse200ApplicationJSONResponseBody3Type
  >;

/**
 * Text content part of a prompt message
 */
export type FindOnePromptSnippet2PromptSnippetsResponse200ApplicationJSONResponseBody1 =
  {
    type:
      FindOnePromptSnippet2PromptSnippetsResponse200ApplicationJSONResponseBody3Type;
    text: string;
  };

export type FindOnePromptSnippetContentPromptSnippetsResponse200ApplicationJSONResponseBody2 =
  | FindOnePromptSnippet2PromptSnippetsResponse200ApplicationJSONResponseBody1
  | FindOnePromptSnippet2PromptSnippetsResponse200ApplicationJSONResponseBody2;

/**
 * The contents of the user message. Either the text content of the message or an array of content parts with a defined type, each can be of type `text` or `image_url` when passing in images. You can pass multiple images by adding multiple `image_url` content parts.
 */
export type FindOnePromptSnippetResponseBodyPromptSnippetsResponse200ApplicationJSONContent =
  | string
  | Array<
    | FindOnePromptSnippet2PromptSnippetsResponse200ApplicationJSONResponseBody1
    | FindOnePromptSnippet2PromptSnippetsResponse200ApplicationJSONResponseBody2
  >;

export const FindOnePromptSnippetResponseBodyPromptSnippetsResponse200ApplicationJson3Type =
  {
    Function: "function",
  } as const;
export type FindOnePromptSnippetResponseBodyPromptSnippetsResponse200ApplicationJson3Type =
  ClosedEnum<
    typeof FindOnePromptSnippetResponseBodyPromptSnippetsResponse200ApplicationJson3Type
  >;

export type FindOnePromptSnippetResponseBodyPromptSnippetsResponse200ApplicationJSONFunction =
  {
    name: string;
    /**
     * JSON string arguments for the functions
     */
    arguments: string;
  };

export type FindOnePromptSnippetResponseBodyPromptSnippetsResponse200ApplicationJSONToolCalls =
  {
    id?: string | undefined;
    index?: number | undefined;
    type:
      FindOnePromptSnippetResponseBodyPromptSnippetsResponse200ApplicationJson3Type;
    function:
      FindOnePromptSnippetResponseBodyPromptSnippetsResponse200ApplicationJSONFunction;
  };

export type FindOnePromptSnippetResponseBodyPromptSnippetsResponse200ApplicationJSONMessages =
  {
    /**
     * The role of the prompt message
     */
    role:
      FindOnePromptSnippetResponseBodyPromptSnippetsResponse200ApplicationJSONRole;
    /**
     * The contents of the user message. Either the text content of the message or an array of content parts with a defined type, each can be of type `text` or `image_url` when passing in images. You can pass multiple images by adding multiple `image_url` content parts.
     */
    content:
      | string
      | Array<
        | FindOnePromptSnippet2PromptSnippetsResponse200ApplicationJSONResponseBody1
        | FindOnePromptSnippet2PromptSnippetsResponse200ApplicationJSONResponseBody2
      >;
    toolCalls?:
      | Array<
        FindOnePromptSnippetResponseBodyPromptSnippetsResponse200ApplicationJSONToolCalls
      >
      | undefined;
  };

export type FindOnePromptSnippetResponseBodyPromptSnippetsResponse200ApplicationJSONPromptConfig =
  {
    stream?: boolean | undefined;
    model?: string | undefined;
    /**
     * The id of the resource
     */
    modelDbId?: string | undefined;
    /**
     * The type of the model
     */
    modelType?:
      | FindOnePromptSnippetResponseBodyPromptSnippetsResponse200ApplicationJSONModelType
      | undefined;
    /**
     * Model Parameters: Not all parameters apply to every model
     */
    modelParameters?:
      | FindOnePromptSnippetResponseBodyPromptSnippetsResponse200ApplicationJSONModelParameters
      | undefined;
    provider?:
      | FindOnePromptSnippetResponseBodyPromptSnippetsResponse200ApplicationJSONProvider
      | undefined;
    /**
     * The id of the resource
     */
    integrationId?: string | null | undefined;
    version?: string | undefined;
    messages: Array<
      FindOnePromptSnippetResponseBodyPromptSnippetsResponse200ApplicationJSONMessages
    >;
  };

export type FindOnePromptSnippetResponseBodyPromptSnippetsResponse200ApplicationJSONMetadata =
  {
    useCases?: Array<string> | undefined;
    language?: string | undefined;
  };

/**
 * Prompt version model returned from the API
 */
export type FindOnePromptSnippetResponseBodyVersions = {
  id: string;
  createdById: string;
  displayName: string;
  updatedById: string;
  description?: string | null | undefined;
  promptConfig:
    FindOnePromptSnippetResponseBodyPromptSnippetsResponse200ApplicationJSONPromptConfig;
  metadata:
    FindOnePromptSnippetResponseBodyPromptSnippetsResponse200ApplicationJSONMetadata;
  commit: string;
  timestamp: string;
};

export const FindOnePromptSnippetResponseBodyPromptSnippetsType = {
  Template: "template",
} as const;
export type FindOnePromptSnippetResponseBodyPromptSnippetsType = ClosedEnum<
  typeof FindOnePromptSnippetResponseBodyPromptSnippetsType
>;

/**
 * Prompt template model returned from the API
 */
export type ResponseBody3 = {
  id: string;
  owner: string | FindOnePromptSnippetOwnerPromptSnippets2;
  domainId: string;
  createdById: string;
  displayName: string;
  updatedById: string;
  description?: string | null | undefined;
  promptConfig: FindOnePromptSnippetResponseBodyPromptSnippetsPromptConfig;
  metadata: FindOnePromptSnippetResponseBodyPromptSnippetsMetadata;
  /**
   * The date and time the resource was created
   */
  created?: Date | undefined;
  /**
   * The date and time the resource was last updated
   */
  updated?: Date | undefined;
  versions: Array<FindOnePromptSnippetResponseBodyVersions>;
  type: FindOnePromptSnippetResponseBodyPromptSnippetsType;
};

export const FindOnePromptSnippetOwner2 = {
  Vendor: "vendor",
} as const;
export type FindOnePromptSnippetOwner2 = ClosedEnum<
  typeof FindOnePromptSnippetOwner2
>;

export type ResponseBodyOwner = string | FindOnePromptSnippetOwner2;

/**
 * The type of the model
 */
export const FindOnePromptSnippetResponseBodyModelType = {
  Chat: "chat",
  Completion: "completion",
  Embedding: "embedding",
  Vision: "vision",
  Image: "image",
  Tts: "tts",
  Stt: "stt",
  Rerank: "rerank",
} as const;
/**
 * The type of the model
 */
export type FindOnePromptSnippetResponseBodyModelType = ClosedEnum<
  typeof FindOnePromptSnippetResponseBodyModelType
>;

/**
 * Only supported on `image` models.
 */
export const FindOnePromptSnippetResponseBodyFormat = {
  Url: "url",
  B64Json: "b64_json",
  Text: "text",
  JsonObject: "json_object",
} as const;
/**
 * Only supported on `image` models.
 */
export type FindOnePromptSnippetResponseBodyFormat = ClosedEnum<
  typeof FindOnePromptSnippetResponseBodyFormat
>;

/**
 * Only supported on `image` models.
 */
export const FindOnePromptSnippetResponseBodyQuality = {
  Standard: "standard",
  Hd: "hd",
} as const;
/**
 * Only supported on `image` models.
 */
export type FindOnePromptSnippetResponseBodyQuality = ClosedEnum<
  typeof FindOnePromptSnippetResponseBodyQuality
>;

export const FindOnePromptSnippetResponseFormatPromptSnippetsResponse200Type = {
  JsonObject: "json_object",
} as const;
export type FindOnePromptSnippetResponseFormatPromptSnippetsResponse200Type =
  ClosedEnum<
    typeof FindOnePromptSnippetResponseFormatPromptSnippetsResponse200Type
  >;

export type FindOnePromptSnippetResponseFormatPromptSnippets2 = {
  type: FindOnePromptSnippetResponseFormatPromptSnippetsResponse200Type;
};

export const FindOnePromptSnippetResponseFormatPromptSnippetsResponseType = {
  JsonSchema: "json_schema",
} as const;
export type FindOnePromptSnippetResponseFormatPromptSnippetsResponseType =
  ClosedEnum<
    typeof FindOnePromptSnippetResponseFormatPromptSnippetsResponseType
  >;

export type FindOnePromptSnippetResponseFormatPromptSnippetsJsonSchema = {
  name: string;
  strict: boolean;
  schema: { [k: string]: any };
};

export type FindOnePromptSnippetResponseFormatPromptSnippets1 = {
  type: FindOnePromptSnippetResponseFormatPromptSnippetsResponseType;
  jsonSchema: FindOnePromptSnippetResponseFormatPromptSnippetsJsonSchema;
};

/**
 * An object specifying the format that the model must output.
 *
 * @remarks
 *
 *  Setting to `{ "type": "json_schema", "json_schema": {...} }` enables Structured Outputs which ensures the model will match your supplied JSON schema
 *
 *  Setting to `{ "type": "json_object" }` enables JSON mode, which ensures the message the model generates is valid JSON.
 *
 * Important: when using JSON mode, you must also instruct the model to produce JSON yourself via a system or user message. Without this, the model may generate an unending stream of whitespace until the generation reaches the token limit, resulting in a long-running and seemingly "stuck" request. Also note that the message content may be partially cut off if finish_reason="length", which indicates the generation exceeded max_tokens or the conversation exceeded the max context length.
 */
export type FindOnePromptSnippetResponseBodyResponseFormat =
  | FindOnePromptSnippetResponseFormatPromptSnippets2
  | FindOnePromptSnippetResponseFormatPromptSnippets1;

/**
 * The version of photoReal to use. Must be v1 or v2. Only available for `leonardoai` provider
 */
export const FindOnePromptSnippetResponseBodyPhotoRealVersion = {
  V1: "v1",
  V2: "v2",
} as const;
/**
 * The version of photoReal to use. Must be v1 or v2. Only available for `leonardoai` provider
 */
export type FindOnePromptSnippetResponseBodyPhotoRealVersion = ClosedEnum<
  typeof FindOnePromptSnippetResponseBodyPhotoRealVersion
>;

/**
 * The format to return the embeddings
 */
export const FindOnePromptSnippetResponseBodyEncodingFormat = {
  Float: "float",
  Base64: "base64",
} as const;
/**
 * The format to return the embeddings
 */
export type FindOnePromptSnippetResponseBodyEncodingFormat = ClosedEnum<
  typeof FindOnePromptSnippetResponseBodyEncodingFormat
>;

/**
 * Model Parameters: Not all parameters apply to every model
 */
export type FindOnePromptSnippetResponseBodyModelParameters = {
  /**
   * Only supported on `chat` and `completion` models.
   */
  temperature?: number | undefined;
  /**
   * Only supported on `chat` and `completion` models.
   */
  maxTokens?: number | undefined;
  /**
   * Only supported on `chat` and `completion` models.
   */
  topK?: number | undefined;
  /**
   * Only supported on `chat` and `completion` models.
   */
  topP?: number | undefined;
  /**
   * Only supported on `chat` and `completion` models.
   */
  frequencyPenalty?: number | undefined;
  /**
   * Only supported on `chat` and `completion` models.
   */
  presencePenalty?: number | undefined;
  /**
   * Only supported on `image` models.
   */
  numImages?: number | undefined;
  /**
   * Best effort deterministic seed for the model. Currently only OpenAI models support these
   */
  seed?: number | undefined;
  /**
   * Only supported on `image` models.
   */
  format?: FindOnePromptSnippetResponseBodyFormat | undefined;
  /**
   * Only supported on `image` models.
   */
  dimensions?: string | undefined;
  /**
   * Only supported on `image` models.
   */
  quality?: FindOnePromptSnippetResponseBodyQuality | undefined;
  /**
   * Only supported on `image` models.
   */
  style?: string | undefined;
  /**
   * An object specifying the format that the model must output.
   *
   * @remarks
   *
   *  Setting to `{ "type": "json_schema", "json_schema": {...} }` enables Structured Outputs which ensures the model will match your supplied JSON schema
   *
   *  Setting to `{ "type": "json_object" }` enables JSON mode, which ensures the message the model generates is valid JSON.
   *
   * Important: when using JSON mode, you must also instruct the model to produce JSON yourself via a system or user message. Without this, the model may generate an unending stream of whitespace until the generation reaches the token limit, resulting in a long-running and seemingly "stuck" request. Also note that the message content may be partially cut off if finish_reason="length", which indicates the generation exceeded max_tokens or the conversation exceeded the max context length.
   */
  responseFormat?:
    | FindOnePromptSnippetResponseFormatPromptSnippets2
    | FindOnePromptSnippetResponseFormatPromptSnippets1
    | null
    | undefined;
  /**
   * The version of photoReal to use. Must be v1 or v2. Only available for `leonardoai` provider
   */
  photoRealVersion?:
    | FindOnePromptSnippetResponseBodyPhotoRealVersion
    | undefined;
  /**
   * The format to return the embeddings
   */
  encodingFormat?: FindOnePromptSnippetResponseBodyEncodingFormat | undefined;
};

export const FindOnePromptSnippetResponseBodyProvider = {
  Cohere: "cohere",
  Openai: "openai",
  Anthropic: "anthropic",
  Huggingface: "huggingface",
  Replicate: "replicate",
  Google: "google",
  GoogleAi: "google-ai",
  Azure: "azure",
  Aws: "aws",
  Anyscale: "anyscale",
  Perplexity: "perplexity",
  Groq: "groq",
  Fal: "fal",
  Leonardoai: "leonardoai",
  Nvidia: "nvidia",
} as const;
export type FindOnePromptSnippetResponseBodyProvider = ClosedEnum<
  typeof FindOnePromptSnippetResponseBodyProvider
>;

/**
 * The role of the prompt message
 */
export const FindOnePromptSnippetResponseBodyRole = {
  System: "system",
  Assistant: "assistant",
  User: "user",
  Exception: "exception",
  Tool: "tool",
  Prompt: "prompt",
  Correction: "correction",
  ExpectedOutput: "expected_output",
} as const;
/**
 * The role of the prompt message
 */
export type FindOnePromptSnippetResponseBodyRole = ClosedEnum<
  typeof FindOnePromptSnippetResponseBodyRole
>;

export const FindOnePromptSnippet2PromptSnippetsResponse200Type = {
  ImageUrl: "image_url",
} as const;
export type FindOnePromptSnippet2PromptSnippetsResponse200Type = ClosedEnum<
  typeof FindOnePromptSnippet2PromptSnippetsResponse200Type
>;

export type FindOnePromptSnippet2PromptSnippetsImageUrl = {
  /**
   * The orq.ai id of the image
   */
  id?: string | undefined;
  /**
   * Either a URL of the image or the base64 encoded data URI.
   */
  url: string;
  /**
   * Specifies the detail level of the image. Currently only supported with OpenAI models
   */
  detail?: string | undefined;
};

/**
 * The image part of the prompt message. Only supported with vision models.
 */
export type FindOnePromptSnippet2PromptSnippets2 = {
  type: FindOnePromptSnippet2PromptSnippetsResponse200Type;
  imageUrl: FindOnePromptSnippet2PromptSnippetsImageUrl;
};

export const FindOnePromptSnippet2PromptSnippetsResponseType = {
  Text: "text",
} as const;
export type FindOnePromptSnippet2PromptSnippetsResponseType = ClosedEnum<
  typeof FindOnePromptSnippet2PromptSnippetsResponseType
>;

/**
 * Text content part of a prompt message
 */
export type FindOnePromptSnippet2PromptSnippets1 = {
  type: FindOnePromptSnippet2PromptSnippetsResponseType;
  text: string;
};

export type FindOnePromptSnippetContentPromptSnippets2 =
  | FindOnePromptSnippet2PromptSnippets1
  | FindOnePromptSnippet2PromptSnippets2;

/**
 * The contents of the user message. Either the text content of the message or an array of content parts with a defined type, each can be of type `text` or `image_url` when passing in images. You can pass multiple images by adding multiple `image_url` content parts.
 */
export type FindOnePromptSnippetResponseBodyContent =
  | string
  | Array<
    FindOnePromptSnippet2PromptSnippets1 | FindOnePromptSnippet2PromptSnippets2
  >;

export const FindOnePromptSnippetResponseBodyPromptSnippetsResponse200ApplicationJSONType =
  {
    Function: "function",
  } as const;
export type FindOnePromptSnippetResponseBodyPromptSnippetsResponse200ApplicationJSONType =
  ClosedEnum<
    typeof FindOnePromptSnippetResponseBodyPromptSnippetsResponse200ApplicationJSONType
  >;

export type FindOnePromptSnippetResponseBodyFunction = {
  name: string;
  /**
   * JSON string arguments for the functions
   */
  arguments: string;
};

export type FindOnePromptSnippetResponseBodyToolCalls = {
  id?: string | undefined;
  index?: number | undefined;
  type:
    FindOnePromptSnippetResponseBodyPromptSnippetsResponse200ApplicationJSONType;
  function: FindOnePromptSnippetResponseBodyFunction;
};

export type FindOnePromptSnippetResponseBodyMessages = {
  /**
   * The role of the prompt message
   */
  role: FindOnePromptSnippetResponseBodyRole;
  /**
   * The contents of the user message. Either the text content of the message or an array of content parts with a defined type, each can be of type `text` or `image_url` when passing in images. You can pass multiple images by adding multiple `image_url` content parts.
   */
  content:
    | string
    | Array<
      | FindOnePromptSnippet2PromptSnippets1
      | FindOnePromptSnippet2PromptSnippets2
    >;
  toolCalls?: Array<FindOnePromptSnippetResponseBodyToolCalls> | undefined;
};

export type FindOnePromptSnippetResponseBodyPromptConfig = {
  stream?: boolean | undefined;
  model?: string | undefined;
  /**
   * The id of the resource
   */
  modelDbId?: string | undefined;
  /**
   * The type of the model
   */
  modelType?: FindOnePromptSnippetResponseBodyModelType | undefined;
  /**
   * Model Parameters: Not all parameters apply to every model
   */
  modelParameters?: FindOnePromptSnippetResponseBodyModelParameters | undefined;
  provider?: FindOnePromptSnippetResponseBodyProvider | undefined;
  /**
   * The id of the resource
   */
  integrationId?: string | null | undefined;
  version?: string | undefined;
  messages: Array<FindOnePromptSnippetResponseBodyMessages>;
};

export type FindOnePromptSnippetResponseBodyMetadata = {
  useCases?: Array<string> | undefined;
  language?: string | undefined;
};

/**
 * The type of the model
 */
export const FindOnePromptSnippetResponseBodyPromptSnippetsResponseModelType = {
  Chat: "chat",
  Completion: "completion",
  Embedding: "embedding",
  Vision: "vision",
  Image: "image",
  Tts: "tts",
  Stt: "stt",
  Rerank: "rerank",
} as const;
/**
 * The type of the model
 */
export type FindOnePromptSnippetResponseBodyPromptSnippetsResponseModelType =
  ClosedEnum<
    typeof FindOnePromptSnippetResponseBodyPromptSnippetsResponseModelType
  >;

/**
 * Only supported on `image` models.
 */
export const FindOnePromptSnippetResponseBodyPromptSnippetsResponse200Format = {
  Url: "url",
  B64Json: "b64_json",
  Text: "text",
  JsonObject: "json_object",
} as const;
/**
 * Only supported on `image` models.
 */
export type FindOnePromptSnippetResponseBodyPromptSnippetsResponse200Format =
  ClosedEnum<
    typeof FindOnePromptSnippetResponseBodyPromptSnippetsResponse200Format
  >;

/**
 * Only supported on `image` models.
 */
export const FindOnePromptSnippetResponseBodyPromptSnippetsResponseQuality = {
  Standard: "standard",
  Hd: "hd",
} as const;
/**
 * Only supported on `image` models.
 */
export type FindOnePromptSnippetResponseBodyPromptSnippetsResponseQuality =
  ClosedEnum<
    typeof FindOnePromptSnippetResponseBodyPromptSnippetsResponseQuality
  >;

export const FindOnePromptSnippetResponseFormatPromptSnippetsResponse200ApplicationJSONResponseBody2VersionsType =
  {
    JsonObject: "json_object",
  } as const;
export type FindOnePromptSnippetResponseFormatPromptSnippetsResponse200ApplicationJSONResponseBody2VersionsType =
  ClosedEnum<
    typeof FindOnePromptSnippetResponseFormatPromptSnippetsResponse200ApplicationJSONResponseBody2VersionsType
  >;

export type FindOnePromptSnippetResponseFormatPromptSnippetsResponse2002 = {
  type:
    FindOnePromptSnippetResponseFormatPromptSnippetsResponse200ApplicationJSONResponseBody2VersionsType;
};

export const FindOnePromptSnippetResponseFormatPromptSnippetsResponse200ApplicationJSONResponseBody2Type =
  {
    JsonSchema: "json_schema",
  } as const;
export type FindOnePromptSnippetResponseFormatPromptSnippetsResponse200ApplicationJSONResponseBody2Type =
  ClosedEnum<
    typeof FindOnePromptSnippetResponseFormatPromptSnippetsResponse200ApplicationJSONResponseBody2Type
  >;

export type FindOnePromptSnippetResponseFormatPromptSnippetsResponse200JsonSchema =
  {
    name: string;
    strict: boolean;
    schema: { [k: string]: any };
  };

export type FindOnePromptSnippetResponseFormatPromptSnippetsResponse2001 = {
  type:
    FindOnePromptSnippetResponseFormatPromptSnippetsResponse200ApplicationJSONResponseBody2Type;
  jsonSchema:
    FindOnePromptSnippetResponseFormatPromptSnippetsResponse200JsonSchema;
};

/**
 * An object specifying the format that the model must output.
 *
 * @remarks
 *
 *  Setting to `{ "type": "json_schema", "json_schema": {...} }` enables Structured Outputs which ensures the model will match your supplied JSON schema
 *
 *  Setting to `{ "type": "json_object" }` enables JSON mode, which ensures the message the model generates is valid JSON.
 *
 * Important: when using JSON mode, you must also instruct the model to produce JSON yourself via a system or user message. Without this, the model may generate an unending stream of whitespace until the generation reaches the token limit, resulting in a long-running and seemingly "stuck" request. Also note that the message content may be partially cut off if finish_reason="length", which indicates the generation exceeded max_tokens or the conversation exceeded the max context length.
 */
export type FindOnePromptSnippetResponseBodyPromptSnippetsResponseResponseFormat =
  | FindOnePromptSnippetResponseFormatPromptSnippetsResponse2002
  | FindOnePromptSnippetResponseFormatPromptSnippetsResponse2001;

/**
 * The version of photoReal to use. Must be v1 or v2. Only available for `leonardoai` provider
 */
export const FindOnePromptSnippetResponseBodyPromptSnippetsResponsePhotoRealVersion =
  {
    V1: "v1",
    V2: "v2",
  } as const;
/**
 * The version of photoReal to use. Must be v1 or v2. Only available for `leonardoai` provider
 */
export type FindOnePromptSnippetResponseBodyPromptSnippetsResponsePhotoRealVersion =
  ClosedEnum<
    typeof FindOnePromptSnippetResponseBodyPromptSnippetsResponsePhotoRealVersion
  >;

/**
 * The format to return the embeddings
 */
export const FindOnePromptSnippetResponseBodyPromptSnippetsResponseEncodingFormat =
  {
    Float: "float",
    Base64: "base64",
  } as const;
/**
 * The format to return the embeddings
 */
export type FindOnePromptSnippetResponseBodyPromptSnippetsResponseEncodingFormat =
  ClosedEnum<
    typeof FindOnePromptSnippetResponseBodyPromptSnippetsResponseEncodingFormat
  >;

/**
 * Model Parameters: Not all parameters apply to every model
 */
export type FindOnePromptSnippetResponseBodyPromptSnippetsResponseModelParameters =
  {
    /**
     * Only supported on `chat` and `completion` models.
     */
    temperature?: number | undefined;
    /**
     * Only supported on `chat` and `completion` models.
     */
    maxTokens?: number | undefined;
    /**
     * Only supported on `chat` and `completion` models.
     */
    topK?: number | undefined;
    /**
     * Only supported on `chat` and `completion` models.
     */
    topP?: number | undefined;
    /**
     * Only supported on `chat` and `completion` models.
     */
    frequencyPenalty?: number | undefined;
    /**
     * Only supported on `chat` and `completion` models.
     */
    presencePenalty?: number | undefined;
    /**
     * Only supported on `image` models.
     */
    numImages?: number | undefined;
    /**
     * Best effort deterministic seed for the model. Currently only OpenAI models support these
     */
    seed?: number | undefined;
    /**
     * Only supported on `image` models.
     */
    format?:
      | FindOnePromptSnippetResponseBodyPromptSnippetsResponse200Format
      | undefined;
    /**
     * Only supported on `image` models.
     */
    dimensions?: string | undefined;
    /**
     * Only supported on `image` models.
     */
    quality?:
      | FindOnePromptSnippetResponseBodyPromptSnippetsResponseQuality
      | undefined;
    /**
     * Only supported on `image` models.
     */
    style?: string | undefined;
    /**
     * An object specifying the format that the model must output.
     *
     * @remarks
     *
     *  Setting to `{ "type": "json_schema", "json_schema": {...} }` enables Structured Outputs which ensures the model will match your supplied JSON schema
     *
     *  Setting to `{ "type": "json_object" }` enables JSON mode, which ensures the message the model generates is valid JSON.
     *
     * Important: when using JSON mode, you must also instruct the model to produce JSON yourself via a system or user message. Without this, the model may generate an unending stream of whitespace until the generation reaches the token limit, resulting in a long-running and seemingly "stuck" request. Also note that the message content may be partially cut off if finish_reason="length", which indicates the generation exceeded max_tokens or the conversation exceeded the max context length.
     */
    responseFormat?:
      | FindOnePromptSnippetResponseFormatPromptSnippetsResponse2002
      | FindOnePromptSnippetResponseFormatPromptSnippetsResponse2001
      | null
      | undefined;
    /**
     * The version of photoReal to use. Must be v1 or v2. Only available for `leonardoai` provider
     */
    photoRealVersion?:
      | FindOnePromptSnippetResponseBodyPromptSnippetsResponsePhotoRealVersion
      | undefined;
    /**
     * The format to return the embeddings
     */
    encodingFormat?:
      | FindOnePromptSnippetResponseBodyPromptSnippetsResponseEncodingFormat
      | undefined;
  };

export const FindOnePromptSnippetResponseBodyPromptSnippetsResponseProvider = {
  Cohere: "cohere",
  Openai: "openai",
  Anthropic: "anthropic",
  Huggingface: "huggingface",
  Replicate: "replicate",
  Google: "google",
  GoogleAi: "google-ai",
  Azure: "azure",
  Aws: "aws",
  Anyscale: "anyscale",
  Perplexity: "perplexity",
  Groq: "groq",
  Fal: "fal",
  Leonardoai: "leonardoai",
  Nvidia: "nvidia",
} as const;
export type FindOnePromptSnippetResponseBodyPromptSnippetsResponseProvider =
  ClosedEnum<
    typeof FindOnePromptSnippetResponseBodyPromptSnippetsResponseProvider
  >;

/**
 * The role of the prompt message
 */
export const FindOnePromptSnippetResponseBodyPromptSnippetsResponseRole = {
  System: "system",
  Assistant: "assistant",
  User: "user",
  Exception: "exception",
  Tool: "tool",
  Prompt: "prompt",
  Correction: "correction",
  ExpectedOutput: "expected_output",
} as const;
/**
 * The role of the prompt message
 */
export type FindOnePromptSnippetResponseBodyPromptSnippetsResponseRole =
  ClosedEnum<typeof FindOnePromptSnippetResponseBodyPromptSnippetsResponseRole>;

export const FindOnePromptSnippet2PromptSnippetsResponse200ApplicationJSONResponseBody2VersionsType =
  {
    ImageUrl: "image_url",
  } as const;
export type FindOnePromptSnippet2PromptSnippetsResponse200ApplicationJSONResponseBody2VersionsType =
  ClosedEnum<
    typeof FindOnePromptSnippet2PromptSnippetsResponse200ApplicationJSONResponseBody2VersionsType
  >;

export type FindOnePromptSnippet2PromptSnippetsResponse200ImageUrl = {
  /**
   * The orq.ai id of the image
   */
  id?: string | undefined;
  /**
   * Either a URL of the image or the base64 encoded data URI.
   */
  url: string;
  /**
   * Specifies the detail level of the image. Currently only supported with OpenAI models
   */
  detail?: string | undefined;
};

/**
 * The image part of the prompt message. Only supported with vision models.
 */
export type FindOnePromptSnippet2PromptSnippetsResponse2002 = {
  type:
    FindOnePromptSnippet2PromptSnippetsResponse200ApplicationJSONResponseBody2VersionsType;
  imageUrl: FindOnePromptSnippet2PromptSnippetsResponse200ImageUrl;
};

export const FindOnePromptSnippet2PromptSnippetsResponse200ApplicationJSONResponseBody2Type =
  {
    Text: "text",
  } as const;
export type FindOnePromptSnippet2PromptSnippetsResponse200ApplicationJSONResponseBody2Type =
  ClosedEnum<
    typeof FindOnePromptSnippet2PromptSnippetsResponse200ApplicationJSONResponseBody2Type
  >;

/**
 * Text content part of a prompt message
 */
export type FindOnePromptSnippet2PromptSnippetsResponse2001 = {
  type:
    FindOnePromptSnippet2PromptSnippetsResponse200ApplicationJSONResponseBody2Type;
  text: string;
};

export type FindOnePromptSnippetContentPromptSnippetsResponse2002 =
  | FindOnePromptSnippet2PromptSnippetsResponse2001
  | FindOnePromptSnippet2PromptSnippetsResponse2002;

/**
 * The contents of the user message. Either the text content of the message or an array of content parts with a defined type, each can be of type `text` or `image_url` when passing in images. You can pass multiple images by adding multiple `image_url` content parts.
 */
export type FindOnePromptSnippetResponseBodyPromptSnippetsResponseContent =
  | string
  | Array<
    | FindOnePromptSnippet2PromptSnippetsResponse2001
    | FindOnePromptSnippet2PromptSnippetsResponse2002
  >;

export const FindOnePromptSnippetResponseBodyPromptSnippetsResponse200ApplicationJson2Type =
  {
    Function: "function",
  } as const;
export type FindOnePromptSnippetResponseBodyPromptSnippetsResponse200ApplicationJson2Type =
  ClosedEnum<
    typeof FindOnePromptSnippetResponseBodyPromptSnippetsResponse200ApplicationJson2Type
  >;

export type FindOnePromptSnippetResponseBodyPromptSnippetsResponseFunction = {
  name: string;
  /**
   * JSON string arguments for the functions
   */
  arguments: string;
};

export type FindOnePromptSnippetResponseBodyPromptSnippetsResponseToolCalls = {
  id?: string | undefined;
  index?: number | undefined;
  type:
    FindOnePromptSnippetResponseBodyPromptSnippetsResponse200ApplicationJson2Type;
  function: FindOnePromptSnippetResponseBodyPromptSnippetsResponseFunction;
};

export type FindOnePromptSnippetResponseBodyPromptSnippetsResponseMessages = {
  /**
   * The role of the prompt message
   */
  role: FindOnePromptSnippetResponseBodyPromptSnippetsResponseRole;
  /**
   * The contents of the user message. Either the text content of the message or an array of content parts with a defined type, each can be of type `text` or `image_url` when passing in images. You can pass multiple images by adding multiple `image_url` content parts.
   */
  content:
    | string
    | Array<
      | FindOnePromptSnippet2PromptSnippetsResponse2001
      | FindOnePromptSnippet2PromptSnippetsResponse2002
    >;
  toolCalls?:
    | Array<FindOnePromptSnippetResponseBodyPromptSnippetsResponseToolCalls>
    | undefined;
};

export type FindOnePromptSnippetResponseBodyPromptSnippetsResponsePromptConfig =
  {
    stream?: boolean | undefined;
    model?: string | undefined;
    /**
     * The id of the resource
     */
    modelDbId?: string | undefined;
    /**
     * The type of the model
     */
    modelType?:
      | FindOnePromptSnippetResponseBodyPromptSnippetsResponseModelType
      | undefined;
    /**
     * Model Parameters: Not all parameters apply to every model
     */
    modelParameters?:
      | FindOnePromptSnippetResponseBodyPromptSnippetsResponseModelParameters
      | undefined;
    provider?:
      | FindOnePromptSnippetResponseBodyPromptSnippetsResponseProvider
      | undefined;
    /**
     * The id of the resource
     */
    integrationId?: string | null | undefined;
    version?: string | undefined;
    messages: Array<
      FindOnePromptSnippetResponseBodyPromptSnippetsResponseMessages
    >;
  };

export type FindOnePromptSnippetResponseBodyPromptSnippetsResponseMetadata = {
  useCases?: Array<string> | undefined;
  language?: string | undefined;
};

/**
 * Prompt version model returned from the API
 */
export type ResponseBodyVersions = {
  id: string;
  createdById: string;
  displayName: string;
  updatedById: string;
  description?: string | null | undefined;
  promptConfig:
    FindOnePromptSnippetResponseBodyPromptSnippetsResponsePromptConfig;
  metadata: FindOnePromptSnippetResponseBodyPromptSnippetsResponseMetadata;
  commit: string;
  timestamp: string;
};

export const FindOnePromptSnippetResponseBodyType = {
  Snippet: "snippet",
} as const;
export type FindOnePromptSnippetResponseBodyType = ClosedEnum<
  typeof FindOnePromptSnippetResponseBodyType
>;

/**
 * Prompt snippet model returned from the API
 */
export type ResponseBody2 = {
  id: string;
  owner: string | FindOnePromptSnippetOwner2;
  domainId: string;
  createdById: string;
  displayName: string;
  updatedById: string;
  description?: string | null | undefined;
  promptConfig: FindOnePromptSnippetResponseBodyPromptConfig;
  metadata: FindOnePromptSnippetResponseBodyMetadata;
  /**
   * The date and time the resource was created
   */
  created?: Date | undefined;
  /**
   * The date and time the resource was last updated
   */
  updated?: Date | undefined;
  versions: Array<ResponseBodyVersions>;
  key: string;
  type: FindOnePromptSnippetResponseBodyType;
};

export const Owner2 = {
  Vendor: "vendor",
} as const;
export type Owner2 = ClosedEnum<typeof Owner2>;

export type Owner = string | Owner2;

/**
 * The type of the model
 */
export const ResponseBodyModelType = {
  Chat: "chat",
  Completion: "completion",
  Embedding: "embedding",
  Vision: "vision",
  Image: "image",
  Tts: "tts",
  Stt: "stt",
  Rerank: "rerank",
} as const;
/**
 * The type of the model
 */
export type ResponseBodyModelType = ClosedEnum<typeof ResponseBodyModelType>;

/**
 * Only supported on `image` models.
 */
export const ResponseBodyFormat = {
  Url: "url",
  B64Json: "b64_json",
  Text: "text",
  JsonObject: "json_object",
} as const;
/**
 * Only supported on `image` models.
 */
export type ResponseBodyFormat = ClosedEnum<typeof ResponseBodyFormat>;

/**
 * Only supported on `image` models.
 */
export const ResponseBodyQuality = {
  Standard: "standard",
  Hd: "hd",
} as const;
/**
 * Only supported on `image` models.
 */
export type ResponseBodyQuality = ClosedEnum<typeof ResponseBodyQuality>;

export const FindOnePromptSnippetResponseFormatPromptSnippetsType = {
  JsonObject: "json_object",
} as const;
export type FindOnePromptSnippetResponseFormatPromptSnippetsType = ClosedEnum<
  typeof FindOnePromptSnippetResponseFormatPromptSnippetsType
>;

export type FindOnePromptSnippetResponseFormat2 = {
  type: FindOnePromptSnippetResponseFormatPromptSnippetsType;
};

export const FindOnePromptSnippetResponseFormatType = {
  JsonSchema: "json_schema",
} as const;
export type FindOnePromptSnippetResponseFormatType = ClosedEnum<
  typeof FindOnePromptSnippetResponseFormatType
>;

export type FindOnePromptSnippetResponseFormatJsonSchema = {
  name: string;
  strict: boolean;
  schema: { [k: string]: any };
};

export type FindOnePromptSnippetResponseFormat1 = {
  type: FindOnePromptSnippetResponseFormatType;
  jsonSchema: FindOnePromptSnippetResponseFormatJsonSchema;
};

/**
 * An object specifying the format that the model must output.
 *
 * @remarks
 *
 *  Setting to `{ "type": "json_schema", "json_schema": {...} }` enables Structured Outputs which ensures the model will match your supplied JSON schema
 *
 *  Setting to `{ "type": "json_object" }` enables JSON mode, which ensures the message the model generates is valid JSON.
 *
 * Important: when using JSON mode, you must also instruct the model to produce JSON yourself via a system or user message. Without this, the model may generate an unending stream of whitespace until the generation reaches the token limit, resulting in a long-running and seemingly "stuck" request. Also note that the message content may be partially cut off if finish_reason="length", which indicates the generation exceeded max_tokens or the conversation exceeded the max context length.
 */
export type ResponseBodyResponseFormat =
  | FindOnePromptSnippetResponseFormat2
  | FindOnePromptSnippetResponseFormat1;

/**
 * The version of photoReal to use. Must be v1 or v2. Only available for `leonardoai` provider
 */
export const ResponseBodyPhotoRealVersion = {
  V1: "v1",
  V2: "v2",
} as const;
/**
 * The version of photoReal to use. Must be v1 or v2. Only available for `leonardoai` provider
 */
export type ResponseBodyPhotoRealVersion = ClosedEnum<
  typeof ResponseBodyPhotoRealVersion
>;

/**
 * The format to return the embeddings
 */
export const ResponseBodyEncodingFormat = {
  Float: "float",
  Base64: "base64",
} as const;
/**
 * The format to return the embeddings
 */
export type ResponseBodyEncodingFormat = ClosedEnum<
  typeof ResponseBodyEncodingFormat
>;

/**
 * Model Parameters: Not all parameters apply to every model
 */
export type ResponseBodyModelParameters = {
  /**
   * Only supported on `chat` and `completion` models.
   */
  temperature?: number | undefined;
  /**
   * Only supported on `chat` and `completion` models.
   */
  maxTokens?: number | undefined;
  /**
   * Only supported on `chat` and `completion` models.
   */
  topK?: number | undefined;
  /**
   * Only supported on `chat` and `completion` models.
   */
  topP?: number | undefined;
  /**
   * Only supported on `chat` and `completion` models.
   */
  frequencyPenalty?: number | undefined;
  /**
   * Only supported on `chat` and `completion` models.
   */
  presencePenalty?: number | undefined;
  /**
   * Only supported on `image` models.
   */
  numImages?: number | undefined;
  /**
   * Best effort deterministic seed for the model. Currently only OpenAI models support these
   */
  seed?: number | undefined;
  /**
   * Only supported on `image` models.
   */
  format?: ResponseBodyFormat | undefined;
  /**
   * Only supported on `image` models.
   */
  dimensions?: string | undefined;
  /**
   * Only supported on `image` models.
   */
  quality?: ResponseBodyQuality | undefined;
  /**
   * Only supported on `image` models.
   */
  style?: string | undefined;
  /**
   * An object specifying the format that the model must output.
   *
   * @remarks
   *
   *  Setting to `{ "type": "json_schema", "json_schema": {...} }` enables Structured Outputs which ensures the model will match your supplied JSON schema
   *
   *  Setting to `{ "type": "json_object" }` enables JSON mode, which ensures the message the model generates is valid JSON.
   *
   * Important: when using JSON mode, you must also instruct the model to produce JSON yourself via a system or user message. Without this, the model may generate an unending stream of whitespace until the generation reaches the token limit, resulting in a long-running and seemingly "stuck" request. Also note that the message content may be partially cut off if finish_reason="length", which indicates the generation exceeded max_tokens or the conversation exceeded the max context length.
   */
  responseFormat?:
    | FindOnePromptSnippetResponseFormat2
    | FindOnePromptSnippetResponseFormat1
    | null
    | undefined;
  /**
   * The version of photoReal to use. Must be v1 or v2. Only available for `leonardoai` provider
   */
  photoRealVersion?: ResponseBodyPhotoRealVersion | undefined;
  /**
   * The format to return the embeddings
   */
  encodingFormat?: ResponseBodyEncodingFormat | undefined;
};

export const ResponseBodyProvider = {
  Cohere: "cohere",
  Openai: "openai",
  Anthropic: "anthropic",
  Huggingface: "huggingface",
  Replicate: "replicate",
  Google: "google",
  GoogleAi: "google-ai",
  Azure: "azure",
  Aws: "aws",
  Anyscale: "anyscale",
  Perplexity: "perplexity",
  Groq: "groq",
  Fal: "fal",
  Leonardoai: "leonardoai",
  Nvidia: "nvidia",
} as const;
export type ResponseBodyProvider = ClosedEnum<typeof ResponseBodyProvider>;

/**
 * The role of the prompt message
 */
export const ResponseBodyRole = {
  System: "system",
  Assistant: "assistant",
  User: "user",
  Exception: "exception",
  Tool: "tool",
  Prompt: "prompt",
  Correction: "correction",
  ExpectedOutput: "expected_output",
} as const;
/**
 * The role of the prompt message
 */
export type ResponseBodyRole = ClosedEnum<typeof ResponseBodyRole>;

export const FindOnePromptSnippet2PromptSnippetsType = {
  ImageUrl: "image_url",
} as const;
export type FindOnePromptSnippet2PromptSnippetsType = ClosedEnum<
  typeof FindOnePromptSnippet2PromptSnippetsType
>;

export type FindOnePromptSnippet2ImageUrl = {
  /**
   * The orq.ai id of the image
   */
  id?: string | undefined;
  /**
   * Either a URL of the image or the base64 encoded data URI.
   */
  url: string;
  /**
   * Specifies the detail level of the image. Currently only supported with OpenAI models
   */
  detail?: string | undefined;
};

/**
 * The image part of the prompt message. Only supported with vision models.
 */
export type FindOnePromptSnippet22 = {
  type: FindOnePromptSnippet2PromptSnippetsType;
  imageUrl: FindOnePromptSnippet2ImageUrl;
};

export const FindOnePromptSnippet2Type = {
  Text: "text",
} as const;
export type FindOnePromptSnippet2Type = ClosedEnum<
  typeof FindOnePromptSnippet2Type
>;

/**
 * Text content part of a prompt message
 */
export type FindOnePromptSnippet21 = {
  type: FindOnePromptSnippet2Type;
  text: string;
};

export type FindOnePromptSnippetContent2 =
  | FindOnePromptSnippet21
  | FindOnePromptSnippet22;

/**
 * The contents of the user message. Either the text content of the message or an array of content parts with a defined type, each can be of type `text` or `image_url` when passing in images. You can pass multiple images by adding multiple `image_url` content parts.
 */
export type ResponseBodyContent =
  | string
  | Array<FindOnePromptSnippet21 | FindOnePromptSnippet22>;

export const FindOnePromptSnippetResponseBodyPromptSnippetsResponseType = {
  Function: "function",
} as const;
export type FindOnePromptSnippetResponseBodyPromptSnippetsResponseType =
  ClosedEnum<typeof FindOnePromptSnippetResponseBodyPromptSnippetsResponseType>;

export type ResponseBodyFunction = {
  name: string;
  /**
   * JSON string arguments for the functions
   */
  arguments: string;
};

export type ResponseBodyToolCalls = {
  id?: string | undefined;
  index?: number | undefined;
  type: FindOnePromptSnippetResponseBodyPromptSnippetsResponseType;
  function: ResponseBodyFunction;
};

export type ResponseBodyMessages = {
  /**
   * The role of the prompt message
   */
  role: ResponseBodyRole;
  /**
   * The contents of the user message. Either the text content of the message or an array of content parts with a defined type, each can be of type `text` or `image_url` when passing in images. You can pass multiple images by adding multiple `image_url` content parts.
   */
  content: string | Array<FindOnePromptSnippet21 | FindOnePromptSnippet22>;
  toolCalls?: Array<ResponseBodyToolCalls> | undefined;
};

export type ResponseBodyPromptConfig = {
  stream?: boolean | undefined;
  model?: string | undefined;
  /**
   * The id of the resource
   */
  modelDbId?: string | undefined;
  /**
   * The type of the model
   */
  modelType?: ResponseBodyModelType | undefined;
  /**
   * Model Parameters: Not all parameters apply to every model
   */
  modelParameters?: ResponseBodyModelParameters | undefined;
  provider?: ResponseBodyProvider | undefined;
  /**
   * The id of the resource
   */
  integrationId?: string | null | undefined;
  version?: string | undefined;
  messages: Array<ResponseBodyMessages>;
};

export type ResponseBodyMetadata = {
  useCases?: Array<string> | undefined;
  language?: string | undefined;
};

/**
 * The type of the model
 */
export const FindOnePromptSnippetResponseBodyPromptSnippetsResponse200ModelType =
  {
    Chat: "chat",
    Completion: "completion",
    Embedding: "embedding",
    Vision: "vision",
    Image: "image",
    Tts: "tts",
    Stt: "stt",
    Rerank: "rerank",
  } as const;
/**
 * The type of the model
 */
export type FindOnePromptSnippetResponseBodyPromptSnippetsResponse200ModelType =
  ClosedEnum<
    typeof FindOnePromptSnippetResponseBodyPromptSnippetsResponse200ModelType
  >;

/**
 * Only supported on `image` models.
 */
export const FindOnePromptSnippetResponseBodyPromptSnippetsResponse200ApplicationJSONFormat =
  {
    Url: "url",
    B64Json: "b64_json",
    Text: "text",
    JsonObject: "json_object",
  } as const;
/**
 * Only supported on `image` models.
 */
export type FindOnePromptSnippetResponseBodyPromptSnippetsResponse200ApplicationJSONFormat =
  ClosedEnum<
    typeof FindOnePromptSnippetResponseBodyPromptSnippetsResponse200ApplicationJSONFormat
  >;

/**
 * Only supported on `image` models.
 */
export const FindOnePromptSnippetResponseBodyPromptSnippetsResponse200Quality =
  {
    Standard: "standard",
    Hd: "hd",
  } as const;
/**
 * Only supported on `image` models.
 */
export type FindOnePromptSnippetResponseBodyPromptSnippetsResponse200Quality =
  ClosedEnum<
    typeof FindOnePromptSnippetResponseBodyPromptSnippetsResponse200Quality
  >;

export const FindOnePromptSnippetResponseFormatPromptSnippetsResponse200ApplicationJSONResponseBody1VersionsType =
  {
    JsonObject: "json_object",
  } as const;
export type FindOnePromptSnippetResponseFormatPromptSnippetsResponse200ApplicationJSONResponseBody1VersionsType =
  ClosedEnum<
    typeof FindOnePromptSnippetResponseFormatPromptSnippetsResponse200ApplicationJSONResponseBody1VersionsType
  >;

export type FindOnePromptSnippetResponseFormatPromptSnippetsResponse200ApplicationJson2 =
  {
    type:
      FindOnePromptSnippetResponseFormatPromptSnippetsResponse200ApplicationJSONResponseBody1VersionsType;
  };

export const FindOnePromptSnippetResponseFormatPromptSnippetsResponse200ApplicationJSONResponseBody1Type =
  {
    JsonSchema: "json_schema",
  } as const;
export type FindOnePromptSnippetResponseFormatPromptSnippetsResponse200ApplicationJSONResponseBody1Type =
  ClosedEnum<
    typeof FindOnePromptSnippetResponseFormatPromptSnippetsResponse200ApplicationJSONResponseBody1Type
  >;

export type FindOnePromptSnippetResponseFormatPromptSnippetsResponse200ApplicationJSONJSONSchema =
  {
    name: string;
    strict: boolean;
    schema: { [k: string]: any };
  };

export type FindOnePromptSnippetResponseFormatPromptSnippetsResponse200ApplicationJson1 =
  {
    type:
      FindOnePromptSnippetResponseFormatPromptSnippetsResponse200ApplicationJSONResponseBody1Type;
    jsonSchema:
      FindOnePromptSnippetResponseFormatPromptSnippetsResponse200ApplicationJSONJSONSchema;
  };

/**
 * An object specifying the format that the model must output.
 *
 * @remarks
 *
 *  Setting to `{ "type": "json_schema", "json_schema": {...} }` enables Structured Outputs which ensures the model will match your supplied JSON schema
 *
 *  Setting to `{ "type": "json_object" }` enables JSON mode, which ensures the message the model generates is valid JSON.
 *
 * Important: when using JSON mode, you must also instruct the model to produce JSON yourself via a system or user message. Without this, the model may generate an unending stream of whitespace until the generation reaches the token limit, resulting in a long-running and seemingly "stuck" request. Also note that the message content may be partially cut off if finish_reason="length", which indicates the generation exceeded max_tokens or the conversation exceeded the max context length.
 */
export type FindOnePromptSnippetResponseBodyPromptSnippetsResponse200ResponseFormat =
  | FindOnePromptSnippetResponseFormatPromptSnippetsResponse200ApplicationJson2
  | FindOnePromptSnippetResponseFormatPromptSnippetsResponse200ApplicationJson1;

/**
 * The version of photoReal to use. Must be v1 or v2. Only available for `leonardoai` provider
 */
export const FindOnePromptSnippetResponseBodyPromptSnippetsResponse200PhotoRealVersion =
  {
    V1: "v1",
    V2: "v2",
  } as const;
/**
 * The version of photoReal to use. Must be v1 or v2. Only available for `leonardoai` provider
 */
export type FindOnePromptSnippetResponseBodyPromptSnippetsResponse200PhotoRealVersion =
  ClosedEnum<
    typeof FindOnePromptSnippetResponseBodyPromptSnippetsResponse200PhotoRealVersion
  >;

/**
 * The format to return the embeddings
 */
export const FindOnePromptSnippetResponseBodyPromptSnippetsResponse200EncodingFormat =
  {
    Float: "float",
    Base64: "base64",
  } as const;
/**
 * The format to return the embeddings
 */
export type FindOnePromptSnippetResponseBodyPromptSnippetsResponse200EncodingFormat =
  ClosedEnum<
    typeof FindOnePromptSnippetResponseBodyPromptSnippetsResponse200EncodingFormat
  >;

/**
 * Model Parameters: Not all parameters apply to every model
 */
export type FindOnePromptSnippetResponseBodyPromptSnippetsResponse200ModelParameters =
  {
    /**
     * Only supported on `chat` and `completion` models.
     */
    temperature?: number | undefined;
    /**
     * Only supported on `chat` and `completion` models.
     */
    maxTokens?: number | undefined;
    /**
     * Only supported on `chat` and `completion` models.
     */
    topK?: number | undefined;
    /**
     * Only supported on `chat` and `completion` models.
     */
    topP?: number | undefined;
    /**
     * Only supported on `chat` and `completion` models.
     */
    frequencyPenalty?: number | undefined;
    /**
     * Only supported on `chat` and `completion` models.
     */
    presencePenalty?: number | undefined;
    /**
     * Only supported on `image` models.
     */
    numImages?: number | undefined;
    /**
     * Best effort deterministic seed for the model. Currently only OpenAI models support these
     */
    seed?: number | undefined;
    /**
     * Only supported on `image` models.
     */
    format?:
      | FindOnePromptSnippetResponseBodyPromptSnippetsResponse200ApplicationJSONFormat
      | undefined;
    /**
     * Only supported on `image` models.
     */
    dimensions?: string | undefined;
    /**
     * Only supported on `image` models.
     */
    quality?:
      | FindOnePromptSnippetResponseBodyPromptSnippetsResponse200Quality
      | undefined;
    /**
     * Only supported on `image` models.
     */
    style?: string | undefined;
    /**
     * An object specifying the format that the model must output.
     *
     * @remarks
     *
     *  Setting to `{ "type": "json_schema", "json_schema": {...} }` enables Structured Outputs which ensures the model will match your supplied JSON schema
     *
     *  Setting to `{ "type": "json_object" }` enables JSON mode, which ensures the message the model generates is valid JSON.
     *
     * Important: when using JSON mode, you must also instruct the model to produce JSON yourself via a system or user message. Without this, the model may generate an unending stream of whitespace until the generation reaches the token limit, resulting in a long-running and seemingly "stuck" request. Also note that the message content may be partially cut off if finish_reason="length", which indicates the generation exceeded max_tokens or the conversation exceeded the max context length.
     */
    responseFormat?:
      | FindOnePromptSnippetResponseFormatPromptSnippetsResponse200ApplicationJson2
      | FindOnePromptSnippetResponseFormatPromptSnippetsResponse200ApplicationJson1
      | null
      | undefined;
    /**
     * The version of photoReal to use. Must be v1 or v2. Only available for `leonardoai` provider
     */
    photoRealVersion?:
      | FindOnePromptSnippetResponseBodyPromptSnippetsResponse200PhotoRealVersion
      | undefined;
    /**
     * The format to return the embeddings
     */
    encodingFormat?:
      | FindOnePromptSnippetResponseBodyPromptSnippetsResponse200EncodingFormat
      | undefined;
  };

export const FindOnePromptSnippetResponseBodyPromptSnippetsResponse200Provider =
  {
    Cohere: "cohere",
    Openai: "openai",
    Anthropic: "anthropic",
    Huggingface: "huggingface",
    Replicate: "replicate",
    Google: "google",
    GoogleAi: "google-ai",
    Azure: "azure",
    Aws: "aws",
    Anyscale: "anyscale",
    Perplexity: "perplexity",
    Groq: "groq",
    Fal: "fal",
    Leonardoai: "leonardoai",
    Nvidia: "nvidia",
  } as const;
export type FindOnePromptSnippetResponseBodyPromptSnippetsResponse200Provider =
  ClosedEnum<
    typeof FindOnePromptSnippetResponseBodyPromptSnippetsResponse200Provider
  >;

/**
 * The role of the prompt message
 */
export const FindOnePromptSnippetResponseBodyPromptSnippetsResponse200Role = {
  System: "system",
  Assistant: "assistant",
  User: "user",
  Exception: "exception",
  Tool: "tool",
  Prompt: "prompt",
  Correction: "correction",
  ExpectedOutput: "expected_output",
} as const;
/**
 * The role of the prompt message
 */
export type FindOnePromptSnippetResponseBodyPromptSnippetsResponse200Role =
  ClosedEnum<
    typeof FindOnePromptSnippetResponseBodyPromptSnippetsResponse200Role
  >;

export const FindOnePromptSnippet2PromptSnippetsResponse200ApplicationJSONResponseBody1VersionsType =
  {
    ImageUrl: "image_url",
  } as const;
export type FindOnePromptSnippet2PromptSnippetsResponse200ApplicationJSONResponseBody1VersionsType =
  ClosedEnum<
    typeof FindOnePromptSnippet2PromptSnippetsResponse200ApplicationJSONResponseBody1VersionsType
  >;

export type FindOnePromptSnippet2PromptSnippetsResponse200ApplicationJSONImageUrl =
  {
    /**
     * The orq.ai id of the image
     */
    id?: string | undefined;
    /**
     * Either a URL of the image or the base64 encoded data URI.
     */
    url: string;
    /**
     * Specifies the detail level of the image. Currently only supported with OpenAI models
     */
    detail?: string | undefined;
  };

/**
 * The image part of the prompt message. Only supported with vision models.
 */
export type FindOnePromptSnippet2PromptSnippetsResponse200ApplicationJson2 = {
  type:
    FindOnePromptSnippet2PromptSnippetsResponse200ApplicationJSONResponseBody1VersionsType;
  imageUrl:
    FindOnePromptSnippet2PromptSnippetsResponse200ApplicationJSONImageUrl;
};

export const FindOnePromptSnippet2PromptSnippetsResponse200ApplicationJSONResponseBody1Type =
  {
    Text: "text",
  } as const;
export type FindOnePromptSnippet2PromptSnippetsResponse200ApplicationJSONResponseBody1Type =
  ClosedEnum<
    typeof FindOnePromptSnippet2PromptSnippetsResponse200ApplicationJSONResponseBody1Type
  >;

/**
 * Text content part of a prompt message
 */
export type FindOnePromptSnippet2PromptSnippetsResponse200ApplicationJson1 = {
  type:
    FindOnePromptSnippet2PromptSnippetsResponse200ApplicationJSONResponseBody1Type;
  text: string;
};

export type FindOnePromptSnippetContentPromptSnippetsResponse200ApplicationJson2 =
  | FindOnePromptSnippet2PromptSnippetsResponse200ApplicationJson1
  | FindOnePromptSnippet2PromptSnippetsResponse200ApplicationJson2;

/**
 * The contents of the user message. Either the text content of the message or an array of content parts with a defined type, each can be of type `text` or `image_url` when passing in images. You can pass multiple images by adding multiple `image_url` content parts.
 */
export type FindOnePromptSnippetResponseBodyPromptSnippetsResponse200Content =
  | string
  | Array<
    | FindOnePromptSnippet2PromptSnippetsResponse200ApplicationJson1
    | FindOnePromptSnippet2PromptSnippetsResponse200ApplicationJson2
  >;

export const FindOnePromptSnippetResponseBodyPromptSnippetsResponse200ApplicationJson1Type =
  {
    Function: "function",
  } as const;
export type FindOnePromptSnippetResponseBodyPromptSnippetsResponse200ApplicationJson1Type =
  ClosedEnum<
    typeof FindOnePromptSnippetResponseBodyPromptSnippetsResponse200ApplicationJson1Type
  >;

export type FindOnePromptSnippetResponseBodyPromptSnippetsResponse200Function =
  {
    name: string;
    /**
     * JSON string arguments for the functions
     */
    arguments: string;
  };

export type FindOnePromptSnippetResponseBodyPromptSnippetsResponse200ToolCalls =
  {
    id?: string | undefined;
    index?: number | undefined;
    type:
      FindOnePromptSnippetResponseBodyPromptSnippetsResponse200ApplicationJson1Type;
    function: FindOnePromptSnippetResponseBodyPromptSnippetsResponse200Function;
  };

export type FindOnePromptSnippetResponseBodyPromptSnippetsResponse200Messages =
  {
    /**
     * The role of the prompt message
     */
    role: FindOnePromptSnippetResponseBodyPromptSnippetsResponse200Role;
    /**
     * The contents of the user message. Either the text content of the message or an array of content parts with a defined type, each can be of type `text` or `image_url` when passing in images. You can pass multiple images by adding multiple `image_url` content parts.
     */
    content:
      | string
      | Array<
        | FindOnePromptSnippet2PromptSnippetsResponse200ApplicationJson1
        | FindOnePromptSnippet2PromptSnippetsResponse200ApplicationJson2
      >;
    toolCalls?:
      | Array<
        FindOnePromptSnippetResponseBodyPromptSnippetsResponse200ToolCalls
      >
      | undefined;
  };

export type FindOnePromptSnippetResponseBodyPromptSnippetsResponse200PromptConfig =
  {
    stream?: boolean | undefined;
    model?: string | undefined;
    /**
     * The id of the resource
     */
    modelDbId?: string | undefined;
    /**
     * The type of the model
     */
    modelType?:
      | FindOnePromptSnippetResponseBodyPromptSnippetsResponse200ModelType
      | undefined;
    /**
     * Model Parameters: Not all parameters apply to every model
     */
    modelParameters?:
      | FindOnePromptSnippetResponseBodyPromptSnippetsResponse200ModelParameters
      | undefined;
    provider?:
      | FindOnePromptSnippetResponseBodyPromptSnippetsResponse200Provider
      | undefined;
    /**
     * The id of the resource
     */
    integrationId?: string | null | undefined;
    version?: string | undefined;
    messages: Array<
      FindOnePromptSnippetResponseBodyPromptSnippetsResponse200Messages
    >;
  };

export type FindOnePromptSnippetResponseBodyPromptSnippetsResponse200Metadata =
  {
    useCases?: Array<string> | undefined;
    language?: string | undefined;
  };

/**
 * Prompt version model returned from the API
 */
export type Versions = {
  id: string;
  createdById: string;
  displayName: string;
  updatedById: string;
  description?: string | null | undefined;
  promptConfig:
    FindOnePromptSnippetResponseBodyPromptSnippetsResponse200PromptConfig;
  metadata: FindOnePromptSnippetResponseBodyPromptSnippetsResponse200Metadata;
  commit: string;
  timestamp: string;
};

export const ResponseBodyType = {
  Prompt: "prompt",
} as const;
export type ResponseBodyType = ClosedEnum<typeof ResponseBodyType>;

/**
 * Prompt model returned from the API
 */
export type ResponseBody1 = {
  id: string;
  owner: string | Owner2;
  domainId: string;
  createdById: string;
  displayName: string;
  updatedById: string;
  description?: string | null | undefined;
  promptConfig: ResponseBodyPromptConfig;
  metadata: ResponseBodyMetadata;
  /**
   * The date and time the resource was created
   */
  created?: Date | undefined;
  /**
   * The date and time the resource was last updated
   */
  updated?: Date | undefined;
  versions: Array<Versions>;
  type: ResponseBodyType;
};

/**
 * Prompt snippet retrieved.
 */
export type FindOnePromptSnippetResponseBody =
  | ResponseBody1
  | ResponseBody3
  | ResponseBody2;

/** @internal */
export const FindOnePromptSnippetRequest$inboundSchema: z.ZodType<
  FindOnePromptSnippetRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  key: z.string(),
});

/** @internal */
export type FindOnePromptSnippetRequest$Outbound = {
  key: string;
};

/** @internal */
export const FindOnePromptSnippetRequest$outboundSchema: z.ZodType<
  FindOnePromptSnippetRequest$Outbound,
  z.ZodTypeDef,
  FindOnePromptSnippetRequest
> = z.object({
  key: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FindOnePromptSnippetRequest$ {
  /** @deprecated use `FindOnePromptSnippetRequest$inboundSchema` instead. */
  export const inboundSchema = FindOnePromptSnippetRequest$inboundSchema;
  /** @deprecated use `FindOnePromptSnippetRequest$outboundSchema` instead. */
  export const outboundSchema = FindOnePromptSnippetRequest$outboundSchema;
  /** @deprecated use `FindOnePromptSnippetRequest$Outbound` instead. */
  export type Outbound = FindOnePromptSnippetRequest$Outbound;
}

export function findOnePromptSnippetRequestToJSON(
  findOnePromptSnippetRequest: FindOnePromptSnippetRequest,
): string {
  return JSON.stringify(
    FindOnePromptSnippetRequest$outboundSchema.parse(
      findOnePromptSnippetRequest,
    ),
  );
}

export function findOnePromptSnippetRequestFromJSON(
  jsonString: string,
): SafeParseResult<FindOnePromptSnippetRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => FindOnePromptSnippetRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'FindOnePromptSnippetRequest' from JSON`,
  );
}

/** @internal */
export const FindOnePromptSnippetOwnerPromptSnippets2$inboundSchema:
  z.ZodNativeEnum<typeof FindOnePromptSnippetOwnerPromptSnippets2> = z
    .nativeEnum(FindOnePromptSnippetOwnerPromptSnippets2);

/** @internal */
export const FindOnePromptSnippetOwnerPromptSnippets2$outboundSchema:
  z.ZodNativeEnum<typeof FindOnePromptSnippetOwnerPromptSnippets2> =
    FindOnePromptSnippetOwnerPromptSnippets2$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FindOnePromptSnippetOwnerPromptSnippets2$ {
  /** @deprecated use `FindOnePromptSnippetOwnerPromptSnippets2$inboundSchema` instead. */
  export const inboundSchema =
    FindOnePromptSnippetOwnerPromptSnippets2$inboundSchema;
  /** @deprecated use `FindOnePromptSnippetOwnerPromptSnippets2$outboundSchema` instead. */
  export const outboundSchema =
    FindOnePromptSnippetOwnerPromptSnippets2$outboundSchema;
}

/** @internal */
export const FindOnePromptSnippetResponseBodyOwner$inboundSchema: z.ZodType<
  FindOnePromptSnippetResponseBodyOwner,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.string(),
  FindOnePromptSnippetOwnerPromptSnippets2$inboundSchema,
]);

/** @internal */
export type FindOnePromptSnippetResponseBodyOwner$Outbound = string | string;

/** @internal */
export const FindOnePromptSnippetResponseBodyOwner$outboundSchema: z.ZodType<
  FindOnePromptSnippetResponseBodyOwner$Outbound,
  z.ZodTypeDef,
  FindOnePromptSnippetResponseBodyOwner
> = z.union([
  z.string(),
  FindOnePromptSnippetOwnerPromptSnippets2$outboundSchema,
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FindOnePromptSnippetResponseBodyOwner$ {
  /** @deprecated use `FindOnePromptSnippetResponseBodyOwner$inboundSchema` instead. */
  export const inboundSchema =
    FindOnePromptSnippetResponseBodyOwner$inboundSchema;
  /** @deprecated use `FindOnePromptSnippetResponseBodyOwner$outboundSchema` instead. */
  export const outboundSchema =
    FindOnePromptSnippetResponseBodyOwner$outboundSchema;
  /** @deprecated use `FindOnePromptSnippetResponseBodyOwner$Outbound` instead. */
  export type Outbound = FindOnePromptSnippetResponseBodyOwner$Outbound;
}

export function findOnePromptSnippetResponseBodyOwnerToJSON(
  findOnePromptSnippetResponseBodyOwner: FindOnePromptSnippetResponseBodyOwner,
): string {
  return JSON.stringify(
    FindOnePromptSnippetResponseBodyOwner$outboundSchema.parse(
      findOnePromptSnippetResponseBodyOwner,
    ),
  );
}

export function findOnePromptSnippetResponseBodyOwnerFromJSON(
  jsonString: string,
): SafeParseResult<FindOnePromptSnippetResponseBodyOwner, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      FindOnePromptSnippetResponseBodyOwner$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'FindOnePromptSnippetResponseBodyOwner' from JSON`,
  );
}

/** @internal */
export const FindOnePromptSnippetResponseBodyPromptSnippetsModelType$inboundSchema:
  z.ZodNativeEnum<
    typeof FindOnePromptSnippetResponseBodyPromptSnippetsModelType
  > = z.nativeEnum(FindOnePromptSnippetResponseBodyPromptSnippetsModelType);

/** @internal */
export const FindOnePromptSnippetResponseBodyPromptSnippetsModelType$outboundSchema:
  z.ZodNativeEnum<
    typeof FindOnePromptSnippetResponseBodyPromptSnippetsModelType
  > = FindOnePromptSnippetResponseBodyPromptSnippetsModelType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FindOnePromptSnippetResponseBodyPromptSnippetsModelType$ {
  /** @deprecated use `FindOnePromptSnippetResponseBodyPromptSnippetsModelType$inboundSchema` instead. */
  export const inboundSchema =
    FindOnePromptSnippetResponseBodyPromptSnippetsModelType$inboundSchema;
  /** @deprecated use `FindOnePromptSnippetResponseBodyPromptSnippetsModelType$outboundSchema` instead. */
  export const outboundSchema =
    FindOnePromptSnippetResponseBodyPromptSnippetsModelType$outboundSchema;
}

/** @internal */
export const FindOnePromptSnippetResponseBodyPromptSnippetsFormat$inboundSchema:
  z.ZodNativeEnum<typeof FindOnePromptSnippetResponseBodyPromptSnippetsFormat> =
    z.nativeEnum(FindOnePromptSnippetResponseBodyPromptSnippetsFormat);

/** @internal */
export const FindOnePromptSnippetResponseBodyPromptSnippetsFormat$outboundSchema:
  z.ZodNativeEnum<typeof FindOnePromptSnippetResponseBodyPromptSnippetsFormat> =
    FindOnePromptSnippetResponseBodyPromptSnippetsFormat$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FindOnePromptSnippetResponseBodyPromptSnippetsFormat$ {
  /** @deprecated use `FindOnePromptSnippetResponseBodyPromptSnippetsFormat$inboundSchema` instead. */
  export const inboundSchema =
    FindOnePromptSnippetResponseBodyPromptSnippetsFormat$inboundSchema;
  /** @deprecated use `FindOnePromptSnippetResponseBodyPromptSnippetsFormat$outboundSchema` instead. */
  export const outboundSchema =
    FindOnePromptSnippetResponseBodyPromptSnippetsFormat$outboundSchema;
}

/** @internal */
export const FindOnePromptSnippetResponseBodyPromptSnippetsQuality$inboundSchema:
  z.ZodNativeEnum<
    typeof FindOnePromptSnippetResponseBodyPromptSnippetsQuality
  > = z.nativeEnum(FindOnePromptSnippetResponseBodyPromptSnippetsQuality);

/** @internal */
export const FindOnePromptSnippetResponseBodyPromptSnippetsQuality$outboundSchema:
  z.ZodNativeEnum<
    typeof FindOnePromptSnippetResponseBodyPromptSnippetsQuality
  > = FindOnePromptSnippetResponseBodyPromptSnippetsQuality$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FindOnePromptSnippetResponseBodyPromptSnippetsQuality$ {
  /** @deprecated use `FindOnePromptSnippetResponseBodyPromptSnippetsQuality$inboundSchema` instead. */
  export const inboundSchema =
    FindOnePromptSnippetResponseBodyPromptSnippetsQuality$inboundSchema;
  /** @deprecated use `FindOnePromptSnippetResponseBodyPromptSnippetsQuality$outboundSchema` instead. */
  export const outboundSchema =
    FindOnePromptSnippetResponseBodyPromptSnippetsQuality$outboundSchema;
}

/** @internal */
export const FindOnePromptSnippetResponseFormatPromptSnippetsResponse200ApplicationJSONResponseBodyType$inboundSchema:
  z.ZodNativeEnum<
    typeof FindOnePromptSnippetResponseFormatPromptSnippetsResponse200ApplicationJSONResponseBodyType
  > = z.nativeEnum(
    FindOnePromptSnippetResponseFormatPromptSnippetsResponse200ApplicationJSONResponseBodyType,
  );

/** @internal */
export const FindOnePromptSnippetResponseFormatPromptSnippetsResponse200ApplicationJSONResponseBodyType$outboundSchema:
  z.ZodNativeEnum<
    typeof FindOnePromptSnippetResponseFormatPromptSnippetsResponse200ApplicationJSONResponseBodyType
  > =
    FindOnePromptSnippetResponseFormatPromptSnippetsResponse200ApplicationJSONResponseBodyType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FindOnePromptSnippetResponseFormatPromptSnippetsResponse200ApplicationJSONResponseBodyType$ {
  /** @deprecated use `FindOnePromptSnippetResponseFormatPromptSnippetsResponse200ApplicationJSONResponseBodyType$inboundSchema` instead. */
  export const inboundSchema =
    FindOnePromptSnippetResponseFormatPromptSnippetsResponse200ApplicationJSONResponseBodyType$inboundSchema;
  /** @deprecated use `FindOnePromptSnippetResponseFormatPromptSnippetsResponse200ApplicationJSONResponseBodyType$outboundSchema` instead. */
  export const outboundSchema =
    FindOnePromptSnippetResponseFormatPromptSnippetsResponse200ApplicationJSONResponseBodyType$outboundSchema;
}

/** @internal */
export const FindOnePromptSnippetResponseFormatPromptSnippetsResponse2$inboundSchema:
  z.ZodType<
    FindOnePromptSnippetResponseFormatPromptSnippetsResponse2,
    z.ZodTypeDef,
    unknown
  > = z.object({
    type:
      FindOnePromptSnippetResponseFormatPromptSnippetsResponse200ApplicationJSONResponseBodyType$inboundSchema,
  });

/** @internal */
export type FindOnePromptSnippetResponseFormatPromptSnippetsResponse2$Outbound =
  {
    type: string;
  };

/** @internal */
export const FindOnePromptSnippetResponseFormatPromptSnippetsResponse2$outboundSchema:
  z.ZodType<
    FindOnePromptSnippetResponseFormatPromptSnippetsResponse2$Outbound,
    z.ZodTypeDef,
    FindOnePromptSnippetResponseFormatPromptSnippetsResponse2
  > = z.object({
    type:
      FindOnePromptSnippetResponseFormatPromptSnippetsResponse200ApplicationJSONResponseBodyType$outboundSchema,
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FindOnePromptSnippetResponseFormatPromptSnippetsResponse2$ {
  /** @deprecated use `FindOnePromptSnippetResponseFormatPromptSnippetsResponse2$inboundSchema` instead. */
  export const inboundSchema =
    FindOnePromptSnippetResponseFormatPromptSnippetsResponse2$inboundSchema;
  /** @deprecated use `FindOnePromptSnippetResponseFormatPromptSnippetsResponse2$outboundSchema` instead. */
  export const outboundSchema =
    FindOnePromptSnippetResponseFormatPromptSnippetsResponse2$outboundSchema;
  /** @deprecated use `FindOnePromptSnippetResponseFormatPromptSnippetsResponse2$Outbound` instead. */
  export type Outbound =
    FindOnePromptSnippetResponseFormatPromptSnippetsResponse2$Outbound;
}

export function findOnePromptSnippetResponseFormatPromptSnippetsResponse2ToJSON(
  findOnePromptSnippetResponseFormatPromptSnippetsResponse2:
    FindOnePromptSnippetResponseFormatPromptSnippetsResponse2,
): string {
  return JSON.stringify(
    FindOnePromptSnippetResponseFormatPromptSnippetsResponse2$outboundSchema
      .parse(findOnePromptSnippetResponseFormatPromptSnippetsResponse2),
  );
}

export function findOnePromptSnippetResponseFormatPromptSnippetsResponse2FromJSON(
  jsonString: string,
): SafeParseResult<
  FindOnePromptSnippetResponseFormatPromptSnippetsResponse2,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      FindOnePromptSnippetResponseFormatPromptSnippetsResponse2$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'FindOnePromptSnippetResponseFormatPromptSnippetsResponse2' from JSON`,
  );
}

/** @internal */
export const FindOnePromptSnippetResponseFormatPromptSnippetsResponse200ApplicationJSONType$inboundSchema:
  z.ZodNativeEnum<
    typeof FindOnePromptSnippetResponseFormatPromptSnippetsResponse200ApplicationJSONType
  > = z.nativeEnum(
    FindOnePromptSnippetResponseFormatPromptSnippetsResponse200ApplicationJSONType,
  );

/** @internal */
export const FindOnePromptSnippetResponseFormatPromptSnippetsResponse200ApplicationJSONType$outboundSchema:
  z.ZodNativeEnum<
    typeof FindOnePromptSnippetResponseFormatPromptSnippetsResponse200ApplicationJSONType
  > =
    FindOnePromptSnippetResponseFormatPromptSnippetsResponse200ApplicationJSONType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FindOnePromptSnippetResponseFormatPromptSnippetsResponse200ApplicationJSONType$ {
  /** @deprecated use `FindOnePromptSnippetResponseFormatPromptSnippetsResponse200ApplicationJSONType$inboundSchema` instead. */
  export const inboundSchema =
    FindOnePromptSnippetResponseFormatPromptSnippetsResponse200ApplicationJSONType$inboundSchema;
  /** @deprecated use `FindOnePromptSnippetResponseFormatPromptSnippetsResponse200ApplicationJSONType$outboundSchema` instead. */
  export const outboundSchema =
    FindOnePromptSnippetResponseFormatPromptSnippetsResponse200ApplicationJSONType$outboundSchema;
}

/** @internal */
export const FindOnePromptSnippetResponseFormatPromptSnippetsResponseJsonSchema$inboundSchema:
  z.ZodType<
    FindOnePromptSnippetResponseFormatPromptSnippetsResponseJsonSchema,
    z.ZodTypeDef,
    unknown
  > = z.object({
    name: z.string(),
    strict: z.boolean(),
    schema: z.record(z.any()),
  });

/** @internal */
export type FindOnePromptSnippetResponseFormatPromptSnippetsResponseJsonSchema$Outbound =
  {
    name: string;
    strict: boolean;
    schema: { [k: string]: any };
  };

/** @internal */
export const FindOnePromptSnippetResponseFormatPromptSnippetsResponseJsonSchema$outboundSchema:
  z.ZodType<
    FindOnePromptSnippetResponseFormatPromptSnippetsResponseJsonSchema$Outbound,
    z.ZodTypeDef,
    FindOnePromptSnippetResponseFormatPromptSnippetsResponseJsonSchema
  > = z.object({
    name: z.string(),
    strict: z.boolean(),
    schema: z.record(z.any()),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FindOnePromptSnippetResponseFormatPromptSnippetsResponseJsonSchema$ {
  /** @deprecated use `FindOnePromptSnippetResponseFormatPromptSnippetsResponseJsonSchema$inboundSchema` instead. */
  export const inboundSchema =
    FindOnePromptSnippetResponseFormatPromptSnippetsResponseJsonSchema$inboundSchema;
  /** @deprecated use `FindOnePromptSnippetResponseFormatPromptSnippetsResponseJsonSchema$outboundSchema` instead. */
  export const outboundSchema =
    FindOnePromptSnippetResponseFormatPromptSnippetsResponseJsonSchema$outboundSchema;
  /** @deprecated use `FindOnePromptSnippetResponseFormatPromptSnippetsResponseJsonSchema$Outbound` instead. */
  export type Outbound =
    FindOnePromptSnippetResponseFormatPromptSnippetsResponseJsonSchema$Outbound;
}

export function findOnePromptSnippetResponseFormatPromptSnippetsResponseJsonSchemaToJSON(
  findOnePromptSnippetResponseFormatPromptSnippetsResponseJsonSchema:
    FindOnePromptSnippetResponseFormatPromptSnippetsResponseJsonSchema,
): string {
  return JSON.stringify(
    FindOnePromptSnippetResponseFormatPromptSnippetsResponseJsonSchema$outboundSchema
      .parse(
        findOnePromptSnippetResponseFormatPromptSnippetsResponseJsonSchema,
      ),
  );
}

export function findOnePromptSnippetResponseFormatPromptSnippetsResponseJsonSchemaFromJSON(
  jsonString: string,
): SafeParseResult<
  FindOnePromptSnippetResponseFormatPromptSnippetsResponseJsonSchema,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      FindOnePromptSnippetResponseFormatPromptSnippetsResponseJsonSchema$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'FindOnePromptSnippetResponseFormatPromptSnippetsResponseJsonSchema' from JSON`,
  );
}

/** @internal */
export const FindOnePromptSnippetResponseFormatPromptSnippetsResponse1$inboundSchema:
  z.ZodType<
    FindOnePromptSnippetResponseFormatPromptSnippetsResponse1,
    z.ZodTypeDef,
    unknown
  > = z.object({
    type:
      FindOnePromptSnippetResponseFormatPromptSnippetsResponse200ApplicationJSONType$inboundSchema,
    json_schema: z.lazy(() =>
      FindOnePromptSnippetResponseFormatPromptSnippetsResponseJsonSchema$inboundSchema
    ),
  }).transform((v) => {
    return remap$(v, {
      "json_schema": "jsonSchema",
    });
  });

/** @internal */
export type FindOnePromptSnippetResponseFormatPromptSnippetsResponse1$Outbound =
  {
    type: string;
    json_schema:
      FindOnePromptSnippetResponseFormatPromptSnippetsResponseJsonSchema$Outbound;
  };

/** @internal */
export const FindOnePromptSnippetResponseFormatPromptSnippetsResponse1$outboundSchema:
  z.ZodType<
    FindOnePromptSnippetResponseFormatPromptSnippetsResponse1$Outbound,
    z.ZodTypeDef,
    FindOnePromptSnippetResponseFormatPromptSnippetsResponse1
  > = z.object({
    type:
      FindOnePromptSnippetResponseFormatPromptSnippetsResponse200ApplicationJSONType$outboundSchema,
    jsonSchema: z.lazy(() =>
      FindOnePromptSnippetResponseFormatPromptSnippetsResponseJsonSchema$outboundSchema
    ),
  }).transform((v) => {
    return remap$(v, {
      jsonSchema: "json_schema",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FindOnePromptSnippetResponseFormatPromptSnippetsResponse1$ {
  /** @deprecated use `FindOnePromptSnippetResponseFormatPromptSnippetsResponse1$inboundSchema` instead. */
  export const inboundSchema =
    FindOnePromptSnippetResponseFormatPromptSnippetsResponse1$inboundSchema;
  /** @deprecated use `FindOnePromptSnippetResponseFormatPromptSnippetsResponse1$outboundSchema` instead. */
  export const outboundSchema =
    FindOnePromptSnippetResponseFormatPromptSnippetsResponse1$outboundSchema;
  /** @deprecated use `FindOnePromptSnippetResponseFormatPromptSnippetsResponse1$Outbound` instead. */
  export type Outbound =
    FindOnePromptSnippetResponseFormatPromptSnippetsResponse1$Outbound;
}

export function findOnePromptSnippetResponseFormatPromptSnippetsResponse1ToJSON(
  findOnePromptSnippetResponseFormatPromptSnippetsResponse1:
    FindOnePromptSnippetResponseFormatPromptSnippetsResponse1,
): string {
  return JSON.stringify(
    FindOnePromptSnippetResponseFormatPromptSnippetsResponse1$outboundSchema
      .parse(findOnePromptSnippetResponseFormatPromptSnippetsResponse1),
  );
}

export function findOnePromptSnippetResponseFormatPromptSnippetsResponse1FromJSON(
  jsonString: string,
): SafeParseResult<
  FindOnePromptSnippetResponseFormatPromptSnippetsResponse1,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      FindOnePromptSnippetResponseFormatPromptSnippetsResponse1$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'FindOnePromptSnippetResponseFormatPromptSnippetsResponse1' from JSON`,
  );
}

/** @internal */
export const FindOnePromptSnippetResponseBodyPromptSnippetsResponseFormat$inboundSchema:
  z.ZodType<
    FindOnePromptSnippetResponseBodyPromptSnippetsResponseFormat,
    z.ZodTypeDef,
    unknown
  > = z.union([
    z.lazy(() =>
      FindOnePromptSnippetResponseFormatPromptSnippetsResponse2$inboundSchema
    ),
    z.lazy(() =>
      FindOnePromptSnippetResponseFormatPromptSnippetsResponse1$inboundSchema
    ),
  ]);

/** @internal */
export type FindOnePromptSnippetResponseBodyPromptSnippetsResponseFormat$Outbound =
  | FindOnePromptSnippetResponseFormatPromptSnippetsResponse2$Outbound
  | FindOnePromptSnippetResponseFormatPromptSnippetsResponse1$Outbound;

/** @internal */
export const FindOnePromptSnippetResponseBodyPromptSnippetsResponseFormat$outboundSchema:
  z.ZodType<
    FindOnePromptSnippetResponseBodyPromptSnippetsResponseFormat$Outbound,
    z.ZodTypeDef,
    FindOnePromptSnippetResponseBodyPromptSnippetsResponseFormat
  > = z.union([
    z.lazy(() =>
      FindOnePromptSnippetResponseFormatPromptSnippetsResponse2$outboundSchema
    ),
    z.lazy(() =>
      FindOnePromptSnippetResponseFormatPromptSnippetsResponse1$outboundSchema
    ),
  ]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FindOnePromptSnippetResponseBodyPromptSnippetsResponseFormat$ {
  /** @deprecated use `FindOnePromptSnippetResponseBodyPromptSnippetsResponseFormat$inboundSchema` instead. */
  export const inboundSchema =
    FindOnePromptSnippetResponseBodyPromptSnippetsResponseFormat$inboundSchema;
  /** @deprecated use `FindOnePromptSnippetResponseBodyPromptSnippetsResponseFormat$outboundSchema` instead. */
  export const outboundSchema =
    FindOnePromptSnippetResponseBodyPromptSnippetsResponseFormat$outboundSchema;
  /** @deprecated use `FindOnePromptSnippetResponseBodyPromptSnippetsResponseFormat$Outbound` instead. */
  export type Outbound =
    FindOnePromptSnippetResponseBodyPromptSnippetsResponseFormat$Outbound;
}

export function findOnePromptSnippetResponseBodyPromptSnippetsResponseFormatToJSON(
  findOnePromptSnippetResponseBodyPromptSnippetsResponseFormat:
    FindOnePromptSnippetResponseBodyPromptSnippetsResponseFormat,
): string {
  return JSON.stringify(
    FindOnePromptSnippetResponseBodyPromptSnippetsResponseFormat$outboundSchema
      .parse(findOnePromptSnippetResponseBodyPromptSnippetsResponseFormat),
  );
}

export function findOnePromptSnippetResponseBodyPromptSnippetsResponseFormatFromJSON(
  jsonString: string,
): SafeParseResult<
  FindOnePromptSnippetResponseBodyPromptSnippetsResponseFormat,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      FindOnePromptSnippetResponseBodyPromptSnippetsResponseFormat$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'FindOnePromptSnippetResponseBodyPromptSnippetsResponseFormat' from JSON`,
  );
}

/** @internal */
export const FindOnePromptSnippetResponseBodyPromptSnippetsPhotoRealVersion$inboundSchema:
  z.ZodNativeEnum<
    typeof FindOnePromptSnippetResponseBodyPromptSnippetsPhotoRealVersion
  > = z.nativeEnum(
    FindOnePromptSnippetResponseBodyPromptSnippetsPhotoRealVersion,
  );

/** @internal */
export const FindOnePromptSnippetResponseBodyPromptSnippetsPhotoRealVersion$outboundSchema:
  z.ZodNativeEnum<
    typeof FindOnePromptSnippetResponseBodyPromptSnippetsPhotoRealVersion
  > =
    FindOnePromptSnippetResponseBodyPromptSnippetsPhotoRealVersion$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FindOnePromptSnippetResponseBodyPromptSnippetsPhotoRealVersion$ {
  /** @deprecated use `FindOnePromptSnippetResponseBodyPromptSnippetsPhotoRealVersion$inboundSchema` instead. */
  export const inboundSchema =
    FindOnePromptSnippetResponseBodyPromptSnippetsPhotoRealVersion$inboundSchema;
  /** @deprecated use `FindOnePromptSnippetResponseBodyPromptSnippetsPhotoRealVersion$outboundSchema` instead. */
  export const outboundSchema =
    FindOnePromptSnippetResponseBodyPromptSnippetsPhotoRealVersion$outboundSchema;
}

/** @internal */
export const FindOnePromptSnippetResponseBodyPromptSnippetsEncodingFormat$inboundSchema:
  z.ZodNativeEnum<
    typeof FindOnePromptSnippetResponseBodyPromptSnippetsEncodingFormat
  > = z.nativeEnum(
    FindOnePromptSnippetResponseBodyPromptSnippetsEncodingFormat,
  );

/** @internal */
export const FindOnePromptSnippetResponseBodyPromptSnippetsEncodingFormat$outboundSchema:
  z.ZodNativeEnum<
    typeof FindOnePromptSnippetResponseBodyPromptSnippetsEncodingFormat
  > =
    FindOnePromptSnippetResponseBodyPromptSnippetsEncodingFormat$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FindOnePromptSnippetResponseBodyPromptSnippetsEncodingFormat$ {
  /** @deprecated use `FindOnePromptSnippetResponseBodyPromptSnippetsEncodingFormat$inboundSchema` instead. */
  export const inboundSchema =
    FindOnePromptSnippetResponseBodyPromptSnippetsEncodingFormat$inboundSchema;
  /** @deprecated use `FindOnePromptSnippetResponseBodyPromptSnippetsEncodingFormat$outboundSchema` instead. */
  export const outboundSchema =
    FindOnePromptSnippetResponseBodyPromptSnippetsEncodingFormat$outboundSchema;
}

/** @internal */
export const FindOnePromptSnippetResponseBodyPromptSnippetsModelParameters$inboundSchema:
  z.ZodType<
    FindOnePromptSnippetResponseBodyPromptSnippetsModelParameters,
    z.ZodTypeDef,
    unknown
  > = z.object({
    temperature: z.number().optional(),
    maxTokens: z.number().optional(),
    topK: z.number().optional(),
    topP: z.number().optional(),
    frequencyPenalty: z.number().optional(),
    presencePenalty: z.number().optional(),
    numImages: z.number().optional(),
    seed: z.number().optional(),
    format: FindOnePromptSnippetResponseBodyPromptSnippetsFormat$inboundSchema
      .optional(),
    dimensions: z.string().optional(),
    quality: FindOnePromptSnippetResponseBodyPromptSnippetsQuality$inboundSchema
      .optional(),
    style: z.string().optional(),
    responseFormat: z.nullable(
      z.union([
        z.lazy(() =>
          FindOnePromptSnippetResponseFormatPromptSnippetsResponse2$inboundSchema
        ),
        z.lazy(() =>
          FindOnePromptSnippetResponseFormatPromptSnippetsResponse1$inboundSchema
        ),
      ]),
    ).optional(),
    photoRealVersion:
      FindOnePromptSnippetResponseBodyPromptSnippetsPhotoRealVersion$inboundSchema
        .optional(),
    encoding_format:
      FindOnePromptSnippetResponseBodyPromptSnippetsEncodingFormat$inboundSchema
        .optional(),
  }).transform((v) => {
    return remap$(v, {
      "encoding_format": "encodingFormat",
    });
  });

/** @internal */
export type FindOnePromptSnippetResponseBodyPromptSnippetsModelParameters$Outbound =
  {
    temperature?: number | undefined;
    maxTokens?: number | undefined;
    topK?: number | undefined;
    topP?: number | undefined;
    frequencyPenalty?: number | undefined;
    presencePenalty?: number | undefined;
    numImages?: number | undefined;
    seed?: number | undefined;
    format?: string | undefined;
    dimensions?: string | undefined;
    quality?: string | undefined;
    style?: string | undefined;
    responseFormat?:
      | FindOnePromptSnippetResponseFormatPromptSnippetsResponse2$Outbound
      | FindOnePromptSnippetResponseFormatPromptSnippetsResponse1$Outbound
      | null
      | undefined;
    photoRealVersion?: string | undefined;
    encoding_format?: string | undefined;
  };

/** @internal */
export const FindOnePromptSnippetResponseBodyPromptSnippetsModelParameters$outboundSchema:
  z.ZodType<
    FindOnePromptSnippetResponseBodyPromptSnippetsModelParameters$Outbound,
    z.ZodTypeDef,
    FindOnePromptSnippetResponseBodyPromptSnippetsModelParameters
  > = z.object({
    temperature: z.number().optional(),
    maxTokens: z.number().optional(),
    topK: z.number().optional(),
    topP: z.number().optional(),
    frequencyPenalty: z.number().optional(),
    presencePenalty: z.number().optional(),
    numImages: z.number().optional(),
    seed: z.number().optional(),
    format: FindOnePromptSnippetResponseBodyPromptSnippetsFormat$outboundSchema
      .optional(),
    dimensions: z.string().optional(),
    quality:
      FindOnePromptSnippetResponseBodyPromptSnippetsQuality$outboundSchema
        .optional(),
    style: z.string().optional(),
    responseFormat: z.nullable(
      z.union([
        z.lazy(() =>
          FindOnePromptSnippetResponseFormatPromptSnippetsResponse2$outboundSchema
        ),
        z.lazy(() =>
          FindOnePromptSnippetResponseFormatPromptSnippetsResponse1$outboundSchema
        ),
      ]),
    ).optional(),
    photoRealVersion:
      FindOnePromptSnippetResponseBodyPromptSnippetsPhotoRealVersion$outboundSchema
        .optional(),
    encodingFormat:
      FindOnePromptSnippetResponseBodyPromptSnippetsEncodingFormat$outboundSchema
        .optional(),
  }).transform((v) => {
    return remap$(v, {
      encodingFormat: "encoding_format",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FindOnePromptSnippetResponseBodyPromptSnippetsModelParameters$ {
  /** @deprecated use `FindOnePromptSnippetResponseBodyPromptSnippetsModelParameters$inboundSchema` instead. */
  export const inboundSchema =
    FindOnePromptSnippetResponseBodyPromptSnippetsModelParameters$inboundSchema;
  /** @deprecated use `FindOnePromptSnippetResponseBodyPromptSnippetsModelParameters$outboundSchema` instead. */
  export const outboundSchema =
    FindOnePromptSnippetResponseBodyPromptSnippetsModelParameters$outboundSchema;
  /** @deprecated use `FindOnePromptSnippetResponseBodyPromptSnippetsModelParameters$Outbound` instead. */
  export type Outbound =
    FindOnePromptSnippetResponseBodyPromptSnippetsModelParameters$Outbound;
}

export function findOnePromptSnippetResponseBodyPromptSnippetsModelParametersToJSON(
  findOnePromptSnippetResponseBodyPromptSnippetsModelParameters:
    FindOnePromptSnippetResponseBodyPromptSnippetsModelParameters,
): string {
  return JSON.stringify(
    FindOnePromptSnippetResponseBodyPromptSnippetsModelParameters$outboundSchema
      .parse(findOnePromptSnippetResponseBodyPromptSnippetsModelParameters),
  );
}

export function findOnePromptSnippetResponseBodyPromptSnippetsModelParametersFromJSON(
  jsonString: string,
): SafeParseResult<
  FindOnePromptSnippetResponseBodyPromptSnippetsModelParameters,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      FindOnePromptSnippetResponseBodyPromptSnippetsModelParameters$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'FindOnePromptSnippetResponseBodyPromptSnippetsModelParameters' from JSON`,
  );
}

/** @internal */
export const FindOnePromptSnippetResponseBodyPromptSnippetsProvider$inboundSchema:
  z.ZodNativeEnum<
    typeof FindOnePromptSnippetResponseBodyPromptSnippetsProvider
  > = z.nativeEnum(FindOnePromptSnippetResponseBodyPromptSnippetsProvider);

/** @internal */
export const FindOnePromptSnippetResponseBodyPromptSnippetsProvider$outboundSchema:
  z.ZodNativeEnum<
    typeof FindOnePromptSnippetResponseBodyPromptSnippetsProvider
  > = FindOnePromptSnippetResponseBodyPromptSnippetsProvider$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FindOnePromptSnippetResponseBodyPromptSnippetsProvider$ {
  /** @deprecated use `FindOnePromptSnippetResponseBodyPromptSnippetsProvider$inboundSchema` instead. */
  export const inboundSchema =
    FindOnePromptSnippetResponseBodyPromptSnippetsProvider$inboundSchema;
  /** @deprecated use `FindOnePromptSnippetResponseBodyPromptSnippetsProvider$outboundSchema` instead. */
  export const outboundSchema =
    FindOnePromptSnippetResponseBodyPromptSnippetsProvider$outboundSchema;
}

/** @internal */
export const FindOnePromptSnippetResponseBodyPromptSnippetsRole$inboundSchema:
  z.ZodNativeEnum<typeof FindOnePromptSnippetResponseBodyPromptSnippetsRole> = z
    .nativeEnum(FindOnePromptSnippetResponseBodyPromptSnippetsRole);

/** @internal */
export const FindOnePromptSnippetResponseBodyPromptSnippetsRole$outboundSchema:
  z.ZodNativeEnum<typeof FindOnePromptSnippetResponseBodyPromptSnippetsRole> =
    FindOnePromptSnippetResponseBodyPromptSnippetsRole$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FindOnePromptSnippetResponseBodyPromptSnippetsRole$ {
  /** @deprecated use `FindOnePromptSnippetResponseBodyPromptSnippetsRole$inboundSchema` instead. */
  export const inboundSchema =
    FindOnePromptSnippetResponseBodyPromptSnippetsRole$inboundSchema;
  /** @deprecated use `FindOnePromptSnippetResponseBodyPromptSnippetsRole$outboundSchema` instead. */
  export const outboundSchema =
    FindOnePromptSnippetResponseBodyPromptSnippetsRole$outboundSchema;
}

/** @internal */
export const FindOnePromptSnippet2PromptSnippetsResponse200ApplicationJSONResponseBodyType$inboundSchema:
  z.ZodNativeEnum<
    typeof FindOnePromptSnippet2PromptSnippetsResponse200ApplicationJSONResponseBodyType
  > = z.nativeEnum(
    FindOnePromptSnippet2PromptSnippetsResponse200ApplicationJSONResponseBodyType,
  );

/** @internal */
export const FindOnePromptSnippet2PromptSnippetsResponse200ApplicationJSONResponseBodyType$outboundSchema:
  z.ZodNativeEnum<
    typeof FindOnePromptSnippet2PromptSnippetsResponse200ApplicationJSONResponseBodyType
  > =
    FindOnePromptSnippet2PromptSnippetsResponse200ApplicationJSONResponseBodyType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FindOnePromptSnippet2PromptSnippetsResponse200ApplicationJSONResponseBodyType$ {
  /** @deprecated use `FindOnePromptSnippet2PromptSnippetsResponse200ApplicationJSONResponseBodyType$inboundSchema` instead. */
  export const inboundSchema =
    FindOnePromptSnippet2PromptSnippetsResponse200ApplicationJSONResponseBodyType$inboundSchema;
  /** @deprecated use `FindOnePromptSnippet2PromptSnippetsResponse200ApplicationJSONResponseBodyType$outboundSchema` instead. */
  export const outboundSchema =
    FindOnePromptSnippet2PromptSnippetsResponse200ApplicationJSONResponseBodyType$outboundSchema;
}

/** @internal */
export const FindOnePromptSnippet2PromptSnippetsResponseImageUrl$inboundSchema:
  z.ZodType<
    FindOnePromptSnippet2PromptSnippetsResponseImageUrl,
    z.ZodTypeDef,
    unknown
  > = z.object({
    id: z.string().optional(),
    url: z.string(),
    detail: z.string().optional(),
  });

/** @internal */
export type FindOnePromptSnippet2PromptSnippetsResponseImageUrl$Outbound = {
  id?: string | undefined;
  url: string;
  detail?: string | undefined;
};

/** @internal */
export const FindOnePromptSnippet2PromptSnippetsResponseImageUrl$outboundSchema:
  z.ZodType<
    FindOnePromptSnippet2PromptSnippetsResponseImageUrl$Outbound,
    z.ZodTypeDef,
    FindOnePromptSnippet2PromptSnippetsResponseImageUrl
  > = z.object({
    id: z.string().optional(),
    url: z.string(),
    detail: z.string().optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FindOnePromptSnippet2PromptSnippetsResponseImageUrl$ {
  /** @deprecated use `FindOnePromptSnippet2PromptSnippetsResponseImageUrl$inboundSchema` instead. */
  export const inboundSchema =
    FindOnePromptSnippet2PromptSnippetsResponseImageUrl$inboundSchema;
  /** @deprecated use `FindOnePromptSnippet2PromptSnippetsResponseImageUrl$outboundSchema` instead. */
  export const outboundSchema =
    FindOnePromptSnippet2PromptSnippetsResponseImageUrl$outboundSchema;
  /** @deprecated use `FindOnePromptSnippet2PromptSnippetsResponseImageUrl$Outbound` instead. */
  export type Outbound =
    FindOnePromptSnippet2PromptSnippetsResponseImageUrl$Outbound;
}

export function findOnePromptSnippet2PromptSnippetsResponseImageUrlToJSON(
  findOnePromptSnippet2PromptSnippetsResponseImageUrl:
    FindOnePromptSnippet2PromptSnippetsResponseImageUrl,
): string {
  return JSON.stringify(
    FindOnePromptSnippet2PromptSnippetsResponseImageUrl$outboundSchema.parse(
      findOnePromptSnippet2PromptSnippetsResponseImageUrl,
    ),
  );
}

export function findOnePromptSnippet2PromptSnippetsResponseImageUrlFromJSON(
  jsonString: string,
): SafeParseResult<
  FindOnePromptSnippet2PromptSnippetsResponseImageUrl,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      FindOnePromptSnippet2PromptSnippetsResponseImageUrl$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'FindOnePromptSnippet2PromptSnippetsResponseImageUrl' from JSON`,
  );
}

/** @internal */
export const FindOnePromptSnippet2PromptSnippetsResponse2$inboundSchema:
  z.ZodType<
    FindOnePromptSnippet2PromptSnippetsResponse2,
    z.ZodTypeDef,
    unknown
  > = z.object({
    type:
      FindOnePromptSnippet2PromptSnippetsResponse200ApplicationJSONResponseBodyType$inboundSchema,
    image_url: z.lazy(() =>
      FindOnePromptSnippet2PromptSnippetsResponseImageUrl$inboundSchema
    ),
  }).transform((v) => {
    return remap$(v, {
      "image_url": "imageUrl",
    });
  });

/** @internal */
export type FindOnePromptSnippet2PromptSnippetsResponse2$Outbound = {
  type: string;
  image_url: FindOnePromptSnippet2PromptSnippetsResponseImageUrl$Outbound;
};

/** @internal */
export const FindOnePromptSnippet2PromptSnippetsResponse2$outboundSchema:
  z.ZodType<
    FindOnePromptSnippet2PromptSnippetsResponse2$Outbound,
    z.ZodTypeDef,
    FindOnePromptSnippet2PromptSnippetsResponse2
  > = z.object({
    type:
      FindOnePromptSnippet2PromptSnippetsResponse200ApplicationJSONResponseBodyType$outboundSchema,
    imageUrl: z.lazy(() =>
      FindOnePromptSnippet2PromptSnippetsResponseImageUrl$outboundSchema
    ),
  }).transform((v) => {
    return remap$(v, {
      imageUrl: "image_url",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FindOnePromptSnippet2PromptSnippetsResponse2$ {
  /** @deprecated use `FindOnePromptSnippet2PromptSnippetsResponse2$inboundSchema` instead. */
  export const inboundSchema =
    FindOnePromptSnippet2PromptSnippetsResponse2$inboundSchema;
  /** @deprecated use `FindOnePromptSnippet2PromptSnippetsResponse2$outboundSchema` instead. */
  export const outboundSchema =
    FindOnePromptSnippet2PromptSnippetsResponse2$outboundSchema;
  /** @deprecated use `FindOnePromptSnippet2PromptSnippetsResponse2$Outbound` instead. */
  export type Outbound = FindOnePromptSnippet2PromptSnippetsResponse2$Outbound;
}

export function findOnePromptSnippet2PromptSnippetsResponse2ToJSON(
  findOnePromptSnippet2PromptSnippetsResponse2:
    FindOnePromptSnippet2PromptSnippetsResponse2,
): string {
  return JSON.stringify(
    FindOnePromptSnippet2PromptSnippetsResponse2$outboundSchema.parse(
      findOnePromptSnippet2PromptSnippetsResponse2,
    ),
  );
}

export function findOnePromptSnippet2PromptSnippetsResponse2FromJSON(
  jsonString: string,
): SafeParseResult<
  FindOnePromptSnippet2PromptSnippetsResponse2,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      FindOnePromptSnippet2PromptSnippetsResponse2$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'FindOnePromptSnippet2PromptSnippetsResponse2' from JSON`,
  );
}

/** @internal */
export const FindOnePromptSnippet2PromptSnippetsResponse200ApplicationJSONType$inboundSchema:
  z.ZodNativeEnum<
    typeof FindOnePromptSnippet2PromptSnippetsResponse200ApplicationJSONType
  > = z.nativeEnum(
    FindOnePromptSnippet2PromptSnippetsResponse200ApplicationJSONType,
  );

/** @internal */
export const FindOnePromptSnippet2PromptSnippetsResponse200ApplicationJSONType$outboundSchema:
  z.ZodNativeEnum<
    typeof FindOnePromptSnippet2PromptSnippetsResponse200ApplicationJSONType
  > =
    FindOnePromptSnippet2PromptSnippetsResponse200ApplicationJSONType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FindOnePromptSnippet2PromptSnippetsResponse200ApplicationJSONType$ {
  /** @deprecated use `FindOnePromptSnippet2PromptSnippetsResponse200ApplicationJSONType$inboundSchema` instead. */
  export const inboundSchema =
    FindOnePromptSnippet2PromptSnippetsResponse200ApplicationJSONType$inboundSchema;
  /** @deprecated use `FindOnePromptSnippet2PromptSnippetsResponse200ApplicationJSONType$outboundSchema` instead. */
  export const outboundSchema =
    FindOnePromptSnippet2PromptSnippetsResponse200ApplicationJSONType$outboundSchema;
}

/** @internal */
export const FindOnePromptSnippet2PromptSnippetsResponse1$inboundSchema:
  z.ZodType<
    FindOnePromptSnippet2PromptSnippetsResponse1,
    z.ZodTypeDef,
    unknown
  > = z.object({
    type:
      FindOnePromptSnippet2PromptSnippetsResponse200ApplicationJSONType$inboundSchema,
    text: z.string(),
  });

/** @internal */
export type FindOnePromptSnippet2PromptSnippetsResponse1$Outbound = {
  type: string;
  text: string;
};

/** @internal */
export const FindOnePromptSnippet2PromptSnippetsResponse1$outboundSchema:
  z.ZodType<
    FindOnePromptSnippet2PromptSnippetsResponse1$Outbound,
    z.ZodTypeDef,
    FindOnePromptSnippet2PromptSnippetsResponse1
  > = z.object({
    type:
      FindOnePromptSnippet2PromptSnippetsResponse200ApplicationJSONType$outboundSchema,
    text: z.string(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FindOnePromptSnippet2PromptSnippetsResponse1$ {
  /** @deprecated use `FindOnePromptSnippet2PromptSnippetsResponse1$inboundSchema` instead. */
  export const inboundSchema =
    FindOnePromptSnippet2PromptSnippetsResponse1$inboundSchema;
  /** @deprecated use `FindOnePromptSnippet2PromptSnippetsResponse1$outboundSchema` instead. */
  export const outboundSchema =
    FindOnePromptSnippet2PromptSnippetsResponse1$outboundSchema;
  /** @deprecated use `FindOnePromptSnippet2PromptSnippetsResponse1$Outbound` instead. */
  export type Outbound = FindOnePromptSnippet2PromptSnippetsResponse1$Outbound;
}

export function findOnePromptSnippet2PromptSnippetsResponse1ToJSON(
  findOnePromptSnippet2PromptSnippetsResponse1:
    FindOnePromptSnippet2PromptSnippetsResponse1,
): string {
  return JSON.stringify(
    FindOnePromptSnippet2PromptSnippetsResponse1$outboundSchema.parse(
      findOnePromptSnippet2PromptSnippetsResponse1,
    ),
  );
}

export function findOnePromptSnippet2PromptSnippetsResponse1FromJSON(
  jsonString: string,
): SafeParseResult<
  FindOnePromptSnippet2PromptSnippetsResponse1,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      FindOnePromptSnippet2PromptSnippetsResponse1$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'FindOnePromptSnippet2PromptSnippetsResponse1' from JSON`,
  );
}

/** @internal */
export const FindOnePromptSnippetContentPromptSnippetsResponse2$inboundSchema:
  z.ZodType<
    FindOnePromptSnippetContentPromptSnippetsResponse2,
    z.ZodTypeDef,
    unknown
  > = z.union([
    z.lazy(() => FindOnePromptSnippet2PromptSnippetsResponse1$inboundSchema),
    z.lazy(() => FindOnePromptSnippet2PromptSnippetsResponse2$inboundSchema),
  ]);

/** @internal */
export type FindOnePromptSnippetContentPromptSnippetsResponse2$Outbound =
  | FindOnePromptSnippet2PromptSnippetsResponse1$Outbound
  | FindOnePromptSnippet2PromptSnippetsResponse2$Outbound;

/** @internal */
export const FindOnePromptSnippetContentPromptSnippetsResponse2$outboundSchema:
  z.ZodType<
    FindOnePromptSnippetContentPromptSnippetsResponse2$Outbound,
    z.ZodTypeDef,
    FindOnePromptSnippetContentPromptSnippetsResponse2
  > = z.union([
    z.lazy(() => FindOnePromptSnippet2PromptSnippetsResponse1$outboundSchema),
    z.lazy(() => FindOnePromptSnippet2PromptSnippetsResponse2$outboundSchema),
  ]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FindOnePromptSnippetContentPromptSnippetsResponse2$ {
  /** @deprecated use `FindOnePromptSnippetContentPromptSnippetsResponse2$inboundSchema` instead. */
  export const inboundSchema =
    FindOnePromptSnippetContentPromptSnippetsResponse2$inboundSchema;
  /** @deprecated use `FindOnePromptSnippetContentPromptSnippetsResponse2$outboundSchema` instead. */
  export const outboundSchema =
    FindOnePromptSnippetContentPromptSnippetsResponse2$outboundSchema;
  /** @deprecated use `FindOnePromptSnippetContentPromptSnippetsResponse2$Outbound` instead. */
  export type Outbound =
    FindOnePromptSnippetContentPromptSnippetsResponse2$Outbound;
}

export function findOnePromptSnippetContentPromptSnippetsResponse2ToJSON(
  findOnePromptSnippetContentPromptSnippetsResponse2:
    FindOnePromptSnippetContentPromptSnippetsResponse2,
): string {
  return JSON.stringify(
    FindOnePromptSnippetContentPromptSnippetsResponse2$outboundSchema.parse(
      findOnePromptSnippetContentPromptSnippetsResponse2,
    ),
  );
}

export function findOnePromptSnippetContentPromptSnippetsResponse2FromJSON(
  jsonString: string,
): SafeParseResult<
  FindOnePromptSnippetContentPromptSnippetsResponse2,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      FindOnePromptSnippetContentPromptSnippetsResponse2$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'FindOnePromptSnippetContentPromptSnippetsResponse2' from JSON`,
  );
}

/** @internal */
export const FindOnePromptSnippetResponseBodyPromptSnippetsContent$inboundSchema:
  z.ZodType<
    FindOnePromptSnippetResponseBodyPromptSnippetsContent,
    z.ZodTypeDef,
    unknown
  > = z.union([
    z.string(),
    z.array(z.union([
      z.lazy(() => FindOnePromptSnippet2PromptSnippetsResponse1$inboundSchema),
      z.lazy(() =>
        FindOnePromptSnippet2PromptSnippetsResponse2$inboundSchema
      ),
    ])),
  ]);

/** @internal */
export type FindOnePromptSnippetResponseBodyPromptSnippetsContent$Outbound =
  | string
  | Array<
    | FindOnePromptSnippet2PromptSnippetsResponse1$Outbound
    | FindOnePromptSnippet2PromptSnippetsResponse2$Outbound
  >;

/** @internal */
export const FindOnePromptSnippetResponseBodyPromptSnippetsContent$outboundSchema:
  z.ZodType<
    FindOnePromptSnippetResponseBodyPromptSnippetsContent$Outbound,
    z.ZodTypeDef,
    FindOnePromptSnippetResponseBodyPromptSnippetsContent
  > = z.union([
    z.string(),
    z.array(z.union([
      z.lazy(() => FindOnePromptSnippet2PromptSnippetsResponse1$outboundSchema),
      z.lazy(() =>
        FindOnePromptSnippet2PromptSnippetsResponse2$outboundSchema
      ),
    ])),
  ]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FindOnePromptSnippetResponseBodyPromptSnippetsContent$ {
  /** @deprecated use `FindOnePromptSnippetResponseBodyPromptSnippetsContent$inboundSchema` instead. */
  export const inboundSchema =
    FindOnePromptSnippetResponseBodyPromptSnippetsContent$inboundSchema;
  /** @deprecated use `FindOnePromptSnippetResponseBodyPromptSnippetsContent$outboundSchema` instead. */
  export const outboundSchema =
    FindOnePromptSnippetResponseBodyPromptSnippetsContent$outboundSchema;
  /** @deprecated use `FindOnePromptSnippetResponseBodyPromptSnippetsContent$Outbound` instead. */
  export type Outbound =
    FindOnePromptSnippetResponseBodyPromptSnippetsContent$Outbound;
}

export function findOnePromptSnippetResponseBodyPromptSnippetsContentToJSON(
  findOnePromptSnippetResponseBodyPromptSnippetsContent:
    FindOnePromptSnippetResponseBodyPromptSnippetsContent,
): string {
  return JSON.stringify(
    FindOnePromptSnippetResponseBodyPromptSnippetsContent$outboundSchema.parse(
      findOnePromptSnippetResponseBodyPromptSnippetsContent,
    ),
  );
}

export function findOnePromptSnippetResponseBodyPromptSnippetsContentFromJSON(
  jsonString: string,
): SafeParseResult<
  FindOnePromptSnippetResponseBodyPromptSnippetsContent,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      FindOnePromptSnippetResponseBodyPromptSnippetsContent$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'FindOnePromptSnippetResponseBodyPromptSnippetsContent' from JSON`,
  );
}

/** @internal */
export const FindOnePromptSnippetResponseBodyPromptSnippetsResponse200Type$inboundSchema:
  z.ZodNativeEnum<
    typeof FindOnePromptSnippetResponseBodyPromptSnippetsResponse200Type
  > = z.nativeEnum(
    FindOnePromptSnippetResponseBodyPromptSnippetsResponse200Type,
  );

/** @internal */
export const FindOnePromptSnippetResponseBodyPromptSnippetsResponse200Type$outboundSchema:
  z.ZodNativeEnum<
    typeof FindOnePromptSnippetResponseBodyPromptSnippetsResponse200Type
  > =
    FindOnePromptSnippetResponseBodyPromptSnippetsResponse200Type$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FindOnePromptSnippetResponseBodyPromptSnippetsResponse200Type$ {
  /** @deprecated use `FindOnePromptSnippetResponseBodyPromptSnippetsResponse200Type$inboundSchema` instead. */
  export const inboundSchema =
    FindOnePromptSnippetResponseBodyPromptSnippetsResponse200Type$inboundSchema;
  /** @deprecated use `FindOnePromptSnippetResponseBodyPromptSnippetsResponse200Type$outboundSchema` instead. */
  export const outboundSchema =
    FindOnePromptSnippetResponseBodyPromptSnippetsResponse200Type$outboundSchema;
}

/** @internal */
export const FindOnePromptSnippetResponseBodyPromptSnippetsFunction$inboundSchema:
  z.ZodType<
    FindOnePromptSnippetResponseBodyPromptSnippetsFunction,
    z.ZodTypeDef,
    unknown
  > = z.object({
    name: z.string(),
    arguments: z.string(),
  });

/** @internal */
export type FindOnePromptSnippetResponseBodyPromptSnippetsFunction$Outbound = {
  name: string;
  arguments: string;
};

/** @internal */
export const FindOnePromptSnippetResponseBodyPromptSnippetsFunction$outboundSchema:
  z.ZodType<
    FindOnePromptSnippetResponseBodyPromptSnippetsFunction$Outbound,
    z.ZodTypeDef,
    FindOnePromptSnippetResponseBodyPromptSnippetsFunction
  > = z.object({
    name: z.string(),
    arguments: z.string(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FindOnePromptSnippetResponseBodyPromptSnippetsFunction$ {
  /** @deprecated use `FindOnePromptSnippetResponseBodyPromptSnippetsFunction$inboundSchema` instead. */
  export const inboundSchema =
    FindOnePromptSnippetResponseBodyPromptSnippetsFunction$inboundSchema;
  /** @deprecated use `FindOnePromptSnippetResponseBodyPromptSnippetsFunction$outboundSchema` instead. */
  export const outboundSchema =
    FindOnePromptSnippetResponseBodyPromptSnippetsFunction$outboundSchema;
  /** @deprecated use `FindOnePromptSnippetResponseBodyPromptSnippetsFunction$Outbound` instead. */
  export type Outbound =
    FindOnePromptSnippetResponseBodyPromptSnippetsFunction$Outbound;
}

export function findOnePromptSnippetResponseBodyPromptSnippetsFunctionToJSON(
  findOnePromptSnippetResponseBodyPromptSnippetsFunction:
    FindOnePromptSnippetResponseBodyPromptSnippetsFunction,
): string {
  return JSON.stringify(
    FindOnePromptSnippetResponseBodyPromptSnippetsFunction$outboundSchema.parse(
      findOnePromptSnippetResponseBodyPromptSnippetsFunction,
    ),
  );
}

export function findOnePromptSnippetResponseBodyPromptSnippetsFunctionFromJSON(
  jsonString: string,
): SafeParseResult<
  FindOnePromptSnippetResponseBodyPromptSnippetsFunction,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      FindOnePromptSnippetResponseBodyPromptSnippetsFunction$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'FindOnePromptSnippetResponseBodyPromptSnippetsFunction' from JSON`,
  );
}

/** @internal */
export const FindOnePromptSnippetResponseBodyPromptSnippetsToolCalls$inboundSchema:
  z.ZodType<
    FindOnePromptSnippetResponseBodyPromptSnippetsToolCalls,
    z.ZodTypeDef,
    unknown
  > = z.object({
    id: z.string().optional(),
    index: z.number().optional(),
    type:
      FindOnePromptSnippetResponseBodyPromptSnippetsResponse200Type$inboundSchema,
    function: z.lazy(() =>
      FindOnePromptSnippetResponseBodyPromptSnippetsFunction$inboundSchema
    ),
  });

/** @internal */
export type FindOnePromptSnippetResponseBodyPromptSnippetsToolCalls$Outbound = {
  id?: string | undefined;
  index?: number | undefined;
  type: string;
  function: FindOnePromptSnippetResponseBodyPromptSnippetsFunction$Outbound;
};

/** @internal */
export const FindOnePromptSnippetResponseBodyPromptSnippetsToolCalls$outboundSchema:
  z.ZodType<
    FindOnePromptSnippetResponseBodyPromptSnippetsToolCalls$Outbound,
    z.ZodTypeDef,
    FindOnePromptSnippetResponseBodyPromptSnippetsToolCalls
  > = z.object({
    id: z.string().optional(),
    index: z.number().optional(),
    type:
      FindOnePromptSnippetResponseBodyPromptSnippetsResponse200Type$outboundSchema,
    function: z.lazy(() =>
      FindOnePromptSnippetResponseBodyPromptSnippetsFunction$outboundSchema
    ),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FindOnePromptSnippetResponseBodyPromptSnippetsToolCalls$ {
  /** @deprecated use `FindOnePromptSnippetResponseBodyPromptSnippetsToolCalls$inboundSchema` instead. */
  export const inboundSchema =
    FindOnePromptSnippetResponseBodyPromptSnippetsToolCalls$inboundSchema;
  /** @deprecated use `FindOnePromptSnippetResponseBodyPromptSnippetsToolCalls$outboundSchema` instead. */
  export const outboundSchema =
    FindOnePromptSnippetResponseBodyPromptSnippetsToolCalls$outboundSchema;
  /** @deprecated use `FindOnePromptSnippetResponseBodyPromptSnippetsToolCalls$Outbound` instead. */
  export type Outbound =
    FindOnePromptSnippetResponseBodyPromptSnippetsToolCalls$Outbound;
}

export function findOnePromptSnippetResponseBodyPromptSnippetsToolCallsToJSON(
  findOnePromptSnippetResponseBodyPromptSnippetsToolCalls:
    FindOnePromptSnippetResponseBodyPromptSnippetsToolCalls,
): string {
  return JSON.stringify(
    FindOnePromptSnippetResponseBodyPromptSnippetsToolCalls$outboundSchema
      .parse(findOnePromptSnippetResponseBodyPromptSnippetsToolCalls),
  );
}

export function findOnePromptSnippetResponseBodyPromptSnippetsToolCallsFromJSON(
  jsonString: string,
): SafeParseResult<
  FindOnePromptSnippetResponseBodyPromptSnippetsToolCalls,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      FindOnePromptSnippetResponseBodyPromptSnippetsToolCalls$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'FindOnePromptSnippetResponseBodyPromptSnippetsToolCalls' from JSON`,
  );
}

/** @internal */
export const FindOnePromptSnippetResponseBodyPromptSnippetsMessages$inboundSchema:
  z.ZodType<
    FindOnePromptSnippetResponseBodyPromptSnippetsMessages,
    z.ZodTypeDef,
    unknown
  > = z.object({
    role: FindOnePromptSnippetResponseBodyPromptSnippetsRole$inboundSchema,
    content: z.union([
      z.string(),
      z.array(z.union([
        z.lazy(() =>
          FindOnePromptSnippet2PromptSnippetsResponse1$inboundSchema
        ),
        z.lazy(() =>
          FindOnePromptSnippet2PromptSnippetsResponse2$inboundSchema
        ),
      ])),
    ]),
    tool_calls: z.array(
      z.lazy(() =>
        FindOnePromptSnippetResponseBodyPromptSnippetsToolCalls$inboundSchema
      ),
    ).optional(),
  }).transform((v) => {
    return remap$(v, {
      "tool_calls": "toolCalls",
    });
  });

/** @internal */
export type FindOnePromptSnippetResponseBodyPromptSnippetsMessages$Outbound = {
  role: string;
  content:
    | string
    | Array<
      | FindOnePromptSnippet2PromptSnippetsResponse1$Outbound
      | FindOnePromptSnippet2PromptSnippetsResponse2$Outbound
    >;
  tool_calls?:
    | Array<FindOnePromptSnippetResponseBodyPromptSnippetsToolCalls$Outbound>
    | undefined;
};

/** @internal */
export const FindOnePromptSnippetResponseBodyPromptSnippetsMessages$outboundSchema:
  z.ZodType<
    FindOnePromptSnippetResponseBodyPromptSnippetsMessages$Outbound,
    z.ZodTypeDef,
    FindOnePromptSnippetResponseBodyPromptSnippetsMessages
  > = z.object({
    role: FindOnePromptSnippetResponseBodyPromptSnippetsRole$outboundSchema,
    content: z.union([
      z.string(),
      z.array(z.union([
        z.lazy(() =>
          FindOnePromptSnippet2PromptSnippetsResponse1$outboundSchema
        ),
        z.lazy(() =>
          FindOnePromptSnippet2PromptSnippetsResponse2$outboundSchema
        ),
      ])),
    ]),
    toolCalls: z.array(
      z.lazy(() =>
        FindOnePromptSnippetResponseBodyPromptSnippetsToolCalls$outboundSchema
      ),
    ).optional(),
  }).transform((v) => {
    return remap$(v, {
      toolCalls: "tool_calls",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FindOnePromptSnippetResponseBodyPromptSnippetsMessages$ {
  /** @deprecated use `FindOnePromptSnippetResponseBodyPromptSnippetsMessages$inboundSchema` instead. */
  export const inboundSchema =
    FindOnePromptSnippetResponseBodyPromptSnippetsMessages$inboundSchema;
  /** @deprecated use `FindOnePromptSnippetResponseBodyPromptSnippetsMessages$outboundSchema` instead. */
  export const outboundSchema =
    FindOnePromptSnippetResponseBodyPromptSnippetsMessages$outboundSchema;
  /** @deprecated use `FindOnePromptSnippetResponseBodyPromptSnippetsMessages$Outbound` instead. */
  export type Outbound =
    FindOnePromptSnippetResponseBodyPromptSnippetsMessages$Outbound;
}

export function findOnePromptSnippetResponseBodyPromptSnippetsMessagesToJSON(
  findOnePromptSnippetResponseBodyPromptSnippetsMessages:
    FindOnePromptSnippetResponseBodyPromptSnippetsMessages,
): string {
  return JSON.stringify(
    FindOnePromptSnippetResponseBodyPromptSnippetsMessages$outboundSchema.parse(
      findOnePromptSnippetResponseBodyPromptSnippetsMessages,
    ),
  );
}

export function findOnePromptSnippetResponseBodyPromptSnippetsMessagesFromJSON(
  jsonString: string,
): SafeParseResult<
  FindOnePromptSnippetResponseBodyPromptSnippetsMessages,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      FindOnePromptSnippetResponseBodyPromptSnippetsMessages$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'FindOnePromptSnippetResponseBodyPromptSnippetsMessages' from JSON`,
  );
}

/** @internal */
export const FindOnePromptSnippetResponseBodyPromptSnippetsPromptConfig$inboundSchema:
  z.ZodType<
    FindOnePromptSnippetResponseBodyPromptSnippetsPromptConfig,
    z.ZodTypeDef,
    unknown
  > = z.object({
    stream: z.boolean().optional(),
    model: z.string().optional(),
    model_db_id: z.string().optional(),
    model_type:
      FindOnePromptSnippetResponseBodyPromptSnippetsModelType$inboundSchema
        .optional(),
    model_parameters: z.lazy(() =>
      FindOnePromptSnippetResponseBodyPromptSnippetsModelParameters$inboundSchema
    ).optional(),
    provider:
      FindOnePromptSnippetResponseBodyPromptSnippetsProvider$inboundSchema
        .optional(),
    integration_id: z.nullable(z.string()).optional(),
    version: z.string().optional(),
    messages: z.array(
      z.lazy(() =>
        FindOnePromptSnippetResponseBodyPromptSnippetsMessages$inboundSchema
      ),
    ),
  }).transform((v) => {
    return remap$(v, {
      "model_db_id": "modelDbId",
      "model_type": "modelType",
      "model_parameters": "modelParameters",
      "integration_id": "integrationId",
    });
  });

/** @internal */
export type FindOnePromptSnippetResponseBodyPromptSnippetsPromptConfig$Outbound =
  {
    stream?: boolean | undefined;
    model?: string | undefined;
    model_db_id?: string | undefined;
    model_type?: string | undefined;
    model_parameters?:
      | FindOnePromptSnippetResponseBodyPromptSnippetsModelParameters$Outbound
      | undefined;
    provider?: string | undefined;
    integration_id?: string | null | undefined;
    version?: string | undefined;
    messages: Array<
      FindOnePromptSnippetResponseBodyPromptSnippetsMessages$Outbound
    >;
  };

/** @internal */
export const FindOnePromptSnippetResponseBodyPromptSnippetsPromptConfig$outboundSchema:
  z.ZodType<
    FindOnePromptSnippetResponseBodyPromptSnippetsPromptConfig$Outbound,
    z.ZodTypeDef,
    FindOnePromptSnippetResponseBodyPromptSnippetsPromptConfig
  > = z.object({
    stream: z.boolean().optional(),
    model: z.string().optional(),
    modelDbId: z.string().optional(),
    modelType:
      FindOnePromptSnippetResponseBodyPromptSnippetsModelType$outboundSchema
        .optional(),
    modelParameters: z.lazy(() =>
      FindOnePromptSnippetResponseBodyPromptSnippetsModelParameters$outboundSchema
    ).optional(),
    provider:
      FindOnePromptSnippetResponseBodyPromptSnippetsProvider$outboundSchema
        .optional(),
    integrationId: z.nullable(z.string()).optional(),
    version: z.string().optional(),
    messages: z.array(
      z.lazy(() =>
        FindOnePromptSnippetResponseBodyPromptSnippetsMessages$outboundSchema
      ),
    ),
  }).transform((v) => {
    return remap$(v, {
      modelDbId: "model_db_id",
      modelType: "model_type",
      modelParameters: "model_parameters",
      integrationId: "integration_id",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FindOnePromptSnippetResponseBodyPromptSnippetsPromptConfig$ {
  /** @deprecated use `FindOnePromptSnippetResponseBodyPromptSnippetsPromptConfig$inboundSchema` instead. */
  export const inboundSchema =
    FindOnePromptSnippetResponseBodyPromptSnippetsPromptConfig$inboundSchema;
  /** @deprecated use `FindOnePromptSnippetResponseBodyPromptSnippetsPromptConfig$outboundSchema` instead. */
  export const outboundSchema =
    FindOnePromptSnippetResponseBodyPromptSnippetsPromptConfig$outboundSchema;
  /** @deprecated use `FindOnePromptSnippetResponseBodyPromptSnippetsPromptConfig$Outbound` instead. */
  export type Outbound =
    FindOnePromptSnippetResponseBodyPromptSnippetsPromptConfig$Outbound;
}

export function findOnePromptSnippetResponseBodyPromptSnippetsPromptConfigToJSON(
  findOnePromptSnippetResponseBodyPromptSnippetsPromptConfig:
    FindOnePromptSnippetResponseBodyPromptSnippetsPromptConfig,
): string {
  return JSON.stringify(
    FindOnePromptSnippetResponseBodyPromptSnippetsPromptConfig$outboundSchema
      .parse(findOnePromptSnippetResponseBodyPromptSnippetsPromptConfig),
  );
}

export function findOnePromptSnippetResponseBodyPromptSnippetsPromptConfigFromJSON(
  jsonString: string,
): SafeParseResult<
  FindOnePromptSnippetResponseBodyPromptSnippetsPromptConfig,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      FindOnePromptSnippetResponseBodyPromptSnippetsPromptConfig$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'FindOnePromptSnippetResponseBodyPromptSnippetsPromptConfig' from JSON`,
  );
}

/** @internal */
export const FindOnePromptSnippetResponseBodyPromptSnippetsMetadata$inboundSchema:
  z.ZodType<
    FindOnePromptSnippetResponseBodyPromptSnippetsMetadata,
    z.ZodTypeDef,
    unknown
  > = z.object({
    use_cases: z.array(z.string()).optional(),
    language: z.string().optional(),
  }).transform((v) => {
    return remap$(v, {
      "use_cases": "useCases",
    });
  });

/** @internal */
export type FindOnePromptSnippetResponseBodyPromptSnippetsMetadata$Outbound = {
  use_cases?: Array<string> | undefined;
  language?: string | undefined;
};

/** @internal */
export const FindOnePromptSnippetResponseBodyPromptSnippetsMetadata$outboundSchema:
  z.ZodType<
    FindOnePromptSnippetResponseBodyPromptSnippetsMetadata$Outbound,
    z.ZodTypeDef,
    FindOnePromptSnippetResponseBodyPromptSnippetsMetadata
  > = z.object({
    useCases: z.array(z.string()).optional(),
    language: z.string().optional(),
  }).transform((v) => {
    return remap$(v, {
      useCases: "use_cases",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FindOnePromptSnippetResponseBodyPromptSnippetsMetadata$ {
  /** @deprecated use `FindOnePromptSnippetResponseBodyPromptSnippetsMetadata$inboundSchema` instead. */
  export const inboundSchema =
    FindOnePromptSnippetResponseBodyPromptSnippetsMetadata$inboundSchema;
  /** @deprecated use `FindOnePromptSnippetResponseBodyPromptSnippetsMetadata$outboundSchema` instead. */
  export const outboundSchema =
    FindOnePromptSnippetResponseBodyPromptSnippetsMetadata$outboundSchema;
  /** @deprecated use `FindOnePromptSnippetResponseBodyPromptSnippetsMetadata$Outbound` instead. */
  export type Outbound =
    FindOnePromptSnippetResponseBodyPromptSnippetsMetadata$Outbound;
}

export function findOnePromptSnippetResponseBodyPromptSnippetsMetadataToJSON(
  findOnePromptSnippetResponseBodyPromptSnippetsMetadata:
    FindOnePromptSnippetResponseBodyPromptSnippetsMetadata,
): string {
  return JSON.stringify(
    FindOnePromptSnippetResponseBodyPromptSnippetsMetadata$outboundSchema.parse(
      findOnePromptSnippetResponseBodyPromptSnippetsMetadata,
    ),
  );
}

export function findOnePromptSnippetResponseBodyPromptSnippetsMetadataFromJSON(
  jsonString: string,
): SafeParseResult<
  FindOnePromptSnippetResponseBodyPromptSnippetsMetadata,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      FindOnePromptSnippetResponseBodyPromptSnippetsMetadata$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'FindOnePromptSnippetResponseBodyPromptSnippetsMetadata' from JSON`,
  );
}

/** @internal */
export const FindOnePromptSnippetResponseBodyPromptSnippetsResponse200ApplicationJSONModelType$inboundSchema:
  z.ZodNativeEnum<
    typeof FindOnePromptSnippetResponseBodyPromptSnippetsResponse200ApplicationJSONModelType
  > = z.nativeEnum(
    FindOnePromptSnippetResponseBodyPromptSnippetsResponse200ApplicationJSONModelType,
  );

/** @internal */
export const FindOnePromptSnippetResponseBodyPromptSnippetsResponse200ApplicationJSONModelType$outboundSchema:
  z.ZodNativeEnum<
    typeof FindOnePromptSnippetResponseBodyPromptSnippetsResponse200ApplicationJSONModelType
  > =
    FindOnePromptSnippetResponseBodyPromptSnippetsResponse200ApplicationJSONModelType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FindOnePromptSnippetResponseBodyPromptSnippetsResponse200ApplicationJSONModelType$ {
  /** @deprecated use `FindOnePromptSnippetResponseBodyPromptSnippetsResponse200ApplicationJSONModelType$inboundSchema` instead. */
  export const inboundSchema =
    FindOnePromptSnippetResponseBodyPromptSnippetsResponse200ApplicationJSONModelType$inboundSchema;
  /** @deprecated use `FindOnePromptSnippetResponseBodyPromptSnippetsResponse200ApplicationJSONModelType$outboundSchema` instead. */
  export const outboundSchema =
    FindOnePromptSnippetResponseBodyPromptSnippetsResponse200ApplicationJSONModelType$outboundSchema;
}

/** @internal */
export const FindOnePromptSnippetResponseBodyPromptSnippetsResponse200ApplicationJson3Format$inboundSchema:
  z.ZodNativeEnum<
    typeof FindOnePromptSnippetResponseBodyPromptSnippetsResponse200ApplicationJson3Format
  > = z.nativeEnum(
    FindOnePromptSnippetResponseBodyPromptSnippetsResponse200ApplicationJson3Format,
  );

/** @internal */
export const FindOnePromptSnippetResponseBodyPromptSnippetsResponse200ApplicationJson3Format$outboundSchema:
  z.ZodNativeEnum<
    typeof FindOnePromptSnippetResponseBodyPromptSnippetsResponse200ApplicationJson3Format
  > =
    FindOnePromptSnippetResponseBodyPromptSnippetsResponse200ApplicationJson3Format$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FindOnePromptSnippetResponseBodyPromptSnippetsResponse200ApplicationJson3Format$ {
  /** @deprecated use `FindOnePromptSnippetResponseBodyPromptSnippetsResponse200ApplicationJson3Format$inboundSchema` instead. */
  export const inboundSchema =
    FindOnePromptSnippetResponseBodyPromptSnippetsResponse200ApplicationJson3Format$inboundSchema;
  /** @deprecated use `FindOnePromptSnippetResponseBodyPromptSnippetsResponse200ApplicationJson3Format$outboundSchema` instead. */
  export const outboundSchema =
    FindOnePromptSnippetResponseBodyPromptSnippetsResponse200ApplicationJson3Format$outboundSchema;
}

/** @internal */
export const FindOnePromptSnippetResponseBodyPromptSnippetsResponse200ApplicationJSONQuality$inboundSchema:
  z.ZodNativeEnum<
    typeof FindOnePromptSnippetResponseBodyPromptSnippetsResponse200ApplicationJSONQuality
  > = z.nativeEnum(
    FindOnePromptSnippetResponseBodyPromptSnippetsResponse200ApplicationJSONQuality,
  );

/** @internal */
export const FindOnePromptSnippetResponseBodyPromptSnippetsResponse200ApplicationJSONQuality$outboundSchema:
  z.ZodNativeEnum<
    typeof FindOnePromptSnippetResponseBodyPromptSnippetsResponse200ApplicationJSONQuality
  > =
    FindOnePromptSnippetResponseBodyPromptSnippetsResponse200ApplicationJSONQuality$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FindOnePromptSnippetResponseBodyPromptSnippetsResponse200ApplicationJSONQuality$ {
  /** @deprecated use `FindOnePromptSnippetResponseBodyPromptSnippetsResponse200ApplicationJSONQuality$inboundSchema` instead. */
  export const inboundSchema =
    FindOnePromptSnippetResponseBodyPromptSnippetsResponse200ApplicationJSONQuality$inboundSchema;
  /** @deprecated use `FindOnePromptSnippetResponseBodyPromptSnippetsResponse200ApplicationJSONQuality$outboundSchema` instead. */
  export const outboundSchema =
    FindOnePromptSnippetResponseBodyPromptSnippetsResponse200ApplicationJSONQuality$outboundSchema;
}

/** @internal */
export const FindOnePromptSnippetResponseFormatPromptSnippetsResponse200ApplicationJSONResponseBody3VersionsType$inboundSchema:
  z.ZodNativeEnum<
    typeof FindOnePromptSnippetResponseFormatPromptSnippetsResponse200ApplicationJSONResponseBody3VersionsType
  > = z.nativeEnum(
    FindOnePromptSnippetResponseFormatPromptSnippetsResponse200ApplicationJSONResponseBody3VersionsType,
  );

/** @internal */
export const FindOnePromptSnippetResponseFormatPromptSnippetsResponse200ApplicationJSONResponseBody3VersionsType$outboundSchema:
  z.ZodNativeEnum<
    typeof FindOnePromptSnippetResponseFormatPromptSnippetsResponse200ApplicationJSONResponseBody3VersionsType
  > =
    FindOnePromptSnippetResponseFormatPromptSnippetsResponse200ApplicationJSONResponseBody3VersionsType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FindOnePromptSnippetResponseFormatPromptSnippetsResponse200ApplicationJSONResponseBody3VersionsType$ {
  /** @deprecated use `FindOnePromptSnippetResponseFormatPromptSnippetsResponse200ApplicationJSONResponseBody3VersionsType$inboundSchema` instead. */
  export const inboundSchema =
    FindOnePromptSnippetResponseFormatPromptSnippetsResponse200ApplicationJSONResponseBody3VersionsType$inboundSchema;
  /** @deprecated use `FindOnePromptSnippetResponseFormatPromptSnippetsResponse200ApplicationJSONResponseBody3VersionsType$outboundSchema` instead. */
  export const outboundSchema =
    FindOnePromptSnippetResponseFormatPromptSnippetsResponse200ApplicationJSONResponseBody3VersionsType$outboundSchema;
}

/** @internal */
export const FindOnePromptSnippetResponseFormatPromptSnippetsResponse200ApplicationJSONResponseBody2$inboundSchema:
  z.ZodType<
    FindOnePromptSnippetResponseFormatPromptSnippetsResponse200ApplicationJSONResponseBody2,
    z.ZodTypeDef,
    unknown
  > = z.object({
    type:
      FindOnePromptSnippetResponseFormatPromptSnippetsResponse200ApplicationJSONResponseBody3VersionsType$inboundSchema,
  });

/** @internal */
export type FindOnePromptSnippetResponseFormatPromptSnippetsResponse200ApplicationJSONResponseBody2$Outbound =
  {
    type: string;
  };

/** @internal */
export const FindOnePromptSnippetResponseFormatPromptSnippetsResponse200ApplicationJSONResponseBody2$outboundSchema:
  z.ZodType<
    FindOnePromptSnippetResponseFormatPromptSnippetsResponse200ApplicationJSONResponseBody2$Outbound,
    z.ZodTypeDef,
    FindOnePromptSnippetResponseFormatPromptSnippetsResponse200ApplicationJSONResponseBody2
  > = z.object({
    type:
      FindOnePromptSnippetResponseFormatPromptSnippetsResponse200ApplicationJSONResponseBody3VersionsType$outboundSchema,
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FindOnePromptSnippetResponseFormatPromptSnippetsResponse200ApplicationJSONResponseBody2$ {
  /** @deprecated use `FindOnePromptSnippetResponseFormatPromptSnippetsResponse200ApplicationJSONResponseBody2$inboundSchema` instead. */
  export const inboundSchema =
    FindOnePromptSnippetResponseFormatPromptSnippetsResponse200ApplicationJSONResponseBody2$inboundSchema;
  /** @deprecated use `FindOnePromptSnippetResponseFormatPromptSnippetsResponse200ApplicationJSONResponseBody2$outboundSchema` instead. */
  export const outboundSchema =
    FindOnePromptSnippetResponseFormatPromptSnippetsResponse200ApplicationJSONResponseBody2$outboundSchema;
  /** @deprecated use `FindOnePromptSnippetResponseFormatPromptSnippetsResponse200ApplicationJSONResponseBody2$Outbound` instead. */
  export type Outbound =
    FindOnePromptSnippetResponseFormatPromptSnippetsResponse200ApplicationJSONResponseBody2$Outbound;
}

export function findOnePromptSnippetResponseFormatPromptSnippetsResponse200ApplicationJSONResponseBody2ToJSON(
  findOnePromptSnippetResponseFormatPromptSnippetsResponse200ApplicationJSONResponseBody2:
    FindOnePromptSnippetResponseFormatPromptSnippetsResponse200ApplicationJSONResponseBody2,
): string {
  return JSON.stringify(
    FindOnePromptSnippetResponseFormatPromptSnippetsResponse200ApplicationJSONResponseBody2$outboundSchema
      .parse(
        findOnePromptSnippetResponseFormatPromptSnippetsResponse200ApplicationJSONResponseBody2,
      ),
  );
}

export function findOnePromptSnippetResponseFormatPromptSnippetsResponse200ApplicationJSONResponseBody2FromJSON(
  jsonString: string,
): SafeParseResult<
  FindOnePromptSnippetResponseFormatPromptSnippetsResponse200ApplicationJSONResponseBody2,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      FindOnePromptSnippetResponseFormatPromptSnippetsResponse200ApplicationJSONResponseBody2$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'FindOnePromptSnippetResponseFormatPromptSnippetsResponse200ApplicationJSONResponseBody2' from JSON`,
  );
}

/** @internal */
export const FindOnePromptSnippetResponseFormatPromptSnippetsResponse200ApplicationJSONResponseBody3Type$inboundSchema:
  z.ZodNativeEnum<
    typeof FindOnePromptSnippetResponseFormatPromptSnippetsResponse200ApplicationJSONResponseBody3Type
  > = z.nativeEnum(
    FindOnePromptSnippetResponseFormatPromptSnippetsResponse200ApplicationJSONResponseBody3Type,
  );

/** @internal */
export const FindOnePromptSnippetResponseFormatPromptSnippetsResponse200ApplicationJSONResponseBody3Type$outboundSchema:
  z.ZodNativeEnum<
    typeof FindOnePromptSnippetResponseFormatPromptSnippetsResponse200ApplicationJSONResponseBody3Type
  > =
    FindOnePromptSnippetResponseFormatPromptSnippetsResponse200ApplicationJSONResponseBody3Type$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FindOnePromptSnippetResponseFormatPromptSnippetsResponse200ApplicationJSONResponseBody3Type$ {
  /** @deprecated use `FindOnePromptSnippetResponseFormatPromptSnippetsResponse200ApplicationJSONResponseBody3Type$inboundSchema` instead. */
  export const inboundSchema =
    FindOnePromptSnippetResponseFormatPromptSnippetsResponse200ApplicationJSONResponseBody3Type$inboundSchema;
  /** @deprecated use `FindOnePromptSnippetResponseFormatPromptSnippetsResponse200ApplicationJSONResponseBody3Type$outboundSchema` instead. */
  export const outboundSchema =
    FindOnePromptSnippetResponseFormatPromptSnippetsResponse200ApplicationJSONResponseBody3Type$outboundSchema;
}

/** @internal */
export const FindOnePromptSnippetResponseFormatPromptSnippetsResponse200ApplicationJSONResponseBodyJSONSchema$inboundSchema:
  z.ZodType<
    FindOnePromptSnippetResponseFormatPromptSnippetsResponse200ApplicationJSONResponseBodyJSONSchema,
    z.ZodTypeDef,
    unknown
  > = z.object({
    name: z.string(),
    strict: z.boolean(),
    schema: z.record(z.any()),
  });

/** @internal */
export type FindOnePromptSnippetResponseFormatPromptSnippetsResponse200ApplicationJSONResponseBodyJSONSchema$Outbound =
  {
    name: string;
    strict: boolean;
    schema: { [k: string]: any };
  };

/** @internal */
export const FindOnePromptSnippetResponseFormatPromptSnippetsResponse200ApplicationJSONResponseBodyJSONSchema$outboundSchema:
  z.ZodType<
    FindOnePromptSnippetResponseFormatPromptSnippetsResponse200ApplicationJSONResponseBodyJSONSchema$Outbound,
    z.ZodTypeDef,
    FindOnePromptSnippetResponseFormatPromptSnippetsResponse200ApplicationJSONResponseBodyJSONSchema
  > = z.object({
    name: z.string(),
    strict: z.boolean(),
    schema: z.record(z.any()),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FindOnePromptSnippetResponseFormatPromptSnippetsResponse200ApplicationJSONResponseBodyJSONSchema$ {
  /** @deprecated use `FindOnePromptSnippetResponseFormatPromptSnippetsResponse200ApplicationJSONResponseBodyJSONSchema$inboundSchema` instead. */
  export const inboundSchema =
    FindOnePromptSnippetResponseFormatPromptSnippetsResponse200ApplicationJSONResponseBodyJSONSchema$inboundSchema;
  /** @deprecated use `FindOnePromptSnippetResponseFormatPromptSnippetsResponse200ApplicationJSONResponseBodyJSONSchema$outboundSchema` instead. */
  export const outboundSchema =
    FindOnePromptSnippetResponseFormatPromptSnippetsResponse200ApplicationJSONResponseBodyJSONSchema$outboundSchema;
  /** @deprecated use `FindOnePromptSnippetResponseFormatPromptSnippetsResponse200ApplicationJSONResponseBodyJSONSchema$Outbound` instead. */
  export type Outbound =
    FindOnePromptSnippetResponseFormatPromptSnippetsResponse200ApplicationJSONResponseBodyJSONSchema$Outbound;
}

export function findOnePromptSnippetResponseFormatPromptSnippetsResponse200ApplicationJSONResponseBodyJSONSchemaToJSON(
  findOnePromptSnippetResponseFormatPromptSnippetsResponse200ApplicationJSONResponseBodyJSONSchema:
    FindOnePromptSnippetResponseFormatPromptSnippetsResponse200ApplicationJSONResponseBodyJSONSchema,
): string {
  return JSON.stringify(
    FindOnePromptSnippetResponseFormatPromptSnippetsResponse200ApplicationJSONResponseBodyJSONSchema$outboundSchema
      .parse(
        findOnePromptSnippetResponseFormatPromptSnippetsResponse200ApplicationJSONResponseBodyJSONSchema,
      ),
  );
}

export function findOnePromptSnippetResponseFormatPromptSnippetsResponse200ApplicationJSONResponseBodyJSONSchemaFromJSON(
  jsonString: string,
): SafeParseResult<
  FindOnePromptSnippetResponseFormatPromptSnippetsResponse200ApplicationJSONResponseBodyJSONSchema,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      FindOnePromptSnippetResponseFormatPromptSnippetsResponse200ApplicationJSONResponseBodyJSONSchema$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'FindOnePromptSnippetResponseFormatPromptSnippetsResponse200ApplicationJSONResponseBodyJSONSchema' from JSON`,
  );
}

/** @internal */
export const FindOnePromptSnippetResponseFormatPromptSnippetsResponse200ApplicationJSONResponseBody1$inboundSchema:
  z.ZodType<
    FindOnePromptSnippetResponseFormatPromptSnippetsResponse200ApplicationJSONResponseBody1,
    z.ZodTypeDef,
    unknown
  > = z.object({
    type:
      FindOnePromptSnippetResponseFormatPromptSnippetsResponse200ApplicationJSONResponseBody3Type$inboundSchema,
    json_schema: z.lazy(() =>
      FindOnePromptSnippetResponseFormatPromptSnippetsResponse200ApplicationJSONResponseBodyJSONSchema$inboundSchema
    ),
  }).transform((v) => {
    return remap$(v, {
      "json_schema": "jsonSchema",
    });
  });

/** @internal */
export type FindOnePromptSnippetResponseFormatPromptSnippetsResponse200ApplicationJSONResponseBody1$Outbound =
  {
    type: string;
    json_schema:
      FindOnePromptSnippetResponseFormatPromptSnippetsResponse200ApplicationJSONResponseBodyJSONSchema$Outbound;
  };

/** @internal */
export const FindOnePromptSnippetResponseFormatPromptSnippetsResponse200ApplicationJSONResponseBody1$outboundSchema:
  z.ZodType<
    FindOnePromptSnippetResponseFormatPromptSnippetsResponse200ApplicationJSONResponseBody1$Outbound,
    z.ZodTypeDef,
    FindOnePromptSnippetResponseFormatPromptSnippetsResponse200ApplicationJSONResponseBody1
  > = z.object({
    type:
      FindOnePromptSnippetResponseFormatPromptSnippetsResponse200ApplicationJSONResponseBody3Type$outboundSchema,
    jsonSchema: z.lazy(() =>
      FindOnePromptSnippetResponseFormatPromptSnippetsResponse200ApplicationJSONResponseBodyJSONSchema$outboundSchema
    ),
  }).transform((v) => {
    return remap$(v, {
      jsonSchema: "json_schema",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FindOnePromptSnippetResponseFormatPromptSnippetsResponse200ApplicationJSONResponseBody1$ {
  /** @deprecated use `FindOnePromptSnippetResponseFormatPromptSnippetsResponse200ApplicationJSONResponseBody1$inboundSchema` instead. */
  export const inboundSchema =
    FindOnePromptSnippetResponseFormatPromptSnippetsResponse200ApplicationJSONResponseBody1$inboundSchema;
  /** @deprecated use `FindOnePromptSnippetResponseFormatPromptSnippetsResponse200ApplicationJSONResponseBody1$outboundSchema` instead. */
  export const outboundSchema =
    FindOnePromptSnippetResponseFormatPromptSnippetsResponse200ApplicationJSONResponseBody1$outboundSchema;
  /** @deprecated use `FindOnePromptSnippetResponseFormatPromptSnippetsResponse200ApplicationJSONResponseBody1$Outbound` instead. */
  export type Outbound =
    FindOnePromptSnippetResponseFormatPromptSnippetsResponse200ApplicationJSONResponseBody1$Outbound;
}

export function findOnePromptSnippetResponseFormatPromptSnippetsResponse200ApplicationJSONResponseBody1ToJSON(
  findOnePromptSnippetResponseFormatPromptSnippetsResponse200ApplicationJSONResponseBody1:
    FindOnePromptSnippetResponseFormatPromptSnippetsResponse200ApplicationJSONResponseBody1,
): string {
  return JSON.stringify(
    FindOnePromptSnippetResponseFormatPromptSnippetsResponse200ApplicationJSONResponseBody1$outboundSchema
      .parse(
        findOnePromptSnippetResponseFormatPromptSnippetsResponse200ApplicationJSONResponseBody1,
      ),
  );
}

export function findOnePromptSnippetResponseFormatPromptSnippetsResponse200ApplicationJSONResponseBody1FromJSON(
  jsonString: string,
): SafeParseResult<
  FindOnePromptSnippetResponseFormatPromptSnippetsResponse200ApplicationJSONResponseBody1,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      FindOnePromptSnippetResponseFormatPromptSnippetsResponse200ApplicationJSONResponseBody1$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'FindOnePromptSnippetResponseFormatPromptSnippetsResponse200ApplicationJSONResponseBody1' from JSON`,
  );
}

/** @internal */
export const FindOnePromptSnippetResponseBodyPromptSnippetsResponse200ApplicationJSONResponseFormat$inboundSchema:
  z.ZodType<
    FindOnePromptSnippetResponseBodyPromptSnippetsResponse200ApplicationJSONResponseFormat,
    z.ZodTypeDef,
    unknown
  > = z.union([
    z.lazy(() =>
      FindOnePromptSnippetResponseFormatPromptSnippetsResponse200ApplicationJSONResponseBody2$inboundSchema
    ),
    z.lazy(() =>
      FindOnePromptSnippetResponseFormatPromptSnippetsResponse200ApplicationJSONResponseBody1$inboundSchema
    ),
  ]);

/** @internal */
export type FindOnePromptSnippetResponseBodyPromptSnippetsResponse200ApplicationJSONResponseFormat$Outbound =
  | FindOnePromptSnippetResponseFormatPromptSnippetsResponse200ApplicationJSONResponseBody2$Outbound
  | FindOnePromptSnippetResponseFormatPromptSnippetsResponse200ApplicationJSONResponseBody1$Outbound;

/** @internal */
export const FindOnePromptSnippetResponseBodyPromptSnippetsResponse200ApplicationJSONResponseFormat$outboundSchema:
  z.ZodType<
    FindOnePromptSnippetResponseBodyPromptSnippetsResponse200ApplicationJSONResponseFormat$Outbound,
    z.ZodTypeDef,
    FindOnePromptSnippetResponseBodyPromptSnippetsResponse200ApplicationJSONResponseFormat
  > = z.union([
    z.lazy(() =>
      FindOnePromptSnippetResponseFormatPromptSnippetsResponse200ApplicationJSONResponseBody2$outboundSchema
    ),
    z.lazy(() =>
      FindOnePromptSnippetResponseFormatPromptSnippetsResponse200ApplicationJSONResponseBody1$outboundSchema
    ),
  ]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FindOnePromptSnippetResponseBodyPromptSnippetsResponse200ApplicationJSONResponseFormat$ {
  /** @deprecated use `FindOnePromptSnippetResponseBodyPromptSnippetsResponse200ApplicationJSONResponseFormat$inboundSchema` instead. */
  export const inboundSchema =
    FindOnePromptSnippetResponseBodyPromptSnippetsResponse200ApplicationJSONResponseFormat$inboundSchema;
  /** @deprecated use `FindOnePromptSnippetResponseBodyPromptSnippetsResponse200ApplicationJSONResponseFormat$outboundSchema` instead. */
  export const outboundSchema =
    FindOnePromptSnippetResponseBodyPromptSnippetsResponse200ApplicationJSONResponseFormat$outboundSchema;
  /** @deprecated use `FindOnePromptSnippetResponseBodyPromptSnippetsResponse200ApplicationJSONResponseFormat$Outbound` instead. */
  export type Outbound =
    FindOnePromptSnippetResponseBodyPromptSnippetsResponse200ApplicationJSONResponseFormat$Outbound;
}

export function findOnePromptSnippetResponseBodyPromptSnippetsResponse200ApplicationJSONResponseFormatToJSON(
  findOnePromptSnippetResponseBodyPromptSnippetsResponse200ApplicationJSONResponseFormat:
    FindOnePromptSnippetResponseBodyPromptSnippetsResponse200ApplicationJSONResponseFormat,
): string {
  return JSON.stringify(
    FindOnePromptSnippetResponseBodyPromptSnippetsResponse200ApplicationJSONResponseFormat$outboundSchema
      .parse(
        findOnePromptSnippetResponseBodyPromptSnippetsResponse200ApplicationJSONResponseFormat,
      ),
  );
}

export function findOnePromptSnippetResponseBodyPromptSnippetsResponse200ApplicationJSONResponseFormatFromJSON(
  jsonString: string,
): SafeParseResult<
  FindOnePromptSnippetResponseBodyPromptSnippetsResponse200ApplicationJSONResponseFormat,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      FindOnePromptSnippetResponseBodyPromptSnippetsResponse200ApplicationJSONResponseFormat$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'FindOnePromptSnippetResponseBodyPromptSnippetsResponse200ApplicationJSONResponseFormat' from JSON`,
  );
}

/** @internal */
export const FindOnePromptSnippetResponseBodyPromptSnippetsResponse200ApplicationJSONPhotoRealVersion$inboundSchema:
  z.ZodNativeEnum<
    typeof FindOnePromptSnippetResponseBodyPromptSnippetsResponse200ApplicationJSONPhotoRealVersion
  > = z.nativeEnum(
    FindOnePromptSnippetResponseBodyPromptSnippetsResponse200ApplicationJSONPhotoRealVersion,
  );

/** @internal */
export const FindOnePromptSnippetResponseBodyPromptSnippetsResponse200ApplicationJSONPhotoRealVersion$outboundSchema:
  z.ZodNativeEnum<
    typeof FindOnePromptSnippetResponseBodyPromptSnippetsResponse200ApplicationJSONPhotoRealVersion
  > =
    FindOnePromptSnippetResponseBodyPromptSnippetsResponse200ApplicationJSONPhotoRealVersion$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FindOnePromptSnippetResponseBodyPromptSnippetsResponse200ApplicationJSONPhotoRealVersion$ {
  /** @deprecated use `FindOnePromptSnippetResponseBodyPromptSnippetsResponse200ApplicationJSONPhotoRealVersion$inboundSchema` instead. */
  export const inboundSchema =
    FindOnePromptSnippetResponseBodyPromptSnippetsResponse200ApplicationJSONPhotoRealVersion$inboundSchema;
  /** @deprecated use `FindOnePromptSnippetResponseBodyPromptSnippetsResponse200ApplicationJSONPhotoRealVersion$outboundSchema` instead. */
  export const outboundSchema =
    FindOnePromptSnippetResponseBodyPromptSnippetsResponse200ApplicationJSONPhotoRealVersion$outboundSchema;
}

/** @internal */
export const FindOnePromptSnippetResponseBodyPromptSnippetsResponse200ApplicationJSONEncodingFormat$inboundSchema:
  z.ZodNativeEnum<
    typeof FindOnePromptSnippetResponseBodyPromptSnippetsResponse200ApplicationJSONEncodingFormat
  > = z.nativeEnum(
    FindOnePromptSnippetResponseBodyPromptSnippetsResponse200ApplicationJSONEncodingFormat,
  );

/** @internal */
export const FindOnePromptSnippetResponseBodyPromptSnippetsResponse200ApplicationJSONEncodingFormat$outboundSchema:
  z.ZodNativeEnum<
    typeof FindOnePromptSnippetResponseBodyPromptSnippetsResponse200ApplicationJSONEncodingFormat
  > =
    FindOnePromptSnippetResponseBodyPromptSnippetsResponse200ApplicationJSONEncodingFormat$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FindOnePromptSnippetResponseBodyPromptSnippetsResponse200ApplicationJSONEncodingFormat$ {
  /** @deprecated use `FindOnePromptSnippetResponseBodyPromptSnippetsResponse200ApplicationJSONEncodingFormat$inboundSchema` instead. */
  export const inboundSchema =
    FindOnePromptSnippetResponseBodyPromptSnippetsResponse200ApplicationJSONEncodingFormat$inboundSchema;
  /** @deprecated use `FindOnePromptSnippetResponseBodyPromptSnippetsResponse200ApplicationJSONEncodingFormat$outboundSchema` instead. */
  export const outboundSchema =
    FindOnePromptSnippetResponseBodyPromptSnippetsResponse200ApplicationJSONEncodingFormat$outboundSchema;
}

/** @internal */
export const FindOnePromptSnippetResponseBodyPromptSnippetsResponse200ApplicationJSONModelParameters$inboundSchema:
  z.ZodType<
    FindOnePromptSnippetResponseBodyPromptSnippetsResponse200ApplicationJSONModelParameters,
    z.ZodTypeDef,
    unknown
  > = z.object({
    temperature: z.number().optional(),
    maxTokens: z.number().optional(),
    topK: z.number().optional(),
    topP: z.number().optional(),
    frequencyPenalty: z.number().optional(),
    presencePenalty: z.number().optional(),
    numImages: z.number().optional(),
    seed: z.number().optional(),
    format:
      FindOnePromptSnippetResponseBodyPromptSnippetsResponse200ApplicationJson3Format$inboundSchema
        .optional(),
    dimensions: z.string().optional(),
    quality:
      FindOnePromptSnippetResponseBodyPromptSnippetsResponse200ApplicationJSONQuality$inboundSchema
        .optional(),
    style: z.string().optional(),
    responseFormat: z.nullable(
      z.union([
        z.lazy(() =>
          FindOnePromptSnippetResponseFormatPromptSnippetsResponse200ApplicationJSONResponseBody2$inboundSchema
        ),
        z.lazy(() =>
          FindOnePromptSnippetResponseFormatPromptSnippetsResponse200ApplicationJSONResponseBody1$inboundSchema
        ),
      ]),
    ).optional(),
    photoRealVersion:
      FindOnePromptSnippetResponseBodyPromptSnippetsResponse200ApplicationJSONPhotoRealVersion$inboundSchema
        .optional(),
    encoding_format:
      FindOnePromptSnippetResponseBodyPromptSnippetsResponse200ApplicationJSONEncodingFormat$inboundSchema
        .optional(),
  }).transform((v) => {
    return remap$(v, {
      "encoding_format": "encodingFormat",
    });
  });

/** @internal */
export type FindOnePromptSnippetResponseBodyPromptSnippetsResponse200ApplicationJSONModelParameters$Outbound =
  {
    temperature?: number | undefined;
    maxTokens?: number | undefined;
    topK?: number | undefined;
    topP?: number | undefined;
    frequencyPenalty?: number | undefined;
    presencePenalty?: number | undefined;
    numImages?: number | undefined;
    seed?: number | undefined;
    format?: string | undefined;
    dimensions?: string | undefined;
    quality?: string | undefined;
    style?: string | undefined;
    responseFormat?:
      | FindOnePromptSnippetResponseFormatPromptSnippetsResponse200ApplicationJSONResponseBody2$Outbound
      | FindOnePromptSnippetResponseFormatPromptSnippetsResponse200ApplicationJSONResponseBody1$Outbound
      | null
      | undefined;
    photoRealVersion?: string | undefined;
    encoding_format?: string | undefined;
  };

/** @internal */
export const FindOnePromptSnippetResponseBodyPromptSnippetsResponse200ApplicationJSONModelParameters$outboundSchema:
  z.ZodType<
    FindOnePromptSnippetResponseBodyPromptSnippetsResponse200ApplicationJSONModelParameters$Outbound,
    z.ZodTypeDef,
    FindOnePromptSnippetResponseBodyPromptSnippetsResponse200ApplicationJSONModelParameters
  > = z.object({
    temperature: z.number().optional(),
    maxTokens: z.number().optional(),
    topK: z.number().optional(),
    topP: z.number().optional(),
    frequencyPenalty: z.number().optional(),
    presencePenalty: z.number().optional(),
    numImages: z.number().optional(),
    seed: z.number().optional(),
    format:
      FindOnePromptSnippetResponseBodyPromptSnippetsResponse200ApplicationJson3Format$outboundSchema
        .optional(),
    dimensions: z.string().optional(),
    quality:
      FindOnePromptSnippetResponseBodyPromptSnippetsResponse200ApplicationJSONQuality$outboundSchema
        .optional(),
    style: z.string().optional(),
    responseFormat: z.nullable(
      z.union([
        z.lazy(() =>
          FindOnePromptSnippetResponseFormatPromptSnippetsResponse200ApplicationJSONResponseBody2$outboundSchema
        ),
        z.lazy(() =>
          FindOnePromptSnippetResponseFormatPromptSnippetsResponse200ApplicationJSONResponseBody1$outboundSchema
        ),
      ]),
    ).optional(),
    photoRealVersion:
      FindOnePromptSnippetResponseBodyPromptSnippetsResponse200ApplicationJSONPhotoRealVersion$outboundSchema
        .optional(),
    encodingFormat:
      FindOnePromptSnippetResponseBodyPromptSnippetsResponse200ApplicationJSONEncodingFormat$outboundSchema
        .optional(),
  }).transform((v) => {
    return remap$(v, {
      encodingFormat: "encoding_format",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FindOnePromptSnippetResponseBodyPromptSnippetsResponse200ApplicationJSONModelParameters$ {
  /** @deprecated use `FindOnePromptSnippetResponseBodyPromptSnippetsResponse200ApplicationJSONModelParameters$inboundSchema` instead. */
  export const inboundSchema =
    FindOnePromptSnippetResponseBodyPromptSnippetsResponse200ApplicationJSONModelParameters$inboundSchema;
  /** @deprecated use `FindOnePromptSnippetResponseBodyPromptSnippetsResponse200ApplicationJSONModelParameters$outboundSchema` instead. */
  export const outboundSchema =
    FindOnePromptSnippetResponseBodyPromptSnippetsResponse200ApplicationJSONModelParameters$outboundSchema;
  /** @deprecated use `FindOnePromptSnippetResponseBodyPromptSnippetsResponse200ApplicationJSONModelParameters$Outbound` instead. */
  export type Outbound =
    FindOnePromptSnippetResponseBodyPromptSnippetsResponse200ApplicationJSONModelParameters$Outbound;
}

export function findOnePromptSnippetResponseBodyPromptSnippetsResponse200ApplicationJSONModelParametersToJSON(
  findOnePromptSnippetResponseBodyPromptSnippetsResponse200ApplicationJSONModelParameters:
    FindOnePromptSnippetResponseBodyPromptSnippetsResponse200ApplicationJSONModelParameters,
): string {
  return JSON.stringify(
    FindOnePromptSnippetResponseBodyPromptSnippetsResponse200ApplicationJSONModelParameters$outboundSchema
      .parse(
        findOnePromptSnippetResponseBodyPromptSnippetsResponse200ApplicationJSONModelParameters,
      ),
  );
}

export function findOnePromptSnippetResponseBodyPromptSnippetsResponse200ApplicationJSONModelParametersFromJSON(
  jsonString: string,
): SafeParseResult<
  FindOnePromptSnippetResponseBodyPromptSnippetsResponse200ApplicationJSONModelParameters,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      FindOnePromptSnippetResponseBodyPromptSnippetsResponse200ApplicationJSONModelParameters$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'FindOnePromptSnippetResponseBodyPromptSnippetsResponse200ApplicationJSONModelParameters' from JSON`,
  );
}

/** @internal */
export const FindOnePromptSnippetResponseBodyPromptSnippetsResponse200ApplicationJSONProvider$inboundSchema:
  z.ZodNativeEnum<
    typeof FindOnePromptSnippetResponseBodyPromptSnippetsResponse200ApplicationJSONProvider
  > = z.nativeEnum(
    FindOnePromptSnippetResponseBodyPromptSnippetsResponse200ApplicationJSONProvider,
  );

/** @internal */
export const FindOnePromptSnippetResponseBodyPromptSnippetsResponse200ApplicationJSONProvider$outboundSchema:
  z.ZodNativeEnum<
    typeof FindOnePromptSnippetResponseBodyPromptSnippetsResponse200ApplicationJSONProvider
  > =
    FindOnePromptSnippetResponseBodyPromptSnippetsResponse200ApplicationJSONProvider$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FindOnePromptSnippetResponseBodyPromptSnippetsResponse200ApplicationJSONProvider$ {
  /** @deprecated use `FindOnePromptSnippetResponseBodyPromptSnippetsResponse200ApplicationJSONProvider$inboundSchema` instead. */
  export const inboundSchema =
    FindOnePromptSnippetResponseBodyPromptSnippetsResponse200ApplicationJSONProvider$inboundSchema;
  /** @deprecated use `FindOnePromptSnippetResponseBodyPromptSnippetsResponse200ApplicationJSONProvider$outboundSchema` instead. */
  export const outboundSchema =
    FindOnePromptSnippetResponseBodyPromptSnippetsResponse200ApplicationJSONProvider$outboundSchema;
}

/** @internal */
export const FindOnePromptSnippetResponseBodyPromptSnippetsResponse200ApplicationJSONRole$inboundSchema:
  z.ZodNativeEnum<
    typeof FindOnePromptSnippetResponseBodyPromptSnippetsResponse200ApplicationJSONRole
  > = z.nativeEnum(
    FindOnePromptSnippetResponseBodyPromptSnippetsResponse200ApplicationJSONRole,
  );

/** @internal */
export const FindOnePromptSnippetResponseBodyPromptSnippetsResponse200ApplicationJSONRole$outboundSchema:
  z.ZodNativeEnum<
    typeof FindOnePromptSnippetResponseBodyPromptSnippetsResponse200ApplicationJSONRole
  > =
    FindOnePromptSnippetResponseBodyPromptSnippetsResponse200ApplicationJSONRole$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FindOnePromptSnippetResponseBodyPromptSnippetsResponse200ApplicationJSONRole$ {
  /** @deprecated use `FindOnePromptSnippetResponseBodyPromptSnippetsResponse200ApplicationJSONRole$inboundSchema` instead. */
  export const inboundSchema =
    FindOnePromptSnippetResponseBodyPromptSnippetsResponse200ApplicationJSONRole$inboundSchema;
  /** @deprecated use `FindOnePromptSnippetResponseBodyPromptSnippetsResponse200ApplicationJSONRole$outboundSchema` instead. */
  export const outboundSchema =
    FindOnePromptSnippetResponseBodyPromptSnippetsResponse200ApplicationJSONRole$outboundSchema;
}

/** @internal */
export const FindOnePromptSnippet2PromptSnippetsResponse200ApplicationJSONResponseBody3VersionsType$inboundSchema:
  z.ZodNativeEnum<
    typeof FindOnePromptSnippet2PromptSnippetsResponse200ApplicationJSONResponseBody3VersionsType
  > = z.nativeEnum(
    FindOnePromptSnippet2PromptSnippetsResponse200ApplicationJSONResponseBody3VersionsType,
  );

/** @internal */
export const FindOnePromptSnippet2PromptSnippetsResponse200ApplicationJSONResponseBody3VersionsType$outboundSchema:
  z.ZodNativeEnum<
    typeof FindOnePromptSnippet2PromptSnippetsResponse200ApplicationJSONResponseBody3VersionsType
  > =
    FindOnePromptSnippet2PromptSnippetsResponse200ApplicationJSONResponseBody3VersionsType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FindOnePromptSnippet2PromptSnippetsResponse200ApplicationJSONResponseBody3VersionsType$ {
  /** @deprecated use `FindOnePromptSnippet2PromptSnippetsResponse200ApplicationJSONResponseBody3VersionsType$inboundSchema` instead. */
  export const inboundSchema =
    FindOnePromptSnippet2PromptSnippetsResponse200ApplicationJSONResponseBody3VersionsType$inboundSchema;
  /** @deprecated use `FindOnePromptSnippet2PromptSnippetsResponse200ApplicationJSONResponseBody3VersionsType$outboundSchema` instead. */
  export const outboundSchema =
    FindOnePromptSnippet2PromptSnippetsResponse200ApplicationJSONResponseBody3VersionsType$outboundSchema;
}

/** @internal */
export const FindOnePromptSnippet2PromptSnippetsResponse200ApplicationJSONResponseBodyImageUrl$inboundSchema:
  z.ZodType<
    FindOnePromptSnippet2PromptSnippetsResponse200ApplicationJSONResponseBodyImageUrl,
    z.ZodTypeDef,
    unknown
  > = z.object({
    id: z.string().optional(),
    url: z.string(),
    detail: z.string().optional(),
  });

/** @internal */
export type FindOnePromptSnippet2PromptSnippetsResponse200ApplicationJSONResponseBodyImageUrl$Outbound =
  {
    id?: string | undefined;
    url: string;
    detail?: string | undefined;
  };

/** @internal */
export const FindOnePromptSnippet2PromptSnippetsResponse200ApplicationJSONResponseBodyImageUrl$outboundSchema:
  z.ZodType<
    FindOnePromptSnippet2PromptSnippetsResponse200ApplicationJSONResponseBodyImageUrl$Outbound,
    z.ZodTypeDef,
    FindOnePromptSnippet2PromptSnippetsResponse200ApplicationJSONResponseBodyImageUrl
  > = z.object({
    id: z.string().optional(),
    url: z.string(),
    detail: z.string().optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FindOnePromptSnippet2PromptSnippetsResponse200ApplicationJSONResponseBodyImageUrl$ {
  /** @deprecated use `FindOnePromptSnippet2PromptSnippetsResponse200ApplicationJSONResponseBodyImageUrl$inboundSchema` instead. */
  export const inboundSchema =
    FindOnePromptSnippet2PromptSnippetsResponse200ApplicationJSONResponseBodyImageUrl$inboundSchema;
  /** @deprecated use `FindOnePromptSnippet2PromptSnippetsResponse200ApplicationJSONResponseBodyImageUrl$outboundSchema` instead. */
  export const outboundSchema =
    FindOnePromptSnippet2PromptSnippetsResponse200ApplicationJSONResponseBodyImageUrl$outboundSchema;
  /** @deprecated use `FindOnePromptSnippet2PromptSnippetsResponse200ApplicationJSONResponseBodyImageUrl$Outbound` instead. */
  export type Outbound =
    FindOnePromptSnippet2PromptSnippetsResponse200ApplicationJSONResponseBodyImageUrl$Outbound;
}

export function findOnePromptSnippet2PromptSnippetsResponse200ApplicationJSONResponseBodyImageUrlToJSON(
  findOnePromptSnippet2PromptSnippetsResponse200ApplicationJSONResponseBodyImageUrl:
    FindOnePromptSnippet2PromptSnippetsResponse200ApplicationJSONResponseBodyImageUrl,
): string {
  return JSON.stringify(
    FindOnePromptSnippet2PromptSnippetsResponse200ApplicationJSONResponseBodyImageUrl$outboundSchema
      .parse(
        findOnePromptSnippet2PromptSnippetsResponse200ApplicationJSONResponseBodyImageUrl,
      ),
  );
}

export function findOnePromptSnippet2PromptSnippetsResponse200ApplicationJSONResponseBodyImageUrlFromJSON(
  jsonString: string,
): SafeParseResult<
  FindOnePromptSnippet2PromptSnippetsResponse200ApplicationJSONResponseBodyImageUrl,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      FindOnePromptSnippet2PromptSnippetsResponse200ApplicationJSONResponseBodyImageUrl$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'FindOnePromptSnippet2PromptSnippetsResponse200ApplicationJSONResponseBodyImageUrl' from JSON`,
  );
}

/** @internal */
export const FindOnePromptSnippet2PromptSnippetsResponse200ApplicationJSONResponseBody2$inboundSchema:
  z.ZodType<
    FindOnePromptSnippet2PromptSnippetsResponse200ApplicationJSONResponseBody2,
    z.ZodTypeDef,
    unknown
  > = z.object({
    type:
      FindOnePromptSnippet2PromptSnippetsResponse200ApplicationJSONResponseBody3VersionsType$inboundSchema,
    image_url: z.lazy(() =>
      FindOnePromptSnippet2PromptSnippetsResponse200ApplicationJSONResponseBodyImageUrl$inboundSchema
    ),
  }).transform((v) => {
    return remap$(v, {
      "image_url": "imageUrl",
    });
  });

/** @internal */
export type FindOnePromptSnippet2PromptSnippetsResponse200ApplicationJSONResponseBody2$Outbound =
  {
    type: string;
    image_url:
      FindOnePromptSnippet2PromptSnippetsResponse200ApplicationJSONResponseBodyImageUrl$Outbound;
  };

/** @internal */
export const FindOnePromptSnippet2PromptSnippetsResponse200ApplicationJSONResponseBody2$outboundSchema:
  z.ZodType<
    FindOnePromptSnippet2PromptSnippetsResponse200ApplicationJSONResponseBody2$Outbound,
    z.ZodTypeDef,
    FindOnePromptSnippet2PromptSnippetsResponse200ApplicationJSONResponseBody2
  > = z.object({
    type:
      FindOnePromptSnippet2PromptSnippetsResponse200ApplicationJSONResponseBody3VersionsType$outboundSchema,
    imageUrl: z.lazy(() =>
      FindOnePromptSnippet2PromptSnippetsResponse200ApplicationJSONResponseBodyImageUrl$outboundSchema
    ),
  }).transform((v) => {
    return remap$(v, {
      imageUrl: "image_url",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FindOnePromptSnippet2PromptSnippetsResponse200ApplicationJSONResponseBody2$ {
  /** @deprecated use `FindOnePromptSnippet2PromptSnippetsResponse200ApplicationJSONResponseBody2$inboundSchema` instead. */
  export const inboundSchema =
    FindOnePromptSnippet2PromptSnippetsResponse200ApplicationJSONResponseBody2$inboundSchema;
  /** @deprecated use `FindOnePromptSnippet2PromptSnippetsResponse200ApplicationJSONResponseBody2$outboundSchema` instead. */
  export const outboundSchema =
    FindOnePromptSnippet2PromptSnippetsResponse200ApplicationJSONResponseBody2$outboundSchema;
  /** @deprecated use `FindOnePromptSnippet2PromptSnippetsResponse200ApplicationJSONResponseBody2$Outbound` instead. */
  export type Outbound =
    FindOnePromptSnippet2PromptSnippetsResponse200ApplicationJSONResponseBody2$Outbound;
}

export function findOnePromptSnippet2PromptSnippetsResponse200ApplicationJSONResponseBody2ToJSON(
  findOnePromptSnippet2PromptSnippetsResponse200ApplicationJSONResponseBody2:
    FindOnePromptSnippet2PromptSnippetsResponse200ApplicationJSONResponseBody2,
): string {
  return JSON.stringify(
    FindOnePromptSnippet2PromptSnippetsResponse200ApplicationJSONResponseBody2$outboundSchema
      .parse(
        findOnePromptSnippet2PromptSnippetsResponse200ApplicationJSONResponseBody2,
      ),
  );
}

export function findOnePromptSnippet2PromptSnippetsResponse200ApplicationJSONResponseBody2FromJSON(
  jsonString: string,
): SafeParseResult<
  FindOnePromptSnippet2PromptSnippetsResponse200ApplicationJSONResponseBody2,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      FindOnePromptSnippet2PromptSnippetsResponse200ApplicationJSONResponseBody2$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'FindOnePromptSnippet2PromptSnippetsResponse200ApplicationJSONResponseBody2' from JSON`,
  );
}

/** @internal */
export const FindOnePromptSnippet2PromptSnippetsResponse200ApplicationJSONResponseBody3Type$inboundSchema:
  z.ZodNativeEnum<
    typeof FindOnePromptSnippet2PromptSnippetsResponse200ApplicationJSONResponseBody3Type
  > = z.nativeEnum(
    FindOnePromptSnippet2PromptSnippetsResponse200ApplicationJSONResponseBody3Type,
  );

/** @internal */
export const FindOnePromptSnippet2PromptSnippetsResponse200ApplicationJSONResponseBody3Type$outboundSchema:
  z.ZodNativeEnum<
    typeof FindOnePromptSnippet2PromptSnippetsResponse200ApplicationJSONResponseBody3Type
  > =
    FindOnePromptSnippet2PromptSnippetsResponse200ApplicationJSONResponseBody3Type$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FindOnePromptSnippet2PromptSnippetsResponse200ApplicationJSONResponseBody3Type$ {
  /** @deprecated use `FindOnePromptSnippet2PromptSnippetsResponse200ApplicationJSONResponseBody3Type$inboundSchema` instead. */
  export const inboundSchema =
    FindOnePromptSnippet2PromptSnippetsResponse200ApplicationJSONResponseBody3Type$inboundSchema;
  /** @deprecated use `FindOnePromptSnippet2PromptSnippetsResponse200ApplicationJSONResponseBody3Type$outboundSchema` instead. */
  export const outboundSchema =
    FindOnePromptSnippet2PromptSnippetsResponse200ApplicationJSONResponseBody3Type$outboundSchema;
}

/** @internal */
export const FindOnePromptSnippet2PromptSnippetsResponse200ApplicationJSONResponseBody1$inboundSchema:
  z.ZodType<
    FindOnePromptSnippet2PromptSnippetsResponse200ApplicationJSONResponseBody1,
    z.ZodTypeDef,
    unknown
  > = z.object({
    type:
      FindOnePromptSnippet2PromptSnippetsResponse200ApplicationJSONResponseBody3Type$inboundSchema,
    text: z.string(),
  });

/** @internal */
export type FindOnePromptSnippet2PromptSnippetsResponse200ApplicationJSONResponseBody1$Outbound =
  {
    type: string;
    text: string;
  };

/** @internal */
export const FindOnePromptSnippet2PromptSnippetsResponse200ApplicationJSONResponseBody1$outboundSchema:
  z.ZodType<
    FindOnePromptSnippet2PromptSnippetsResponse200ApplicationJSONResponseBody1$Outbound,
    z.ZodTypeDef,
    FindOnePromptSnippet2PromptSnippetsResponse200ApplicationJSONResponseBody1
  > = z.object({
    type:
      FindOnePromptSnippet2PromptSnippetsResponse200ApplicationJSONResponseBody3Type$outboundSchema,
    text: z.string(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FindOnePromptSnippet2PromptSnippetsResponse200ApplicationJSONResponseBody1$ {
  /** @deprecated use `FindOnePromptSnippet2PromptSnippetsResponse200ApplicationJSONResponseBody1$inboundSchema` instead. */
  export const inboundSchema =
    FindOnePromptSnippet2PromptSnippetsResponse200ApplicationJSONResponseBody1$inboundSchema;
  /** @deprecated use `FindOnePromptSnippet2PromptSnippetsResponse200ApplicationJSONResponseBody1$outboundSchema` instead. */
  export const outboundSchema =
    FindOnePromptSnippet2PromptSnippetsResponse200ApplicationJSONResponseBody1$outboundSchema;
  /** @deprecated use `FindOnePromptSnippet2PromptSnippetsResponse200ApplicationJSONResponseBody1$Outbound` instead. */
  export type Outbound =
    FindOnePromptSnippet2PromptSnippetsResponse200ApplicationJSONResponseBody1$Outbound;
}

export function findOnePromptSnippet2PromptSnippetsResponse200ApplicationJSONResponseBody1ToJSON(
  findOnePromptSnippet2PromptSnippetsResponse200ApplicationJSONResponseBody1:
    FindOnePromptSnippet2PromptSnippetsResponse200ApplicationJSONResponseBody1,
): string {
  return JSON.stringify(
    FindOnePromptSnippet2PromptSnippetsResponse200ApplicationJSONResponseBody1$outboundSchema
      .parse(
        findOnePromptSnippet2PromptSnippetsResponse200ApplicationJSONResponseBody1,
      ),
  );
}

export function findOnePromptSnippet2PromptSnippetsResponse200ApplicationJSONResponseBody1FromJSON(
  jsonString: string,
): SafeParseResult<
  FindOnePromptSnippet2PromptSnippetsResponse200ApplicationJSONResponseBody1,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      FindOnePromptSnippet2PromptSnippetsResponse200ApplicationJSONResponseBody1$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'FindOnePromptSnippet2PromptSnippetsResponse200ApplicationJSONResponseBody1' from JSON`,
  );
}

/** @internal */
export const FindOnePromptSnippetContentPromptSnippetsResponse200ApplicationJSONResponseBody2$inboundSchema:
  z.ZodType<
    FindOnePromptSnippetContentPromptSnippetsResponse200ApplicationJSONResponseBody2,
    z.ZodTypeDef,
    unknown
  > = z.union([
    z.lazy(() =>
      FindOnePromptSnippet2PromptSnippetsResponse200ApplicationJSONResponseBody1$inboundSchema
    ),
    z.lazy(() =>
      FindOnePromptSnippet2PromptSnippetsResponse200ApplicationJSONResponseBody2$inboundSchema
    ),
  ]);

/** @internal */
export type FindOnePromptSnippetContentPromptSnippetsResponse200ApplicationJSONResponseBody2$Outbound =
  | FindOnePromptSnippet2PromptSnippetsResponse200ApplicationJSONResponseBody1$Outbound
  | FindOnePromptSnippet2PromptSnippetsResponse200ApplicationJSONResponseBody2$Outbound;

/** @internal */
export const FindOnePromptSnippetContentPromptSnippetsResponse200ApplicationJSONResponseBody2$outboundSchema:
  z.ZodType<
    FindOnePromptSnippetContentPromptSnippetsResponse200ApplicationJSONResponseBody2$Outbound,
    z.ZodTypeDef,
    FindOnePromptSnippetContentPromptSnippetsResponse200ApplicationJSONResponseBody2
  > = z.union([
    z.lazy(() =>
      FindOnePromptSnippet2PromptSnippetsResponse200ApplicationJSONResponseBody1$outboundSchema
    ),
    z.lazy(() =>
      FindOnePromptSnippet2PromptSnippetsResponse200ApplicationJSONResponseBody2$outboundSchema
    ),
  ]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FindOnePromptSnippetContentPromptSnippetsResponse200ApplicationJSONResponseBody2$ {
  /** @deprecated use `FindOnePromptSnippetContentPromptSnippetsResponse200ApplicationJSONResponseBody2$inboundSchema` instead. */
  export const inboundSchema =
    FindOnePromptSnippetContentPromptSnippetsResponse200ApplicationJSONResponseBody2$inboundSchema;
  /** @deprecated use `FindOnePromptSnippetContentPromptSnippetsResponse200ApplicationJSONResponseBody2$outboundSchema` instead. */
  export const outboundSchema =
    FindOnePromptSnippetContentPromptSnippetsResponse200ApplicationJSONResponseBody2$outboundSchema;
  /** @deprecated use `FindOnePromptSnippetContentPromptSnippetsResponse200ApplicationJSONResponseBody2$Outbound` instead. */
  export type Outbound =
    FindOnePromptSnippetContentPromptSnippetsResponse200ApplicationJSONResponseBody2$Outbound;
}

export function findOnePromptSnippetContentPromptSnippetsResponse200ApplicationJSONResponseBody2ToJSON(
  findOnePromptSnippetContentPromptSnippetsResponse200ApplicationJSONResponseBody2:
    FindOnePromptSnippetContentPromptSnippetsResponse200ApplicationJSONResponseBody2,
): string {
  return JSON.stringify(
    FindOnePromptSnippetContentPromptSnippetsResponse200ApplicationJSONResponseBody2$outboundSchema
      .parse(
        findOnePromptSnippetContentPromptSnippetsResponse200ApplicationJSONResponseBody2,
      ),
  );
}

export function findOnePromptSnippetContentPromptSnippetsResponse200ApplicationJSONResponseBody2FromJSON(
  jsonString: string,
): SafeParseResult<
  FindOnePromptSnippetContentPromptSnippetsResponse200ApplicationJSONResponseBody2,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      FindOnePromptSnippetContentPromptSnippetsResponse200ApplicationJSONResponseBody2$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'FindOnePromptSnippetContentPromptSnippetsResponse200ApplicationJSONResponseBody2' from JSON`,
  );
}

/** @internal */
export const FindOnePromptSnippetResponseBodyPromptSnippetsResponse200ApplicationJSONContent$inboundSchema:
  z.ZodType<
    FindOnePromptSnippetResponseBodyPromptSnippetsResponse200ApplicationJSONContent,
    z.ZodTypeDef,
    unknown
  > = z.union([
    z.string(),
    z.array(z.union([
      z.lazy(() =>
        FindOnePromptSnippet2PromptSnippetsResponse200ApplicationJSONResponseBody1$inboundSchema
      ),
      z.lazy(() =>
        FindOnePromptSnippet2PromptSnippetsResponse200ApplicationJSONResponseBody2$inboundSchema
      ),
    ])),
  ]);

/** @internal */
export type FindOnePromptSnippetResponseBodyPromptSnippetsResponse200ApplicationJSONContent$Outbound =
  | string
  | Array<
    | FindOnePromptSnippet2PromptSnippetsResponse200ApplicationJSONResponseBody1$Outbound
    | FindOnePromptSnippet2PromptSnippetsResponse200ApplicationJSONResponseBody2$Outbound
  >;

/** @internal */
export const FindOnePromptSnippetResponseBodyPromptSnippetsResponse200ApplicationJSONContent$outboundSchema:
  z.ZodType<
    FindOnePromptSnippetResponseBodyPromptSnippetsResponse200ApplicationJSONContent$Outbound,
    z.ZodTypeDef,
    FindOnePromptSnippetResponseBodyPromptSnippetsResponse200ApplicationJSONContent
  > = z.union([
    z.string(),
    z.array(z.union([
      z.lazy(() =>
        FindOnePromptSnippet2PromptSnippetsResponse200ApplicationJSONResponseBody1$outboundSchema
      ),
      z.lazy(() =>
        FindOnePromptSnippet2PromptSnippetsResponse200ApplicationJSONResponseBody2$outboundSchema
      ),
    ])),
  ]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FindOnePromptSnippetResponseBodyPromptSnippetsResponse200ApplicationJSONContent$ {
  /** @deprecated use `FindOnePromptSnippetResponseBodyPromptSnippetsResponse200ApplicationJSONContent$inboundSchema` instead. */
  export const inboundSchema =
    FindOnePromptSnippetResponseBodyPromptSnippetsResponse200ApplicationJSONContent$inboundSchema;
  /** @deprecated use `FindOnePromptSnippetResponseBodyPromptSnippetsResponse200ApplicationJSONContent$outboundSchema` instead. */
  export const outboundSchema =
    FindOnePromptSnippetResponseBodyPromptSnippetsResponse200ApplicationJSONContent$outboundSchema;
  /** @deprecated use `FindOnePromptSnippetResponseBodyPromptSnippetsResponse200ApplicationJSONContent$Outbound` instead. */
  export type Outbound =
    FindOnePromptSnippetResponseBodyPromptSnippetsResponse200ApplicationJSONContent$Outbound;
}

export function findOnePromptSnippetResponseBodyPromptSnippetsResponse200ApplicationJSONContentToJSON(
  findOnePromptSnippetResponseBodyPromptSnippetsResponse200ApplicationJSONContent:
    FindOnePromptSnippetResponseBodyPromptSnippetsResponse200ApplicationJSONContent,
): string {
  return JSON.stringify(
    FindOnePromptSnippetResponseBodyPromptSnippetsResponse200ApplicationJSONContent$outboundSchema
      .parse(
        findOnePromptSnippetResponseBodyPromptSnippetsResponse200ApplicationJSONContent,
      ),
  );
}

export function findOnePromptSnippetResponseBodyPromptSnippetsResponse200ApplicationJSONContentFromJSON(
  jsonString: string,
): SafeParseResult<
  FindOnePromptSnippetResponseBodyPromptSnippetsResponse200ApplicationJSONContent,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      FindOnePromptSnippetResponseBodyPromptSnippetsResponse200ApplicationJSONContent$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'FindOnePromptSnippetResponseBodyPromptSnippetsResponse200ApplicationJSONContent' from JSON`,
  );
}

/** @internal */
export const FindOnePromptSnippetResponseBodyPromptSnippetsResponse200ApplicationJson3Type$inboundSchema:
  z.ZodNativeEnum<
    typeof FindOnePromptSnippetResponseBodyPromptSnippetsResponse200ApplicationJson3Type
  > = z.nativeEnum(
    FindOnePromptSnippetResponseBodyPromptSnippetsResponse200ApplicationJson3Type,
  );

/** @internal */
export const FindOnePromptSnippetResponseBodyPromptSnippetsResponse200ApplicationJson3Type$outboundSchema:
  z.ZodNativeEnum<
    typeof FindOnePromptSnippetResponseBodyPromptSnippetsResponse200ApplicationJson3Type
  > =
    FindOnePromptSnippetResponseBodyPromptSnippetsResponse200ApplicationJson3Type$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FindOnePromptSnippetResponseBodyPromptSnippetsResponse200ApplicationJson3Type$ {
  /** @deprecated use `FindOnePromptSnippetResponseBodyPromptSnippetsResponse200ApplicationJson3Type$inboundSchema` instead. */
  export const inboundSchema =
    FindOnePromptSnippetResponseBodyPromptSnippetsResponse200ApplicationJson3Type$inboundSchema;
  /** @deprecated use `FindOnePromptSnippetResponseBodyPromptSnippetsResponse200ApplicationJson3Type$outboundSchema` instead. */
  export const outboundSchema =
    FindOnePromptSnippetResponseBodyPromptSnippetsResponse200ApplicationJson3Type$outboundSchema;
}

/** @internal */
export const FindOnePromptSnippetResponseBodyPromptSnippetsResponse200ApplicationJSONFunction$inboundSchema:
  z.ZodType<
    FindOnePromptSnippetResponseBodyPromptSnippetsResponse200ApplicationJSONFunction,
    z.ZodTypeDef,
    unknown
  > = z.object({
    name: z.string(),
    arguments: z.string(),
  });

/** @internal */
export type FindOnePromptSnippetResponseBodyPromptSnippetsResponse200ApplicationJSONFunction$Outbound =
  {
    name: string;
    arguments: string;
  };

/** @internal */
export const FindOnePromptSnippetResponseBodyPromptSnippetsResponse200ApplicationJSONFunction$outboundSchema:
  z.ZodType<
    FindOnePromptSnippetResponseBodyPromptSnippetsResponse200ApplicationJSONFunction$Outbound,
    z.ZodTypeDef,
    FindOnePromptSnippetResponseBodyPromptSnippetsResponse200ApplicationJSONFunction
  > = z.object({
    name: z.string(),
    arguments: z.string(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FindOnePromptSnippetResponseBodyPromptSnippetsResponse200ApplicationJSONFunction$ {
  /** @deprecated use `FindOnePromptSnippetResponseBodyPromptSnippetsResponse200ApplicationJSONFunction$inboundSchema` instead. */
  export const inboundSchema =
    FindOnePromptSnippetResponseBodyPromptSnippetsResponse200ApplicationJSONFunction$inboundSchema;
  /** @deprecated use `FindOnePromptSnippetResponseBodyPromptSnippetsResponse200ApplicationJSONFunction$outboundSchema` instead. */
  export const outboundSchema =
    FindOnePromptSnippetResponseBodyPromptSnippetsResponse200ApplicationJSONFunction$outboundSchema;
  /** @deprecated use `FindOnePromptSnippetResponseBodyPromptSnippetsResponse200ApplicationJSONFunction$Outbound` instead. */
  export type Outbound =
    FindOnePromptSnippetResponseBodyPromptSnippetsResponse200ApplicationJSONFunction$Outbound;
}

export function findOnePromptSnippetResponseBodyPromptSnippetsResponse200ApplicationJSONFunctionToJSON(
  findOnePromptSnippetResponseBodyPromptSnippetsResponse200ApplicationJSONFunction:
    FindOnePromptSnippetResponseBodyPromptSnippetsResponse200ApplicationJSONFunction,
): string {
  return JSON.stringify(
    FindOnePromptSnippetResponseBodyPromptSnippetsResponse200ApplicationJSONFunction$outboundSchema
      .parse(
        findOnePromptSnippetResponseBodyPromptSnippetsResponse200ApplicationJSONFunction,
      ),
  );
}

export function findOnePromptSnippetResponseBodyPromptSnippetsResponse200ApplicationJSONFunctionFromJSON(
  jsonString: string,
): SafeParseResult<
  FindOnePromptSnippetResponseBodyPromptSnippetsResponse200ApplicationJSONFunction,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      FindOnePromptSnippetResponseBodyPromptSnippetsResponse200ApplicationJSONFunction$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'FindOnePromptSnippetResponseBodyPromptSnippetsResponse200ApplicationJSONFunction' from JSON`,
  );
}

/** @internal */
export const FindOnePromptSnippetResponseBodyPromptSnippetsResponse200ApplicationJSONToolCalls$inboundSchema:
  z.ZodType<
    FindOnePromptSnippetResponseBodyPromptSnippetsResponse200ApplicationJSONToolCalls,
    z.ZodTypeDef,
    unknown
  > = z.object({
    id: z.string().optional(),
    index: z.number().optional(),
    type:
      FindOnePromptSnippetResponseBodyPromptSnippetsResponse200ApplicationJson3Type$inboundSchema,
    function: z.lazy(() =>
      FindOnePromptSnippetResponseBodyPromptSnippetsResponse200ApplicationJSONFunction$inboundSchema
    ),
  });

/** @internal */
export type FindOnePromptSnippetResponseBodyPromptSnippetsResponse200ApplicationJSONToolCalls$Outbound =
  {
    id?: string | undefined;
    index?: number | undefined;
    type: string;
    function:
      FindOnePromptSnippetResponseBodyPromptSnippetsResponse200ApplicationJSONFunction$Outbound;
  };

/** @internal */
export const FindOnePromptSnippetResponseBodyPromptSnippetsResponse200ApplicationJSONToolCalls$outboundSchema:
  z.ZodType<
    FindOnePromptSnippetResponseBodyPromptSnippetsResponse200ApplicationJSONToolCalls$Outbound,
    z.ZodTypeDef,
    FindOnePromptSnippetResponseBodyPromptSnippetsResponse200ApplicationJSONToolCalls
  > = z.object({
    id: z.string().optional(),
    index: z.number().optional(),
    type:
      FindOnePromptSnippetResponseBodyPromptSnippetsResponse200ApplicationJson3Type$outboundSchema,
    function: z.lazy(() =>
      FindOnePromptSnippetResponseBodyPromptSnippetsResponse200ApplicationJSONFunction$outboundSchema
    ),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FindOnePromptSnippetResponseBodyPromptSnippetsResponse200ApplicationJSONToolCalls$ {
  /** @deprecated use `FindOnePromptSnippetResponseBodyPromptSnippetsResponse200ApplicationJSONToolCalls$inboundSchema` instead. */
  export const inboundSchema =
    FindOnePromptSnippetResponseBodyPromptSnippetsResponse200ApplicationJSONToolCalls$inboundSchema;
  /** @deprecated use `FindOnePromptSnippetResponseBodyPromptSnippetsResponse200ApplicationJSONToolCalls$outboundSchema` instead. */
  export const outboundSchema =
    FindOnePromptSnippetResponseBodyPromptSnippetsResponse200ApplicationJSONToolCalls$outboundSchema;
  /** @deprecated use `FindOnePromptSnippetResponseBodyPromptSnippetsResponse200ApplicationJSONToolCalls$Outbound` instead. */
  export type Outbound =
    FindOnePromptSnippetResponseBodyPromptSnippetsResponse200ApplicationJSONToolCalls$Outbound;
}

export function findOnePromptSnippetResponseBodyPromptSnippetsResponse200ApplicationJSONToolCallsToJSON(
  findOnePromptSnippetResponseBodyPromptSnippetsResponse200ApplicationJSONToolCalls:
    FindOnePromptSnippetResponseBodyPromptSnippetsResponse200ApplicationJSONToolCalls,
): string {
  return JSON.stringify(
    FindOnePromptSnippetResponseBodyPromptSnippetsResponse200ApplicationJSONToolCalls$outboundSchema
      .parse(
        findOnePromptSnippetResponseBodyPromptSnippetsResponse200ApplicationJSONToolCalls,
      ),
  );
}

export function findOnePromptSnippetResponseBodyPromptSnippetsResponse200ApplicationJSONToolCallsFromJSON(
  jsonString: string,
): SafeParseResult<
  FindOnePromptSnippetResponseBodyPromptSnippetsResponse200ApplicationJSONToolCalls,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      FindOnePromptSnippetResponseBodyPromptSnippetsResponse200ApplicationJSONToolCalls$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'FindOnePromptSnippetResponseBodyPromptSnippetsResponse200ApplicationJSONToolCalls' from JSON`,
  );
}

/** @internal */
export const FindOnePromptSnippetResponseBodyPromptSnippetsResponse200ApplicationJSONMessages$inboundSchema:
  z.ZodType<
    FindOnePromptSnippetResponseBodyPromptSnippetsResponse200ApplicationJSONMessages,
    z.ZodTypeDef,
    unknown
  > = z.object({
    role:
      FindOnePromptSnippetResponseBodyPromptSnippetsResponse200ApplicationJSONRole$inboundSchema,
    content: z.union([
      z.string(),
      z.array(z.union([
        z.lazy(() =>
          FindOnePromptSnippet2PromptSnippetsResponse200ApplicationJSONResponseBody1$inboundSchema
        ),
        z.lazy(() =>
          FindOnePromptSnippet2PromptSnippetsResponse200ApplicationJSONResponseBody2$inboundSchema
        ),
      ])),
    ]),
    tool_calls: z.array(
      z.lazy(() =>
        FindOnePromptSnippetResponseBodyPromptSnippetsResponse200ApplicationJSONToolCalls$inboundSchema
      ),
    ).optional(),
  }).transform((v) => {
    return remap$(v, {
      "tool_calls": "toolCalls",
    });
  });

/** @internal */
export type FindOnePromptSnippetResponseBodyPromptSnippetsResponse200ApplicationJSONMessages$Outbound =
  {
    role: string;
    content:
      | string
      | Array<
        | FindOnePromptSnippet2PromptSnippetsResponse200ApplicationJSONResponseBody1$Outbound
        | FindOnePromptSnippet2PromptSnippetsResponse200ApplicationJSONResponseBody2$Outbound
      >;
    tool_calls?:
      | Array<
        FindOnePromptSnippetResponseBodyPromptSnippetsResponse200ApplicationJSONToolCalls$Outbound
      >
      | undefined;
  };

/** @internal */
export const FindOnePromptSnippetResponseBodyPromptSnippetsResponse200ApplicationJSONMessages$outboundSchema:
  z.ZodType<
    FindOnePromptSnippetResponseBodyPromptSnippetsResponse200ApplicationJSONMessages$Outbound,
    z.ZodTypeDef,
    FindOnePromptSnippetResponseBodyPromptSnippetsResponse200ApplicationJSONMessages
  > = z.object({
    role:
      FindOnePromptSnippetResponseBodyPromptSnippetsResponse200ApplicationJSONRole$outboundSchema,
    content: z.union([
      z.string(),
      z.array(z.union([
        z.lazy(() =>
          FindOnePromptSnippet2PromptSnippetsResponse200ApplicationJSONResponseBody1$outboundSchema
        ),
        z.lazy(() =>
          FindOnePromptSnippet2PromptSnippetsResponse200ApplicationJSONResponseBody2$outboundSchema
        ),
      ])),
    ]),
    toolCalls: z.array(
      z.lazy(() =>
        FindOnePromptSnippetResponseBodyPromptSnippetsResponse200ApplicationJSONToolCalls$outboundSchema
      ),
    ).optional(),
  }).transform((v) => {
    return remap$(v, {
      toolCalls: "tool_calls",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FindOnePromptSnippetResponseBodyPromptSnippetsResponse200ApplicationJSONMessages$ {
  /** @deprecated use `FindOnePromptSnippetResponseBodyPromptSnippetsResponse200ApplicationJSONMessages$inboundSchema` instead. */
  export const inboundSchema =
    FindOnePromptSnippetResponseBodyPromptSnippetsResponse200ApplicationJSONMessages$inboundSchema;
  /** @deprecated use `FindOnePromptSnippetResponseBodyPromptSnippetsResponse200ApplicationJSONMessages$outboundSchema` instead. */
  export const outboundSchema =
    FindOnePromptSnippetResponseBodyPromptSnippetsResponse200ApplicationJSONMessages$outboundSchema;
  /** @deprecated use `FindOnePromptSnippetResponseBodyPromptSnippetsResponse200ApplicationJSONMessages$Outbound` instead. */
  export type Outbound =
    FindOnePromptSnippetResponseBodyPromptSnippetsResponse200ApplicationJSONMessages$Outbound;
}

export function findOnePromptSnippetResponseBodyPromptSnippetsResponse200ApplicationJSONMessagesToJSON(
  findOnePromptSnippetResponseBodyPromptSnippetsResponse200ApplicationJSONMessages:
    FindOnePromptSnippetResponseBodyPromptSnippetsResponse200ApplicationJSONMessages,
): string {
  return JSON.stringify(
    FindOnePromptSnippetResponseBodyPromptSnippetsResponse200ApplicationJSONMessages$outboundSchema
      .parse(
        findOnePromptSnippetResponseBodyPromptSnippetsResponse200ApplicationJSONMessages,
      ),
  );
}

export function findOnePromptSnippetResponseBodyPromptSnippetsResponse200ApplicationJSONMessagesFromJSON(
  jsonString: string,
): SafeParseResult<
  FindOnePromptSnippetResponseBodyPromptSnippetsResponse200ApplicationJSONMessages,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      FindOnePromptSnippetResponseBodyPromptSnippetsResponse200ApplicationJSONMessages$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'FindOnePromptSnippetResponseBodyPromptSnippetsResponse200ApplicationJSONMessages' from JSON`,
  );
}

/** @internal */
export const FindOnePromptSnippetResponseBodyPromptSnippetsResponse200ApplicationJSONPromptConfig$inboundSchema:
  z.ZodType<
    FindOnePromptSnippetResponseBodyPromptSnippetsResponse200ApplicationJSONPromptConfig,
    z.ZodTypeDef,
    unknown
  > = z.object({
    stream: z.boolean().optional(),
    model: z.string().optional(),
    model_db_id: z.string().optional(),
    model_type:
      FindOnePromptSnippetResponseBodyPromptSnippetsResponse200ApplicationJSONModelType$inboundSchema
        .optional(),
    model_parameters: z.lazy(() =>
      FindOnePromptSnippetResponseBodyPromptSnippetsResponse200ApplicationJSONModelParameters$inboundSchema
    ).optional(),
    provider:
      FindOnePromptSnippetResponseBodyPromptSnippetsResponse200ApplicationJSONProvider$inboundSchema
        .optional(),
    integration_id: z.nullable(z.string()).optional(),
    version: z.string().optional(),
    messages: z.array(
      z.lazy(() =>
        FindOnePromptSnippetResponseBodyPromptSnippetsResponse200ApplicationJSONMessages$inboundSchema
      ),
    ),
  }).transform((v) => {
    return remap$(v, {
      "model_db_id": "modelDbId",
      "model_type": "modelType",
      "model_parameters": "modelParameters",
      "integration_id": "integrationId",
    });
  });

/** @internal */
export type FindOnePromptSnippetResponseBodyPromptSnippetsResponse200ApplicationJSONPromptConfig$Outbound =
  {
    stream?: boolean | undefined;
    model?: string | undefined;
    model_db_id?: string | undefined;
    model_type?: string | undefined;
    model_parameters?:
      | FindOnePromptSnippetResponseBodyPromptSnippetsResponse200ApplicationJSONModelParameters$Outbound
      | undefined;
    provider?: string | undefined;
    integration_id?: string | null | undefined;
    version?: string | undefined;
    messages: Array<
      FindOnePromptSnippetResponseBodyPromptSnippetsResponse200ApplicationJSONMessages$Outbound
    >;
  };

/** @internal */
export const FindOnePromptSnippetResponseBodyPromptSnippetsResponse200ApplicationJSONPromptConfig$outboundSchema:
  z.ZodType<
    FindOnePromptSnippetResponseBodyPromptSnippetsResponse200ApplicationJSONPromptConfig$Outbound,
    z.ZodTypeDef,
    FindOnePromptSnippetResponseBodyPromptSnippetsResponse200ApplicationJSONPromptConfig
  > = z.object({
    stream: z.boolean().optional(),
    model: z.string().optional(),
    modelDbId: z.string().optional(),
    modelType:
      FindOnePromptSnippetResponseBodyPromptSnippetsResponse200ApplicationJSONModelType$outboundSchema
        .optional(),
    modelParameters: z.lazy(() =>
      FindOnePromptSnippetResponseBodyPromptSnippetsResponse200ApplicationJSONModelParameters$outboundSchema
    ).optional(),
    provider:
      FindOnePromptSnippetResponseBodyPromptSnippetsResponse200ApplicationJSONProvider$outboundSchema
        .optional(),
    integrationId: z.nullable(z.string()).optional(),
    version: z.string().optional(),
    messages: z.array(
      z.lazy(() =>
        FindOnePromptSnippetResponseBodyPromptSnippetsResponse200ApplicationJSONMessages$outboundSchema
      ),
    ),
  }).transform((v) => {
    return remap$(v, {
      modelDbId: "model_db_id",
      modelType: "model_type",
      modelParameters: "model_parameters",
      integrationId: "integration_id",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FindOnePromptSnippetResponseBodyPromptSnippetsResponse200ApplicationJSONPromptConfig$ {
  /** @deprecated use `FindOnePromptSnippetResponseBodyPromptSnippetsResponse200ApplicationJSONPromptConfig$inboundSchema` instead. */
  export const inboundSchema =
    FindOnePromptSnippetResponseBodyPromptSnippetsResponse200ApplicationJSONPromptConfig$inboundSchema;
  /** @deprecated use `FindOnePromptSnippetResponseBodyPromptSnippetsResponse200ApplicationJSONPromptConfig$outboundSchema` instead. */
  export const outboundSchema =
    FindOnePromptSnippetResponseBodyPromptSnippetsResponse200ApplicationJSONPromptConfig$outboundSchema;
  /** @deprecated use `FindOnePromptSnippetResponseBodyPromptSnippetsResponse200ApplicationJSONPromptConfig$Outbound` instead. */
  export type Outbound =
    FindOnePromptSnippetResponseBodyPromptSnippetsResponse200ApplicationJSONPromptConfig$Outbound;
}

export function findOnePromptSnippetResponseBodyPromptSnippetsResponse200ApplicationJSONPromptConfigToJSON(
  findOnePromptSnippetResponseBodyPromptSnippetsResponse200ApplicationJSONPromptConfig:
    FindOnePromptSnippetResponseBodyPromptSnippetsResponse200ApplicationJSONPromptConfig,
): string {
  return JSON.stringify(
    FindOnePromptSnippetResponseBodyPromptSnippetsResponse200ApplicationJSONPromptConfig$outboundSchema
      .parse(
        findOnePromptSnippetResponseBodyPromptSnippetsResponse200ApplicationJSONPromptConfig,
      ),
  );
}

export function findOnePromptSnippetResponseBodyPromptSnippetsResponse200ApplicationJSONPromptConfigFromJSON(
  jsonString: string,
): SafeParseResult<
  FindOnePromptSnippetResponseBodyPromptSnippetsResponse200ApplicationJSONPromptConfig,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      FindOnePromptSnippetResponseBodyPromptSnippetsResponse200ApplicationJSONPromptConfig$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'FindOnePromptSnippetResponseBodyPromptSnippetsResponse200ApplicationJSONPromptConfig' from JSON`,
  );
}

/** @internal */
export const FindOnePromptSnippetResponseBodyPromptSnippetsResponse200ApplicationJSONMetadata$inboundSchema:
  z.ZodType<
    FindOnePromptSnippetResponseBodyPromptSnippetsResponse200ApplicationJSONMetadata,
    z.ZodTypeDef,
    unknown
  > = z.object({
    use_cases: z.array(z.string()).optional(),
    language: z.string().optional(),
  }).transform((v) => {
    return remap$(v, {
      "use_cases": "useCases",
    });
  });

/** @internal */
export type FindOnePromptSnippetResponseBodyPromptSnippetsResponse200ApplicationJSONMetadata$Outbound =
  {
    use_cases?: Array<string> | undefined;
    language?: string | undefined;
  };

/** @internal */
export const FindOnePromptSnippetResponseBodyPromptSnippetsResponse200ApplicationJSONMetadata$outboundSchema:
  z.ZodType<
    FindOnePromptSnippetResponseBodyPromptSnippetsResponse200ApplicationJSONMetadata$Outbound,
    z.ZodTypeDef,
    FindOnePromptSnippetResponseBodyPromptSnippetsResponse200ApplicationJSONMetadata
  > = z.object({
    useCases: z.array(z.string()).optional(),
    language: z.string().optional(),
  }).transform((v) => {
    return remap$(v, {
      useCases: "use_cases",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FindOnePromptSnippetResponseBodyPromptSnippetsResponse200ApplicationJSONMetadata$ {
  /** @deprecated use `FindOnePromptSnippetResponseBodyPromptSnippetsResponse200ApplicationJSONMetadata$inboundSchema` instead. */
  export const inboundSchema =
    FindOnePromptSnippetResponseBodyPromptSnippetsResponse200ApplicationJSONMetadata$inboundSchema;
  /** @deprecated use `FindOnePromptSnippetResponseBodyPromptSnippetsResponse200ApplicationJSONMetadata$outboundSchema` instead. */
  export const outboundSchema =
    FindOnePromptSnippetResponseBodyPromptSnippetsResponse200ApplicationJSONMetadata$outboundSchema;
  /** @deprecated use `FindOnePromptSnippetResponseBodyPromptSnippetsResponse200ApplicationJSONMetadata$Outbound` instead. */
  export type Outbound =
    FindOnePromptSnippetResponseBodyPromptSnippetsResponse200ApplicationJSONMetadata$Outbound;
}

export function findOnePromptSnippetResponseBodyPromptSnippetsResponse200ApplicationJSONMetadataToJSON(
  findOnePromptSnippetResponseBodyPromptSnippetsResponse200ApplicationJSONMetadata:
    FindOnePromptSnippetResponseBodyPromptSnippetsResponse200ApplicationJSONMetadata,
): string {
  return JSON.stringify(
    FindOnePromptSnippetResponseBodyPromptSnippetsResponse200ApplicationJSONMetadata$outboundSchema
      .parse(
        findOnePromptSnippetResponseBodyPromptSnippetsResponse200ApplicationJSONMetadata,
      ),
  );
}

export function findOnePromptSnippetResponseBodyPromptSnippetsResponse200ApplicationJSONMetadataFromJSON(
  jsonString: string,
): SafeParseResult<
  FindOnePromptSnippetResponseBodyPromptSnippetsResponse200ApplicationJSONMetadata,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      FindOnePromptSnippetResponseBodyPromptSnippetsResponse200ApplicationJSONMetadata$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'FindOnePromptSnippetResponseBodyPromptSnippetsResponse200ApplicationJSONMetadata' from JSON`,
  );
}

/** @internal */
export const FindOnePromptSnippetResponseBodyVersions$inboundSchema: z.ZodType<
  FindOnePromptSnippetResponseBodyVersions,
  z.ZodTypeDef,
  unknown
> = z.object({
  _id: z.string(),
  created_by_id: z.string(),
  display_name: z.string(),
  updated_by_id: z.string(),
  description: z.nullable(z.string()).optional(),
  prompt_config: z.lazy(() =>
    FindOnePromptSnippetResponseBodyPromptSnippetsResponse200ApplicationJSONPromptConfig$inboundSchema
  ),
  metadata: z.lazy(() =>
    FindOnePromptSnippetResponseBodyPromptSnippetsResponse200ApplicationJSONMetadata$inboundSchema
  ),
  commit: z.string(),
  timestamp: z.string(),
}).transform((v) => {
  return remap$(v, {
    "_id": "id",
    "created_by_id": "createdById",
    "display_name": "displayName",
    "updated_by_id": "updatedById",
    "prompt_config": "promptConfig",
  });
});

/** @internal */
export type FindOnePromptSnippetResponseBodyVersions$Outbound = {
  _id: string;
  created_by_id: string;
  display_name: string;
  updated_by_id: string;
  description?: string | null | undefined;
  prompt_config:
    FindOnePromptSnippetResponseBodyPromptSnippetsResponse200ApplicationJSONPromptConfig$Outbound;
  metadata:
    FindOnePromptSnippetResponseBodyPromptSnippetsResponse200ApplicationJSONMetadata$Outbound;
  commit: string;
  timestamp: string;
};

/** @internal */
export const FindOnePromptSnippetResponseBodyVersions$outboundSchema: z.ZodType<
  FindOnePromptSnippetResponseBodyVersions$Outbound,
  z.ZodTypeDef,
  FindOnePromptSnippetResponseBodyVersions
> = z.object({
  id: z.string(),
  createdById: z.string(),
  displayName: z.string(),
  updatedById: z.string(),
  description: z.nullable(z.string()).optional(),
  promptConfig: z.lazy(() =>
    FindOnePromptSnippetResponseBodyPromptSnippetsResponse200ApplicationJSONPromptConfig$outboundSchema
  ),
  metadata: z.lazy(() =>
    FindOnePromptSnippetResponseBodyPromptSnippetsResponse200ApplicationJSONMetadata$outboundSchema
  ),
  commit: z.string(),
  timestamp: z.string(),
}).transform((v) => {
  return remap$(v, {
    id: "_id",
    createdById: "created_by_id",
    displayName: "display_name",
    updatedById: "updated_by_id",
    promptConfig: "prompt_config",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FindOnePromptSnippetResponseBodyVersions$ {
  /** @deprecated use `FindOnePromptSnippetResponseBodyVersions$inboundSchema` instead. */
  export const inboundSchema =
    FindOnePromptSnippetResponseBodyVersions$inboundSchema;
  /** @deprecated use `FindOnePromptSnippetResponseBodyVersions$outboundSchema` instead. */
  export const outboundSchema =
    FindOnePromptSnippetResponseBodyVersions$outboundSchema;
  /** @deprecated use `FindOnePromptSnippetResponseBodyVersions$Outbound` instead. */
  export type Outbound = FindOnePromptSnippetResponseBodyVersions$Outbound;
}

export function findOnePromptSnippetResponseBodyVersionsToJSON(
  findOnePromptSnippetResponseBodyVersions:
    FindOnePromptSnippetResponseBodyVersions,
): string {
  return JSON.stringify(
    FindOnePromptSnippetResponseBodyVersions$outboundSchema.parse(
      findOnePromptSnippetResponseBodyVersions,
    ),
  );
}

export function findOnePromptSnippetResponseBodyVersionsFromJSON(
  jsonString: string,
): SafeParseResult<
  FindOnePromptSnippetResponseBodyVersions,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      FindOnePromptSnippetResponseBodyVersions$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'FindOnePromptSnippetResponseBodyVersions' from JSON`,
  );
}

/** @internal */
export const FindOnePromptSnippetResponseBodyPromptSnippetsType$inboundSchema:
  z.ZodNativeEnum<typeof FindOnePromptSnippetResponseBodyPromptSnippetsType> = z
    .nativeEnum(FindOnePromptSnippetResponseBodyPromptSnippetsType);

/** @internal */
export const FindOnePromptSnippetResponseBodyPromptSnippetsType$outboundSchema:
  z.ZodNativeEnum<typeof FindOnePromptSnippetResponseBodyPromptSnippetsType> =
    FindOnePromptSnippetResponseBodyPromptSnippetsType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FindOnePromptSnippetResponseBodyPromptSnippetsType$ {
  /** @deprecated use `FindOnePromptSnippetResponseBodyPromptSnippetsType$inboundSchema` instead. */
  export const inboundSchema =
    FindOnePromptSnippetResponseBodyPromptSnippetsType$inboundSchema;
  /** @deprecated use `FindOnePromptSnippetResponseBodyPromptSnippetsType$outboundSchema` instead. */
  export const outboundSchema =
    FindOnePromptSnippetResponseBodyPromptSnippetsType$outboundSchema;
}

/** @internal */
export const ResponseBody3$inboundSchema: z.ZodType<
  ResponseBody3,
  z.ZodTypeDef,
  unknown
> = z.object({
  _id: z.string(),
  owner: z.union([
    z.string(),
    FindOnePromptSnippetOwnerPromptSnippets2$inboundSchema,
  ]),
  domain_id: z.string(),
  created_by_id: z.string(),
  display_name: z.string(),
  updated_by_id: z.string(),
  description: z.nullable(z.string()).optional(),
  prompt_config: z.lazy(() =>
    FindOnePromptSnippetResponseBodyPromptSnippetsPromptConfig$inboundSchema
  ),
  metadata: z.lazy(() =>
    FindOnePromptSnippetResponseBodyPromptSnippetsMetadata$inboundSchema
  ),
  created: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
  updated: z.string().datetime({ offset: true }).default(
    "2024-11-26T03:01:20.782Z",
  ).transform(v => new Date(v)),
  versions: z.array(
    z.lazy(() => FindOnePromptSnippetResponseBodyVersions$inboundSchema),
  ),
  type: FindOnePromptSnippetResponseBodyPromptSnippetsType$inboundSchema,
}).transform((v) => {
  return remap$(v, {
    "_id": "id",
    "domain_id": "domainId",
    "created_by_id": "createdById",
    "display_name": "displayName",
    "updated_by_id": "updatedById",
    "prompt_config": "promptConfig",
  });
});

/** @internal */
export type ResponseBody3$Outbound = {
  _id: string;
  owner: string | string;
  domain_id: string;
  created_by_id: string;
  display_name: string;
  updated_by_id: string;
  description?: string | null | undefined;
  prompt_config:
    FindOnePromptSnippetResponseBodyPromptSnippetsPromptConfig$Outbound;
  metadata: FindOnePromptSnippetResponseBodyPromptSnippetsMetadata$Outbound;
  created?: string | undefined;
  updated: string;
  versions: Array<FindOnePromptSnippetResponseBodyVersions$Outbound>;
  type: string;
};

/** @internal */
export const ResponseBody3$outboundSchema: z.ZodType<
  ResponseBody3$Outbound,
  z.ZodTypeDef,
  ResponseBody3
> = z.object({
  id: z.string(),
  owner: z.union([
    z.string(),
    FindOnePromptSnippetOwnerPromptSnippets2$outboundSchema,
  ]),
  domainId: z.string(),
  createdById: z.string(),
  displayName: z.string(),
  updatedById: z.string(),
  description: z.nullable(z.string()).optional(),
  promptConfig: z.lazy(() =>
    FindOnePromptSnippetResponseBodyPromptSnippetsPromptConfig$outboundSchema
  ),
  metadata: z.lazy(() =>
    FindOnePromptSnippetResponseBodyPromptSnippetsMetadata$outboundSchema
  ),
  created: z.date().transform(v => v.toISOString()).optional(),
  updated: z.date().default(() => new Date("2024-11-26T03:01:20.782Z"))
    .transform(v => v.toISOString()),
  versions: z.array(
    z.lazy(() => FindOnePromptSnippetResponseBodyVersions$outboundSchema),
  ),
  type: FindOnePromptSnippetResponseBodyPromptSnippetsType$outboundSchema,
}).transform((v) => {
  return remap$(v, {
    id: "_id",
    domainId: "domain_id",
    createdById: "created_by_id",
    displayName: "display_name",
    updatedById: "updated_by_id",
    promptConfig: "prompt_config",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ResponseBody3$ {
  /** @deprecated use `ResponseBody3$inboundSchema` instead. */
  export const inboundSchema = ResponseBody3$inboundSchema;
  /** @deprecated use `ResponseBody3$outboundSchema` instead. */
  export const outboundSchema = ResponseBody3$outboundSchema;
  /** @deprecated use `ResponseBody3$Outbound` instead. */
  export type Outbound = ResponseBody3$Outbound;
}

export function responseBody3ToJSON(responseBody3: ResponseBody3): string {
  return JSON.stringify(ResponseBody3$outboundSchema.parse(responseBody3));
}

export function responseBody3FromJSON(
  jsonString: string,
): SafeParseResult<ResponseBody3, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ResponseBody3$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ResponseBody3' from JSON`,
  );
}

/** @internal */
export const FindOnePromptSnippetOwner2$inboundSchema: z.ZodNativeEnum<
  typeof FindOnePromptSnippetOwner2
> = z.nativeEnum(FindOnePromptSnippetOwner2);

/** @internal */
export const FindOnePromptSnippetOwner2$outboundSchema: z.ZodNativeEnum<
  typeof FindOnePromptSnippetOwner2
> = FindOnePromptSnippetOwner2$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FindOnePromptSnippetOwner2$ {
  /** @deprecated use `FindOnePromptSnippetOwner2$inboundSchema` instead. */
  export const inboundSchema = FindOnePromptSnippetOwner2$inboundSchema;
  /** @deprecated use `FindOnePromptSnippetOwner2$outboundSchema` instead. */
  export const outboundSchema = FindOnePromptSnippetOwner2$outboundSchema;
}

/** @internal */
export const ResponseBodyOwner$inboundSchema: z.ZodType<
  ResponseBodyOwner,
  z.ZodTypeDef,
  unknown
> = z.union([z.string(), FindOnePromptSnippetOwner2$inboundSchema]);

/** @internal */
export type ResponseBodyOwner$Outbound = string | string;

/** @internal */
export const ResponseBodyOwner$outboundSchema: z.ZodType<
  ResponseBodyOwner$Outbound,
  z.ZodTypeDef,
  ResponseBodyOwner
> = z.union([z.string(), FindOnePromptSnippetOwner2$outboundSchema]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ResponseBodyOwner$ {
  /** @deprecated use `ResponseBodyOwner$inboundSchema` instead. */
  export const inboundSchema = ResponseBodyOwner$inboundSchema;
  /** @deprecated use `ResponseBodyOwner$outboundSchema` instead. */
  export const outboundSchema = ResponseBodyOwner$outboundSchema;
  /** @deprecated use `ResponseBodyOwner$Outbound` instead. */
  export type Outbound = ResponseBodyOwner$Outbound;
}

export function responseBodyOwnerToJSON(
  responseBodyOwner: ResponseBodyOwner,
): string {
  return JSON.stringify(
    ResponseBodyOwner$outboundSchema.parse(responseBodyOwner),
  );
}

export function responseBodyOwnerFromJSON(
  jsonString: string,
): SafeParseResult<ResponseBodyOwner, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ResponseBodyOwner$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ResponseBodyOwner' from JSON`,
  );
}

/** @internal */
export const FindOnePromptSnippetResponseBodyModelType$inboundSchema:
  z.ZodNativeEnum<typeof FindOnePromptSnippetResponseBodyModelType> = z
    .nativeEnum(FindOnePromptSnippetResponseBodyModelType);

/** @internal */
export const FindOnePromptSnippetResponseBodyModelType$outboundSchema:
  z.ZodNativeEnum<typeof FindOnePromptSnippetResponseBodyModelType> =
    FindOnePromptSnippetResponseBodyModelType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FindOnePromptSnippetResponseBodyModelType$ {
  /** @deprecated use `FindOnePromptSnippetResponseBodyModelType$inboundSchema` instead. */
  export const inboundSchema =
    FindOnePromptSnippetResponseBodyModelType$inboundSchema;
  /** @deprecated use `FindOnePromptSnippetResponseBodyModelType$outboundSchema` instead. */
  export const outboundSchema =
    FindOnePromptSnippetResponseBodyModelType$outboundSchema;
}

/** @internal */
export const FindOnePromptSnippetResponseBodyFormat$inboundSchema:
  z.ZodNativeEnum<typeof FindOnePromptSnippetResponseBodyFormat> = z.nativeEnum(
    FindOnePromptSnippetResponseBodyFormat,
  );

/** @internal */
export const FindOnePromptSnippetResponseBodyFormat$outboundSchema:
  z.ZodNativeEnum<typeof FindOnePromptSnippetResponseBodyFormat> =
    FindOnePromptSnippetResponseBodyFormat$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FindOnePromptSnippetResponseBodyFormat$ {
  /** @deprecated use `FindOnePromptSnippetResponseBodyFormat$inboundSchema` instead. */
  export const inboundSchema =
    FindOnePromptSnippetResponseBodyFormat$inboundSchema;
  /** @deprecated use `FindOnePromptSnippetResponseBodyFormat$outboundSchema` instead. */
  export const outboundSchema =
    FindOnePromptSnippetResponseBodyFormat$outboundSchema;
}

/** @internal */
export const FindOnePromptSnippetResponseBodyQuality$inboundSchema:
  z.ZodNativeEnum<typeof FindOnePromptSnippetResponseBodyQuality> = z
    .nativeEnum(FindOnePromptSnippetResponseBodyQuality);

/** @internal */
export const FindOnePromptSnippetResponseBodyQuality$outboundSchema:
  z.ZodNativeEnum<typeof FindOnePromptSnippetResponseBodyQuality> =
    FindOnePromptSnippetResponseBodyQuality$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FindOnePromptSnippetResponseBodyQuality$ {
  /** @deprecated use `FindOnePromptSnippetResponseBodyQuality$inboundSchema` instead. */
  export const inboundSchema =
    FindOnePromptSnippetResponseBodyQuality$inboundSchema;
  /** @deprecated use `FindOnePromptSnippetResponseBodyQuality$outboundSchema` instead. */
  export const outboundSchema =
    FindOnePromptSnippetResponseBodyQuality$outboundSchema;
}

/** @internal */
export const FindOnePromptSnippetResponseFormatPromptSnippetsResponse200Type$inboundSchema:
  z.ZodNativeEnum<
    typeof FindOnePromptSnippetResponseFormatPromptSnippetsResponse200Type
  > = z.nativeEnum(
    FindOnePromptSnippetResponseFormatPromptSnippetsResponse200Type,
  );

/** @internal */
export const FindOnePromptSnippetResponseFormatPromptSnippetsResponse200Type$outboundSchema:
  z.ZodNativeEnum<
    typeof FindOnePromptSnippetResponseFormatPromptSnippetsResponse200Type
  > =
    FindOnePromptSnippetResponseFormatPromptSnippetsResponse200Type$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FindOnePromptSnippetResponseFormatPromptSnippetsResponse200Type$ {
  /** @deprecated use `FindOnePromptSnippetResponseFormatPromptSnippetsResponse200Type$inboundSchema` instead. */
  export const inboundSchema =
    FindOnePromptSnippetResponseFormatPromptSnippetsResponse200Type$inboundSchema;
  /** @deprecated use `FindOnePromptSnippetResponseFormatPromptSnippetsResponse200Type$outboundSchema` instead. */
  export const outboundSchema =
    FindOnePromptSnippetResponseFormatPromptSnippetsResponse200Type$outboundSchema;
}

/** @internal */
export const FindOnePromptSnippetResponseFormatPromptSnippets2$inboundSchema:
  z.ZodType<
    FindOnePromptSnippetResponseFormatPromptSnippets2,
    z.ZodTypeDef,
    unknown
  > = z.object({
    type:
      FindOnePromptSnippetResponseFormatPromptSnippetsResponse200Type$inboundSchema,
  });

/** @internal */
export type FindOnePromptSnippetResponseFormatPromptSnippets2$Outbound = {
  type: string;
};

/** @internal */
export const FindOnePromptSnippetResponseFormatPromptSnippets2$outboundSchema:
  z.ZodType<
    FindOnePromptSnippetResponseFormatPromptSnippets2$Outbound,
    z.ZodTypeDef,
    FindOnePromptSnippetResponseFormatPromptSnippets2
  > = z.object({
    type:
      FindOnePromptSnippetResponseFormatPromptSnippetsResponse200Type$outboundSchema,
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FindOnePromptSnippetResponseFormatPromptSnippets2$ {
  /** @deprecated use `FindOnePromptSnippetResponseFormatPromptSnippets2$inboundSchema` instead. */
  export const inboundSchema =
    FindOnePromptSnippetResponseFormatPromptSnippets2$inboundSchema;
  /** @deprecated use `FindOnePromptSnippetResponseFormatPromptSnippets2$outboundSchema` instead. */
  export const outboundSchema =
    FindOnePromptSnippetResponseFormatPromptSnippets2$outboundSchema;
  /** @deprecated use `FindOnePromptSnippetResponseFormatPromptSnippets2$Outbound` instead. */
  export type Outbound =
    FindOnePromptSnippetResponseFormatPromptSnippets2$Outbound;
}

export function findOnePromptSnippetResponseFormatPromptSnippets2ToJSON(
  findOnePromptSnippetResponseFormatPromptSnippets2:
    FindOnePromptSnippetResponseFormatPromptSnippets2,
): string {
  return JSON.stringify(
    FindOnePromptSnippetResponseFormatPromptSnippets2$outboundSchema.parse(
      findOnePromptSnippetResponseFormatPromptSnippets2,
    ),
  );
}

export function findOnePromptSnippetResponseFormatPromptSnippets2FromJSON(
  jsonString: string,
): SafeParseResult<
  FindOnePromptSnippetResponseFormatPromptSnippets2,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      FindOnePromptSnippetResponseFormatPromptSnippets2$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'FindOnePromptSnippetResponseFormatPromptSnippets2' from JSON`,
  );
}

/** @internal */
export const FindOnePromptSnippetResponseFormatPromptSnippetsResponseType$inboundSchema:
  z.ZodNativeEnum<
    typeof FindOnePromptSnippetResponseFormatPromptSnippetsResponseType
  > = z.nativeEnum(
    FindOnePromptSnippetResponseFormatPromptSnippetsResponseType,
  );

/** @internal */
export const FindOnePromptSnippetResponseFormatPromptSnippetsResponseType$outboundSchema:
  z.ZodNativeEnum<
    typeof FindOnePromptSnippetResponseFormatPromptSnippetsResponseType
  > =
    FindOnePromptSnippetResponseFormatPromptSnippetsResponseType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FindOnePromptSnippetResponseFormatPromptSnippetsResponseType$ {
  /** @deprecated use `FindOnePromptSnippetResponseFormatPromptSnippetsResponseType$inboundSchema` instead. */
  export const inboundSchema =
    FindOnePromptSnippetResponseFormatPromptSnippetsResponseType$inboundSchema;
  /** @deprecated use `FindOnePromptSnippetResponseFormatPromptSnippetsResponseType$outboundSchema` instead. */
  export const outboundSchema =
    FindOnePromptSnippetResponseFormatPromptSnippetsResponseType$outboundSchema;
}

/** @internal */
export const FindOnePromptSnippetResponseFormatPromptSnippetsJsonSchema$inboundSchema:
  z.ZodType<
    FindOnePromptSnippetResponseFormatPromptSnippetsJsonSchema,
    z.ZodTypeDef,
    unknown
  > = z.object({
    name: z.string(),
    strict: z.boolean(),
    schema: z.record(z.any()),
  });

/** @internal */
export type FindOnePromptSnippetResponseFormatPromptSnippetsJsonSchema$Outbound =
  {
    name: string;
    strict: boolean;
    schema: { [k: string]: any };
  };

/** @internal */
export const FindOnePromptSnippetResponseFormatPromptSnippetsJsonSchema$outboundSchema:
  z.ZodType<
    FindOnePromptSnippetResponseFormatPromptSnippetsJsonSchema$Outbound,
    z.ZodTypeDef,
    FindOnePromptSnippetResponseFormatPromptSnippetsJsonSchema
  > = z.object({
    name: z.string(),
    strict: z.boolean(),
    schema: z.record(z.any()),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FindOnePromptSnippetResponseFormatPromptSnippetsJsonSchema$ {
  /** @deprecated use `FindOnePromptSnippetResponseFormatPromptSnippetsJsonSchema$inboundSchema` instead. */
  export const inboundSchema =
    FindOnePromptSnippetResponseFormatPromptSnippetsJsonSchema$inboundSchema;
  /** @deprecated use `FindOnePromptSnippetResponseFormatPromptSnippetsJsonSchema$outboundSchema` instead. */
  export const outboundSchema =
    FindOnePromptSnippetResponseFormatPromptSnippetsJsonSchema$outboundSchema;
  /** @deprecated use `FindOnePromptSnippetResponseFormatPromptSnippetsJsonSchema$Outbound` instead. */
  export type Outbound =
    FindOnePromptSnippetResponseFormatPromptSnippetsJsonSchema$Outbound;
}

export function findOnePromptSnippetResponseFormatPromptSnippetsJsonSchemaToJSON(
  findOnePromptSnippetResponseFormatPromptSnippetsJsonSchema:
    FindOnePromptSnippetResponseFormatPromptSnippetsJsonSchema,
): string {
  return JSON.stringify(
    FindOnePromptSnippetResponseFormatPromptSnippetsJsonSchema$outboundSchema
      .parse(findOnePromptSnippetResponseFormatPromptSnippetsJsonSchema),
  );
}

export function findOnePromptSnippetResponseFormatPromptSnippetsJsonSchemaFromJSON(
  jsonString: string,
): SafeParseResult<
  FindOnePromptSnippetResponseFormatPromptSnippetsJsonSchema,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      FindOnePromptSnippetResponseFormatPromptSnippetsJsonSchema$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'FindOnePromptSnippetResponseFormatPromptSnippetsJsonSchema' from JSON`,
  );
}

/** @internal */
export const FindOnePromptSnippetResponseFormatPromptSnippets1$inboundSchema:
  z.ZodType<
    FindOnePromptSnippetResponseFormatPromptSnippets1,
    z.ZodTypeDef,
    unknown
  > = z.object({
    type:
      FindOnePromptSnippetResponseFormatPromptSnippetsResponseType$inboundSchema,
    json_schema: z.lazy(() =>
      FindOnePromptSnippetResponseFormatPromptSnippetsJsonSchema$inboundSchema
    ),
  }).transform((v) => {
    return remap$(v, {
      "json_schema": "jsonSchema",
    });
  });

/** @internal */
export type FindOnePromptSnippetResponseFormatPromptSnippets1$Outbound = {
  type: string;
  json_schema:
    FindOnePromptSnippetResponseFormatPromptSnippetsJsonSchema$Outbound;
};

/** @internal */
export const FindOnePromptSnippetResponseFormatPromptSnippets1$outboundSchema:
  z.ZodType<
    FindOnePromptSnippetResponseFormatPromptSnippets1$Outbound,
    z.ZodTypeDef,
    FindOnePromptSnippetResponseFormatPromptSnippets1
  > = z.object({
    type:
      FindOnePromptSnippetResponseFormatPromptSnippetsResponseType$outboundSchema,
    jsonSchema: z.lazy(() =>
      FindOnePromptSnippetResponseFormatPromptSnippetsJsonSchema$outboundSchema
    ),
  }).transform((v) => {
    return remap$(v, {
      jsonSchema: "json_schema",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FindOnePromptSnippetResponseFormatPromptSnippets1$ {
  /** @deprecated use `FindOnePromptSnippetResponseFormatPromptSnippets1$inboundSchema` instead. */
  export const inboundSchema =
    FindOnePromptSnippetResponseFormatPromptSnippets1$inboundSchema;
  /** @deprecated use `FindOnePromptSnippetResponseFormatPromptSnippets1$outboundSchema` instead. */
  export const outboundSchema =
    FindOnePromptSnippetResponseFormatPromptSnippets1$outboundSchema;
  /** @deprecated use `FindOnePromptSnippetResponseFormatPromptSnippets1$Outbound` instead. */
  export type Outbound =
    FindOnePromptSnippetResponseFormatPromptSnippets1$Outbound;
}

export function findOnePromptSnippetResponseFormatPromptSnippets1ToJSON(
  findOnePromptSnippetResponseFormatPromptSnippets1:
    FindOnePromptSnippetResponseFormatPromptSnippets1,
): string {
  return JSON.stringify(
    FindOnePromptSnippetResponseFormatPromptSnippets1$outboundSchema.parse(
      findOnePromptSnippetResponseFormatPromptSnippets1,
    ),
  );
}

export function findOnePromptSnippetResponseFormatPromptSnippets1FromJSON(
  jsonString: string,
): SafeParseResult<
  FindOnePromptSnippetResponseFormatPromptSnippets1,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      FindOnePromptSnippetResponseFormatPromptSnippets1$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'FindOnePromptSnippetResponseFormatPromptSnippets1' from JSON`,
  );
}

/** @internal */
export const FindOnePromptSnippetResponseBodyResponseFormat$inboundSchema:
  z.ZodType<
    FindOnePromptSnippetResponseBodyResponseFormat,
    z.ZodTypeDef,
    unknown
  > = z.union([
    z.lazy(() =>
      FindOnePromptSnippetResponseFormatPromptSnippets2$inboundSchema
    ),
    z.lazy(() =>
      FindOnePromptSnippetResponseFormatPromptSnippets1$inboundSchema
    ),
  ]);

/** @internal */
export type FindOnePromptSnippetResponseBodyResponseFormat$Outbound =
  | FindOnePromptSnippetResponseFormatPromptSnippets2$Outbound
  | FindOnePromptSnippetResponseFormatPromptSnippets1$Outbound;

/** @internal */
export const FindOnePromptSnippetResponseBodyResponseFormat$outboundSchema:
  z.ZodType<
    FindOnePromptSnippetResponseBodyResponseFormat$Outbound,
    z.ZodTypeDef,
    FindOnePromptSnippetResponseBodyResponseFormat
  > = z.union([
    z.lazy(() =>
      FindOnePromptSnippetResponseFormatPromptSnippets2$outboundSchema
    ),
    z.lazy(() =>
      FindOnePromptSnippetResponseFormatPromptSnippets1$outboundSchema
    ),
  ]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FindOnePromptSnippetResponseBodyResponseFormat$ {
  /** @deprecated use `FindOnePromptSnippetResponseBodyResponseFormat$inboundSchema` instead. */
  export const inboundSchema =
    FindOnePromptSnippetResponseBodyResponseFormat$inboundSchema;
  /** @deprecated use `FindOnePromptSnippetResponseBodyResponseFormat$outboundSchema` instead. */
  export const outboundSchema =
    FindOnePromptSnippetResponseBodyResponseFormat$outboundSchema;
  /** @deprecated use `FindOnePromptSnippetResponseBodyResponseFormat$Outbound` instead. */
  export type Outbound =
    FindOnePromptSnippetResponseBodyResponseFormat$Outbound;
}

export function findOnePromptSnippetResponseBodyResponseFormatToJSON(
  findOnePromptSnippetResponseBodyResponseFormat:
    FindOnePromptSnippetResponseBodyResponseFormat,
): string {
  return JSON.stringify(
    FindOnePromptSnippetResponseBodyResponseFormat$outboundSchema.parse(
      findOnePromptSnippetResponseBodyResponseFormat,
    ),
  );
}

export function findOnePromptSnippetResponseBodyResponseFormatFromJSON(
  jsonString: string,
): SafeParseResult<
  FindOnePromptSnippetResponseBodyResponseFormat,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      FindOnePromptSnippetResponseBodyResponseFormat$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'FindOnePromptSnippetResponseBodyResponseFormat' from JSON`,
  );
}

/** @internal */
export const FindOnePromptSnippetResponseBodyPhotoRealVersion$inboundSchema:
  z.ZodNativeEnum<typeof FindOnePromptSnippetResponseBodyPhotoRealVersion> = z
    .nativeEnum(FindOnePromptSnippetResponseBodyPhotoRealVersion);

/** @internal */
export const FindOnePromptSnippetResponseBodyPhotoRealVersion$outboundSchema:
  z.ZodNativeEnum<typeof FindOnePromptSnippetResponseBodyPhotoRealVersion> =
    FindOnePromptSnippetResponseBodyPhotoRealVersion$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FindOnePromptSnippetResponseBodyPhotoRealVersion$ {
  /** @deprecated use `FindOnePromptSnippetResponseBodyPhotoRealVersion$inboundSchema` instead. */
  export const inboundSchema =
    FindOnePromptSnippetResponseBodyPhotoRealVersion$inboundSchema;
  /** @deprecated use `FindOnePromptSnippetResponseBodyPhotoRealVersion$outboundSchema` instead. */
  export const outboundSchema =
    FindOnePromptSnippetResponseBodyPhotoRealVersion$outboundSchema;
}

/** @internal */
export const FindOnePromptSnippetResponseBodyEncodingFormat$inboundSchema:
  z.ZodNativeEnum<typeof FindOnePromptSnippetResponseBodyEncodingFormat> = z
    .nativeEnum(FindOnePromptSnippetResponseBodyEncodingFormat);

/** @internal */
export const FindOnePromptSnippetResponseBodyEncodingFormat$outboundSchema:
  z.ZodNativeEnum<typeof FindOnePromptSnippetResponseBodyEncodingFormat> =
    FindOnePromptSnippetResponseBodyEncodingFormat$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FindOnePromptSnippetResponseBodyEncodingFormat$ {
  /** @deprecated use `FindOnePromptSnippetResponseBodyEncodingFormat$inboundSchema` instead. */
  export const inboundSchema =
    FindOnePromptSnippetResponseBodyEncodingFormat$inboundSchema;
  /** @deprecated use `FindOnePromptSnippetResponseBodyEncodingFormat$outboundSchema` instead. */
  export const outboundSchema =
    FindOnePromptSnippetResponseBodyEncodingFormat$outboundSchema;
}

/** @internal */
export const FindOnePromptSnippetResponseBodyModelParameters$inboundSchema:
  z.ZodType<
    FindOnePromptSnippetResponseBodyModelParameters,
    z.ZodTypeDef,
    unknown
  > = z.object({
    temperature: z.number().optional(),
    maxTokens: z.number().optional(),
    topK: z.number().optional(),
    topP: z.number().optional(),
    frequencyPenalty: z.number().optional(),
    presencePenalty: z.number().optional(),
    numImages: z.number().optional(),
    seed: z.number().optional(),
    format: FindOnePromptSnippetResponseBodyFormat$inboundSchema.optional(),
    dimensions: z.string().optional(),
    quality: FindOnePromptSnippetResponseBodyQuality$inboundSchema.optional(),
    style: z.string().optional(),
    responseFormat: z.nullable(
      z.union([
        z.lazy(() =>
          FindOnePromptSnippetResponseFormatPromptSnippets2$inboundSchema
        ),
        z.lazy(() =>
          FindOnePromptSnippetResponseFormatPromptSnippets1$inboundSchema
        ),
      ]),
    ).optional(),
    photoRealVersion:
      FindOnePromptSnippetResponseBodyPhotoRealVersion$inboundSchema.optional(),
    encoding_format:
      FindOnePromptSnippetResponseBodyEncodingFormat$inboundSchema.optional(),
  }).transform((v) => {
    return remap$(v, {
      "encoding_format": "encodingFormat",
    });
  });

/** @internal */
export type FindOnePromptSnippetResponseBodyModelParameters$Outbound = {
  temperature?: number | undefined;
  maxTokens?: number | undefined;
  topK?: number | undefined;
  topP?: number | undefined;
  frequencyPenalty?: number | undefined;
  presencePenalty?: number | undefined;
  numImages?: number | undefined;
  seed?: number | undefined;
  format?: string | undefined;
  dimensions?: string | undefined;
  quality?: string | undefined;
  style?: string | undefined;
  responseFormat?:
    | FindOnePromptSnippetResponseFormatPromptSnippets2$Outbound
    | FindOnePromptSnippetResponseFormatPromptSnippets1$Outbound
    | null
    | undefined;
  photoRealVersion?: string | undefined;
  encoding_format?: string | undefined;
};

/** @internal */
export const FindOnePromptSnippetResponseBodyModelParameters$outboundSchema:
  z.ZodType<
    FindOnePromptSnippetResponseBodyModelParameters$Outbound,
    z.ZodTypeDef,
    FindOnePromptSnippetResponseBodyModelParameters
  > = z.object({
    temperature: z.number().optional(),
    maxTokens: z.number().optional(),
    topK: z.number().optional(),
    topP: z.number().optional(),
    frequencyPenalty: z.number().optional(),
    presencePenalty: z.number().optional(),
    numImages: z.number().optional(),
    seed: z.number().optional(),
    format: FindOnePromptSnippetResponseBodyFormat$outboundSchema.optional(),
    dimensions: z.string().optional(),
    quality: FindOnePromptSnippetResponseBodyQuality$outboundSchema.optional(),
    style: z.string().optional(),
    responseFormat: z.nullable(
      z.union([
        z.lazy(() =>
          FindOnePromptSnippetResponseFormatPromptSnippets2$outboundSchema
        ),
        z.lazy(() =>
          FindOnePromptSnippetResponseFormatPromptSnippets1$outboundSchema
        ),
      ]),
    ).optional(),
    photoRealVersion:
      FindOnePromptSnippetResponseBodyPhotoRealVersion$outboundSchema
        .optional(),
    encodingFormat:
      FindOnePromptSnippetResponseBodyEncodingFormat$outboundSchema.optional(),
  }).transform((v) => {
    return remap$(v, {
      encodingFormat: "encoding_format",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FindOnePromptSnippetResponseBodyModelParameters$ {
  /** @deprecated use `FindOnePromptSnippetResponseBodyModelParameters$inboundSchema` instead. */
  export const inboundSchema =
    FindOnePromptSnippetResponseBodyModelParameters$inboundSchema;
  /** @deprecated use `FindOnePromptSnippetResponseBodyModelParameters$outboundSchema` instead. */
  export const outboundSchema =
    FindOnePromptSnippetResponseBodyModelParameters$outboundSchema;
  /** @deprecated use `FindOnePromptSnippetResponseBodyModelParameters$Outbound` instead. */
  export type Outbound =
    FindOnePromptSnippetResponseBodyModelParameters$Outbound;
}

export function findOnePromptSnippetResponseBodyModelParametersToJSON(
  findOnePromptSnippetResponseBodyModelParameters:
    FindOnePromptSnippetResponseBodyModelParameters,
): string {
  return JSON.stringify(
    FindOnePromptSnippetResponseBodyModelParameters$outboundSchema.parse(
      findOnePromptSnippetResponseBodyModelParameters,
    ),
  );
}

export function findOnePromptSnippetResponseBodyModelParametersFromJSON(
  jsonString: string,
): SafeParseResult<
  FindOnePromptSnippetResponseBodyModelParameters,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      FindOnePromptSnippetResponseBodyModelParameters$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'FindOnePromptSnippetResponseBodyModelParameters' from JSON`,
  );
}

/** @internal */
export const FindOnePromptSnippetResponseBodyProvider$inboundSchema:
  z.ZodNativeEnum<typeof FindOnePromptSnippetResponseBodyProvider> = z
    .nativeEnum(FindOnePromptSnippetResponseBodyProvider);

/** @internal */
export const FindOnePromptSnippetResponseBodyProvider$outboundSchema:
  z.ZodNativeEnum<typeof FindOnePromptSnippetResponseBodyProvider> =
    FindOnePromptSnippetResponseBodyProvider$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FindOnePromptSnippetResponseBodyProvider$ {
  /** @deprecated use `FindOnePromptSnippetResponseBodyProvider$inboundSchema` instead. */
  export const inboundSchema =
    FindOnePromptSnippetResponseBodyProvider$inboundSchema;
  /** @deprecated use `FindOnePromptSnippetResponseBodyProvider$outboundSchema` instead. */
  export const outboundSchema =
    FindOnePromptSnippetResponseBodyProvider$outboundSchema;
}

/** @internal */
export const FindOnePromptSnippetResponseBodyRole$inboundSchema:
  z.ZodNativeEnum<typeof FindOnePromptSnippetResponseBodyRole> = z.nativeEnum(
    FindOnePromptSnippetResponseBodyRole,
  );

/** @internal */
export const FindOnePromptSnippetResponseBodyRole$outboundSchema:
  z.ZodNativeEnum<typeof FindOnePromptSnippetResponseBodyRole> =
    FindOnePromptSnippetResponseBodyRole$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FindOnePromptSnippetResponseBodyRole$ {
  /** @deprecated use `FindOnePromptSnippetResponseBodyRole$inboundSchema` instead. */
  export const inboundSchema =
    FindOnePromptSnippetResponseBodyRole$inboundSchema;
  /** @deprecated use `FindOnePromptSnippetResponseBodyRole$outboundSchema` instead. */
  export const outboundSchema =
    FindOnePromptSnippetResponseBodyRole$outboundSchema;
}

/** @internal */
export const FindOnePromptSnippet2PromptSnippetsResponse200Type$inboundSchema:
  z.ZodNativeEnum<typeof FindOnePromptSnippet2PromptSnippetsResponse200Type> = z
    .nativeEnum(FindOnePromptSnippet2PromptSnippetsResponse200Type);

/** @internal */
export const FindOnePromptSnippet2PromptSnippetsResponse200Type$outboundSchema:
  z.ZodNativeEnum<typeof FindOnePromptSnippet2PromptSnippetsResponse200Type> =
    FindOnePromptSnippet2PromptSnippetsResponse200Type$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FindOnePromptSnippet2PromptSnippetsResponse200Type$ {
  /** @deprecated use `FindOnePromptSnippet2PromptSnippetsResponse200Type$inboundSchema` instead. */
  export const inboundSchema =
    FindOnePromptSnippet2PromptSnippetsResponse200Type$inboundSchema;
  /** @deprecated use `FindOnePromptSnippet2PromptSnippetsResponse200Type$outboundSchema` instead. */
  export const outboundSchema =
    FindOnePromptSnippet2PromptSnippetsResponse200Type$outboundSchema;
}

/** @internal */
export const FindOnePromptSnippet2PromptSnippetsImageUrl$inboundSchema:
  z.ZodType<
    FindOnePromptSnippet2PromptSnippetsImageUrl,
    z.ZodTypeDef,
    unknown
  > = z.object({
    id: z.string().optional(),
    url: z.string(),
    detail: z.string().optional(),
  });

/** @internal */
export type FindOnePromptSnippet2PromptSnippetsImageUrl$Outbound = {
  id?: string | undefined;
  url: string;
  detail?: string | undefined;
};

/** @internal */
export const FindOnePromptSnippet2PromptSnippetsImageUrl$outboundSchema:
  z.ZodType<
    FindOnePromptSnippet2PromptSnippetsImageUrl$Outbound,
    z.ZodTypeDef,
    FindOnePromptSnippet2PromptSnippetsImageUrl
  > = z.object({
    id: z.string().optional(),
    url: z.string(),
    detail: z.string().optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FindOnePromptSnippet2PromptSnippetsImageUrl$ {
  /** @deprecated use `FindOnePromptSnippet2PromptSnippetsImageUrl$inboundSchema` instead. */
  export const inboundSchema =
    FindOnePromptSnippet2PromptSnippetsImageUrl$inboundSchema;
  /** @deprecated use `FindOnePromptSnippet2PromptSnippetsImageUrl$outboundSchema` instead. */
  export const outboundSchema =
    FindOnePromptSnippet2PromptSnippetsImageUrl$outboundSchema;
  /** @deprecated use `FindOnePromptSnippet2PromptSnippetsImageUrl$Outbound` instead. */
  export type Outbound = FindOnePromptSnippet2PromptSnippetsImageUrl$Outbound;
}

export function findOnePromptSnippet2PromptSnippetsImageUrlToJSON(
  findOnePromptSnippet2PromptSnippetsImageUrl:
    FindOnePromptSnippet2PromptSnippetsImageUrl,
): string {
  return JSON.stringify(
    FindOnePromptSnippet2PromptSnippetsImageUrl$outboundSchema.parse(
      findOnePromptSnippet2PromptSnippetsImageUrl,
    ),
  );
}

export function findOnePromptSnippet2PromptSnippetsImageUrlFromJSON(
  jsonString: string,
): SafeParseResult<
  FindOnePromptSnippet2PromptSnippetsImageUrl,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      FindOnePromptSnippet2PromptSnippetsImageUrl$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'FindOnePromptSnippet2PromptSnippetsImageUrl' from JSON`,
  );
}

/** @internal */
export const FindOnePromptSnippet2PromptSnippets2$inboundSchema: z.ZodType<
  FindOnePromptSnippet2PromptSnippets2,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: FindOnePromptSnippet2PromptSnippetsResponse200Type$inboundSchema,
  image_url: z.lazy(() =>
    FindOnePromptSnippet2PromptSnippetsImageUrl$inboundSchema
  ),
}).transform((v) => {
  return remap$(v, {
    "image_url": "imageUrl",
  });
});

/** @internal */
export type FindOnePromptSnippet2PromptSnippets2$Outbound = {
  type: string;
  image_url: FindOnePromptSnippet2PromptSnippetsImageUrl$Outbound;
};

/** @internal */
export const FindOnePromptSnippet2PromptSnippets2$outboundSchema: z.ZodType<
  FindOnePromptSnippet2PromptSnippets2$Outbound,
  z.ZodTypeDef,
  FindOnePromptSnippet2PromptSnippets2
> = z.object({
  type: FindOnePromptSnippet2PromptSnippetsResponse200Type$outboundSchema,
  imageUrl: z.lazy(() =>
    FindOnePromptSnippet2PromptSnippetsImageUrl$outboundSchema
  ),
}).transform((v) => {
  return remap$(v, {
    imageUrl: "image_url",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FindOnePromptSnippet2PromptSnippets2$ {
  /** @deprecated use `FindOnePromptSnippet2PromptSnippets2$inboundSchema` instead. */
  export const inboundSchema =
    FindOnePromptSnippet2PromptSnippets2$inboundSchema;
  /** @deprecated use `FindOnePromptSnippet2PromptSnippets2$outboundSchema` instead. */
  export const outboundSchema =
    FindOnePromptSnippet2PromptSnippets2$outboundSchema;
  /** @deprecated use `FindOnePromptSnippet2PromptSnippets2$Outbound` instead. */
  export type Outbound = FindOnePromptSnippet2PromptSnippets2$Outbound;
}

export function findOnePromptSnippet2PromptSnippets2ToJSON(
  findOnePromptSnippet2PromptSnippets2: FindOnePromptSnippet2PromptSnippets2,
): string {
  return JSON.stringify(
    FindOnePromptSnippet2PromptSnippets2$outboundSchema.parse(
      findOnePromptSnippet2PromptSnippets2,
    ),
  );
}

export function findOnePromptSnippet2PromptSnippets2FromJSON(
  jsonString: string,
): SafeParseResult<FindOnePromptSnippet2PromptSnippets2, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      FindOnePromptSnippet2PromptSnippets2$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'FindOnePromptSnippet2PromptSnippets2' from JSON`,
  );
}

/** @internal */
export const FindOnePromptSnippet2PromptSnippetsResponseType$inboundSchema:
  z.ZodNativeEnum<typeof FindOnePromptSnippet2PromptSnippetsResponseType> = z
    .nativeEnum(FindOnePromptSnippet2PromptSnippetsResponseType);

/** @internal */
export const FindOnePromptSnippet2PromptSnippetsResponseType$outboundSchema:
  z.ZodNativeEnum<typeof FindOnePromptSnippet2PromptSnippetsResponseType> =
    FindOnePromptSnippet2PromptSnippetsResponseType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FindOnePromptSnippet2PromptSnippetsResponseType$ {
  /** @deprecated use `FindOnePromptSnippet2PromptSnippetsResponseType$inboundSchema` instead. */
  export const inboundSchema =
    FindOnePromptSnippet2PromptSnippetsResponseType$inboundSchema;
  /** @deprecated use `FindOnePromptSnippet2PromptSnippetsResponseType$outboundSchema` instead. */
  export const outboundSchema =
    FindOnePromptSnippet2PromptSnippetsResponseType$outboundSchema;
}

/** @internal */
export const FindOnePromptSnippet2PromptSnippets1$inboundSchema: z.ZodType<
  FindOnePromptSnippet2PromptSnippets1,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: FindOnePromptSnippet2PromptSnippetsResponseType$inboundSchema,
  text: z.string(),
});

/** @internal */
export type FindOnePromptSnippet2PromptSnippets1$Outbound = {
  type: string;
  text: string;
};

/** @internal */
export const FindOnePromptSnippet2PromptSnippets1$outboundSchema: z.ZodType<
  FindOnePromptSnippet2PromptSnippets1$Outbound,
  z.ZodTypeDef,
  FindOnePromptSnippet2PromptSnippets1
> = z.object({
  type: FindOnePromptSnippet2PromptSnippetsResponseType$outboundSchema,
  text: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FindOnePromptSnippet2PromptSnippets1$ {
  /** @deprecated use `FindOnePromptSnippet2PromptSnippets1$inboundSchema` instead. */
  export const inboundSchema =
    FindOnePromptSnippet2PromptSnippets1$inboundSchema;
  /** @deprecated use `FindOnePromptSnippet2PromptSnippets1$outboundSchema` instead. */
  export const outboundSchema =
    FindOnePromptSnippet2PromptSnippets1$outboundSchema;
  /** @deprecated use `FindOnePromptSnippet2PromptSnippets1$Outbound` instead. */
  export type Outbound = FindOnePromptSnippet2PromptSnippets1$Outbound;
}

export function findOnePromptSnippet2PromptSnippets1ToJSON(
  findOnePromptSnippet2PromptSnippets1: FindOnePromptSnippet2PromptSnippets1,
): string {
  return JSON.stringify(
    FindOnePromptSnippet2PromptSnippets1$outboundSchema.parse(
      findOnePromptSnippet2PromptSnippets1,
    ),
  );
}

export function findOnePromptSnippet2PromptSnippets1FromJSON(
  jsonString: string,
): SafeParseResult<FindOnePromptSnippet2PromptSnippets1, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      FindOnePromptSnippet2PromptSnippets1$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'FindOnePromptSnippet2PromptSnippets1' from JSON`,
  );
}

/** @internal */
export const FindOnePromptSnippetContentPromptSnippets2$inboundSchema:
  z.ZodType<FindOnePromptSnippetContentPromptSnippets2, z.ZodTypeDef, unknown> =
    z.union([
      z.lazy(() => FindOnePromptSnippet2PromptSnippets1$inboundSchema),
      z.lazy(() => FindOnePromptSnippet2PromptSnippets2$inboundSchema),
    ]);

/** @internal */
export type FindOnePromptSnippetContentPromptSnippets2$Outbound =
  | FindOnePromptSnippet2PromptSnippets1$Outbound
  | FindOnePromptSnippet2PromptSnippets2$Outbound;

/** @internal */
export const FindOnePromptSnippetContentPromptSnippets2$outboundSchema:
  z.ZodType<
    FindOnePromptSnippetContentPromptSnippets2$Outbound,
    z.ZodTypeDef,
    FindOnePromptSnippetContentPromptSnippets2
  > = z.union([
    z.lazy(() => FindOnePromptSnippet2PromptSnippets1$outboundSchema),
    z.lazy(() => FindOnePromptSnippet2PromptSnippets2$outboundSchema),
  ]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FindOnePromptSnippetContentPromptSnippets2$ {
  /** @deprecated use `FindOnePromptSnippetContentPromptSnippets2$inboundSchema` instead. */
  export const inboundSchema =
    FindOnePromptSnippetContentPromptSnippets2$inboundSchema;
  /** @deprecated use `FindOnePromptSnippetContentPromptSnippets2$outboundSchema` instead. */
  export const outboundSchema =
    FindOnePromptSnippetContentPromptSnippets2$outboundSchema;
  /** @deprecated use `FindOnePromptSnippetContentPromptSnippets2$Outbound` instead. */
  export type Outbound = FindOnePromptSnippetContentPromptSnippets2$Outbound;
}

export function findOnePromptSnippetContentPromptSnippets2ToJSON(
  findOnePromptSnippetContentPromptSnippets2:
    FindOnePromptSnippetContentPromptSnippets2,
): string {
  return JSON.stringify(
    FindOnePromptSnippetContentPromptSnippets2$outboundSchema.parse(
      findOnePromptSnippetContentPromptSnippets2,
    ),
  );
}

export function findOnePromptSnippetContentPromptSnippets2FromJSON(
  jsonString: string,
): SafeParseResult<
  FindOnePromptSnippetContentPromptSnippets2,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      FindOnePromptSnippetContentPromptSnippets2$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'FindOnePromptSnippetContentPromptSnippets2' from JSON`,
  );
}

/** @internal */
export const FindOnePromptSnippetResponseBodyContent$inboundSchema: z.ZodType<
  FindOnePromptSnippetResponseBodyContent,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.string(),
  z.array(z.union([
    z.lazy(() => FindOnePromptSnippet2PromptSnippets1$inboundSchema),
    z.lazy(() => FindOnePromptSnippet2PromptSnippets2$inboundSchema),
  ])),
]);

/** @internal */
export type FindOnePromptSnippetResponseBodyContent$Outbound =
  | string
  | Array<
    | FindOnePromptSnippet2PromptSnippets1$Outbound
    | FindOnePromptSnippet2PromptSnippets2$Outbound
  >;

/** @internal */
export const FindOnePromptSnippetResponseBodyContent$outboundSchema: z.ZodType<
  FindOnePromptSnippetResponseBodyContent$Outbound,
  z.ZodTypeDef,
  FindOnePromptSnippetResponseBodyContent
> = z.union([
  z.string(),
  z.array(z.union([
    z.lazy(() => FindOnePromptSnippet2PromptSnippets1$outboundSchema),
    z.lazy(() => FindOnePromptSnippet2PromptSnippets2$outboundSchema),
  ])),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FindOnePromptSnippetResponseBodyContent$ {
  /** @deprecated use `FindOnePromptSnippetResponseBodyContent$inboundSchema` instead. */
  export const inboundSchema =
    FindOnePromptSnippetResponseBodyContent$inboundSchema;
  /** @deprecated use `FindOnePromptSnippetResponseBodyContent$outboundSchema` instead. */
  export const outboundSchema =
    FindOnePromptSnippetResponseBodyContent$outboundSchema;
  /** @deprecated use `FindOnePromptSnippetResponseBodyContent$Outbound` instead. */
  export type Outbound = FindOnePromptSnippetResponseBodyContent$Outbound;
}

export function findOnePromptSnippetResponseBodyContentToJSON(
  findOnePromptSnippetResponseBodyContent:
    FindOnePromptSnippetResponseBodyContent,
): string {
  return JSON.stringify(
    FindOnePromptSnippetResponseBodyContent$outboundSchema.parse(
      findOnePromptSnippetResponseBodyContent,
    ),
  );
}

export function findOnePromptSnippetResponseBodyContentFromJSON(
  jsonString: string,
): SafeParseResult<
  FindOnePromptSnippetResponseBodyContent,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      FindOnePromptSnippetResponseBodyContent$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'FindOnePromptSnippetResponseBodyContent' from JSON`,
  );
}

/** @internal */
export const FindOnePromptSnippetResponseBodyPromptSnippetsResponse200ApplicationJSONType$inboundSchema:
  z.ZodNativeEnum<
    typeof FindOnePromptSnippetResponseBodyPromptSnippetsResponse200ApplicationJSONType
  > = z.nativeEnum(
    FindOnePromptSnippetResponseBodyPromptSnippetsResponse200ApplicationJSONType,
  );

/** @internal */
export const FindOnePromptSnippetResponseBodyPromptSnippetsResponse200ApplicationJSONType$outboundSchema:
  z.ZodNativeEnum<
    typeof FindOnePromptSnippetResponseBodyPromptSnippetsResponse200ApplicationJSONType
  > =
    FindOnePromptSnippetResponseBodyPromptSnippetsResponse200ApplicationJSONType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FindOnePromptSnippetResponseBodyPromptSnippetsResponse200ApplicationJSONType$ {
  /** @deprecated use `FindOnePromptSnippetResponseBodyPromptSnippetsResponse200ApplicationJSONType$inboundSchema` instead. */
  export const inboundSchema =
    FindOnePromptSnippetResponseBodyPromptSnippetsResponse200ApplicationJSONType$inboundSchema;
  /** @deprecated use `FindOnePromptSnippetResponseBodyPromptSnippetsResponse200ApplicationJSONType$outboundSchema` instead. */
  export const outboundSchema =
    FindOnePromptSnippetResponseBodyPromptSnippetsResponse200ApplicationJSONType$outboundSchema;
}

/** @internal */
export const FindOnePromptSnippetResponseBodyFunction$inboundSchema: z.ZodType<
  FindOnePromptSnippetResponseBodyFunction,
  z.ZodTypeDef,
  unknown
> = z.object({
  name: z.string(),
  arguments: z.string(),
});

/** @internal */
export type FindOnePromptSnippetResponseBodyFunction$Outbound = {
  name: string;
  arguments: string;
};

/** @internal */
export const FindOnePromptSnippetResponseBodyFunction$outboundSchema: z.ZodType<
  FindOnePromptSnippetResponseBodyFunction$Outbound,
  z.ZodTypeDef,
  FindOnePromptSnippetResponseBodyFunction
> = z.object({
  name: z.string(),
  arguments: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FindOnePromptSnippetResponseBodyFunction$ {
  /** @deprecated use `FindOnePromptSnippetResponseBodyFunction$inboundSchema` instead. */
  export const inboundSchema =
    FindOnePromptSnippetResponseBodyFunction$inboundSchema;
  /** @deprecated use `FindOnePromptSnippetResponseBodyFunction$outboundSchema` instead. */
  export const outboundSchema =
    FindOnePromptSnippetResponseBodyFunction$outboundSchema;
  /** @deprecated use `FindOnePromptSnippetResponseBodyFunction$Outbound` instead. */
  export type Outbound = FindOnePromptSnippetResponseBodyFunction$Outbound;
}

export function findOnePromptSnippetResponseBodyFunctionToJSON(
  findOnePromptSnippetResponseBodyFunction:
    FindOnePromptSnippetResponseBodyFunction,
): string {
  return JSON.stringify(
    FindOnePromptSnippetResponseBodyFunction$outboundSchema.parse(
      findOnePromptSnippetResponseBodyFunction,
    ),
  );
}

export function findOnePromptSnippetResponseBodyFunctionFromJSON(
  jsonString: string,
): SafeParseResult<
  FindOnePromptSnippetResponseBodyFunction,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      FindOnePromptSnippetResponseBodyFunction$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'FindOnePromptSnippetResponseBodyFunction' from JSON`,
  );
}

/** @internal */
export const FindOnePromptSnippetResponseBodyToolCalls$inboundSchema: z.ZodType<
  FindOnePromptSnippetResponseBodyToolCalls,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string().optional(),
  index: z.number().optional(),
  type:
    FindOnePromptSnippetResponseBodyPromptSnippetsResponse200ApplicationJSONType$inboundSchema,
  function: z.lazy(() =>
    FindOnePromptSnippetResponseBodyFunction$inboundSchema
  ),
});

/** @internal */
export type FindOnePromptSnippetResponseBodyToolCalls$Outbound = {
  id?: string | undefined;
  index?: number | undefined;
  type: string;
  function: FindOnePromptSnippetResponseBodyFunction$Outbound;
};

/** @internal */
export const FindOnePromptSnippetResponseBodyToolCalls$outboundSchema:
  z.ZodType<
    FindOnePromptSnippetResponseBodyToolCalls$Outbound,
    z.ZodTypeDef,
    FindOnePromptSnippetResponseBodyToolCalls
  > = z.object({
    id: z.string().optional(),
    index: z.number().optional(),
    type:
      FindOnePromptSnippetResponseBodyPromptSnippetsResponse200ApplicationJSONType$outboundSchema,
    function: z.lazy(() =>
      FindOnePromptSnippetResponseBodyFunction$outboundSchema
    ),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FindOnePromptSnippetResponseBodyToolCalls$ {
  /** @deprecated use `FindOnePromptSnippetResponseBodyToolCalls$inboundSchema` instead. */
  export const inboundSchema =
    FindOnePromptSnippetResponseBodyToolCalls$inboundSchema;
  /** @deprecated use `FindOnePromptSnippetResponseBodyToolCalls$outboundSchema` instead. */
  export const outboundSchema =
    FindOnePromptSnippetResponseBodyToolCalls$outboundSchema;
  /** @deprecated use `FindOnePromptSnippetResponseBodyToolCalls$Outbound` instead. */
  export type Outbound = FindOnePromptSnippetResponseBodyToolCalls$Outbound;
}

export function findOnePromptSnippetResponseBodyToolCallsToJSON(
  findOnePromptSnippetResponseBodyToolCalls:
    FindOnePromptSnippetResponseBodyToolCalls,
): string {
  return JSON.stringify(
    FindOnePromptSnippetResponseBodyToolCalls$outboundSchema.parse(
      findOnePromptSnippetResponseBodyToolCalls,
    ),
  );
}

export function findOnePromptSnippetResponseBodyToolCallsFromJSON(
  jsonString: string,
): SafeParseResult<
  FindOnePromptSnippetResponseBodyToolCalls,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      FindOnePromptSnippetResponseBodyToolCalls$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'FindOnePromptSnippetResponseBodyToolCalls' from JSON`,
  );
}

/** @internal */
export const FindOnePromptSnippetResponseBodyMessages$inboundSchema: z.ZodType<
  FindOnePromptSnippetResponseBodyMessages,
  z.ZodTypeDef,
  unknown
> = z.object({
  role: FindOnePromptSnippetResponseBodyRole$inboundSchema,
  content: z.union([
    z.string(),
    z.array(z.union([
      z.lazy(() => FindOnePromptSnippet2PromptSnippets1$inboundSchema),
      z.lazy(() => FindOnePromptSnippet2PromptSnippets2$inboundSchema),
    ])),
  ]),
  tool_calls: z.array(
    z.lazy(() => FindOnePromptSnippetResponseBodyToolCalls$inboundSchema),
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    "tool_calls": "toolCalls",
  });
});

/** @internal */
export type FindOnePromptSnippetResponseBodyMessages$Outbound = {
  role: string;
  content:
    | string
    | Array<
      | FindOnePromptSnippet2PromptSnippets1$Outbound
      | FindOnePromptSnippet2PromptSnippets2$Outbound
    >;
  tool_calls?:
    | Array<FindOnePromptSnippetResponseBodyToolCalls$Outbound>
    | undefined;
};

/** @internal */
export const FindOnePromptSnippetResponseBodyMessages$outboundSchema: z.ZodType<
  FindOnePromptSnippetResponseBodyMessages$Outbound,
  z.ZodTypeDef,
  FindOnePromptSnippetResponseBodyMessages
> = z.object({
  role: FindOnePromptSnippetResponseBodyRole$outboundSchema,
  content: z.union([
    z.string(),
    z.array(z.union([
      z.lazy(() => FindOnePromptSnippet2PromptSnippets1$outboundSchema),
      z.lazy(() => FindOnePromptSnippet2PromptSnippets2$outboundSchema),
    ])),
  ]),
  toolCalls: z.array(
    z.lazy(() => FindOnePromptSnippetResponseBodyToolCalls$outboundSchema),
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    toolCalls: "tool_calls",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FindOnePromptSnippetResponseBodyMessages$ {
  /** @deprecated use `FindOnePromptSnippetResponseBodyMessages$inboundSchema` instead. */
  export const inboundSchema =
    FindOnePromptSnippetResponseBodyMessages$inboundSchema;
  /** @deprecated use `FindOnePromptSnippetResponseBodyMessages$outboundSchema` instead. */
  export const outboundSchema =
    FindOnePromptSnippetResponseBodyMessages$outboundSchema;
  /** @deprecated use `FindOnePromptSnippetResponseBodyMessages$Outbound` instead. */
  export type Outbound = FindOnePromptSnippetResponseBodyMessages$Outbound;
}

export function findOnePromptSnippetResponseBodyMessagesToJSON(
  findOnePromptSnippetResponseBodyMessages:
    FindOnePromptSnippetResponseBodyMessages,
): string {
  return JSON.stringify(
    FindOnePromptSnippetResponseBodyMessages$outboundSchema.parse(
      findOnePromptSnippetResponseBodyMessages,
    ),
  );
}

export function findOnePromptSnippetResponseBodyMessagesFromJSON(
  jsonString: string,
): SafeParseResult<
  FindOnePromptSnippetResponseBodyMessages,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      FindOnePromptSnippetResponseBodyMessages$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'FindOnePromptSnippetResponseBodyMessages' from JSON`,
  );
}

/** @internal */
export const FindOnePromptSnippetResponseBodyPromptConfig$inboundSchema:
  z.ZodType<
    FindOnePromptSnippetResponseBodyPromptConfig,
    z.ZodTypeDef,
    unknown
  > = z.object({
    stream: z.boolean().optional(),
    model: z.string().optional(),
    model_db_id: z.string().optional(),
    model_type: FindOnePromptSnippetResponseBodyModelType$inboundSchema
      .optional(),
    model_parameters: z.lazy(() =>
      FindOnePromptSnippetResponseBodyModelParameters$inboundSchema
    ).optional(),
    provider: FindOnePromptSnippetResponseBodyProvider$inboundSchema.optional(),
    integration_id: z.nullable(z.string()).optional(),
    version: z.string().optional(),
    messages: z.array(
      z.lazy(() => FindOnePromptSnippetResponseBodyMessages$inboundSchema),
    ),
  }).transform((v) => {
    return remap$(v, {
      "model_db_id": "modelDbId",
      "model_type": "modelType",
      "model_parameters": "modelParameters",
      "integration_id": "integrationId",
    });
  });

/** @internal */
export type FindOnePromptSnippetResponseBodyPromptConfig$Outbound = {
  stream?: boolean | undefined;
  model?: string | undefined;
  model_db_id?: string | undefined;
  model_type?: string | undefined;
  model_parameters?:
    | FindOnePromptSnippetResponseBodyModelParameters$Outbound
    | undefined;
  provider?: string | undefined;
  integration_id?: string | null | undefined;
  version?: string | undefined;
  messages: Array<FindOnePromptSnippetResponseBodyMessages$Outbound>;
};

/** @internal */
export const FindOnePromptSnippetResponseBodyPromptConfig$outboundSchema:
  z.ZodType<
    FindOnePromptSnippetResponseBodyPromptConfig$Outbound,
    z.ZodTypeDef,
    FindOnePromptSnippetResponseBodyPromptConfig
  > = z.object({
    stream: z.boolean().optional(),
    model: z.string().optional(),
    modelDbId: z.string().optional(),
    modelType: FindOnePromptSnippetResponseBodyModelType$outboundSchema
      .optional(),
    modelParameters: z.lazy(() =>
      FindOnePromptSnippetResponseBodyModelParameters$outboundSchema
    ).optional(),
    provider: FindOnePromptSnippetResponseBodyProvider$outboundSchema
      .optional(),
    integrationId: z.nullable(z.string()).optional(),
    version: z.string().optional(),
    messages: z.array(
      z.lazy(() => FindOnePromptSnippetResponseBodyMessages$outboundSchema),
    ),
  }).transform((v) => {
    return remap$(v, {
      modelDbId: "model_db_id",
      modelType: "model_type",
      modelParameters: "model_parameters",
      integrationId: "integration_id",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FindOnePromptSnippetResponseBodyPromptConfig$ {
  /** @deprecated use `FindOnePromptSnippetResponseBodyPromptConfig$inboundSchema` instead. */
  export const inboundSchema =
    FindOnePromptSnippetResponseBodyPromptConfig$inboundSchema;
  /** @deprecated use `FindOnePromptSnippetResponseBodyPromptConfig$outboundSchema` instead. */
  export const outboundSchema =
    FindOnePromptSnippetResponseBodyPromptConfig$outboundSchema;
  /** @deprecated use `FindOnePromptSnippetResponseBodyPromptConfig$Outbound` instead. */
  export type Outbound = FindOnePromptSnippetResponseBodyPromptConfig$Outbound;
}

export function findOnePromptSnippetResponseBodyPromptConfigToJSON(
  findOnePromptSnippetResponseBodyPromptConfig:
    FindOnePromptSnippetResponseBodyPromptConfig,
): string {
  return JSON.stringify(
    FindOnePromptSnippetResponseBodyPromptConfig$outboundSchema.parse(
      findOnePromptSnippetResponseBodyPromptConfig,
    ),
  );
}

export function findOnePromptSnippetResponseBodyPromptConfigFromJSON(
  jsonString: string,
): SafeParseResult<
  FindOnePromptSnippetResponseBodyPromptConfig,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      FindOnePromptSnippetResponseBodyPromptConfig$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'FindOnePromptSnippetResponseBodyPromptConfig' from JSON`,
  );
}

/** @internal */
export const FindOnePromptSnippetResponseBodyMetadata$inboundSchema: z.ZodType<
  FindOnePromptSnippetResponseBodyMetadata,
  z.ZodTypeDef,
  unknown
> = z.object({
  use_cases: z.array(z.string()).optional(),
  language: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "use_cases": "useCases",
  });
});

/** @internal */
export type FindOnePromptSnippetResponseBodyMetadata$Outbound = {
  use_cases?: Array<string> | undefined;
  language?: string | undefined;
};

/** @internal */
export const FindOnePromptSnippetResponseBodyMetadata$outboundSchema: z.ZodType<
  FindOnePromptSnippetResponseBodyMetadata$Outbound,
  z.ZodTypeDef,
  FindOnePromptSnippetResponseBodyMetadata
> = z.object({
  useCases: z.array(z.string()).optional(),
  language: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    useCases: "use_cases",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FindOnePromptSnippetResponseBodyMetadata$ {
  /** @deprecated use `FindOnePromptSnippetResponseBodyMetadata$inboundSchema` instead. */
  export const inboundSchema =
    FindOnePromptSnippetResponseBodyMetadata$inboundSchema;
  /** @deprecated use `FindOnePromptSnippetResponseBodyMetadata$outboundSchema` instead. */
  export const outboundSchema =
    FindOnePromptSnippetResponseBodyMetadata$outboundSchema;
  /** @deprecated use `FindOnePromptSnippetResponseBodyMetadata$Outbound` instead. */
  export type Outbound = FindOnePromptSnippetResponseBodyMetadata$Outbound;
}

export function findOnePromptSnippetResponseBodyMetadataToJSON(
  findOnePromptSnippetResponseBodyMetadata:
    FindOnePromptSnippetResponseBodyMetadata,
): string {
  return JSON.stringify(
    FindOnePromptSnippetResponseBodyMetadata$outboundSchema.parse(
      findOnePromptSnippetResponseBodyMetadata,
    ),
  );
}

export function findOnePromptSnippetResponseBodyMetadataFromJSON(
  jsonString: string,
): SafeParseResult<
  FindOnePromptSnippetResponseBodyMetadata,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      FindOnePromptSnippetResponseBodyMetadata$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'FindOnePromptSnippetResponseBodyMetadata' from JSON`,
  );
}

/** @internal */
export const FindOnePromptSnippetResponseBodyPromptSnippetsResponseModelType$inboundSchema:
  z.ZodNativeEnum<
    typeof FindOnePromptSnippetResponseBodyPromptSnippetsResponseModelType
  > = z.nativeEnum(
    FindOnePromptSnippetResponseBodyPromptSnippetsResponseModelType,
  );

/** @internal */
export const FindOnePromptSnippetResponseBodyPromptSnippetsResponseModelType$outboundSchema:
  z.ZodNativeEnum<
    typeof FindOnePromptSnippetResponseBodyPromptSnippetsResponseModelType
  > =
    FindOnePromptSnippetResponseBodyPromptSnippetsResponseModelType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FindOnePromptSnippetResponseBodyPromptSnippetsResponseModelType$ {
  /** @deprecated use `FindOnePromptSnippetResponseBodyPromptSnippetsResponseModelType$inboundSchema` instead. */
  export const inboundSchema =
    FindOnePromptSnippetResponseBodyPromptSnippetsResponseModelType$inboundSchema;
  /** @deprecated use `FindOnePromptSnippetResponseBodyPromptSnippetsResponseModelType$outboundSchema` instead. */
  export const outboundSchema =
    FindOnePromptSnippetResponseBodyPromptSnippetsResponseModelType$outboundSchema;
}

/** @internal */
export const FindOnePromptSnippetResponseBodyPromptSnippetsResponse200Format$inboundSchema:
  z.ZodNativeEnum<
    typeof FindOnePromptSnippetResponseBodyPromptSnippetsResponse200Format
  > = z.nativeEnum(
    FindOnePromptSnippetResponseBodyPromptSnippetsResponse200Format,
  );

/** @internal */
export const FindOnePromptSnippetResponseBodyPromptSnippetsResponse200Format$outboundSchema:
  z.ZodNativeEnum<
    typeof FindOnePromptSnippetResponseBodyPromptSnippetsResponse200Format
  > =
    FindOnePromptSnippetResponseBodyPromptSnippetsResponse200Format$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FindOnePromptSnippetResponseBodyPromptSnippetsResponse200Format$ {
  /** @deprecated use `FindOnePromptSnippetResponseBodyPromptSnippetsResponse200Format$inboundSchema` instead. */
  export const inboundSchema =
    FindOnePromptSnippetResponseBodyPromptSnippetsResponse200Format$inboundSchema;
  /** @deprecated use `FindOnePromptSnippetResponseBodyPromptSnippetsResponse200Format$outboundSchema` instead. */
  export const outboundSchema =
    FindOnePromptSnippetResponseBodyPromptSnippetsResponse200Format$outboundSchema;
}

/** @internal */
export const FindOnePromptSnippetResponseBodyPromptSnippetsResponseQuality$inboundSchema:
  z.ZodNativeEnum<
    typeof FindOnePromptSnippetResponseBodyPromptSnippetsResponseQuality
  > = z.nativeEnum(
    FindOnePromptSnippetResponseBodyPromptSnippetsResponseQuality,
  );

/** @internal */
export const FindOnePromptSnippetResponseBodyPromptSnippetsResponseQuality$outboundSchema:
  z.ZodNativeEnum<
    typeof FindOnePromptSnippetResponseBodyPromptSnippetsResponseQuality
  > =
    FindOnePromptSnippetResponseBodyPromptSnippetsResponseQuality$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FindOnePromptSnippetResponseBodyPromptSnippetsResponseQuality$ {
  /** @deprecated use `FindOnePromptSnippetResponseBodyPromptSnippetsResponseQuality$inboundSchema` instead. */
  export const inboundSchema =
    FindOnePromptSnippetResponseBodyPromptSnippetsResponseQuality$inboundSchema;
  /** @deprecated use `FindOnePromptSnippetResponseBodyPromptSnippetsResponseQuality$outboundSchema` instead. */
  export const outboundSchema =
    FindOnePromptSnippetResponseBodyPromptSnippetsResponseQuality$outboundSchema;
}

/** @internal */
export const FindOnePromptSnippetResponseFormatPromptSnippetsResponse200ApplicationJSONResponseBody2VersionsType$inboundSchema:
  z.ZodNativeEnum<
    typeof FindOnePromptSnippetResponseFormatPromptSnippetsResponse200ApplicationJSONResponseBody2VersionsType
  > = z.nativeEnum(
    FindOnePromptSnippetResponseFormatPromptSnippetsResponse200ApplicationJSONResponseBody2VersionsType,
  );

/** @internal */
export const FindOnePromptSnippetResponseFormatPromptSnippetsResponse200ApplicationJSONResponseBody2VersionsType$outboundSchema:
  z.ZodNativeEnum<
    typeof FindOnePromptSnippetResponseFormatPromptSnippetsResponse200ApplicationJSONResponseBody2VersionsType
  > =
    FindOnePromptSnippetResponseFormatPromptSnippetsResponse200ApplicationJSONResponseBody2VersionsType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FindOnePromptSnippetResponseFormatPromptSnippetsResponse200ApplicationJSONResponseBody2VersionsType$ {
  /** @deprecated use `FindOnePromptSnippetResponseFormatPromptSnippetsResponse200ApplicationJSONResponseBody2VersionsType$inboundSchema` instead. */
  export const inboundSchema =
    FindOnePromptSnippetResponseFormatPromptSnippetsResponse200ApplicationJSONResponseBody2VersionsType$inboundSchema;
  /** @deprecated use `FindOnePromptSnippetResponseFormatPromptSnippetsResponse200ApplicationJSONResponseBody2VersionsType$outboundSchema` instead. */
  export const outboundSchema =
    FindOnePromptSnippetResponseFormatPromptSnippetsResponse200ApplicationJSONResponseBody2VersionsType$outboundSchema;
}

/** @internal */
export const FindOnePromptSnippetResponseFormatPromptSnippetsResponse2002$inboundSchema:
  z.ZodType<
    FindOnePromptSnippetResponseFormatPromptSnippetsResponse2002,
    z.ZodTypeDef,
    unknown
  > = z.object({
    type:
      FindOnePromptSnippetResponseFormatPromptSnippetsResponse200ApplicationJSONResponseBody2VersionsType$inboundSchema,
  });

/** @internal */
export type FindOnePromptSnippetResponseFormatPromptSnippetsResponse2002$Outbound =
  {
    type: string;
  };

/** @internal */
export const FindOnePromptSnippetResponseFormatPromptSnippetsResponse2002$outboundSchema:
  z.ZodType<
    FindOnePromptSnippetResponseFormatPromptSnippetsResponse2002$Outbound,
    z.ZodTypeDef,
    FindOnePromptSnippetResponseFormatPromptSnippetsResponse2002
  > = z.object({
    type:
      FindOnePromptSnippetResponseFormatPromptSnippetsResponse200ApplicationJSONResponseBody2VersionsType$outboundSchema,
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FindOnePromptSnippetResponseFormatPromptSnippetsResponse2002$ {
  /** @deprecated use `FindOnePromptSnippetResponseFormatPromptSnippetsResponse2002$inboundSchema` instead. */
  export const inboundSchema =
    FindOnePromptSnippetResponseFormatPromptSnippetsResponse2002$inboundSchema;
  /** @deprecated use `FindOnePromptSnippetResponseFormatPromptSnippetsResponse2002$outboundSchema` instead. */
  export const outboundSchema =
    FindOnePromptSnippetResponseFormatPromptSnippetsResponse2002$outboundSchema;
  /** @deprecated use `FindOnePromptSnippetResponseFormatPromptSnippetsResponse2002$Outbound` instead. */
  export type Outbound =
    FindOnePromptSnippetResponseFormatPromptSnippetsResponse2002$Outbound;
}

export function findOnePromptSnippetResponseFormatPromptSnippetsResponse2002ToJSON(
  findOnePromptSnippetResponseFormatPromptSnippetsResponse2002:
    FindOnePromptSnippetResponseFormatPromptSnippetsResponse2002,
): string {
  return JSON.stringify(
    FindOnePromptSnippetResponseFormatPromptSnippetsResponse2002$outboundSchema
      .parse(findOnePromptSnippetResponseFormatPromptSnippetsResponse2002),
  );
}

export function findOnePromptSnippetResponseFormatPromptSnippetsResponse2002FromJSON(
  jsonString: string,
): SafeParseResult<
  FindOnePromptSnippetResponseFormatPromptSnippetsResponse2002,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      FindOnePromptSnippetResponseFormatPromptSnippetsResponse2002$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'FindOnePromptSnippetResponseFormatPromptSnippetsResponse2002' from JSON`,
  );
}

/** @internal */
export const FindOnePromptSnippetResponseFormatPromptSnippetsResponse200ApplicationJSONResponseBody2Type$inboundSchema:
  z.ZodNativeEnum<
    typeof FindOnePromptSnippetResponseFormatPromptSnippetsResponse200ApplicationJSONResponseBody2Type
  > = z.nativeEnum(
    FindOnePromptSnippetResponseFormatPromptSnippetsResponse200ApplicationJSONResponseBody2Type,
  );

/** @internal */
export const FindOnePromptSnippetResponseFormatPromptSnippetsResponse200ApplicationJSONResponseBody2Type$outboundSchema:
  z.ZodNativeEnum<
    typeof FindOnePromptSnippetResponseFormatPromptSnippetsResponse200ApplicationJSONResponseBody2Type
  > =
    FindOnePromptSnippetResponseFormatPromptSnippetsResponse200ApplicationJSONResponseBody2Type$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FindOnePromptSnippetResponseFormatPromptSnippetsResponse200ApplicationJSONResponseBody2Type$ {
  /** @deprecated use `FindOnePromptSnippetResponseFormatPromptSnippetsResponse200ApplicationJSONResponseBody2Type$inboundSchema` instead. */
  export const inboundSchema =
    FindOnePromptSnippetResponseFormatPromptSnippetsResponse200ApplicationJSONResponseBody2Type$inboundSchema;
  /** @deprecated use `FindOnePromptSnippetResponseFormatPromptSnippetsResponse200ApplicationJSONResponseBody2Type$outboundSchema` instead. */
  export const outboundSchema =
    FindOnePromptSnippetResponseFormatPromptSnippetsResponse200ApplicationJSONResponseBody2Type$outboundSchema;
}

/** @internal */
export const FindOnePromptSnippetResponseFormatPromptSnippetsResponse200JsonSchema$inboundSchema:
  z.ZodType<
    FindOnePromptSnippetResponseFormatPromptSnippetsResponse200JsonSchema,
    z.ZodTypeDef,
    unknown
  > = z.object({
    name: z.string(),
    strict: z.boolean(),
    schema: z.record(z.any()),
  });

/** @internal */
export type FindOnePromptSnippetResponseFormatPromptSnippetsResponse200JsonSchema$Outbound =
  {
    name: string;
    strict: boolean;
    schema: { [k: string]: any };
  };

/** @internal */
export const FindOnePromptSnippetResponseFormatPromptSnippetsResponse200JsonSchema$outboundSchema:
  z.ZodType<
    FindOnePromptSnippetResponseFormatPromptSnippetsResponse200JsonSchema$Outbound,
    z.ZodTypeDef,
    FindOnePromptSnippetResponseFormatPromptSnippetsResponse200JsonSchema
  > = z.object({
    name: z.string(),
    strict: z.boolean(),
    schema: z.record(z.any()),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FindOnePromptSnippetResponseFormatPromptSnippetsResponse200JsonSchema$ {
  /** @deprecated use `FindOnePromptSnippetResponseFormatPromptSnippetsResponse200JsonSchema$inboundSchema` instead. */
  export const inboundSchema =
    FindOnePromptSnippetResponseFormatPromptSnippetsResponse200JsonSchema$inboundSchema;
  /** @deprecated use `FindOnePromptSnippetResponseFormatPromptSnippetsResponse200JsonSchema$outboundSchema` instead. */
  export const outboundSchema =
    FindOnePromptSnippetResponseFormatPromptSnippetsResponse200JsonSchema$outboundSchema;
  /** @deprecated use `FindOnePromptSnippetResponseFormatPromptSnippetsResponse200JsonSchema$Outbound` instead. */
  export type Outbound =
    FindOnePromptSnippetResponseFormatPromptSnippetsResponse200JsonSchema$Outbound;
}

export function findOnePromptSnippetResponseFormatPromptSnippetsResponse200JsonSchemaToJSON(
  findOnePromptSnippetResponseFormatPromptSnippetsResponse200JsonSchema:
    FindOnePromptSnippetResponseFormatPromptSnippetsResponse200JsonSchema,
): string {
  return JSON.stringify(
    FindOnePromptSnippetResponseFormatPromptSnippetsResponse200JsonSchema$outboundSchema
      .parse(
        findOnePromptSnippetResponseFormatPromptSnippetsResponse200JsonSchema,
      ),
  );
}

export function findOnePromptSnippetResponseFormatPromptSnippetsResponse200JsonSchemaFromJSON(
  jsonString: string,
): SafeParseResult<
  FindOnePromptSnippetResponseFormatPromptSnippetsResponse200JsonSchema,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      FindOnePromptSnippetResponseFormatPromptSnippetsResponse200JsonSchema$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'FindOnePromptSnippetResponseFormatPromptSnippetsResponse200JsonSchema' from JSON`,
  );
}

/** @internal */
export const FindOnePromptSnippetResponseFormatPromptSnippetsResponse2001$inboundSchema:
  z.ZodType<
    FindOnePromptSnippetResponseFormatPromptSnippetsResponse2001,
    z.ZodTypeDef,
    unknown
  > = z.object({
    type:
      FindOnePromptSnippetResponseFormatPromptSnippetsResponse200ApplicationJSONResponseBody2Type$inboundSchema,
    json_schema: z.lazy(() =>
      FindOnePromptSnippetResponseFormatPromptSnippetsResponse200JsonSchema$inboundSchema
    ),
  }).transform((v) => {
    return remap$(v, {
      "json_schema": "jsonSchema",
    });
  });

/** @internal */
export type FindOnePromptSnippetResponseFormatPromptSnippetsResponse2001$Outbound =
  {
    type: string;
    json_schema:
      FindOnePromptSnippetResponseFormatPromptSnippetsResponse200JsonSchema$Outbound;
  };

/** @internal */
export const FindOnePromptSnippetResponseFormatPromptSnippetsResponse2001$outboundSchema:
  z.ZodType<
    FindOnePromptSnippetResponseFormatPromptSnippetsResponse2001$Outbound,
    z.ZodTypeDef,
    FindOnePromptSnippetResponseFormatPromptSnippetsResponse2001
  > = z.object({
    type:
      FindOnePromptSnippetResponseFormatPromptSnippetsResponse200ApplicationJSONResponseBody2Type$outboundSchema,
    jsonSchema: z.lazy(() =>
      FindOnePromptSnippetResponseFormatPromptSnippetsResponse200JsonSchema$outboundSchema
    ),
  }).transform((v) => {
    return remap$(v, {
      jsonSchema: "json_schema",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FindOnePromptSnippetResponseFormatPromptSnippetsResponse2001$ {
  /** @deprecated use `FindOnePromptSnippetResponseFormatPromptSnippetsResponse2001$inboundSchema` instead. */
  export const inboundSchema =
    FindOnePromptSnippetResponseFormatPromptSnippetsResponse2001$inboundSchema;
  /** @deprecated use `FindOnePromptSnippetResponseFormatPromptSnippetsResponse2001$outboundSchema` instead. */
  export const outboundSchema =
    FindOnePromptSnippetResponseFormatPromptSnippetsResponse2001$outboundSchema;
  /** @deprecated use `FindOnePromptSnippetResponseFormatPromptSnippetsResponse2001$Outbound` instead. */
  export type Outbound =
    FindOnePromptSnippetResponseFormatPromptSnippetsResponse2001$Outbound;
}

export function findOnePromptSnippetResponseFormatPromptSnippetsResponse2001ToJSON(
  findOnePromptSnippetResponseFormatPromptSnippetsResponse2001:
    FindOnePromptSnippetResponseFormatPromptSnippetsResponse2001,
): string {
  return JSON.stringify(
    FindOnePromptSnippetResponseFormatPromptSnippetsResponse2001$outboundSchema
      .parse(findOnePromptSnippetResponseFormatPromptSnippetsResponse2001),
  );
}

export function findOnePromptSnippetResponseFormatPromptSnippetsResponse2001FromJSON(
  jsonString: string,
): SafeParseResult<
  FindOnePromptSnippetResponseFormatPromptSnippetsResponse2001,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      FindOnePromptSnippetResponseFormatPromptSnippetsResponse2001$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'FindOnePromptSnippetResponseFormatPromptSnippetsResponse2001' from JSON`,
  );
}

/** @internal */
export const FindOnePromptSnippetResponseBodyPromptSnippetsResponseResponseFormat$inboundSchema:
  z.ZodType<
    FindOnePromptSnippetResponseBodyPromptSnippetsResponseResponseFormat,
    z.ZodTypeDef,
    unknown
  > = z.union([
    z.lazy(() =>
      FindOnePromptSnippetResponseFormatPromptSnippetsResponse2002$inboundSchema
    ),
    z.lazy(() =>
      FindOnePromptSnippetResponseFormatPromptSnippetsResponse2001$inboundSchema
    ),
  ]);

/** @internal */
export type FindOnePromptSnippetResponseBodyPromptSnippetsResponseResponseFormat$Outbound =
  | FindOnePromptSnippetResponseFormatPromptSnippetsResponse2002$Outbound
  | FindOnePromptSnippetResponseFormatPromptSnippetsResponse2001$Outbound;

/** @internal */
export const FindOnePromptSnippetResponseBodyPromptSnippetsResponseResponseFormat$outboundSchema:
  z.ZodType<
    FindOnePromptSnippetResponseBodyPromptSnippetsResponseResponseFormat$Outbound,
    z.ZodTypeDef,
    FindOnePromptSnippetResponseBodyPromptSnippetsResponseResponseFormat
  > = z.union([
    z.lazy(() =>
      FindOnePromptSnippetResponseFormatPromptSnippetsResponse2002$outboundSchema
    ),
    z.lazy(() =>
      FindOnePromptSnippetResponseFormatPromptSnippetsResponse2001$outboundSchema
    ),
  ]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FindOnePromptSnippetResponseBodyPromptSnippetsResponseResponseFormat$ {
  /** @deprecated use `FindOnePromptSnippetResponseBodyPromptSnippetsResponseResponseFormat$inboundSchema` instead. */
  export const inboundSchema =
    FindOnePromptSnippetResponseBodyPromptSnippetsResponseResponseFormat$inboundSchema;
  /** @deprecated use `FindOnePromptSnippetResponseBodyPromptSnippetsResponseResponseFormat$outboundSchema` instead. */
  export const outboundSchema =
    FindOnePromptSnippetResponseBodyPromptSnippetsResponseResponseFormat$outboundSchema;
  /** @deprecated use `FindOnePromptSnippetResponseBodyPromptSnippetsResponseResponseFormat$Outbound` instead. */
  export type Outbound =
    FindOnePromptSnippetResponseBodyPromptSnippetsResponseResponseFormat$Outbound;
}

export function findOnePromptSnippetResponseBodyPromptSnippetsResponseResponseFormatToJSON(
  findOnePromptSnippetResponseBodyPromptSnippetsResponseResponseFormat:
    FindOnePromptSnippetResponseBodyPromptSnippetsResponseResponseFormat,
): string {
  return JSON.stringify(
    FindOnePromptSnippetResponseBodyPromptSnippetsResponseResponseFormat$outboundSchema
      .parse(
        findOnePromptSnippetResponseBodyPromptSnippetsResponseResponseFormat,
      ),
  );
}

export function findOnePromptSnippetResponseBodyPromptSnippetsResponseResponseFormatFromJSON(
  jsonString: string,
): SafeParseResult<
  FindOnePromptSnippetResponseBodyPromptSnippetsResponseResponseFormat,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      FindOnePromptSnippetResponseBodyPromptSnippetsResponseResponseFormat$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'FindOnePromptSnippetResponseBodyPromptSnippetsResponseResponseFormat' from JSON`,
  );
}

/** @internal */
export const FindOnePromptSnippetResponseBodyPromptSnippetsResponsePhotoRealVersion$inboundSchema:
  z.ZodNativeEnum<
    typeof FindOnePromptSnippetResponseBodyPromptSnippetsResponsePhotoRealVersion
  > = z.nativeEnum(
    FindOnePromptSnippetResponseBodyPromptSnippetsResponsePhotoRealVersion,
  );

/** @internal */
export const FindOnePromptSnippetResponseBodyPromptSnippetsResponsePhotoRealVersion$outboundSchema:
  z.ZodNativeEnum<
    typeof FindOnePromptSnippetResponseBodyPromptSnippetsResponsePhotoRealVersion
  > =
    FindOnePromptSnippetResponseBodyPromptSnippetsResponsePhotoRealVersion$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FindOnePromptSnippetResponseBodyPromptSnippetsResponsePhotoRealVersion$ {
  /** @deprecated use `FindOnePromptSnippetResponseBodyPromptSnippetsResponsePhotoRealVersion$inboundSchema` instead. */
  export const inboundSchema =
    FindOnePromptSnippetResponseBodyPromptSnippetsResponsePhotoRealVersion$inboundSchema;
  /** @deprecated use `FindOnePromptSnippetResponseBodyPromptSnippetsResponsePhotoRealVersion$outboundSchema` instead. */
  export const outboundSchema =
    FindOnePromptSnippetResponseBodyPromptSnippetsResponsePhotoRealVersion$outboundSchema;
}

/** @internal */
export const FindOnePromptSnippetResponseBodyPromptSnippetsResponseEncodingFormat$inboundSchema:
  z.ZodNativeEnum<
    typeof FindOnePromptSnippetResponseBodyPromptSnippetsResponseEncodingFormat
  > = z.nativeEnum(
    FindOnePromptSnippetResponseBodyPromptSnippetsResponseEncodingFormat,
  );

/** @internal */
export const FindOnePromptSnippetResponseBodyPromptSnippetsResponseEncodingFormat$outboundSchema:
  z.ZodNativeEnum<
    typeof FindOnePromptSnippetResponseBodyPromptSnippetsResponseEncodingFormat
  > =
    FindOnePromptSnippetResponseBodyPromptSnippetsResponseEncodingFormat$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FindOnePromptSnippetResponseBodyPromptSnippetsResponseEncodingFormat$ {
  /** @deprecated use `FindOnePromptSnippetResponseBodyPromptSnippetsResponseEncodingFormat$inboundSchema` instead. */
  export const inboundSchema =
    FindOnePromptSnippetResponseBodyPromptSnippetsResponseEncodingFormat$inboundSchema;
  /** @deprecated use `FindOnePromptSnippetResponseBodyPromptSnippetsResponseEncodingFormat$outboundSchema` instead. */
  export const outboundSchema =
    FindOnePromptSnippetResponseBodyPromptSnippetsResponseEncodingFormat$outboundSchema;
}

/** @internal */
export const FindOnePromptSnippetResponseBodyPromptSnippetsResponseModelParameters$inboundSchema:
  z.ZodType<
    FindOnePromptSnippetResponseBodyPromptSnippetsResponseModelParameters,
    z.ZodTypeDef,
    unknown
  > = z.object({
    temperature: z.number().optional(),
    maxTokens: z.number().optional(),
    topK: z.number().optional(),
    topP: z.number().optional(),
    frequencyPenalty: z.number().optional(),
    presencePenalty: z.number().optional(),
    numImages: z.number().optional(),
    seed: z.number().optional(),
    format:
      FindOnePromptSnippetResponseBodyPromptSnippetsResponse200Format$inboundSchema
        .optional(),
    dimensions: z.string().optional(),
    quality:
      FindOnePromptSnippetResponseBodyPromptSnippetsResponseQuality$inboundSchema
        .optional(),
    style: z.string().optional(),
    responseFormat: z.nullable(
      z.union([
        z.lazy(() =>
          FindOnePromptSnippetResponseFormatPromptSnippetsResponse2002$inboundSchema
        ),
        z.lazy(() =>
          FindOnePromptSnippetResponseFormatPromptSnippetsResponse2001$inboundSchema
        ),
      ]),
    ).optional(),
    photoRealVersion:
      FindOnePromptSnippetResponseBodyPromptSnippetsResponsePhotoRealVersion$inboundSchema
        .optional(),
    encoding_format:
      FindOnePromptSnippetResponseBodyPromptSnippetsResponseEncodingFormat$inboundSchema
        .optional(),
  }).transform((v) => {
    return remap$(v, {
      "encoding_format": "encodingFormat",
    });
  });

/** @internal */
export type FindOnePromptSnippetResponseBodyPromptSnippetsResponseModelParameters$Outbound =
  {
    temperature?: number | undefined;
    maxTokens?: number | undefined;
    topK?: number | undefined;
    topP?: number | undefined;
    frequencyPenalty?: number | undefined;
    presencePenalty?: number | undefined;
    numImages?: number | undefined;
    seed?: number | undefined;
    format?: string | undefined;
    dimensions?: string | undefined;
    quality?: string | undefined;
    style?: string | undefined;
    responseFormat?:
      | FindOnePromptSnippetResponseFormatPromptSnippetsResponse2002$Outbound
      | FindOnePromptSnippetResponseFormatPromptSnippetsResponse2001$Outbound
      | null
      | undefined;
    photoRealVersion?: string | undefined;
    encoding_format?: string | undefined;
  };

/** @internal */
export const FindOnePromptSnippetResponseBodyPromptSnippetsResponseModelParameters$outboundSchema:
  z.ZodType<
    FindOnePromptSnippetResponseBodyPromptSnippetsResponseModelParameters$Outbound,
    z.ZodTypeDef,
    FindOnePromptSnippetResponseBodyPromptSnippetsResponseModelParameters
  > = z.object({
    temperature: z.number().optional(),
    maxTokens: z.number().optional(),
    topK: z.number().optional(),
    topP: z.number().optional(),
    frequencyPenalty: z.number().optional(),
    presencePenalty: z.number().optional(),
    numImages: z.number().optional(),
    seed: z.number().optional(),
    format:
      FindOnePromptSnippetResponseBodyPromptSnippetsResponse200Format$outboundSchema
        .optional(),
    dimensions: z.string().optional(),
    quality:
      FindOnePromptSnippetResponseBodyPromptSnippetsResponseQuality$outboundSchema
        .optional(),
    style: z.string().optional(),
    responseFormat: z.nullable(
      z.union([
        z.lazy(() =>
          FindOnePromptSnippetResponseFormatPromptSnippetsResponse2002$outboundSchema
        ),
        z.lazy(() =>
          FindOnePromptSnippetResponseFormatPromptSnippetsResponse2001$outboundSchema
        ),
      ]),
    ).optional(),
    photoRealVersion:
      FindOnePromptSnippetResponseBodyPromptSnippetsResponsePhotoRealVersion$outboundSchema
        .optional(),
    encodingFormat:
      FindOnePromptSnippetResponseBodyPromptSnippetsResponseEncodingFormat$outboundSchema
        .optional(),
  }).transform((v) => {
    return remap$(v, {
      encodingFormat: "encoding_format",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FindOnePromptSnippetResponseBodyPromptSnippetsResponseModelParameters$ {
  /** @deprecated use `FindOnePromptSnippetResponseBodyPromptSnippetsResponseModelParameters$inboundSchema` instead. */
  export const inboundSchema =
    FindOnePromptSnippetResponseBodyPromptSnippetsResponseModelParameters$inboundSchema;
  /** @deprecated use `FindOnePromptSnippetResponseBodyPromptSnippetsResponseModelParameters$outboundSchema` instead. */
  export const outboundSchema =
    FindOnePromptSnippetResponseBodyPromptSnippetsResponseModelParameters$outboundSchema;
  /** @deprecated use `FindOnePromptSnippetResponseBodyPromptSnippetsResponseModelParameters$Outbound` instead. */
  export type Outbound =
    FindOnePromptSnippetResponseBodyPromptSnippetsResponseModelParameters$Outbound;
}

export function findOnePromptSnippetResponseBodyPromptSnippetsResponseModelParametersToJSON(
  findOnePromptSnippetResponseBodyPromptSnippetsResponseModelParameters:
    FindOnePromptSnippetResponseBodyPromptSnippetsResponseModelParameters,
): string {
  return JSON.stringify(
    FindOnePromptSnippetResponseBodyPromptSnippetsResponseModelParameters$outboundSchema
      .parse(
        findOnePromptSnippetResponseBodyPromptSnippetsResponseModelParameters,
      ),
  );
}

export function findOnePromptSnippetResponseBodyPromptSnippetsResponseModelParametersFromJSON(
  jsonString: string,
): SafeParseResult<
  FindOnePromptSnippetResponseBodyPromptSnippetsResponseModelParameters,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      FindOnePromptSnippetResponseBodyPromptSnippetsResponseModelParameters$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'FindOnePromptSnippetResponseBodyPromptSnippetsResponseModelParameters' from JSON`,
  );
}

/** @internal */
export const FindOnePromptSnippetResponseBodyPromptSnippetsResponseProvider$inboundSchema:
  z.ZodNativeEnum<
    typeof FindOnePromptSnippetResponseBodyPromptSnippetsResponseProvider
  > = z.nativeEnum(
    FindOnePromptSnippetResponseBodyPromptSnippetsResponseProvider,
  );

/** @internal */
export const FindOnePromptSnippetResponseBodyPromptSnippetsResponseProvider$outboundSchema:
  z.ZodNativeEnum<
    typeof FindOnePromptSnippetResponseBodyPromptSnippetsResponseProvider
  > =
    FindOnePromptSnippetResponseBodyPromptSnippetsResponseProvider$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FindOnePromptSnippetResponseBodyPromptSnippetsResponseProvider$ {
  /** @deprecated use `FindOnePromptSnippetResponseBodyPromptSnippetsResponseProvider$inboundSchema` instead. */
  export const inboundSchema =
    FindOnePromptSnippetResponseBodyPromptSnippetsResponseProvider$inboundSchema;
  /** @deprecated use `FindOnePromptSnippetResponseBodyPromptSnippetsResponseProvider$outboundSchema` instead. */
  export const outboundSchema =
    FindOnePromptSnippetResponseBodyPromptSnippetsResponseProvider$outboundSchema;
}

/** @internal */
export const FindOnePromptSnippetResponseBodyPromptSnippetsResponseRole$inboundSchema:
  z.ZodNativeEnum<
    typeof FindOnePromptSnippetResponseBodyPromptSnippetsResponseRole
  > = z.nativeEnum(FindOnePromptSnippetResponseBodyPromptSnippetsResponseRole);

/** @internal */
export const FindOnePromptSnippetResponseBodyPromptSnippetsResponseRole$outboundSchema:
  z.ZodNativeEnum<
    typeof FindOnePromptSnippetResponseBodyPromptSnippetsResponseRole
  > = FindOnePromptSnippetResponseBodyPromptSnippetsResponseRole$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FindOnePromptSnippetResponseBodyPromptSnippetsResponseRole$ {
  /** @deprecated use `FindOnePromptSnippetResponseBodyPromptSnippetsResponseRole$inboundSchema` instead. */
  export const inboundSchema =
    FindOnePromptSnippetResponseBodyPromptSnippetsResponseRole$inboundSchema;
  /** @deprecated use `FindOnePromptSnippetResponseBodyPromptSnippetsResponseRole$outboundSchema` instead. */
  export const outboundSchema =
    FindOnePromptSnippetResponseBodyPromptSnippetsResponseRole$outboundSchema;
}

/** @internal */
export const FindOnePromptSnippet2PromptSnippetsResponse200ApplicationJSONResponseBody2VersionsType$inboundSchema:
  z.ZodNativeEnum<
    typeof FindOnePromptSnippet2PromptSnippetsResponse200ApplicationJSONResponseBody2VersionsType
  > = z.nativeEnum(
    FindOnePromptSnippet2PromptSnippetsResponse200ApplicationJSONResponseBody2VersionsType,
  );

/** @internal */
export const FindOnePromptSnippet2PromptSnippetsResponse200ApplicationJSONResponseBody2VersionsType$outboundSchema:
  z.ZodNativeEnum<
    typeof FindOnePromptSnippet2PromptSnippetsResponse200ApplicationJSONResponseBody2VersionsType
  > =
    FindOnePromptSnippet2PromptSnippetsResponse200ApplicationJSONResponseBody2VersionsType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FindOnePromptSnippet2PromptSnippetsResponse200ApplicationJSONResponseBody2VersionsType$ {
  /** @deprecated use `FindOnePromptSnippet2PromptSnippetsResponse200ApplicationJSONResponseBody2VersionsType$inboundSchema` instead. */
  export const inboundSchema =
    FindOnePromptSnippet2PromptSnippetsResponse200ApplicationJSONResponseBody2VersionsType$inboundSchema;
  /** @deprecated use `FindOnePromptSnippet2PromptSnippetsResponse200ApplicationJSONResponseBody2VersionsType$outboundSchema` instead. */
  export const outboundSchema =
    FindOnePromptSnippet2PromptSnippetsResponse200ApplicationJSONResponseBody2VersionsType$outboundSchema;
}

/** @internal */
export const FindOnePromptSnippet2PromptSnippetsResponse200ImageUrl$inboundSchema:
  z.ZodType<
    FindOnePromptSnippet2PromptSnippetsResponse200ImageUrl,
    z.ZodTypeDef,
    unknown
  > = z.object({
    id: z.string().optional(),
    url: z.string(),
    detail: z.string().optional(),
  });

/** @internal */
export type FindOnePromptSnippet2PromptSnippetsResponse200ImageUrl$Outbound = {
  id?: string | undefined;
  url: string;
  detail?: string | undefined;
};

/** @internal */
export const FindOnePromptSnippet2PromptSnippetsResponse200ImageUrl$outboundSchema:
  z.ZodType<
    FindOnePromptSnippet2PromptSnippetsResponse200ImageUrl$Outbound,
    z.ZodTypeDef,
    FindOnePromptSnippet2PromptSnippetsResponse200ImageUrl
  > = z.object({
    id: z.string().optional(),
    url: z.string(),
    detail: z.string().optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FindOnePromptSnippet2PromptSnippetsResponse200ImageUrl$ {
  /** @deprecated use `FindOnePromptSnippet2PromptSnippetsResponse200ImageUrl$inboundSchema` instead. */
  export const inboundSchema =
    FindOnePromptSnippet2PromptSnippetsResponse200ImageUrl$inboundSchema;
  /** @deprecated use `FindOnePromptSnippet2PromptSnippetsResponse200ImageUrl$outboundSchema` instead. */
  export const outboundSchema =
    FindOnePromptSnippet2PromptSnippetsResponse200ImageUrl$outboundSchema;
  /** @deprecated use `FindOnePromptSnippet2PromptSnippetsResponse200ImageUrl$Outbound` instead. */
  export type Outbound =
    FindOnePromptSnippet2PromptSnippetsResponse200ImageUrl$Outbound;
}

export function findOnePromptSnippet2PromptSnippetsResponse200ImageUrlToJSON(
  findOnePromptSnippet2PromptSnippetsResponse200ImageUrl:
    FindOnePromptSnippet2PromptSnippetsResponse200ImageUrl,
): string {
  return JSON.stringify(
    FindOnePromptSnippet2PromptSnippetsResponse200ImageUrl$outboundSchema.parse(
      findOnePromptSnippet2PromptSnippetsResponse200ImageUrl,
    ),
  );
}

export function findOnePromptSnippet2PromptSnippetsResponse200ImageUrlFromJSON(
  jsonString: string,
): SafeParseResult<
  FindOnePromptSnippet2PromptSnippetsResponse200ImageUrl,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      FindOnePromptSnippet2PromptSnippetsResponse200ImageUrl$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'FindOnePromptSnippet2PromptSnippetsResponse200ImageUrl' from JSON`,
  );
}

/** @internal */
export const FindOnePromptSnippet2PromptSnippetsResponse2002$inboundSchema:
  z.ZodType<
    FindOnePromptSnippet2PromptSnippetsResponse2002,
    z.ZodTypeDef,
    unknown
  > = z.object({
    type:
      FindOnePromptSnippet2PromptSnippetsResponse200ApplicationJSONResponseBody2VersionsType$inboundSchema,
    image_url: z.lazy(() =>
      FindOnePromptSnippet2PromptSnippetsResponse200ImageUrl$inboundSchema
    ),
  }).transform((v) => {
    return remap$(v, {
      "image_url": "imageUrl",
    });
  });

/** @internal */
export type FindOnePromptSnippet2PromptSnippetsResponse2002$Outbound = {
  type: string;
  image_url: FindOnePromptSnippet2PromptSnippetsResponse200ImageUrl$Outbound;
};

/** @internal */
export const FindOnePromptSnippet2PromptSnippetsResponse2002$outboundSchema:
  z.ZodType<
    FindOnePromptSnippet2PromptSnippetsResponse2002$Outbound,
    z.ZodTypeDef,
    FindOnePromptSnippet2PromptSnippetsResponse2002
  > = z.object({
    type:
      FindOnePromptSnippet2PromptSnippetsResponse200ApplicationJSONResponseBody2VersionsType$outboundSchema,
    imageUrl: z.lazy(() =>
      FindOnePromptSnippet2PromptSnippetsResponse200ImageUrl$outboundSchema
    ),
  }).transform((v) => {
    return remap$(v, {
      imageUrl: "image_url",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FindOnePromptSnippet2PromptSnippetsResponse2002$ {
  /** @deprecated use `FindOnePromptSnippet2PromptSnippetsResponse2002$inboundSchema` instead. */
  export const inboundSchema =
    FindOnePromptSnippet2PromptSnippetsResponse2002$inboundSchema;
  /** @deprecated use `FindOnePromptSnippet2PromptSnippetsResponse2002$outboundSchema` instead. */
  export const outboundSchema =
    FindOnePromptSnippet2PromptSnippetsResponse2002$outboundSchema;
  /** @deprecated use `FindOnePromptSnippet2PromptSnippetsResponse2002$Outbound` instead. */
  export type Outbound =
    FindOnePromptSnippet2PromptSnippetsResponse2002$Outbound;
}

export function findOnePromptSnippet2PromptSnippetsResponse2002ToJSON(
  findOnePromptSnippet2PromptSnippetsResponse2002:
    FindOnePromptSnippet2PromptSnippetsResponse2002,
): string {
  return JSON.stringify(
    FindOnePromptSnippet2PromptSnippetsResponse2002$outboundSchema.parse(
      findOnePromptSnippet2PromptSnippetsResponse2002,
    ),
  );
}

export function findOnePromptSnippet2PromptSnippetsResponse2002FromJSON(
  jsonString: string,
): SafeParseResult<
  FindOnePromptSnippet2PromptSnippetsResponse2002,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      FindOnePromptSnippet2PromptSnippetsResponse2002$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'FindOnePromptSnippet2PromptSnippetsResponse2002' from JSON`,
  );
}

/** @internal */
export const FindOnePromptSnippet2PromptSnippetsResponse200ApplicationJSONResponseBody2Type$inboundSchema:
  z.ZodNativeEnum<
    typeof FindOnePromptSnippet2PromptSnippetsResponse200ApplicationJSONResponseBody2Type
  > = z.nativeEnum(
    FindOnePromptSnippet2PromptSnippetsResponse200ApplicationJSONResponseBody2Type,
  );

/** @internal */
export const FindOnePromptSnippet2PromptSnippetsResponse200ApplicationJSONResponseBody2Type$outboundSchema:
  z.ZodNativeEnum<
    typeof FindOnePromptSnippet2PromptSnippetsResponse200ApplicationJSONResponseBody2Type
  > =
    FindOnePromptSnippet2PromptSnippetsResponse200ApplicationJSONResponseBody2Type$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FindOnePromptSnippet2PromptSnippetsResponse200ApplicationJSONResponseBody2Type$ {
  /** @deprecated use `FindOnePromptSnippet2PromptSnippetsResponse200ApplicationJSONResponseBody2Type$inboundSchema` instead. */
  export const inboundSchema =
    FindOnePromptSnippet2PromptSnippetsResponse200ApplicationJSONResponseBody2Type$inboundSchema;
  /** @deprecated use `FindOnePromptSnippet2PromptSnippetsResponse200ApplicationJSONResponseBody2Type$outboundSchema` instead. */
  export const outboundSchema =
    FindOnePromptSnippet2PromptSnippetsResponse200ApplicationJSONResponseBody2Type$outboundSchema;
}

/** @internal */
export const FindOnePromptSnippet2PromptSnippetsResponse2001$inboundSchema:
  z.ZodType<
    FindOnePromptSnippet2PromptSnippetsResponse2001,
    z.ZodTypeDef,
    unknown
  > = z.object({
    type:
      FindOnePromptSnippet2PromptSnippetsResponse200ApplicationJSONResponseBody2Type$inboundSchema,
    text: z.string(),
  });

/** @internal */
export type FindOnePromptSnippet2PromptSnippetsResponse2001$Outbound = {
  type: string;
  text: string;
};

/** @internal */
export const FindOnePromptSnippet2PromptSnippetsResponse2001$outboundSchema:
  z.ZodType<
    FindOnePromptSnippet2PromptSnippetsResponse2001$Outbound,
    z.ZodTypeDef,
    FindOnePromptSnippet2PromptSnippetsResponse2001
  > = z.object({
    type:
      FindOnePromptSnippet2PromptSnippetsResponse200ApplicationJSONResponseBody2Type$outboundSchema,
    text: z.string(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FindOnePromptSnippet2PromptSnippetsResponse2001$ {
  /** @deprecated use `FindOnePromptSnippet2PromptSnippetsResponse2001$inboundSchema` instead. */
  export const inboundSchema =
    FindOnePromptSnippet2PromptSnippetsResponse2001$inboundSchema;
  /** @deprecated use `FindOnePromptSnippet2PromptSnippetsResponse2001$outboundSchema` instead. */
  export const outboundSchema =
    FindOnePromptSnippet2PromptSnippetsResponse2001$outboundSchema;
  /** @deprecated use `FindOnePromptSnippet2PromptSnippetsResponse2001$Outbound` instead. */
  export type Outbound =
    FindOnePromptSnippet2PromptSnippetsResponse2001$Outbound;
}

export function findOnePromptSnippet2PromptSnippetsResponse2001ToJSON(
  findOnePromptSnippet2PromptSnippetsResponse2001:
    FindOnePromptSnippet2PromptSnippetsResponse2001,
): string {
  return JSON.stringify(
    FindOnePromptSnippet2PromptSnippetsResponse2001$outboundSchema.parse(
      findOnePromptSnippet2PromptSnippetsResponse2001,
    ),
  );
}

export function findOnePromptSnippet2PromptSnippetsResponse2001FromJSON(
  jsonString: string,
): SafeParseResult<
  FindOnePromptSnippet2PromptSnippetsResponse2001,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      FindOnePromptSnippet2PromptSnippetsResponse2001$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'FindOnePromptSnippet2PromptSnippetsResponse2001' from JSON`,
  );
}

/** @internal */
export const FindOnePromptSnippetContentPromptSnippetsResponse2002$inboundSchema:
  z.ZodType<
    FindOnePromptSnippetContentPromptSnippetsResponse2002,
    z.ZodTypeDef,
    unknown
  > = z.union([
    z.lazy(() => FindOnePromptSnippet2PromptSnippetsResponse2001$inboundSchema),
    z.lazy(() => FindOnePromptSnippet2PromptSnippetsResponse2002$inboundSchema),
  ]);

/** @internal */
export type FindOnePromptSnippetContentPromptSnippetsResponse2002$Outbound =
  | FindOnePromptSnippet2PromptSnippetsResponse2001$Outbound
  | FindOnePromptSnippet2PromptSnippetsResponse2002$Outbound;

/** @internal */
export const FindOnePromptSnippetContentPromptSnippetsResponse2002$outboundSchema:
  z.ZodType<
    FindOnePromptSnippetContentPromptSnippetsResponse2002$Outbound,
    z.ZodTypeDef,
    FindOnePromptSnippetContentPromptSnippetsResponse2002
  > = z.union([
    z.lazy(() =>
      FindOnePromptSnippet2PromptSnippetsResponse2001$outboundSchema
    ),
    z.lazy(() =>
      FindOnePromptSnippet2PromptSnippetsResponse2002$outboundSchema
    ),
  ]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FindOnePromptSnippetContentPromptSnippetsResponse2002$ {
  /** @deprecated use `FindOnePromptSnippetContentPromptSnippetsResponse2002$inboundSchema` instead. */
  export const inboundSchema =
    FindOnePromptSnippetContentPromptSnippetsResponse2002$inboundSchema;
  /** @deprecated use `FindOnePromptSnippetContentPromptSnippetsResponse2002$outboundSchema` instead. */
  export const outboundSchema =
    FindOnePromptSnippetContentPromptSnippetsResponse2002$outboundSchema;
  /** @deprecated use `FindOnePromptSnippetContentPromptSnippetsResponse2002$Outbound` instead. */
  export type Outbound =
    FindOnePromptSnippetContentPromptSnippetsResponse2002$Outbound;
}

export function findOnePromptSnippetContentPromptSnippetsResponse2002ToJSON(
  findOnePromptSnippetContentPromptSnippetsResponse2002:
    FindOnePromptSnippetContentPromptSnippetsResponse2002,
): string {
  return JSON.stringify(
    FindOnePromptSnippetContentPromptSnippetsResponse2002$outboundSchema.parse(
      findOnePromptSnippetContentPromptSnippetsResponse2002,
    ),
  );
}

export function findOnePromptSnippetContentPromptSnippetsResponse2002FromJSON(
  jsonString: string,
): SafeParseResult<
  FindOnePromptSnippetContentPromptSnippetsResponse2002,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      FindOnePromptSnippetContentPromptSnippetsResponse2002$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'FindOnePromptSnippetContentPromptSnippetsResponse2002' from JSON`,
  );
}

/** @internal */
export const FindOnePromptSnippetResponseBodyPromptSnippetsResponseContent$inboundSchema:
  z.ZodType<
    FindOnePromptSnippetResponseBodyPromptSnippetsResponseContent,
    z.ZodTypeDef,
    unknown
  > = z.union([
    z.string(),
    z.array(z.union([
      z.lazy(() =>
        FindOnePromptSnippet2PromptSnippetsResponse2001$inboundSchema
      ),
      z.lazy(() =>
        FindOnePromptSnippet2PromptSnippetsResponse2002$inboundSchema
      ),
    ])),
  ]);

/** @internal */
export type FindOnePromptSnippetResponseBodyPromptSnippetsResponseContent$Outbound =
  | string
  | Array<
    | FindOnePromptSnippet2PromptSnippetsResponse2001$Outbound
    | FindOnePromptSnippet2PromptSnippetsResponse2002$Outbound
  >;

/** @internal */
export const FindOnePromptSnippetResponseBodyPromptSnippetsResponseContent$outboundSchema:
  z.ZodType<
    FindOnePromptSnippetResponseBodyPromptSnippetsResponseContent$Outbound,
    z.ZodTypeDef,
    FindOnePromptSnippetResponseBodyPromptSnippetsResponseContent
  > = z.union([
    z.string(),
    z.array(z.union([
      z.lazy(() =>
        FindOnePromptSnippet2PromptSnippetsResponse2001$outboundSchema
      ),
      z.lazy(() =>
        FindOnePromptSnippet2PromptSnippetsResponse2002$outboundSchema
      ),
    ])),
  ]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FindOnePromptSnippetResponseBodyPromptSnippetsResponseContent$ {
  /** @deprecated use `FindOnePromptSnippetResponseBodyPromptSnippetsResponseContent$inboundSchema` instead. */
  export const inboundSchema =
    FindOnePromptSnippetResponseBodyPromptSnippetsResponseContent$inboundSchema;
  /** @deprecated use `FindOnePromptSnippetResponseBodyPromptSnippetsResponseContent$outboundSchema` instead. */
  export const outboundSchema =
    FindOnePromptSnippetResponseBodyPromptSnippetsResponseContent$outboundSchema;
  /** @deprecated use `FindOnePromptSnippetResponseBodyPromptSnippetsResponseContent$Outbound` instead. */
  export type Outbound =
    FindOnePromptSnippetResponseBodyPromptSnippetsResponseContent$Outbound;
}

export function findOnePromptSnippetResponseBodyPromptSnippetsResponseContentToJSON(
  findOnePromptSnippetResponseBodyPromptSnippetsResponseContent:
    FindOnePromptSnippetResponseBodyPromptSnippetsResponseContent,
): string {
  return JSON.stringify(
    FindOnePromptSnippetResponseBodyPromptSnippetsResponseContent$outboundSchema
      .parse(findOnePromptSnippetResponseBodyPromptSnippetsResponseContent),
  );
}

export function findOnePromptSnippetResponseBodyPromptSnippetsResponseContentFromJSON(
  jsonString: string,
): SafeParseResult<
  FindOnePromptSnippetResponseBodyPromptSnippetsResponseContent,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      FindOnePromptSnippetResponseBodyPromptSnippetsResponseContent$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'FindOnePromptSnippetResponseBodyPromptSnippetsResponseContent' from JSON`,
  );
}

/** @internal */
export const FindOnePromptSnippetResponseBodyPromptSnippetsResponse200ApplicationJson2Type$inboundSchema:
  z.ZodNativeEnum<
    typeof FindOnePromptSnippetResponseBodyPromptSnippetsResponse200ApplicationJson2Type
  > = z.nativeEnum(
    FindOnePromptSnippetResponseBodyPromptSnippetsResponse200ApplicationJson2Type,
  );

/** @internal */
export const FindOnePromptSnippetResponseBodyPromptSnippetsResponse200ApplicationJson2Type$outboundSchema:
  z.ZodNativeEnum<
    typeof FindOnePromptSnippetResponseBodyPromptSnippetsResponse200ApplicationJson2Type
  > =
    FindOnePromptSnippetResponseBodyPromptSnippetsResponse200ApplicationJson2Type$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FindOnePromptSnippetResponseBodyPromptSnippetsResponse200ApplicationJson2Type$ {
  /** @deprecated use `FindOnePromptSnippetResponseBodyPromptSnippetsResponse200ApplicationJson2Type$inboundSchema` instead. */
  export const inboundSchema =
    FindOnePromptSnippetResponseBodyPromptSnippetsResponse200ApplicationJson2Type$inboundSchema;
  /** @deprecated use `FindOnePromptSnippetResponseBodyPromptSnippetsResponse200ApplicationJson2Type$outboundSchema` instead. */
  export const outboundSchema =
    FindOnePromptSnippetResponseBodyPromptSnippetsResponse200ApplicationJson2Type$outboundSchema;
}

/** @internal */
export const FindOnePromptSnippetResponseBodyPromptSnippetsResponseFunction$inboundSchema:
  z.ZodType<
    FindOnePromptSnippetResponseBodyPromptSnippetsResponseFunction,
    z.ZodTypeDef,
    unknown
  > = z.object({
    name: z.string(),
    arguments: z.string(),
  });

/** @internal */
export type FindOnePromptSnippetResponseBodyPromptSnippetsResponseFunction$Outbound =
  {
    name: string;
    arguments: string;
  };

/** @internal */
export const FindOnePromptSnippetResponseBodyPromptSnippetsResponseFunction$outboundSchema:
  z.ZodType<
    FindOnePromptSnippetResponseBodyPromptSnippetsResponseFunction$Outbound,
    z.ZodTypeDef,
    FindOnePromptSnippetResponseBodyPromptSnippetsResponseFunction
  > = z.object({
    name: z.string(),
    arguments: z.string(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FindOnePromptSnippetResponseBodyPromptSnippetsResponseFunction$ {
  /** @deprecated use `FindOnePromptSnippetResponseBodyPromptSnippetsResponseFunction$inboundSchema` instead. */
  export const inboundSchema =
    FindOnePromptSnippetResponseBodyPromptSnippetsResponseFunction$inboundSchema;
  /** @deprecated use `FindOnePromptSnippetResponseBodyPromptSnippetsResponseFunction$outboundSchema` instead. */
  export const outboundSchema =
    FindOnePromptSnippetResponseBodyPromptSnippetsResponseFunction$outboundSchema;
  /** @deprecated use `FindOnePromptSnippetResponseBodyPromptSnippetsResponseFunction$Outbound` instead. */
  export type Outbound =
    FindOnePromptSnippetResponseBodyPromptSnippetsResponseFunction$Outbound;
}

export function findOnePromptSnippetResponseBodyPromptSnippetsResponseFunctionToJSON(
  findOnePromptSnippetResponseBodyPromptSnippetsResponseFunction:
    FindOnePromptSnippetResponseBodyPromptSnippetsResponseFunction,
): string {
  return JSON.stringify(
    FindOnePromptSnippetResponseBodyPromptSnippetsResponseFunction$outboundSchema
      .parse(findOnePromptSnippetResponseBodyPromptSnippetsResponseFunction),
  );
}

export function findOnePromptSnippetResponseBodyPromptSnippetsResponseFunctionFromJSON(
  jsonString: string,
): SafeParseResult<
  FindOnePromptSnippetResponseBodyPromptSnippetsResponseFunction,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      FindOnePromptSnippetResponseBodyPromptSnippetsResponseFunction$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'FindOnePromptSnippetResponseBodyPromptSnippetsResponseFunction' from JSON`,
  );
}

/** @internal */
export const FindOnePromptSnippetResponseBodyPromptSnippetsResponseToolCalls$inboundSchema:
  z.ZodType<
    FindOnePromptSnippetResponseBodyPromptSnippetsResponseToolCalls,
    z.ZodTypeDef,
    unknown
  > = z.object({
    id: z.string().optional(),
    index: z.number().optional(),
    type:
      FindOnePromptSnippetResponseBodyPromptSnippetsResponse200ApplicationJson2Type$inboundSchema,
    function: z.lazy(() =>
      FindOnePromptSnippetResponseBodyPromptSnippetsResponseFunction$inboundSchema
    ),
  });

/** @internal */
export type FindOnePromptSnippetResponseBodyPromptSnippetsResponseToolCalls$Outbound =
  {
    id?: string | undefined;
    index?: number | undefined;
    type: string;
    function:
      FindOnePromptSnippetResponseBodyPromptSnippetsResponseFunction$Outbound;
  };

/** @internal */
export const FindOnePromptSnippetResponseBodyPromptSnippetsResponseToolCalls$outboundSchema:
  z.ZodType<
    FindOnePromptSnippetResponseBodyPromptSnippetsResponseToolCalls$Outbound,
    z.ZodTypeDef,
    FindOnePromptSnippetResponseBodyPromptSnippetsResponseToolCalls
  > = z.object({
    id: z.string().optional(),
    index: z.number().optional(),
    type:
      FindOnePromptSnippetResponseBodyPromptSnippetsResponse200ApplicationJson2Type$outboundSchema,
    function: z.lazy(() =>
      FindOnePromptSnippetResponseBodyPromptSnippetsResponseFunction$outboundSchema
    ),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FindOnePromptSnippetResponseBodyPromptSnippetsResponseToolCalls$ {
  /** @deprecated use `FindOnePromptSnippetResponseBodyPromptSnippetsResponseToolCalls$inboundSchema` instead. */
  export const inboundSchema =
    FindOnePromptSnippetResponseBodyPromptSnippetsResponseToolCalls$inboundSchema;
  /** @deprecated use `FindOnePromptSnippetResponseBodyPromptSnippetsResponseToolCalls$outboundSchema` instead. */
  export const outboundSchema =
    FindOnePromptSnippetResponseBodyPromptSnippetsResponseToolCalls$outboundSchema;
  /** @deprecated use `FindOnePromptSnippetResponseBodyPromptSnippetsResponseToolCalls$Outbound` instead. */
  export type Outbound =
    FindOnePromptSnippetResponseBodyPromptSnippetsResponseToolCalls$Outbound;
}

export function findOnePromptSnippetResponseBodyPromptSnippetsResponseToolCallsToJSON(
  findOnePromptSnippetResponseBodyPromptSnippetsResponseToolCalls:
    FindOnePromptSnippetResponseBodyPromptSnippetsResponseToolCalls,
): string {
  return JSON.stringify(
    FindOnePromptSnippetResponseBodyPromptSnippetsResponseToolCalls$outboundSchema
      .parse(findOnePromptSnippetResponseBodyPromptSnippetsResponseToolCalls),
  );
}

export function findOnePromptSnippetResponseBodyPromptSnippetsResponseToolCallsFromJSON(
  jsonString: string,
): SafeParseResult<
  FindOnePromptSnippetResponseBodyPromptSnippetsResponseToolCalls,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      FindOnePromptSnippetResponseBodyPromptSnippetsResponseToolCalls$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'FindOnePromptSnippetResponseBodyPromptSnippetsResponseToolCalls' from JSON`,
  );
}

/** @internal */
export const FindOnePromptSnippetResponseBodyPromptSnippetsResponseMessages$inboundSchema:
  z.ZodType<
    FindOnePromptSnippetResponseBodyPromptSnippetsResponseMessages,
    z.ZodTypeDef,
    unknown
  > = z.object({
    role:
      FindOnePromptSnippetResponseBodyPromptSnippetsResponseRole$inboundSchema,
    content: z.union([
      z.string(),
      z.array(z.union([
        z.lazy(() =>
          FindOnePromptSnippet2PromptSnippetsResponse2001$inboundSchema
        ),
        z.lazy(() =>
          FindOnePromptSnippet2PromptSnippetsResponse2002$inboundSchema
        ),
      ])),
    ]),
    tool_calls: z.array(
      z.lazy(() =>
        FindOnePromptSnippetResponseBodyPromptSnippetsResponseToolCalls$inboundSchema
      ),
    ).optional(),
  }).transform((v) => {
    return remap$(v, {
      "tool_calls": "toolCalls",
    });
  });

/** @internal */
export type FindOnePromptSnippetResponseBodyPromptSnippetsResponseMessages$Outbound =
  {
    role: string;
    content:
      | string
      | Array<
        | FindOnePromptSnippet2PromptSnippetsResponse2001$Outbound
        | FindOnePromptSnippet2PromptSnippetsResponse2002$Outbound
      >;
    tool_calls?:
      | Array<
        FindOnePromptSnippetResponseBodyPromptSnippetsResponseToolCalls$Outbound
      >
      | undefined;
  };

/** @internal */
export const FindOnePromptSnippetResponseBodyPromptSnippetsResponseMessages$outboundSchema:
  z.ZodType<
    FindOnePromptSnippetResponseBodyPromptSnippetsResponseMessages$Outbound,
    z.ZodTypeDef,
    FindOnePromptSnippetResponseBodyPromptSnippetsResponseMessages
  > = z.object({
    role:
      FindOnePromptSnippetResponseBodyPromptSnippetsResponseRole$outboundSchema,
    content: z.union([
      z.string(),
      z.array(z.union([
        z.lazy(() =>
          FindOnePromptSnippet2PromptSnippetsResponse2001$outboundSchema
        ),
        z.lazy(() =>
          FindOnePromptSnippet2PromptSnippetsResponse2002$outboundSchema
        ),
      ])),
    ]),
    toolCalls: z.array(
      z.lazy(() =>
        FindOnePromptSnippetResponseBodyPromptSnippetsResponseToolCalls$outboundSchema
      ),
    ).optional(),
  }).transform((v) => {
    return remap$(v, {
      toolCalls: "tool_calls",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FindOnePromptSnippetResponseBodyPromptSnippetsResponseMessages$ {
  /** @deprecated use `FindOnePromptSnippetResponseBodyPromptSnippetsResponseMessages$inboundSchema` instead. */
  export const inboundSchema =
    FindOnePromptSnippetResponseBodyPromptSnippetsResponseMessages$inboundSchema;
  /** @deprecated use `FindOnePromptSnippetResponseBodyPromptSnippetsResponseMessages$outboundSchema` instead. */
  export const outboundSchema =
    FindOnePromptSnippetResponseBodyPromptSnippetsResponseMessages$outboundSchema;
  /** @deprecated use `FindOnePromptSnippetResponseBodyPromptSnippetsResponseMessages$Outbound` instead. */
  export type Outbound =
    FindOnePromptSnippetResponseBodyPromptSnippetsResponseMessages$Outbound;
}

export function findOnePromptSnippetResponseBodyPromptSnippetsResponseMessagesToJSON(
  findOnePromptSnippetResponseBodyPromptSnippetsResponseMessages:
    FindOnePromptSnippetResponseBodyPromptSnippetsResponseMessages,
): string {
  return JSON.stringify(
    FindOnePromptSnippetResponseBodyPromptSnippetsResponseMessages$outboundSchema
      .parse(findOnePromptSnippetResponseBodyPromptSnippetsResponseMessages),
  );
}

export function findOnePromptSnippetResponseBodyPromptSnippetsResponseMessagesFromJSON(
  jsonString: string,
): SafeParseResult<
  FindOnePromptSnippetResponseBodyPromptSnippetsResponseMessages,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      FindOnePromptSnippetResponseBodyPromptSnippetsResponseMessages$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'FindOnePromptSnippetResponseBodyPromptSnippetsResponseMessages' from JSON`,
  );
}

/** @internal */
export const FindOnePromptSnippetResponseBodyPromptSnippetsResponsePromptConfig$inboundSchema:
  z.ZodType<
    FindOnePromptSnippetResponseBodyPromptSnippetsResponsePromptConfig,
    z.ZodTypeDef,
    unknown
  > = z.object({
    stream: z.boolean().optional(),
    model: z.string().optional(),
    model_db_id: z.string().optional(),
    model_type:
      FindOnePromptSnippetResponseBodyPromptSnippetsResponseModelType$inboundSchema
        .optional(),
    model_parameters: z.lazy(() =>
      FindOnePromptSnippetResponseBodyPromptSnippetsResponseModelParameters$inboundSchema
    ).optional(),
    provider:
      FindOnePromptSnippetResponseBodyPromptSnippetsResponseProvider$inboundSchema
        .optional(),
    integration_id: z.nullable(z.string()).optional(),
    version: z.string().optional(),
    messages: z.array(
      z.lazy(() =>
        FindOnePromptSnippetResponseBodyPromptSnippetsResponseMessages$inboundSchema
      ),
    ),
  }).transform((v) => {
    return remap$(v, {
      "model_db_id": "modelDbId",
      "model_type": "modelType",
      "model_parameters": "modelParameters",
      "integration_id": "integrationId",
    });
  });

/** @internal */
export type FindOnePromptSnippetResponseBodyPromptSnippetsResponsePromptConfig$Outbound =
  {
    stream?: boolean | undefined;
    model?: string | undefined;
    model_db_id?: string | undefined;
    model_type?: string | undefined;
    model_parameters?:
      | FindOnePromptSnippetResponseBodyPromptSnippetsResponseModelParameters$Outbound
      | undefined;
    provider?: string | undefined;
    integration_id?: string | null | undefined;
    version?: string | undefined;
    messages: Array<
      FindOnePromptSnippetResponseBodyPromptSnippetsResponseMessages$Outbound
    >;
  };

/** @internal */
export const FindOnePromptSnippetResponseBodyPromptSnippetsResponsePromptConfig$outboundSchema:
  z.ZodType<
    FindOnePromptSnippetResponseBodyPromptSnippetsResponsePromptConfig$Outbound,
    z.ZodTypeDef,
    FindOnePromptSnippetResponseBodyPromptSnippetsResponsePromptConfig
  > = z.object({
    stream: z.boolean().optional(),
    model: z.string().optional(),
    modelDbId: z.string().optional(),
    modelType:
      FindOnePromptSnippetResponseBodyPromptSnippetsResponseModelType$outboundSchema
        .optional(),
    modelParameters: z.lazy(() =>
      FindOnePromptSnippetResponseBodyPromptSnippetsResponseModelParameters$outboundSchema
    ).optional(),
    provider:
      FindOnePromptSnippetResponseBodyPromptSnippetsResponseProvider$outboundSchema
        .optional(),
    integrationId: z.nullable(z.string()).optional(),
    version: z.string().optional(),
    messages: z.array(
      z.lazy(() =>
        FindOnePromptSnippetResponseBodyPromptSnippetsResponseMessages$outboundSchema
      ),
    ),
  }).transform((v) => {
    return remap$(v, {
      modelDbId: "model_db_id",
      modelType: "model_type",
      modelParameters: "model_parameters",
      integrationId: "integration_id",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FindOnePromptSnippetResponseBodyPromptSnippetsResponsePromptConfig$ {
  /** @deprecated use `FindOnePromptSnippetResponseBodyPromptSnippetsResponsePromptConfig$inboundSchema` instead. */
  export const inboundSchema =
    FindOnePromptSnippetResponseBodyPromptSnippetsResponsePromptConfig$inboundSchema;
  /** @deprecated use `FindOnePromptSnippetResponseBodyPromptSnippetsResponsePromptConfig$outboundSchema` instead. */
  export const outboundSchema =
    FindOnePromptSnippetResponseBodyPromptSnippetsResponsePromptConfig$outboundSchema;
  /** @deprecated use `FindOnePromptSnippetResponseBodyPromptSnippetsResponsePromptConfig$Outbound` instead. */
  export type Outbound =
    FindOnePromptSnippetResponseBodyPromptSnippetsResponsePromptConfig$Outbound;
}

export function findOnePromptSnippetResponseBodyPromptSnippetsResponsePromptConfigToJSON(
  findOnePromptSnippetResponseBodyPromptSnippetsResponsePromptConfig:
    FindOnePromptSnippetResponseBodyPromptSnippetsResponsePromptConfig,
): string {
  return JSON.stringify(
    FindOnePromptSnippetResponseBodyPromptSnippetsResponsePromptConfig$outboundSchema
      .parse(
        findOnePromptSnippetResponseBodyPromptSnippetsResponsePromptConfig,
      ),
  );
}

export function findOnePromptSnippetResponseBodyPromptSnippetsResponsePromptConfigFromJSON(
  jsonString: string,
): SafeParseResult<
  FindOnePromptSnippetResponseBodyPromptSnippetsResponsePromptConfig,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      FindOnePromptSnippetResponseBodyPromptSnippetsResponsePromptConfig$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'FindOnePromptSnippetResponseBodyPromptSnippetsResponsePromptConfig' from JSON`,
  );
}

/** @internal */
export const FindOnePromptSnippetResponseBodyPromptSnippetsResponseMetadata$inboundSchema:
  z.ZodType<
    FindOnePromptSnippetResponseBodyPromptSnippetsResponseMetadata,
    z.ZodTypeDef,
    unknown
  > = z.object({
    use_cases: z.array(z.string()).optional(),
    language: z.string().optional(),
  }).transform((v) => {
    return remap$(v, {
      "use_cases": "useCases",
    });
  });

/** @internal */
export type FindOnePromptSnippetResponseBodyPromptSnippetsResponseMetadata$Outbound =
  {
    use_cases?: Array<string> | undefined;
    language?: string | undefined;
  };

/** @internal */
export const FindOnePromptSnippetResponseBodyPromptSnippetsResponseMetadata$outboundSchema:
  z.ZodType<
    FindOnePromptSnippetResponseBodyPromptSnippetsResponseMetadata$Outbound,
    z.ZodTypeDef,
    FindOnePromptSnippetResponseBodyPromptSnippetsResponseMetadata
  > = z.object({
    useCases: z.array(z.string()).optional(),
    language: z.string().optional(),
  }).transform((v) => {
    return remap$(v, {
      useCases: "use_cases",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FindOnePromptSnippetResponseBodyPromptSnippetsResponseMetadata$ {
  /** @deprecated use `FindOnePromptSnippetResponseBodyPromptSnippetsResponseMetadata$inboundSchema` instead. */
  export const inboundSchema =
    FindOnePromptSnippetResponseBodyPromptSnippetsResponseMetadata$inboundSchema;
  /** @deprecated use `FindOnePromptSnippetResponseBodyPromptSnippetsResponseMetadata$outboundSchema` instead. */
  export const outboundSchema =
    FindOnePromptSnippetResponseBodyPromptSnippetsResponseMetadata$outboundSchema;
  /** @deprecated use `FindOnePromptSnippetResponseBodyPromptSnippetsResponseMetadata$Outbound` instead. */
  export type Outbound =
    FindOnePromptSnippetResponseBodyPromptSnippetsResponseMetadata$Outbound;
}

export function findOnePromptSnippetResponseBodyPromptSnippetsResponseMetadataToJSON(
  findOnePromptSnippetResponseBodyPromptSnippetsResponseMetadata:
    FindOnePromptSnippetResponseBodyPromptSnippetsResponseMetadata,
): string {
  return JSON.stringify(
    FindOnePromptSnippetResponseBodyPromptSnippetsResponseMetadata$outboundSchema
      .parse(findOnePromptSnippetResponseBodyPromptSnippetsResponseMetadata),
  );
}

export function findOnePromptSnippetResponseBodyPromptSnippetsResponseMetadataFromJSON(
  jsonString: string,
): SafeParseResult<
  FindOnePromptSnippetResponseBodyPromptSnippetsResponseMetadata,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      FindOnePromptSnippetResponseBodyPromptSnippetsResponseMetadata$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'FindOnePromptSnippetResponseBodyPromptSnippetsResponseMetadata' from JSON`,
  );
}

/** @internal */
export const ResponseBodyVersions$inboundSchema: z.ZodType<
  ResponseBodyVersions,
  z.ZodTypeDef,
  unknown
> = z.object({
  _id: z.string(),
  created_by_id: z.string(),
  display_name: z.string(),
  updated_by_id: z.string(),
  description: z.nullable(z.string()).optional(),
  prompt_config: z.lazy(() =>
    FindOnePromptSnippetResponseBodyPromptSnippetsResponsePromptConfig$inboundSchema
  ),
  metadata: z.lazy(() =>
    FindOnePromptSnippetResponseBodyPromptSnippetsResponseMetadata$inboundSchema
  ),
  commit: z.string(),
  timestamp: z.string(),
}).transform((v) => {
  return remap$(v, {
    "_id": "id",
    "created_by_id": "createdById",
    "display_name": "displayName",
    "updated_by_id": "updatedById",
    "prompt_config": "promptConfig",
  });
});

/** @internal */
export type ResponseBodyVersions$Outbound = {
  _id: string;
  created_by_id: string;
  display_name: string;
  updated_by_id: string;
  description?: string | null | undefined;
  prompt_config:
    FindOnePromptSnippetResponseBodyPromptSnippetsResponsePromptConfig$Outbound;
  metadata:
    FindOnePromptSnippetResponseBodyPromptSnippetsResponseMetadata$Outbound;
  commit: string;
  timestamp: string;
};

/** @internal */
export const ResponseBodyVersions$outboundSchema: z.ZodType<
  ResponseBodyVersions$Outbound,
  z.ZodTypeDef,
  ResponseBodyVersions
> = z.object({
  id: z.string(),
  createdById: z.string(),
  displayName: z.string(),
  updatedById: z.string(),
  description: z.nullable(z.string()).optional(),
  promptConfig: z.lazy(() =>
    FindOnePromptSnippetResponseBodyPromptSnippetsResponsePromptConfig$outboundSchema
  ),
  metadata: z.lazy(() =>
    FindOnePromptSnippetResponseBodyPromptSnippetsResponseMetadata$outboundSchema
  ),
  commit: z.string(),
  timestamp: z.string(),
}).transform((v) => {
  return remap$(v, {
    id: "_id",
    createdById: "created_by_id",
    displayName: "display_name",
    updatedById: "updated_by_id",
    promptConfig: "prompt_config",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ResponseBodyVersions$ {
  /** @deprecated use `ResponseBodyVersions$inboundSchema` instead. */
  export const inboundSchema = ResponseBodyVersions$inboundSchema;
  /** @deprecated use `ResponseBodyVersions$outboundSchema` instead. */
  export const outboundSchema = ResponseBodyVersions$outboundSchema;
  /** @deprecated use `ResponseBodyVersions$Outbound` instead. */
  export type Outbound = ResponseBodyVersions$Outbound;
}

export function responseBodyVersionsToJSON(
  responseBodyVersions: ResponseBodyVersions,
): string {
  return JSON.stringify(
    ResponseBodyVersions$outboundSchema.parse(responseBodyVersions),
  );
}

export function responseBodyVersionsFromJSON(
  jsonString: string,
): SafeParseResult<ResponseBodyVersions, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ResponseBodyVersions$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ResponseBodyVersions' from JSON`,
  );
}

/** @internal */
export const FindOnePromptSnippetResponseBodyType$inboundSchema:
  z.ZodNativeEnum<typeof FindOnePromptSnippetResponseBodyType> = z.nativeEnum(
    FindOnePromptSnippetResponseBodyType,
  );

/** @internal */
export const FindOnePromptSnippetResponseBodyType$outboundSchema:
  z.ZodNativeEnum<typeof FindOnePromptSnippetResponseBodyType> =
    FindOnePromptSnippetResponseBodyType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FindOnePromptSnippetResponseBodyType$ {
  /** @deprecated use `FindOnePromptSnippetResponseBodyType$inboundSchema` instead. */
  export const inboundSchema =
    FindOnePromptSnippetResponseBodyType$inboundSchema;
  /** @deprecated use `FindOnePromptSnippetResponseBodyType$outboundSchema` instead. */
  export const outboundSchema =
    FindOnePromptSnippetResponseBodyType$outboundSchema;
}

/** @internal */
export const ResponseBody2$inboundSchema: z.ZodType<
  ResponseBody2,
  z.ZodTypeDef,
  unknown
> = z.object({
  _id: z.string(),
  owner: z.union([z.string(), FindOnePromptSnippetOwner2$inboundSchema]),
  domain_id: z.string(),
  created_by_id: z.string(),
  display_name: z.string(),
  updated_by_id: z.string(),
  description: z.nullable(z.string()).optional(),
  prompt_config: z.lazy(() =>
    FindOnePromptSnippetResponseBodyPromptConfig$inboundSchema
  ),
  metadata: z.lazy(() =>
    FindOnePromptSnippetResponseBodyMetadata$inboundSchema
  ),
  created: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
  updated: z.string().datetime({ offset: true }).default(
    "2024-11-26T03:01:20.782Z",
  ).transform(v => new Date(v)),
  versions: z.array(z.lazy(() => ResponseBodyVersions$inboundSchema)),
  key: z.string(),
  type: FindOnePromptSnippetResponseBodyType$inboundSchema,
}).transform((v) => {
  return remap$(v, {
    "_id": "id",
    "domain_id": "domainId",
    "created_by_id": "createdById",
    "display_name": "displayName",
    "updated_by_id": "updatedById",
    "prompt_config": "promptConfig",
  });
});

/** @internal */
export type ResponseBody2$Outbound = {
  _id: string;
  owner: string | string;
  domain_id: string;
  created_by_id: string;
  display_name: string;
  updated_by_id: string;
  description?: string | null | undefined;
  prompt_config: FindOnePromptSnippetResponseBodyPromptConfig$Outbound;
  metadata: FindOnePromptSnippetResponseBodyMetadata$Outbound;
  created?: string | undefined;
  updated: string;
  versions: Array<ResponseBodyVersions$Outbound>;
  key: string;
  type: string;
};

/** @internal */
export const ResponseBody2$outboundSchema: z.ZodType<
  ResponseBody2$Outbound,
  z.ZodTypeDef,
  ResponseBody2
> = z.object({
  id: z.string(),
  owner: z.union([z.string(), FindOnePromptSnippetOwner2$outboundSchema]),
  domainId: z.string(),
  createdById: z.string(),
  displayName: z.string(),
  updatedById: z.string(),
  description: z.nullable(z.string()).optional(),
  promptConfig: z.lazy(() =>
    FindOnePromptSnippetResponseBodyPromptConfig$outboundSchema
  ),
  metadata: z.lazy(() =>
    FindOnePromptSnippetResponseBodyMetadata$outboundSchema
  ),
  created: z.date().transform(v => v.toISOString()).optional(),
  updated: z.date().default(() => new Date("2024-11-26T03:01:20.782Z"))
    .transform(v => v.toISOString()),
  versions: z.array(z.lazy(() => ResponseBodyVersions$outboundSchema)),
  key: z.string(),
  type: FindOnePromptSnippetResponseBodyType$outboundSchema,
}).transform((v) => {
  return remap$(v, {
    id: "_id",
    domainId: "domain_id",
    createdById: "created_by_id",
    displayName: "display_name",
    updatedById: "updated_by_id",
    promptConfig: "prompt_config",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ResponseBody2$ {
  /** @deprecated use `ResponseBody2$inboundSchema` instead. */
  export const inboundSchema = ResponseBody2$inboundSchema;
  /** @deprecated use `ResponseBody2$outboundSchema` instead. */
  export const outboundSchema = ResponseBody2$outboundSchema;
  /** @deprecated use `ResponseBody2$Outbound` instead. */
  export type Outbound = ResponseBody2$Outbound;
}

export function responseBody2ToJSON(responseBody2: ResponseBody2): string {
  return JSON.stringify(ResponseBody2$outboundSchema.parse(responseBody2));
}

export function responseBody2FromJSON(
  jsonString: string,
): SafeParseResult<ResponseBody2, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ResponseBody2$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ResponseBody2' from JSON`,
  );
}

/** @internal */
export const Owner2$inboundSchema: z.ZodNativeEnum<typeof Owner2> = z
  .nativeEnum(Owner2);

/** @internal */
export const Owner2$outboundSchema: z.ZodNativeEnum<typeof Owner2> =
  Owner2$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Owner2$ {
  /** @deprecated use `Owner2$inboundSchema` instead. */
  export const inboundSchema = Owner2$inboundSchema;
  /** @deprecated use `Owner2$outboundSchema` instead. */
  export const outboundSchema = Owner2$outboundSchema;
}

/** @internal */
export const Owner$inboundSchema: z.ZodType<Owner, z.ZodTypeDef, unknown> = z
  .union([z.string(), Owner2$inboundSchema]);

/** @internal */
export type Owner$Outbound = string | string;

/** @internal */
export const Owner$outboundSchema: z.ZodType<
  Owner$Outbound,
  z.ZodTypeDef,
  Owner
> = z.union([z.string(), Owner2$outboundSchema]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Owner$ {
  /** @deprecated use `Owner$inboundSchema` instead. */
  export const inboundSchema = Owner$inboundSchema;
  /** @deprecated use `Owner$outboundSchema` instead. */
  export const outboundSchema = Owner$outboundSchema;
  /** @deprecated use `Owner$Outbound` instead. */
  export type Outbound = Owner$Outbound;
}

export function ownerToJSON(owner: Owner): string {
  return JSON.stringify(Owner$outboundSchema.parse(owner));
}

export function ownerFromJSON(
  jsonString: string,
): SafeParseResult<Owner, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Owner$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Owner' from JSON`,
  );
}

/** @internal */
export const ResponseBodyModelType$inboundSchema: z.ZodNativeEnum<
  typeof ResponseBodyModelType
> = z.nativeEnum(ResponseBodyModelType);

/** @internal */
export const ResponseBodyModelType$outboundSchema: z.ZodNativeEnum<
  typeof ResponseBodyModelType
> = ResponseBodyModelType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ResponseBodyModelType$ {
  /** @deprecated use `ResponseBodyModelType$inboundSchema` instead. */
  export const inboundSchema = ResponseBodyModelType$inboundSchema;
  /** @deprecated use `ResponseBodyModelType$outboundSchema` instead. */
  export const outboundSchema = ResponseBodyModelType$outboundSchema;
}

/** @internal */
export const ResponseBodyFormat$inboundSchema: z.ZodNativeEnum<
  typeof ResponseBodyFormat
> = z.nativeEnum(ResponseBodyFormat);

/** @internal */
export const ResponseBodyFormat$outboundSchema: z.ZodNativeEnum<
  typeof ResponseBodyFormat
> = ResponseBodyFormat$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ResponseBodyFormat$ {
  /** @deprecated use `ResponseBodyFormat$inboundSchema` instead. */
  export const inboundSchema = ResponseBodyFormat$inboundSchema;
  /** @deprecated use `ResponseBodyFormat$outboundSchema` instead. */
  export const outboundSchema = ResponseBodyFormat$outboundSchema;
}

/** @internal */
export const ResponseBodyQuality$inboundSchema: z.ZodNativeEnum<
  typeof ResponseBodyQuality
> = z.nativeEnum(ResponseBodyQuality);

/** @internal */
export const ResponseBodyQuality$outboundSchema: z.ZodNativeEnum<
  typeof ResponseBodyQuality
> = ResponseBodyQuality$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ResponseBodyQuality$ {
  /** @deprecated use `ResponseBodyQuality$inboundSchema` instead. */
  export const inboundSchema = ResponseBodyQuality$inboundSchema;
  /** @deprecated use `ResponseBodyQuality$outboundSchema` instead. */
  export const outboundSchema = ResponseBodyQuality$outboundSchema;
}

/** @internal */
export const FindOnePromptSnippetResponseFormatPromptSnippetsType$inboundSchema:
  z.ZodNativeEnum<typeof FindOnePromptSnippetResponseFormatPromptSnippetsType> =
    z.nativeEnum(FindOnePromptSnippetResponseFormatPromptSnippetsType);

/** @internal */
export const FindOnePromptSnippetResponseFormatPromptSnippetsType$outboundSchema:
  z.ZodNativeEnum<typeof FindOnePromptSnippetResponseFormatPromptSnippetsType> =
    FindOnePromptSnippetResponseFormatPromptSnippetsType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FindOnePromptSnippetResponseFormatPromptSnippetsType$ {
  /** @deprecated use `FindOnePromptSnippetResponseFormatPromptSnippetsType$inboundSchema` instead. */
  export const inboundSchema =
    FindOnePromptSnippetResponseFormatPromptSnippetsType$inboundSchema;
  /** @deprecated use `FindOnePromptSnippetResponseFormatPromptSnippetsType$outboundSchema` instead. */
  export const outboundSchema =
    FindOnePromptSnippetResponseFormatPromptSnippetsType$outboundSchema;
}

/** @internal */
export const FindOnePromptSnippetResponseFormat2$inboundSchema: z.ZodType<
  FindOnePromptSnippetResponseFormat2,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: FindOnePromptSnippetResponseFormatPromptSnippetsType$inboundSchema,
});

/** @internal */
export type FindOnePromptSnippetResponseFormat2$Outbound = {
  type: string;
};

/** @internal */
export const FindOnePromptSnippetResponseFormat2$outboundSchema: z.ZodType<
  FindOnePromptSnippetResponseFormat2$Outbound,
  z.ZodTypeDef,
  FindOnePromptSnippetResponseFormat2
> = z.object({
  type: FindOnePromptSnippetResponseFormatPromptSnippetsType$outboundSchema,
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FindOnePromptSnippetResponseFormat2$ {
  /** @deprecated use `FindOnePromptSnippetResponseFormat2$inboundSchema` instead. */
  export const inboundSchema =
    FindOnePromptSnippetResponseFormat2$inboundSchema;
  /** @deprecated use `FindOnePromptSnippetResponseFormat2$outboundSchema` instead. */
  export const outboundSchema =
    FindOnePromptSnippetResponseFormat2$outboundSchema;
  /** @deprecated use `FindOnePromptSnippetResponseFormat2$Outbound` instead. */
  export type Outbound = FindOnePromptSnippetResponseFormat2$Outbound;
}

export function findOnePromptSnippetResponseFormat2ToJSON(
  findOnePromptSnippetResponseFormat2: FindOnePromptSnippetResponseFormat2,
): string {
  return JSON.stringify(
    FindOnePromptSnippetResponseFormat2$outboundSchema.parse(
      findOnePromptSnippetResponseFormat2,
    ),
  );
}

export function findOnePromptSnippetResponseFormat2FromJSON(
  jsonString: string,
): SafeParseResult<FindOnePromptSnippetResponseFormat2, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      FindOnePromptSnippetResponseFormat2$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'FindOnePromptSnippetResponseFormat2' from JSON`,
  );
}

/** @internal */
export const FindOnePromptSnippetResponseFormatType$inboundSchema:
  z.ZodNativeEnum<typeof FindOnePromptSnippetResponseFormatType> = z.nativeEnum(
    FindOnePromptSnippetResponseFormatType,
  );

/** @internal */
export const FindOnePromptSnippetResponseFormatType$outboundSchema:
  z.ZodNativeEnum<typeof FindOnePromptSnippetResponseFormatType> =
    FindOnePromptSnippetResponseFormatType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FindOnePromptSnippetResponseFormatType$ {
  /** @deprecated use `FindOnePromptSnippetResponseFormatType$inboundSchema` instead. */
  export const inboundSchema =
    FindOnePromptSnippetResponseFormatType$inboundSchema;
  /** @deprecated use `FindOnePromptSnippetResponseFormatType$outboundSchema` instead. */
  export const outboundSchema =
    FindOnePromptSnippetResponseFormatType$outboundSchema;
}

/** @internal */
export const FindOnePromptSnippetResponseFormatJsonSchema$inboundSchema:
  z.ZodType<
    FindOnePromptSnippetResponseFormatJsonSchema,
    z.ZodTypeDef,
    unknown
  > = z.object({
    name: z.string(),
    strict: z.boolean(),
    schema: z.record(z.any()),
  });

/** @internal */
export type FindOnePromptSnippetResponseFormatJsonSchema$Outbound = {
  name: string;
  strict: boolean;
  schema: { [k: string]: any };
};

/** @internal */
export const FindOnePromptSnippetResponseFormatJsonSchema$outboundSchema:
  z.ZodType<
    FindOnePromptSnippetResponseFormatJsonSchema$Outbound,
    z.ZodTypeDef,
    FindOnePromptSnippetResponseFormatJsonSchema
  > = z.object({
    name: z.string(),
    strict: z.boolean(),
    schema: z.record(z.any()),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FindOnePromptSnippetResponseFormatJsonSchema$ {
  /** @deprecated use `FindOnePromptSnippetResponseFormatJsonSchema$inboundSchema` instead. */
  export const inboundSchema =
    FindOnePromptSnippetResponseFormatJsonSchema$inboundSchema;
  /** @deprecated use `FindOnePromptSnippetResponseFormatJsonSchema$outboundSchema` instead. */
  export const outboundSchema =
    FindOnePromptSnippetResponseFormatJsonSchema$outboundSchema;
  /** @deprecated use `FindOnePromptSnippetResponseFormatJsonSchema$Outbound` instead. */
  export type Outbound = FindOnePromptSnippetResponseFormatJsonSchema$Outbound;
}

export function findOnePromptSnippetResponseFormatJsonSchemaToJSON(
  findOnePromptSnippetResponseFormatJsonSchema:
    FindOnePromptSnippetResponseFormatJsonSchema,
): string {
  return JSON.stringify(
    FindOnePromptSnippetResponseFormatJsonSchema$outboundSchema.parse(
      findOnePromptSnippetResponseFormatJsonSchema,
    ),
  );
}

export function findOnePromptSnippetResponseFormatJsonSchemaFromJSON(
  jsonString: string,
): SafeParseResult<
  FindOnePromptSnippetResponseFormatJsonSchema,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      FindOnePromptSnippetResponseFormatJsonSchema$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'FindOnePromptSnippetResponseFormatJsonSchema' from JSON`,
  );
}

/** @internal */
export const FindOnePromptSnippetResponseFormat1$inboundSchema: z.ZodType<
  FindOnePromptSnippetResponseFormat1,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: FindOnePromptSnippetResponseFormatType$inboundSchema,
  json_schema: z.lazy(() =>
    FindOnePromptSnippetResponseFormatJsonSchema$inboundSchema
  ),
}).transform((v) => {
  return remap$(v, {
    "json_schema": "jsonSchema",
  });
});

/** @internal */
export type FindOnePromptSnippetResponseFormat1$Outbound = {
  type: string;
  json_schema: FindOnePromptSnippetResponseFormatJsonSchema$Outbound;
};

/** @internal */
export const FindOnePromptSnippetResponseFormat1$outboundSchema: z.ZodType<
  FindOnePromptSnippetResponseFormat1$Outbound,
  z.ZodTypeDef,
  FindOnePromptSnippetResponseFormat1
> = z.object({
  type: FindOnePromptSnippetResponseFormatType$outboundSchema,
  jsonSchema: z.lazy(() =>
    FindOnePromptSnippetResponseFormatJsonSchema$outboundSchema
  ),
}).transform((v) => {
  return remap$(v, {
    jsonSchema: "json_schema",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FindOnePromptSnippetResponseFormat1$ {
  /** @deprecated use `FindOnePromptSnippetResponseFormat1$inboundSchema` instead. */
  export const inboundSchema =
    FindOnePromptSnippetResponseFormat1$inboundSchema;
  /** @deprecated use `FindOnePromptSnippetResponseFormat1$outboundSchema` instead. */
  export const outboundSchema =
    FindOnePromptSnippetResponseFormat1$outboundSchema;
  /** @deprecated use `FindOnePromptSnippetResponseFormat1$Outbound` instead. */
  export type Outbound = FindOnePromptSnippetResponseFormat1$Outbound;
}

export function findOnePromptSnippetResponseFormat1ToJSON(
  findOnePromptSnippetResponseFormat1: FindOnePromptSnippetResponseFormat1,
): string {
  return JSON.stringify(
    FindOnePromptSnippetResponseFormat1$outboundSchema.parse(
      findOnePromptSnippetResponseFormat1,
    ),
  );
}

export function findOnePromptSnippetResponseFormat1FromJSON(
  jsonString: string,
): SafeParseResult<FindOnePromptSnippetResponseFormat1, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      FindOnePromptSnippetResponseFormat1$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'FindOnePromptSnippetResponseFormat1' from JSON`,
  );
}

/** @internal */
export const ResponseBodyResponseFormat$inboundSchema: z.ZodType<
  ResponseBodyResponseFormat,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => FindOnePromptSnippetResponseFormat2$inboundSchema),
  z.lazy(() => FindOnePromptSnippetResponseFormat1$inboundSchema),
]);

/** @internal */
export type ResponseBodyResponseFormat$Outbound =
  | FindOnePromptSnippetResponseFormat2$Outbound
  | FindOnePromptSnippetResponseFormat1$Outbound;

/** @internal */
export const ResponseBodyResponseFormat$outboundSchema: z.ZodType<
  ResponseBodyResponseFormat$Outbound,
  z.ZodTypeDef,
  ResponseBodyResponseFormat
> = z.union([
  z.lazy(() => FindOnePromptSnippetResponseFormat2$outboundSchema),
  z.lazy(() => FindOnePromptSnippetResponseFormat1$outboundSchema),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ResponseBodyResponseFormat$ {
  /** @deprecated use `ResponseBodyResponseFormat$inboundSchema` instead. */
  export const inboundSchema = ResponseBodyResponseFormat$inboundSchema;
  /** @deprecated use `ResponseBodyResponseFormat$outboundSchema` instead. */
  export const outboundSchema = ResponseBodyResponseFormat$outboundSchema;
  /** @deprecated use `ResponseBodyResponseFormat$Outbound` instead. */
  export type Outbound = ResponseBodyResponseFormat$Outbound;
}

export function responseBodyResponseFormatToJSON(
  responseBodyResponseFormat: ResponseBodyResponseFormat,
): string {
  return JSON.stringify(
    ResponseBodyResponseFormat$outboundSchema.parse(responseBodyResponseFormat),
  );
}

export function responseBodyResponseFormatFromJSON(
  jsonString: string,
): SafeParseResult<ResponseBodyResponseFormat, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ResponseBodyResponseFormat$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ResponseBodyResponseFormat' from JSON`,
  );
}

/** @internal */
export const ResponseBodyPhotoRealVersion$inboundSchema: z.ZodNativeEnum<
  typeof ResponseBodyPhotoRealVersion
> = z.nativeEnum(ResponseBodyPhotoRealVersion);

/** @internal */
export const ResponseBodyPhotoRealVersion$outboundSchema: z.ZodNativeEnum<
  typeof ResponseBodyPhotoRealVersion
> = ResponseBodyPhotoRealVersion$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ResponseBodyPhotoRealVersion$ {
  /** @deprecated use `ResponseBodyPhotoRealVersion$inboundSchema` instead. */
  export const inboundSchema = ResponseBodyPhotoRealVersion$inboundSchema;
  /** @deprecated use `ResponseBodyPhotoRealVersion$outboundSchema` instead. */
  export const outboundSchema = ResponseBodyPhotoRealVersion$outboundSchema;
}

/** @internal */
export const ResponseBodyEncodingFormat$inboundSchema: z.ZodNativeEnum<
  typeof ResponseBodyEncodingFormat
> = z.nativeEnum(ResponseBodyEncodingFormat);

/** @internal */
export const ResponseBodyEncodingFormat$outboundSchema: z.ZodNativeEnum<
  typeof ResponseBodyEncodingFormat
> = ResponseBodyEncodingFormat$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ResponseBodyEncodingFormat$ {
  /** @deprecated use `ResponseBodyEncodingFormat$inboundSchema` instead. */
  export const inboundSchema = ResponseBodyEncodingFormat$inboundSchema;
  /** @deprecated use `ResponseBodyEncodingFormat$outboundSchema` instead. */
  export const outboundSchema = ResponseBodyEncodingFormat$outboundSchema;
}

/** @internal */
export const ResponseBodyModelParameters$inboundSchema: z.ZodType<
  ResponseBodyModelParameters,
  z.ZodTypeDef,
  unknown
> = z.object({
  temperature: z.number().optional(),
  maxTokens: z.number().optional(),
  topK: z.number().optional(),
  topP: z.number().optional(),
  frequencyPenalty: z.number().optional(),
  presencePenalty: z.number().optional(),
  numImages: z.number().optional(),
  seed: z.number().optional(),
  format: ResponseBodyFormat$inboundSchema.optional(),
  dimensions: z.string().optional(),
  quality: ResponseBodyQuality$inboundSchema.optional(),
  style: z.string().optional(),
  responseFormat: z.nullable(
    z.union([
      z.lazy(() => FindOnePromptSnippetResponseFormat2$inboundSchema),
      z.lazy(() => FindOnePromptSnippetResponseFormat1$inboundSchema),
    ]),
  ).optional(),
  photoRealVersion: ResponseBodyPhotoRealVersion$inboundSchema.optional(),
  encoding_format: ResponseBodyEncodingFormat$inboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    "encoding_format": "encodingFormat",
  });
});

/** @internal */
export type ResponseBodyModelParameters$Outbound = {
  temperature?: number | undefined;
  maxTokens?: number | undefined;
  topK?: number | undefined;
  topP?: number | undefined;
  frequencyPenalty?: number | undefined;
  presencePenalty?: number | undefined;
  numImages?: number | undefined;
  seed?: number | undefined;
  format?: string | undefined;
  dimensions?: string | undefined;
  quality?: string | undefined;
  style?: string | undefined;
  responseFormat?:
    | FindOnePromptSnippetResponseFormat2$Outbound
    | FindOnePromptSnippetResponseFormat1$Outbound
    | null
    | undefined;
  photoRealVersion?: string | undefined;
  encoding_format?: string | undefined;
};

/** @internal */
export const ResponseBodyModelParameters$outboundSchema: z.ZodType<
  ResponseBodyModelParameters$Outbound,
  z.ZodTypeDef,
  ResponseBodyModelParameters
> = z.object({
  temperature: z.number().optional(),
  maxTokens: z.number().optional(),
  topK: z.number().optional(),
  topP: z.number().optional(),
  frequencyPenalty: z.number().optional(),
  presencePenalty: z.number().optional(),
  numImages: z.number().optional(),
  seed: z.number().optional(),
  format: ResponseBodyFormat$outboundSchema.optional(),
  dimensions: z.string().optional(),
  quality: ResponseBodyQuality$outboundSchema.optional(),
  style: z.string().optional(),
  responseFormat: z.nullable(
    z.union([
      z.lazy(() => FindOnePromptSnippetResponseFormat2$outboundSchema),
      z.lazy(() => FindOnePromptSnippetResponseFormat1$outboundSchema),
    ]),
  ).optional(),
  photoRealVersion: ResponseBodyPhotoRealVersion$outboundSchema.optional(),
  encodingFormat: ResponseBodyEncodingFormat$outboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    encodingFormat: "encoding_format",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ResponseBodyModelParameters$ {
  /** @deprecated use `ResponseBodyModelParameters$inboundSchema` instead. */
  export const inboundSchema = ResponseBodyModelParameters$inboundSchema;
  /** @deprecated use `ResponseBodyModelParameters$outboundSchema` instead. */
  export const outboundSchema = ResponseBodyModelParameters$outboundSchema;
  /** @deprecated use `ResponseBodyModelParameters$Outbound` instead. */
  export type Outbound = ResponseBodyModelParameters$Outbound;
}

export function responseBodyModelParametersToJSON(
  responseBodyModelParameters: ResponseBodyModelParameters,
): string {
  return JSON.stringify(
    ResponseBodyModelParameters$outboundSchema.parse(
      responseBodyModelParameters,
    ),
  );
}

export function responseBodyModelParametersFromJSON(
  jsonString: string,
): SafeParseResult<ResponseBodyModelParameters, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ResponseBodyModelParameters$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ResponseBodyModelParameters' from JSON`,
  );
}

/** @internal */
export const ResponseBodyProvider$inboundSchema: z.ZodNativeEnum<
  typeof ResponseBodyProvider
> = z.nativeEnum(ResponseBodyProvider);

/** @internal */
export const ResponseBodyProvider$outboundSchema: z.ZodNativeEnum<
  typeof ResponseBodyProvider
> = ResponseBodyProvider$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ResponseBodyProvider$ {
  /** @deprecated use `ResponseBodyProvider$inboundSchema` instead. */
  export const inboundSchema = ResponseBodyProvider$inboundSchema;
  /** @deprecated use `ResponseBodyProvider$outboundSchema` instead. */
  export const outboundSchema = ResponseBodyProvider$outboundSchema;
}

/** @internal */
export const ResponseBodyRole$inboundSchema: z.ZodNativeEnum<
  typeof ResponseBodyRole
> = z.nativeEnum(ResponseBodyRole);

/** @internal */
export const ResponseBodyRole$outboundSchema: z.ZodNativeEnum<
  typeof ResponseBodyRole
> = ResponseBodyRole$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ResponseBodyRole$ {
  /** @deprecated use `ResponseBodyRole$inboundSchema` instead. */
  export const inboundSchema = ResponseBodyRole$inboundSchema;
  /** @deprecated use `ResponseBodyRole$outboundSchema` instead. */
  export const outboundSchema = ResponseBodyRole$outboundSchema;
}

/** @internal */
export const FindOnePromptSnippet2PromptSnippetsType$inboundSchema:
  z.ZodNativeEnum<typeof FindOnePromptSnippet2PromptSnippetsType> = z
    .nativeEnum(FindOnePromptSnippet2PromptSnippetsType);

/** @internal */
export const FindOnePromptSnippet2PromptSnippetsType$outboundSchema:
  z.ZodNativeEnum<typeof FindOnePromptSnippet2PromptSnippetsType> =
    FindOnePromptSnippet2PromptSnippetsType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FindOnePromptSnippet2PromptSnippetsType$ {
  /** @deprecated use `FindOnePromptSnippet2PromptSnippetsType$inboundSchema` instead. */
  export const inboundSchema =
    FindOnePromptSnippet2PromptSnippetsType$inboundSchema;
  /** @deprecated use `FindOnePromptSnippet2PromptSnippetsType$outboundSchema` instead. */
  export const outboundSchema =
    FindOnePromptSnippet2PromptSnippetsType$outboundSchema;
}

/** @internal */
export const FindOnePromptSnippet2ImageUrl$inboundSchema: z.ZodType<
  FindOnePromptSnippet2ImageUrl,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string().optional(),
  url: z.string(),
  detail: z.string().optional(),
});

/** @internal */
export type FindOnePromptSnippet2ImageUrl$Outbound = {
  id?: string | undefined;
  url: string;
  detail?: string | undefined;
};

/** @internal */
export const FindOnePromptSnippet2ImageUrl$outboundSchema: z.ZodType<
  FindOnePromptSnippet2ImageUrl$Outbound,
  z.ZodTypeDef,
  FindOnePromptSnippet2ImageUrl
> = z.object({
  id: z.string().optional(),
  url: z.string(),
  detail: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FindOnePromptSnippet2ImageUrl$ {
  /** @deprecated use `FindOnePromptSnippet2ImageUrl$inboundSchema` instead. */
  export const inboundSchema = FindOnePromptSnippet2ImageUrl$inboundSchema;
  /** @deprecated use `FindOnePromptSnippet2ImageUrl$outboundSchema` instead. */
  export const outboundSchema = FindOnePromptSnippet2ImageUrl$outboundSchema;
  /** @deprecated use `FindOnePromptSnippet2ImageUrl$Outbound` instead. */
  export type Outbound = FindOnePromptSnippet2ImageUrl$Outbound;
}

export function findOnePromptSnippet2ImageUrlToJSON(
  findOnePromptSnippet2ImageUrl: FindOnePromptSnippet2ImageUrl,
): string {
  return JSON.stringify(
    FindOnePromptSnippet2ImageUrl$outboundSchema.parse(
      findOnePromptSnippet2ImageUrl,
    ),
  );
}

export function findOnePromptSnippet2ImageUrlFromJSON(
  jsonString: string,
): SafeParseResult<FindOnePromptSnippet2ImageUrl, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => FindOnePromptSnippet2ImageUrl$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'FindOnePromptSnippet2ImageUrl' from JSON`,
  );
}

/** @internal */
export const FindOnePromptSnippet22$inboundSchema: z.ZodType<
  FindOnePromptSnippet22,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: FindOnePromptSnippet2PromptSnippetsType$inboundSchema,
  image_url: z.lazy(() => FindOnePromptSnippet2ImageUrl$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "image_url": "imageUrl",
  });
});

/** @internal */
export type FindOnePromptSnippet22$Outbound = {
  type: string;
  image_url: FindOnePromptSnippet2ImageUrl$Outbound;
};

/** @internal */
export const FindOnePromptSnippet22$outboundSchema: z.ZodType<
  FindOnePromptSnippet22$Outbound,
  z.ZodTypeDef,
  FindOnePromptSnippet22
> = z.object({
  type: FindOnePromptSnippet2PromptSnippetsType$outboundSchema,
  imageUrl: z.lazy(() => FindOnePromptSnippet2ImageUrl$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    imageUrl: "image_url",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FindOnePromptSnippet22$ {
  /** @deprecated use `FindOnePromptSnippet22$inboundSchema` instead. */
  export const inboundSchema = FindOnePromptSnippet22$inboundSchema;
  /** @deprecated use `FindOnePromptSnippet22$outboundSchema` instead. */
  export const outboundSchema = FindOnePromptSnippet22$outboundSchema;
  /** @deprecated use `FindOnePromptSnippet22$Outbound` instead. */
  export type Outbound = FindOnePromptSnippet22$Outbound;
}

export function findOnePromptSnippet22ToJSON(
  findOnePromptSnippet22: FindOnePromptSnippet22,
): string {
  return JSON.stringify(
    FindOnePromptSnippet22$outboundSchema.parse(findOnePromptSnippet22),
  );
}

export function findOnePromptSnippet22FromJSON(
  jsonString: string,
): SafeParseResult<FindOnePromptSnippet22, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => FindOnePromptSnippet22$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'FindOnePromptSnippet22' from JSON`,
  );
}

/** @internal */
export const FindOnePromptSnippet2Type$inboundSchema: z.ZodNativeEnum<
  typeof FindOnePromptSnippet2Type
> = z.nativeEnum(FindOnePromptSnippet2Type);

/** @internal */
export const FindOnePromptSnippet2Type$outboundSchema: z.ZodNativeEnum<
  typeof FindOnePromptSnippet2Type
> = FindOnePromptSnippet2Type$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FindOnePromptSnippet2Type$ {
  /** @deprecated use `FindOnePromptSnippet2Type$inboundSchema` instead. */
  export const inboundSchema = FindOnePromptSnippet2Type$inboundSchema;
  /** @deprecated use `FindOnePromptSnippet2Type$outboundSchema` instead. */
  export const outboundSchema = FindOnePromptSnippet2Type$outboundSchema;
}

/** @internal */
export const FindOnePromptSnippet21$inboundSchema: z.ZodType<
  FindOnePromptSnippet21,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: FindOnePromptSnippet2Type$inboundSchema,
  text: z.string(),
});

/** @internal */
export type FindOnePromptSnippet21$Outbound = {
  type: string;
  text: string;
};

/** @internal */
export const FindOnePromptSnippet21$outboundSchema: z.ZodType<
  FindOnePromptSnippet21$Outbound,
  z.ZodTypeDef,
  FindOnePromptSnippet21
> = z.object({
  type: FindOnePromptSnippet2Type$outboundSchema,
  text: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FindOnePromptSnippet21$ {
  /** @deprecated use `FindOnePromptSnippet21$inboundSchema` instead. */
  export const inboundSchema = FindOnePromptSnippet21$inboundSchema;
  /** @deprecated use `FindOnePromptSnippet21$outboundSchema` instead. */
  export const outboundSchema = FindOnePromptSnippet21$outboundSchema;
  /** @deprecated use `FindOnePromptSnippet21$Outbound` instead. */
  export type Outbound = FindOnePromptSnippet21$Outbound;
}

export function findOnePromptSnippet21ToJSON(
  findOnePromptSnippet21: FindOnePromptSnippet21,
): string {
  return JSON.stringify(
    FindOnePromptSnippet21$outboundSchema.parse(findOnePromptSnippet21),
  );
}

export function findOnePromptSnippet21FromJSON(
  jsonString: string,
): SafeParseResult<FindOnePromptSnippet21, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => FindOnePromptSnippet21$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'FindOnePromptSnippet21' from JSON`,
  );
}

/** @internal */
export const FindOnePromptSnippetContent2$inboundSchema: z.ZodType<
  FindOnePromptSnippetContent2,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => FindOnePromptSnippet21$inboundSchema),
  z.lazy(() => FindOnePromptSnippet22$inboundSchema),
]);

/** @internal */
export type FindOnePromptSnippetContent2$Outbound =
  | FindOnePromptSnippet21$Outbound
  | FindOnePromptSnippet22$Outbound;

/** @internal */
export const FindOnePromptSnippetContent2$outboundSchema: z.ZodType<
  FindOnePromptSnippetContent2$Outbound,
  z.ZodTypeDef,
  FindOnePromptSnippetContent2
> = z.union([
  z.lazy(() => FindOnePromptSnippet21$outboundSchema),
  z.lazy(() => FindOnePromptSnippet22$outboundSchema),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FindOnePromptSnippetContent2$ {
  /** @deprecated use `FindOnePromptSnippetContent2$inboundSchema` instead. */
  export const inboundSchema = FindOnePromptSnippetContent2$inboundSchema;
  /** @deprecated use `FindOnePromptSnippetContent2$outboundSchema` instead. */
  export const outboundSchema = FindOnePromptSnippetContent2$outboundSchema;
  /** @deprecated use `FindOnePromptSnippetContent2$Outbound` instead. */
  export type Outbound = FindOnePromptSnippetContent2$Outbound;
}

export function findOnePromptSnippetContent2ToJSON(
  findOnePromptSnippetContent2: FindOnePromptSnippetContent2,
): string {
  return JSON.stringify(
    FindOnePromptSnippetContent2$outboundSchema.parse(
      findOnePromptSnippetContent2,
    ),
  );
}

export function findOnePromptSnippetContent2FromJSON(
  jsonString: string,
): SafeParseResult<FindOnePromptSnippetContent2, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => FindOnePromptSnippetContent2$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'FindOnePromptSnippetContent2' from JSON`,
  );
}

/** @internal */
export const ResponseBodyContent$inboundSchema: z.ZodType<
  ResponseBodyContent,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.string(),
  z.array(z.union([
    z.lazy(() => FindOnePromptSnippet21$inboundSchema),
    z.lazy(() => FindOnePromptSnippet22$inboundSchema),
  ])),
]);

/** @internal */
export type ResponseBodyContent$Outbound =
  | string
  | Array<FindOnePromptSnippet21$Outbound | FindOnePromptSnippet22$Outbound>;

/** @internal */
export const ResponseBodyContent$outboundSchema: z.ZodType<
  ResponseBodyContent$Outbound,
  z.ZodTypeDef,
  ResponseBodyContent
> = z.union([
  z.string(),
  z.array(z.union([
    z.lazy(() => FindOnePromptSnippet21$outboundSchema),
    z.lazy(() => FindOnePromptSnippet22$outboundSchema),
  ])),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ResponseBodyContent$ {
  /** @deprecated use `ResponseBodyContent$inboundSchema` instead. */
  export const inboundSchema = ResponseBodyContent$inboundSchema;
  /** @deprecated use `ResponseBodyContent$outboundSchema` instead. */
  export const outboundSchema = ResponseBodyContent$outboundSchema;
  /** @deprecated use `ResponseBodyContent$Outbound` instead. */
  export type Outbound = ResponseBodyContent$Outbound;
}

export function responseBodyContentToJSON(
  responseBodyContent: ResponseBodyContent,
): string {
  return JSON.stringify(
    ResponseBodyContent$outboundSchema.parse(responseBodyContent),
  );
}

export function responseBodyContentFromJSON(
  jsonString: string,
): SafeParseResult<ResponseBodyContent, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ResponseBodyContent$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ResponseBodyContent' from JSON`,
  );
}

/** @internal */
export const FindOnePromptSnippetResponseBodyPromptSnippetsResponseType$inboundSchema:
  z.ZodNativeEnum<
    typeof FindOnePromptSnippetResponseBodyPromptSnippetsResponseType
  > = z.nativeEnum(FindOnePromptSnippetResponseBodyPromptSnippetsResponseType);

/** @internal */
export const FindOnePromptSnippetResponseBodyPromptSnippetsResponseType$outboundSchema:
  z.ZodNativeEnum<
    typeof FindOnePromptSnippetResponseBodyPromptSnippetsResponseType
  > = FindOnePromptSnippetResponseBodyPromptSnippetsResponseType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FindOnePromptSnippetResponseBodyPromptSnippetsResponseType$ {
  /** @deprecated use `FindOnePromptSnippetResponseBodyPromptSnippetsResponseType$inboundSchema` instead. */
  export const inboundSchema =
    FindOnePromptSnippetResponseBodyPromptSnippetsResponseType$inboundSchema;
  /** @deprecated use `FindOnePromptSnippetResponseBodyPromptSnippetsResponseType$outboundSchema` instead. */
  export const outboundSchema =
    FindOnePromptSnippetResponseBodyPromptSnippetsResponseType$outboundSchema;
}

/** @internal */
export const ResponseBodyFunction$inboundSchema: z.ZodType<
  ResponseBodyFunction,
  z.ZodTypeDef,
  unknown
> = z.object({
  name: z.string(),
  arguments: z.string(),
});

/** @internal */
export type ResponseBodyFunction$Outbound = {
  name: string;
  arguments: string;
};

/** @internal */
export const ResponseBodyFunction$outboundSchema: z.ZodType<
  ResponseBodyFunction$Outbound,
  z.ZodTypeDef,
  ResponseBodyFunction
> = z.object({
  name: z.string(),
  arguments: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ResponseBodyFunction$ {
  /** @deprecated use `ResponseBodyFunction$inboundSchema` instead. */
  export const inboundSchema = ResponseBodyFunction$inboundSchema;
  /** @deprecated use `ResponseBodyFunction$outboundSchema` instead. */
  export const outboundSchema = ResponseBodyFunction$outboundSchema;
  /** @deprecated use `ResponseBodyFunction$Outbound` instead. */
  export type Outbound = ResponseBodyFunction$Outbound;
}

export function responseBodyFunctionToJSON(
  responseBodyFunction: ResponseBodyFunction,
): string {
  return JSON.stringify(
    ResponseBodyFunction$outboundSchema.parse(responseBodyFunction),
  );
}

export function responseBodyFunctionFromJSON(
  jsonString: string,
): SafeParseResult<ResponseBodyFunction, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ResponseBodyFunction$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ResponseBodyFunction' from JSON`,
  );
}

/** @internal */
export const ResponseBodyToolCalls$inboundSchema: z.ZodType<
  ResponseBodyToolCalls,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string().optional(),
  index: z.number().optional(),
  type:
    FindOnePromptSnippetResponseBodyPromptSnippetsResponseType$inboundSchema,
  function: z.lazy(() => ResponseBodyFunction$inboundSchema),
});

/** @internal */
export type ResponseBodyToolCalls$Outbound = {
  id?: string | undefined;
  index?: number | undefined;
  type: string;
  function: ResponseBodyFunction$Outbound;
};

/** @internal */
export const ResponseBodyToolCalls$outboundSchema: z.ZodType<
  ResponseBodyToolCalls$Outbound,
  z.ZodTypeDef,
  ResponseBodyToolCalls
> = z.object({
  id: z.string().optional(),
  index: z.number().optional(),
  type:
    FindOnePromptSnippetResponseBodyPromptSnippetsResponseType$outboundSchema,
  function: z.lazy(() => ResponseBodyFunction$outboundSchema),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ResponseBodyToolCalls$ {
  /** @deprecated use `ResponseBodyToolCalls$inboundSchema` instead. */
  export const inboundSchema = ResponseBodyToolCalls$inboundSchema;
  /** @deprecated use `ResponseBodyToolCalls$outboundSchema` instead. */
  export const outboundSchema = ResponseBodyToolCalls$outboundSchema;
  /** @deprecated use `ResponseBodyToolCalls$Outbound` instead. */
  export type Outbound = ResponseBodyToolCalls$Outbound;
}

export function responseBodyToolCallsToJSON(
  responseBodyToolCalls: ResponseBodyToolCalls,
): string {
  return JSON.stringify(
    ResponseBodyToolCalls$outboundSchema.parse(responseBodyToolCalls),
  );
}

export function responseBodyToolCallsFromJSON(
  jsonString: string,
): SafeParseResult<ResponseBodyToolCalls, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ResponseBodyToolCalls$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ResponseBodyToolCalls' from JSON`,
  );
}

/** @internal */
export const ResponseBodyMessages$inboundSchema: z.ZodType<
  ResponseBodyMessages,
  z.ZodTypeDef,
  unknown
> = z.object({
  role: ResponseBodyRole$inboundSchema,
  content: z.union([
    z.string(),
    z.array(z.union([
      z.lazy(() => FindOnePromptSnippet21$inboundSchema),
      z.lazy(() => FindOnePromptSnippet22$inboundSchema),
    ])),
  ]),
  tool_calls: z.array(z.lazy(() => ResponseBodyToolCalls$inboundSchema))
    .optional(),
}).transform((v) => {
  return remap$(v, {
    "tool_calls": "toolCalls",
  });
});

/** @internal */
export type ResponseBodyMessages$Outbound = {
  role: string;
  content:
    | string
    | Array<FindOnePromptSnippet21$Outbound | FindOnePromptSnippet22$Outbound>;
  tool_calls?: Array<ResponseBodyToolCalls$Outbound> | undefined;
};

/** @internal */
export const ResponseBodyMessages$outboundSchema: z.ZodType<
  ResponseBodyMessages$Outbound,
  z.ZodTypeDef,
  ResponseBodyMessages
> = z.object({
  role: ResponseBodyRole$outboundSchema,
  content: z.union([
    z.string(),
    z.array(z.union([
      z.lazy(() => FindOnePromptSnippet21$outboundSchema),
      z.lazy(() => FindOnePromptSnippet22$outboundSchema),
    ])),
  ]),
  toolCalls: z.array(z.lazy(() => ResponseBodyToolCalls$outboundSchema))
    .optional(),
}).transform((v) => {
  return remap$(v, {
    toolCalls: "tool_calls",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ResponseBodyMessages$ {
  /** @deprecated use `ResponseBodyMessages$inboundSchema` instead. */
  export const inboundSchema = ResponseBodyMessages$inboundSchema;
  /** @deprecated use `ResponseBodyMessages$outboundSchema` instead. */
  export const outboundSchema = ResponseBodyMessages$outboundSchema;
  /** @deprecated use `ResponseBodyMessages$Outbound` instead. */
  export type Outbound = ResponseBodyMessages$Outbound;
}

export function responseBodyMessagesToJSON(
  responseBodyMessages: ResponseBodyMessages,
): string {
  return JSON.stringify(
    ResponseBodyMessages$outboundSchema.parse(responseBodyMessages),
  );
}

export function responseBodyMessagesFromJSON(
  jsonString: string,
): SafeParseResult<ResponseBodyMessages, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ResponseBodyMessages$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ResponseBodyMessages' from JSON`,
  );
}

/** @internal */
export const ResponseBodyPromptConfig$inboundSchema: z.ZodType<
  ResponseBodyPromptConfig,
  z.ZodTypeDef,
  unknown
> = z.object({
  stream: z.boolean().optional(),
  model: z.string().optional(),
  model_db_id: z.string().optional(),
  model_type: ResponseBodyModelType$inboundSchema.optional(),
  model_parameters: z.lazy(() => ResponseBodyModelParameters$inboundSchema)
    .optional(),
  provider: ResponseBodyProvider$inboundSchema.optional(),
  integration_id: z.nullable(z.string()).optional(),
  version: z.string().optional(),
  messages: z.array(z.lazy(() => ResponseBodyMessages$inboundSchema)),
}).transform((v) => {
  return remap$(v, {
    "model_db_id": "modelDbId",
    "model_type": "modelType",
    "model_parameters": "modelParameters",
    "integration_id": "integrationId",
  });
});

/** @internal */
export type ResponseBodyPromptConfig$Outbound = {
  stream?: boolean | undefined;
  model?: string | undefined;
  model_db_id?: string | undefined;
  model_type?: string | undefined;
  model_parameters?: ResponseBodyModelParameters$Outbound | undefined;
  provider?: string | undefined;
  integration_id?: string | null | undefined;
  version?: string | undefined;
  messages: Array<ResponseBodyMessages$Outbound>;
};

/** @internal */
export const ResponseBodyPromptConfig$outboundSchema: z.ZodType<
  ResponseBodyPromptConfig$Outbound,
  z.ZodTypeDef,
  ResponseBodyPromptConfig
> = z.object({
  stream: z.boolean().optional(),
  model: z.string().optional(),
  modelDbId: z.string().optional(),
  modelType: ResponseBodyModelType$outboundSchema.optional(),
  modelParameters: z.lazy(() => ResponseBodyModelParameters$outboundSchema)
    .optional(),
  provider: ResponseBodyProvider$outboundSchema.optional(),
  integrationId: z.nullable(z.string()).optional(),
  version: z.string().optional(),
  messages: z.array(z.lazy(() => ResponseBodyMessages$outboundSchema)),
}).transform((v) => {
  return remap$(v, {
    modelDbId: "model_db_id",
    modelType: "model_type",
    modelParameters: "model_parameters",
    integrationId: "integration_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ResponseBodyPromptConfig$ {
  /** @deprecated use `ResponseBodyPromptConfig$inboundSchema` instead. */
  export const inboundSchema = ResponseBodyPromptConfig$inboundSchema;
  /** @deprecated use `ResponseBodyPromptConfig$outboundSchema` instead. */
  export const outboundSchema = ResponseBodyPromptConfig$outboundSchema;
  /** @deprecated use `ResponseBodyPromptConfig$Outbound` instead. */
  export type Outbound = ResponseBodyPromptConfig$Outbound;
}

export function responseBodyPromptConfigToJSON(
  responseBodyPromptConfig: ResponseBodyPromptConfig,
): string {
  return JSON.stringify(
    ResponseBodyPromptConfig$outboundSchema.parse(responseBodyPromptConfig),
  );
}

export function responseBodyPromptConfigFromJSON(
  jsonString: string,
): SafeParseResult<ResponseBodyPromptConfig, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ResponseBodyPromptConfig$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ResponseBodyPromptConfig' from JSON`,
  );
}

/** @internal */
export const ResponseBodyMetadata$inboundSchema: z.ZodType<
  ResponseBodyMetadata,
  z.ZodTypeDef,
  unknown
> = z.object({
  use_cases: z.array(z.string()).optional(),
  language: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "use_cases": "useCases",
  });
});

/** @internal */
export type ResponseBodyMetadata$Outbound = {
  use_cases?: Array<string> | undefined;
  language?: string | undefined;
};

/** @internal */
export const ResponseBodyMetadata$outboundSchema: z.ZodType<
  ResponseBodyMetadata$Outbound,
  z.ZodTypeDef,
  ResponseBodyMetadata
> = z.object({
  useCases: z.array(z.string()).optional(),
  language: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    useCases: "use_cases",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ResponseBodyMetadata$ {
  /** @deprecated use `ResponseBodyMetadata$inboundSchema` instead. */
  export const inboundSchema = ResponseBodyMetadata$inboundSchema;
  /** @deprecated use `ResponseBodyMetadata$outboundSchema` instead. */
  export const outboundSchema = ResponseBodyMetadata$outboundSchema;
  /** @deprecated use `ResponseBodyMetadata$Outbound` instead. */
  export type Outbound = ResponseBodyMetadata$Outbound;
}

export function responseBodyMetadataToJSON(
  responseBodyMetadata: ResponseBodyMetadata,
): string {
  return JSON.stringify(
    ResponseBodyMetadata$outboundSchema.parse(responseBodyMetadata),
  );
}

export function responseBodyMetadataFromJSON(
  jsonString: string,
): SafeParseResult<ResponseBodyMetadata, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ResponseBodyMetadata$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ResponseBodyMetadata' from JSON`,
  );
}

/** @internal */
export const FindOnePromptSnippetResponseBodyPromptSnippetsResponse200ModelType$inboundSchema:
  z.ZodNativeEnum<
    typeof FindOnePromptSnippetResponseBodyPromptSnippetsResponse200ModelType
  > = z.nativeEnum(
    FindOnePromptSnippetResponseBodyPromptSnippetsResponse200ModelType,
  );

/** @internal */
export const FindOnePromptSnippetResponseBodyPromptSnippetsResponse200ModelType$outboundSchema:
  z.ZodNativeEnum<
    typeof FindOnePromptSnippetResponseBodyPromptSnippetsResponse200ModelType
  > =
    FindOnePromptSnippetResponseBodyPromptSnippetsResponse200ModelType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FindOnePromptSnippetResponseBodyPromptSnippetsResponse200ModelType$ {
  /** @deprecated use `FindOnePromptSnippetResponseBodyPromptSnippetsResponse200ModelType$inboundSchema` instead. */
  export const inboundSchema =
    FindOnePromptSnippetResponseBodyPromptSnippetsResponse200ModelType$inboundSchema;
  /** @deprecated use `FindOnePromptSnippetResponseBodyPromptSnippetsResponse200ModelType$outboundSchema` instead. */
  export const outboundSchema =
    FindOnePromptSnippetResponseBodyPromptSnippetsResponse200ModelType$outboundSchema;
}

/** @internal */
export const FindOnePromptSnippetResponseBodyPromptSnippetsResponse200ApplicationJSONFormat$inboundSchema:
  z.ZodNativeEnum<
    typeof FindOnePromptSnippetResponseBodyPromptSnippetsResponse200ApplicationJSONFormat
  > = z.nativeEnum(
    FindOnePromptSnippetResponseBodyPromptSnippetsResponse200ApplicationJSONFormat,
  );

/** @internal */
export const FindOnePromptSnippetResponseBodyPromptSnippetsResponse200ApplicationJSONFormat$outboundSchema:
  z.ZodNativeEnum<
    typeof FindOnePromptSnippetResponseBodyPromptSnippetsResponse200ApplicationJSONFormat
  > =
    FindOnePromptSnippetResponseBodyPromptSnippetsResponse200ApplicationJSONFormat$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FindOnePromptSnippetResponseBodyPromptSnippetsResponse200ApplicationJSONFormat$ {
  /** @deprecated use `FindOnePromptSnippetResponseBodyPromptSnippetsResponse200ApplicationJSONFormat$inboundSchema` instead. */
  export const inboundSchema =
    FindOnePromptSnippetResponseBodyPromptSnippetsResponse200ApplicationJSONFormat$inboundSchema;
  /** @deprecated use `FindOnePromptSnippetResponseBodyPromptSnippetsResponse200ApplicationJSONFormat$outboundSchema` instead. */
  export const outboundSchema =
    FindOnePromptSnippetResponseBodyPromptSnippetsResponse200ApplicationJSONFormat$outboundSchema;
}

/** @internal */
export const FindOnePromptSnippetResponseBodyPromptSnippetsResponse200Quality$inboundSchema:
  z.ZodNativeEnum<
    typeof FindOnePromptSnippetResponseBodyPromptSnippetsResponse200Quality
  > = z.nativeEnum(
    FindOnePromptSnippetResponseBodyPromptSnippetsResponse200Quality,
  );

/** @internal */
export const FindOnePromptSnippetResponseBodyPromptSnippetsResponse200Quality$outboundSchema:
  z.ZodNativeEnum<
    typeof FindOnePromptSnippetResponseBodyPromptSnippetsResponse200Quality
  > =
    FindOnePromptSnippetResponseBodyPromptSnippetsResponse200Quality$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FindOnePromptSnippetResponseBodyPromptSnippetsResponse200Quality$ {
  /** @deprecated use `FindOnePromptSnippetResponseBodyPromptSnippetsResponse200Quality$inboundSchema` instead. */
  export const inboundSchema =
    FindOnePromptSnippetResponseBodyPromptSnippetsResponse200Quality$inboundSchema;
  /** @deprecated use `FindOnePromptSnippetResponseBodyPromptSnippetsResponse200Quality$outboundSchema` instead. */
  export const outboundSchema =
    FindOnePromptSnippetResponseBodyPromptSnippetsResponse200Quality$outboundSchema;
}

/** @internal */
export const FindOnePromptSnippetResponseFormatPromptSnippetsResponse200ApplicationJSONResponseBody1VersionsType$inboundSchema:
  z.ZodNativeEnum<
    typeof FindOnePromptSnippetResponseFormatPromptSnippetsResponse200ApplicationJSONResponseBody1VersionsType
  > = z.nativeEnum(
    FindOnePromptSnippetResponseFormatPromptSnippetsResponse200ApplicationJSONResponseBody1VersionsType,
  );

/** @internal */
export const FindOnePromptSnippetResponseFormatPromptSnippetsResponse200ApplicationJSONResponseBody1VersionsType$outboundSchema:
  z.ZodNativeEnum<
    typeof FindOnePromptSnippetResponseFormatPromptSnippetsResponse200ApplicationJSONResponseBody1VersionsType
  > =
    FindOnePromptSnippetResponseFormatPromptSnippetsResponse200ApplicationJSONResponseBody1VersionsType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FindOnePromptSnippetResponseFormatPromptSnippetsResponse200ApplicationJSONResponseBody1VersionsType$ {
  /** @deprecated use `FindOnePromptSnippetResponseFormatPromptSnippetsResponse200ApplicationJSONResponseBody1VersionsType$inboundSchema` instead. */
  export const inboundSchema =
    FindOnePromptSnippetResponseFormatPromptSnippetsResponse200ApplicationJSONResponseBody1VersionsType$inboundSchema;
  /** @deprecated use `FindOnePromptSnippetResponseFormatPromptSnippetsResponse200ApplicationJSONResponseBody1VersionsType$outboundSchema` instead. */
  export const outboundSchema =
    FindOnePromptSnippetResponseFormatPromptSnippetsResponse200ApplicationJSONResponseBody1VersionsType$outboundSchema;
}

/** @internal */
export const FindOnePromptSnippetResponseFormatPromptSnippetsResponse200ApplicationJson2$inboundSchema:
  z.ZodType<
    FindOnePromptSnippetResponseFormatPromptSnippetsResponse200ApplicationJson2,
    z.ZodTypeDef,
    unknown
  > = z.object({
    type:
      FindOnePromptSnippetResponseFormatPromptSnippetsResponse200ApplicationJSONResponseBody1VersionsType$inboundSchema,
  });

/** @internal */
export type FindOnePromptSnippetResponseFormatPromptSnippetsResponse200ApplicationJson2$Outbound =
  {
    type: string;
  };

/** @internal */
export const FindOnePromptSnippetResponseFormatPromptSnippetsResponse200ApplicationJson2$outboundSchema:
  z.ZodType<
    FindOnePromptSnippetResponseFormatPromptSnippetsResponse200ApplicationJson2$Outbound,
    z.ZodTypeDef,
    FindOnePromptSnippetResponseFormatPromptSnippetsResponse200ApplicationJson2
  > = z.object({
    type:
      FindOnePromptSnippetResponseFormatPromptSnippetsResponse200ApplicationJSONResponseBody1VersionsType$outboundSchema,
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FindOnePromptSnippetResponseFormatPromptSnippetsResponse200ApplicationJson2$ {
  /** @deprecated use `FindOnePromptSnippetResponseFormatPromptSnippetsResponse200ApplicationJson2$inboundSchema` instead. */
  export const inboundSchema =
    FindOnePromptSnippetResponseFormatPromptSnippetsResponse200ApplicationJson2$inboundSchema;
  /** @deprecated use `FindOnePromptSnippetResponseFormatPromptSnippetsResponse200ApplicationJson2$outboundSchema` instead. */
  export const outboundSchema =
    FindOnePromptSnippetResponseFormatPromptSnippetsResponse200ApplicationJson2$outboundSchema;
  /** @deprecated use `FindOnePromptSnippetResponseFormatPromptSnippetsResponse200ApplicationJson2$Outbound` instead. */
  export type Outbound =
    FindOnePromptSnippetResponseFormatPromptSnippetsResponse200ApplicationJson2$Outbound;
}

export function findOnePromptSnippetResponseFormatPromptSnippetsResponse200ApplicationJson2ToJSON(
  findOnePromptSnippetResponseFormatPromptSnippetsResponse200ApplicationJson2:
    FindOnePromptSnippetResponseFormatPromptSnippetsResponse200ApplicationJson2,
): string {
  return JSON.stringify(
    FindOnePromptSnippetResponseFormatPromptSnippetsResponse200ApplicationJson2$outboundSchema
      .parse(
        findOnePromptSnippetResponseFormatPromptSnippetsResponse200ApplicationJson2,
      ),
  );
}

export function findOnePromptSnippetResponseFormatPromptSnippetsResponse200ApplicationJson2FromJSON(
  jsonString: string,
): SafeParseResult<
  FindOnePromptSnippetResponseFormatPromptSnippetsResponse200ApplicationJson2,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      FindOnePromptSnippetResponseFormatPromptSnippetsResponse200ApplicationJson2$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'FindOnePromptSnippetResponseFormatPromptSnippetsResponse200ApplicationJson2' from JSON`,
  );
}

/** @internal */
export const FindOnePromptSnippetResponseFormatPromptSnippetsResponse200ApplicationJSONResponseBody1Type$inboundSchema:
  z.ZodNativeEnum<
    typeof FindOnePromptSnippetResponseFormatPromptSnippetsResponse200ApplicationJSONResponseBody1Type
  > = z.nativeEnum(
    FindOnePromptSnippetResponseFormatPromptSnippetsResponse200ApplicationJSONResponseBody1Type,
  );

/** @internal */
export const FindOnePromptSnippetResponseFormatPromptSnippetsResponse200ApplicationJSONResponseBody1Type$outboundSchema:
  z.ZodNativeEnum<
    typeof FindOnePromptSnippetResponseFormatPromptSnippetsResponse200ApplicationJSONResponseBody1Type
  > =
    FindOnePromptSnippetResponseFormatPromptSnippetsResponse200ApplicationJSONResponseBody1Type$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FindOnePromptSnippetResponseFormatPromptSnippetsResponse200ApplicationJSONResponseBody1Type$ {
  /** @deprecated use `FindOnePromptSnippetResponseFormatPromptSnippetsResponse200ApplicationJSONResponseBody1Type$inboundSchema` instead. */
  export const inboundSchema =
    FindOnePromptSnippetResponseFormatPromptSnippetsResponse200ApplicationJSONResponseBody1Type$inboundSchema;
  /** @deprecated use `FindOnePromptSnippetResponseFormatPromptSnippetsResponse200ApplicationJSONResponseBody1Type$outboundSchema` instead. */
  export const outboundSchema =
    FindOnePromptSnippetResponseFormatPromptSnippetsResponse200ApplicationJSONResponseBody1Type$outboundSchema;
}

/** @internal */
export const FindOnePromptSnippetResponseFormatPromptSnippetsResponse200ApplicationJSONJSONSchema$inboundSchema:
  z.ZodType<
    FindOnePromptSnippetResponseFormatPromptSnippetsResponse200ApplicationJSONJSONSchema,
    z.ZodTypeDef,
    unknown
  > = z.object({
    name: z.string(),
    strict: z.boolean(),
    schema: z.record(z.any()),
  });

/** @internal */
export type FindOnePromptSnippetResponseFormatPromptSnippetsResponse200ApplicationJSONJSONSchema$Outbound =
  {
    name: string;
    strict: boolean;
    schema: { [k: string]: any };
  };

/** @internal */
export const FindOnePromptSnippetResponseFormatPromptSnippetsResponse200ApplicationJSONJSONSchema$outboundSchema:
  z.ZodType<
    FindOnePromptSnippetResponseFormatPromptSnippetsResponse200ApplicationJSONJSONSchema$Outbound,
    z.ZodTypeDef,
    FindOnePromptSnippetResponseFormatPromptSnippetsResponse200ApplicationJSONJSONSchema
  > = z.object({
    name: z.string(),
    strict: z.boolean(),
    schema: z.record(z.any()),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FindOnePromptSnippetResponseFormatPromptSnippetsResponse200ApplicationJSONJSONSchema$ {
  /** @deprecated use `FindOnePromptSnippetResponseFormatPromptSnippetsResponse200ApplicationJSONJSONSchema$inboundSchema` instead. */
  export const inboundSchema =
    FindOnePromptSnippetResponseFormatPromptSnippetsResponse200ApplicationJSONJSONSchema$inboundSchema;
  /** @deprecated use `FindOnePromptSnippetResponseFormatPromptSnippetsResponse200ApplicationJSONJSONSchema$outboundSchema` instead. */
  export const outboundSchema =
    FindOnePromptSnippetResponseFormatPromptSnippetsResponse200ApplicationJSONJSONSchema$outboundSchema;
  /** @deprecated use `FindOnePromptSnippetResponseFormatPromptSnippetsResponse200ApplicationJSONJSONSchema$Outbound` instead. */
  export type Outbound =
    FindOnePromptSnippetResponseFormatPromptSnippetsResponse200ApplicationJSONJSONSchema$Outbound;
}

export function findOnePromptSnippetResponseFormatPromptSnippetsResponse200ApplicationJSONJSONSchemaToJSON(
  findOnePromptSnippetResponseFormatPromptSnippetsResponse200ApplicationJSONJSONSchema:
    FindOnePromptSnippetResponseFormatPromptSnippetsResponse200ApplicationJSONJSONSchema,
): string {
  return JSON.stringify(
    FindOnePromptSnippetResponseFormatPromptSnippetsResponse200ApplicationJSONJSONSchema$outboundSchema
      .parse(
        findOnePromptSnippetResponseFormatPromptSnippetsResponse200ApplicationJSONJSONSchema,
      ),
  );
}

export function findOnePromptSnippetResponseFormatPromptSnippetsResponse200ApplicationJSONJSONSchemaFromJSON(
  jsonString: string,
): SafeParseResult<
  FindOnePromptSnippetResponseFormatPromptSnippetsResponse200ApplicationJSONJSONSchema,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      FindOnePromptSnippetResponseFormatPromptSnippetsResponse200ApplicationJSONJSONSchema$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'FindOnePromptSnippetResponseFormatPromptSnippetsResponse200ApplicationJSONJSONSchema' from JSON`,
  );
}

/** @internal */
export const FindOnePromptSnippetResponseFormatPromptSnippetsResponse200ApplicationJson1$inboundSchema:
  z.ZodType<
    FindOnePromptSnippetResponseFormatPromptSnippetsResponse200ApplicationJson1,
    z.ZodTypeDef,
    unknown
  > = z.object({
    type:
      FindOnePromptSnippetResponseFormatPromptSnippetsResponse200ApplicationJSONResponseBody1Type$inboundSchema,
    json_schema: z.lazy(() =>
      FindOnePromptSnippetResponseFormatPromptSnippetsResponse200ApplicationJSONJSONSchema$inboundSchema
    ),
  }).transform((v) => {
    return remap$(v, {
      "json_schema": "jsonSchema",
    });
  });

/** @internal */
export type FindOnePromptSnippetResponseFormatPromptSnippetsResponse200ApplicationJson1$Outbound =
  {
    type: string;
    json_schema:
      FindOnePromptSnippetResponseFormatPromptSnippetsResponse200ApplicationJSONJSONSchema$Outbound;
  };

/** @internal */
export const FindOnePromptSnippetResponseFormatPromptSnippetsResponse200ApplicationJson1$outboundSchema:
  z.ZodType<
    FindOnePromptSnippetResponseFormatPromptSnippetsResponse200ApplicationJson1$Outbound,
    z.ZodTypeDef,
    FindOnePromptSnippetResponseFormatPromptSnippetsResponse200ApplicationJson1
  > = z.object({
    type:
      FindOnePromptSnippetResponseFormatPromptSnippetsResponse200ApplicationJSONResponseBody1Type$outboundSchema,
    jsonSchema: z.lazy(() =>
      FindOnePromptSnippetResponseFormatPromptSnippetsResponse200ApplicationJSONJSONSchema$outboundSchema
    ),
  }).transform((v) => {
    return remap$(v, {
      jsonSchema: "json_schema",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FindOnePromptSnippetResponseFormatPromptSnippetsResponse200ApplicationJson1$ {
  /** @deprecated use `FindOnePromptSnippetResponseFormatPromptSnippetsResponse200ApplicationJson1$inboundSchema` instead. */
  export const inboundSchema =
    FindOnePromptSnippetResponseFormatPromptSnippetsResponse200ApplicationJson1$inboundSchema;
  /** @deprecated use `FindOnePromptSnippetResponseFormatPromptSnippetsResponse200ApplicationJson1$outboundSchema` instead. */
  export const outboundSchema =
    FindOnePromptSnippetResponseFormatPromptSnippetsResponse200ApplicationJson1$outboundSchema;
  /** @deprecated use `FindOnePromptSnippetResponseFormatPromptSnippetsResponse200ApplicationJson1$Outbound` instead. */
  export type Outbound =
    FindOnePromptSnippetResponseFormatPromptSnippetsResponse200ApplicationJson1$Outbound;
}

export function findOnePromptSnippetResponseFormatPromptSnippetsResponse200ApplicationJson1ToJSON(
  findOnePromptSnippetResponseFormatPromptSnippetsResponse200ApplicationJson1:
    FindOnePromptSnippetResponseFormatPromptSnippetsResponse200ApplicationJson1,
): string {
  return JSON.stringify(
    FindOnePromptSnippetResponseFormatPromptSnippetsResponse200ApplicationJson1$outboundSchema
      .parse(
        findOnePromptSnippetResponseFormatPromptSnippetsResponse200ApplicationJson1,
      ),
  );
}

export function findOnePromptSnippetResponseFormatPromptSnippetsResponse200ApplicationJson1FromJSON(
  jsonString: string,
): SafeParseResult<
  FindOnePromptSnippetResponseFormatPromptSnippetsResponse200ApplicationJson1,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      FindOnePromptSnippetResponseFormatPromptSnippetsResponse200ApplicationJson1$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'FindOnePromptSnippetResponseFormatPromptSnippetsResponse200ApplicationJson1' from JSON`,
  );
}

/** @internal */
export const FindOnePromptSnippetResponseBodyPromptSnippetsResponse200ResponseFormat$inboundSchema:
  z.ZodType<
    FindOnePromptSnippetResponseBodyPromptSnippetsResponse200ResponseFormat,
    z.ZodTypeDef,
    unknown
  > = z.union([
    z.lazy(() =>
      FindOnePromptSnippetResponseFormatPromptSnippetsResponse200ApplicationJson2$inboundSchema
    ),
    z.lazy(() =>
      FindOnePromptSnippetResponseFormatPromptSnippetsResponse200ApplicationJson1$inboundSchema
    ),
  ]);

/** @internal */
export type FindOnePromptSnippetResponseBodyPromptSnippetsResponse200ResponseFormat$Outbound =
  | FindOnePromptSnippetResponseFormatPromptSnippetsResponse200ApplicationJson2$Outbound
  | FindOnePromptSnippetResponseFormatPromptSnippetsResponse200ApplicationJson1$Outbound;

/** @internal */
export const FindOnePromptSnippetResponseBodyPromptSnippetsResponse200ResponseFormat$outboundSchema:
  z.ZodType<
    FindOnePromptSnippetResponseBodyPromptSnippetsResponse200ResponseFormat$Outbound,
    z.ZodTypeDef,
    FindOnePromptSnippetResponseBodyPromptSnippetsResponse200ResponseFormat
  > = z.union([
    z.lazy(() =>
      FindOnePromptSnippetResponseFormatPromptSnippetsResponse200ApplicationJson2$outboundSchema
    ),
    z.lazy(() =>
      FindOnePromptSnippetResponseFormatPromptSnippetsResponse200ApplicationJson1$outboundSchema
    ),
  ]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FindOnePromptSnippetResponseBodyPromptSnippetsResponse200ResponseFormat$ {
  /** @deprecated use `FindOnePromptSnippetResponseBodyPromptSnippetsResponse200ResponseFormat$inboundSchema` instead. */
  export const inboundSchema =
    FindOnePromptSnippetResponseBodyPromptSnippetsResponse200ResponseFormat$inboundSchema;
  /** @deprecated use `FindOnePromptSnippetResponseBodyPromptSnippetsResponse200ResponseFormat$outboundSchema` instead. */
  export const outboundSchema =
    FindOnePromptSnippetResponseBodyPromptSnippetsResponse200ResponseFormat$outboundSchema;
  /** @deprecated use `FindOnePromptSnippetResponseBodyPromptSnippetsResponse200ResponseFormat$Outbound` instead. */
  export type Outbound =
    FindOnePromptSnippetResponseBodyPromptSnippetsResponse200ResponseFormat$Outbound;
}

export function findOnePromptSnippetResponseBodyPromptSnippetsResponse200ResponseFormatToJSON(
  findOnePromptSnippetResponseBodyPromptSnippetsResponse200ResponseFormat:
    FindOnePromptSnippetResponseBodyPromptSnippetsResponse200ResponseFormat,
): string {
  return JSON.stringify(
    FindOnePromptSnippetResponseBodyPromptSnippetsResponse200ResponseFormat$outboundSchema
      .parse(
        findOnePromptSnippetResponseBodyPromptSnippetsResponse200ResponseFormat,
      ),
  );
}

export function findOnePromptSnippetResponseBodyPromptSnippetsResponse200ResponseFormatFromJSON(
  jsonString: string,
): SafeParseResult<
  FindOnePromptSnippetResponseBodyPromptSnippetsResponse200ResponseFormat,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      FindOnePromptSnippetResponseBodyPromptSnippetsResponse200ResponseFormat$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'FindOnePromptSnippetResponseBodyPromptSnippetsResponse200ResponseFormat' from JSON`,
  );
}

/** @internal */
export const FindOnePromptSnippetResponseBodyPromptSnippetsResponse200PhotoRealVersion$inboundSchema:
  z.ZodNativeEnum<
    typeof FindOnePromptSnippetResponseBodyPromptSnippetsResponse200PhotoRealVersion
  > = z.nativeEnum(
    FindOnePromptSnippetResponseBodyPromptSnippetsResponse200PhotoRealVersion,
  );

/** @internal */
export const FindOnePromptSnippetResponseBodyPromptSnippetsResponse200PhotoRealVersion$outboundSchema:
  z.ZodNativeEnum<
    typeof FindOnePromptSnippetResponseBodyPromptSnippetsResponse200PhotoRealVersion
  > =
    FindOnePromptSnippetResponseBodyPromptSnippetsResponse200PhotoRealVersion$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FindOnePromptSnippetResponseBodyPromptSnippetsResponse200PhotoRealVersion$ {
  /** @deprecated use `FindOnePromptSnippetResponseBodyPromptSnippetsResponse200PhotoRealVersion$inboundSchema` instead. */
  export const inboundSchema =
    FindOnePromptSnippetResponseBodyPromptSnippetsResponse200PhotoRealVersion$inboundSchema;
  /** @deprecated use `FindOnePromptSnippetResponseBodyPromptSnippetsResponse200PhotoRealVersion$outboundSchema` instead. */
  export const outboundSchema =
    FindOnePromptSnippetResponseBodyPromptSnippetsResponse200PhotoRealVersion$outboundSchema;
}

/** @internal */
export const FindOnePromptSnippetResponseBodyPromptSnippetsResponse200EncodingFormat$inboundSchema:
  z.ZodNativeEnum<
    typeof FindOnePromptSnippetResponseBodyPromptSnippetsResponse200EncodingFormat
  > = z.nativeEnum(
    FindOnePromptSnippetResponseBodyPromptSnippetsResponse200EncodingFormat,
  );

/** @internal */
export const FindOnePromptSnippetResponseBodyPromptSnippetsResponse200EncodingFormat$outboundSchema:
  z.ZodNativeEnum<
    typeof FindOnePromptSnippetResponseBodyPromptSnippetsResponse200EncodingFormat
  > =
    FindOnePromptSnippetResponseBodyPromptSnippetsResponse200EncodingFormat$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FindOnePromptSnippetResponseBodyPromptSnippetsResponse200EncodingFormat$ {
  /** @deprecated use `FindOnePromptSnippetResponseBodyPromptSnippetsResponse200EncodingFormat$inboundSchema` instead. */
  export const inboundSchema =
    FindOnePromptSnippetResponseBodyPromptSnippetsResponse200EncodingFormat$inboundSchema;
  /** @deprecated use `FindOnePromptSnippetResponseBodyPromptSnippetsResponse200EncodingFormat$outboundSchema` instead. */
  export const outboundSchema =
    FindOnePromptSnippetResponseBodyPromptSnippetsResponse200EncodingFormat$outboundSchema;
}

/** @internal */
export const FindOnePromptSnippetResponseBodyPromptSnippetsResponse200ModelParameters$inboundSchema:
  z.ZodType<
    FindOnePromptSnippetResponseBodyPromptSnippetsResponse200ModelParameters,
    z.ZodTypeDef,
    unknown
  > = z.object({
    temperature: z.number().optional(),
    maxTokens: z.number().optional(),
    topK: z.number().optional(),
    topP: z.number().optional(),
    frequencyPenalty: z.number().optional(),
    presencePenalty: z.number().optional(),
    numImages: z.number().optional(),
    seed: z.number().optional(),
    format:
      FindOnePromptSnippetResponseBodyPromptSnippetsResponse200ApplicationJSONFormat$inboundSchema
        .optional(),
    dimensions: z.string().optional(),
    quality:
      FindOnePromptSnippetResponseBodyPromptSnippetsResponse200Quality$inboundSchema
        .optional(),
    style: z.string().optional(),
    responseFormat: z.nullable(
      z.union([
        z.lazy(() =>
          FindOnePromptSnippetResponseFormatPromptSnippetsResponse200ApplicationJson2$inboundSchema
        ),
        z.lazy(() =>
          FindOnePromptSnippetResponseFormatPromptSnippetsResponse200ApplicationJson1$inboundSchema
        ),
      ]),
    ).optional(),
    photoRealVersion:
      FindOnePromptSnippetResponseBodyPromptSnippetsResponse200PhotoRealVersion$inboundSchema
        .optional(),
    encoding_format:
      FindOnePromptSnippetResponseBodyPromptSnippetsResponse200EncodingFormat$inboundSchema
        .optional(),
  }).transform((v) => {
    return remap$(v, {
      "encoding_format": "encodingFormat",
    });
  });

/** @internal */
export type FindOnePromptSnippetResponseBodyPromptSnippetsResponse200ModelParameters$Outbound =
  {
    temperature?: number | undefined;
    maxTokens?: number | undefined;
    topK?: number | undefined;
    topP?: number | undefined;
    frequencyPenalty?: number | undefined;
    presencePenalty?: number | undefined;
    numImages?: number | undefined;
    seed?: number | undefined;
    format?: string | undefined;
    dimensions?: string | undefined;
    quality?: string | undefined;
    style?: string | undefined;
    responseFormat?:
      | FindOnePromptSnippetResponseFormatPromptSnippetsResponse200ApplicationJson2$Outbound
      | FindOnePromptSnippetResponseFormatPromptSnippetsResponse200ApplicationJson1$Outbound
      | null
      | undefined;
    photoRealVersion?: string | undefined;
    encoding_format?: string | undefined;
  };

/** @internal */
export const FindOnePromptSnippetResponseBodyPromptSnippetsResponse200ModelParameters$outboundSchema:
  z.ZodType<
    FindOnePromptSnippetResponseBodyPromptSnippetsResponse200ModelParameters$Outbound,
    z.ZodTypeDef,
    FindOnePromptSnippetResponseBodyPromptSnippetsResponse200ModelParameters
  > = z.object({
    temperature: z.number().optional(),
    maxTokens: z.number().optional(),
    topK: z.number().optional(),
    topP: z.number().optional(),
    frequencyPenalty: z.number().optional(),
    presencePenalty: z.number().optional(),
    numImages: z.number().optional(),
    seed: z.number().optional(),
    format:
      FindOnePromptSnippetResponseBodyPromptSnippetsResponse200ApplicationJSONFormat$outboundSchema
        .optional(),
    dimensions: z.string().optional(),
    quality:
      FindOnePromptSnippetResponseBodyPromptSnippetsResponse200Quality$outboundSchema
        .optional(),
    style: z.string().optional(),
    responseFormat: z.nullable(
      z.union([
        z.lazy(() =>
          FindOnePromptSnippetResponseFormatPromptSnippetsResponse200ApplicationJson2$outboundSchema
        ),
        z.lazy(() =>
          FindOnePromptSnippetResponseFormatPromptSnippetsResponse200ApplicationJson1$outboundSchema
        ),
      ]),
    ).optional(),
    photoRealVersion:
      FindOnePromptSnippetResponseBodyPromptSnippetsResponse200PhotoRealVersion$outboundSchema
        .optional(),
    encodingFormat:
      FindOnePromptSnippetResponseBodyPromptSnippetsResponse200EncodingFormat$outboundSchema
        .optional(),
  }).transform((v) => {
    return remap$(v, {
      encodingFormat: "encoding_format",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FindOnePromptSnippetResponseBodyPromptSnippetsResponse200ModelParameters$ {
  /** @deprecated use `FindOnePromptSnippetResponseBodyPromptSnippetsResponse200ModelParameters$inboundSchema` instead. */
  export const inboundSchema =
    FindOnePromptSnippetResponseBodyPromptSnippetsResponse200ModelParameters$inboundSchema;
  /** @deprecated use `FindOnePromptSnippetResponseBodyPromptSnippetsResponse200ModelParameters$outboundSchema` instead. */
  export const outboundSchema =
    FindOnePromptSnippetResponseBodyPromptSnippetsResponse200ModelParameters$outboundSchema;
  /** @deprecated use `FindOnePromptSnippetResponseBodyPromptSnippetsResponse200ModelParameters$Outbound` instead. */
  export type Outbound =
    FindOnePromptSnippetResponseBodyPromptSnippetsResponse200ModelParameters$Outbound;
}

export function findOnePromptSnippetResponseBodyPromptSnippetsResponse200ModelParametersToJSON(
  findOnePromptSnippetResponseBodyPromptSnippetsResponse200ModelParameters:
    FindOnePromptSnippetResponseBodyPromptSnippetsResponse200ModelParameters,
): string {
  return JSON.stringify(
    FindOnePromptSnippetResponseBodyPromptSnippetsResponse200ModelParameters$outboundSchema
      .parse(
        findOnePromptSnippetResponseBodyPromptSnippetsResponse200ModelParameters,
      ),
  );
}

export function findOnePromptSnippetResponseBodyPromptSnippetsResponse200ModelParametersFromJSON(
  jsonString: string,
): SafeParseResult<
  FindOnePromptSnippetResponseBodyPromptSnippetsResponse200ModelParameters,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      FindOnePromptSnippetResponseBodyPromptSnippetsResponse200ModelParameters$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'FindOnePromptSnippetResponseBodyPromptSnippetsResponse200ModelParameters' from JSON`,
  );
}

/** @internal */
export const FindOnePromptSnippetResponseBodyPromptSnippetsResponse200Provider$inboundSchema:
  z.ZodNativeEnum<
    typeof FindOnePromptSnippetResponseBodyPromptSnippetsResponse200Provider
  > = z.nativeEnum(
    FindOnePromptSnippetResponseBodyPromptSnippetsResponse200Provider,
  );

/** @internal */
export const FindOnePromptSnippetResponseBodyPromptSnippetsResponse200Provider$outboundSchema:
  z.ZodNativeEnum<
    typeof FindOnePromptSnippetResponseBodyPromptSnippetsResponse200Provider
  > =
    FindOnePromptSnippetResponseBodyPromptSnippetsResponse200Provider$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FindOnePromptSnippetResponseBodyPromptSnippetsResponse200Provider$ {
  /** @deprecated use `FindOnePromptSnippetResponseBodyPromptSnippetsResponse200Provider$inboundSchema` instead. */
  export const inboundSchema =
    FindOnePromptSnippetResponseBodyPromptSnippetsResponse200Provider$inboundSchema;
  /** @deprecated use `FindOnePromptSnippetResponseBodyPromptSnippetsResponse200Provider$outboundSchema` instead. */
  export const outboundSchema =
    FindOnePromptSnippetResponseBodyPromptSnippetsResponse200Provider$outboundSchema;
}

/** @internal */
export const FindOnePromptSnippetResponseBodyPromptSnippetsResponse200Role$inboundSchema:
  z.ZodNativeEnum<
    typeof FindOnePromptSnippetResponseBodyPromptSnippetsResponse200Role
  > = z.nativeEnum(
    FindOnePromptSnippetResponseBodyPromptSnippetsResponse200Role,
  );

/** @internal */
export const FindOnePromptSnippetResponseBodyPromptSnippetsResponse200Role$outboundSchema:
  z.ZodNativeEnum<
    typeof FindOnePromptSnippetResponseBodyPromptSnippetsResponse200Role
  > =
    FindOnePromptSnippetResponseBodyPromptSnippetsResponse200Role$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FindOnePromptSnippetResponseBodyPromptSnippetsResponse200Role$ {
  /** @deprecated use `FindOnePromptSnippetResponseBodyPromptSnippetsResponse200Role$inboundSchema` instead. */
  export const inboundSchema =
    FindOnePromptSnippetResponseBodyPromptSnippetsResponse200Role$inboundSchema;
  /** @deprecated use `FindOnePromptSnippetResponseBodyPromptSnippetsResponse200Role$outboundSchema` instead. */
  export const outboundSchema =
    FindOnePromptSnippetResponseBodyPromptSnippetsResponse200Role$outboundSchema;
}

/** @internal */
export const FindOnePromptSnippet2PromptSnippetsResponse200ApplicationJSONResponseBody1VersionsType$inboundSchema:
  z.ZodNativeEnum<
    typeof FindOnePromptSnippet2PromptSnippetsResponse200ApplicationJSONResponseBody1VersionsType
  > = z.nativeEnum(
    FindOnePromptSnippet2PromptSnippetsResponse200ApplicationJSONResponseBody1VersionsType,
  );

/** @internal */
export const FindOnePromptSnippet2PromptSnippetsResponse200ApplicationJSONResponseBody1VersionsType$outboundSchema:
  z.ZodNativeEnum<
    typeof FindOnePromptSnippet2PromptSnippetsResponse200ApplicationJSONResponseBody1VersionsType
  > =
    FindOnePromptSnippet2PromptSnippetsResponse200ApplicationJSONResponseBody1VersionsType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FindOnePromptSnippet2PromptSnippetsResponse200ApplicationJSONResponseBody1VersionsType$ {
  /** @deprecated use `FindOnePromptSnippet2PromptSnippetsResponse200ApplicationJSONResponseBody1VersionsType$inboundSchema` instead. */
  export const inboundSchema =
    FindOnePromptSnippet2PromptSnippetsResponse200ApplicationJSONResponseBody1VersionsType$inboundSchema;
  /** @deprecated use `FindOnePromptSnippet2PromptSnippetsResponse200ApplicationJSONResponseBody1VersionsType$outboundSchema` instead. */
  export const outboundSchema =
    FindOnePromptSnippet2PromptSnippetsResponse200ApplicationJSONResponseBody1VersionsType$outboundSchema;
}

/** @internal */
export const FindOnePromptSnippet2PromptSnippetsResponse200ApplicationJSONImageUrl$inboundSchema:
  z.ZodType<
    FindOnePromptSnippet2PromptSnippetsResponse200ApplicationJSONImageUrl,
    z.ZodTypeDef,
    unknown
  > = z.object({
    id: z.string().optional(),
    url: z.string(),
    detail: z.string().optional(),
  });

/** @internal */
export type FindOnePromptSnippet2PromptSnippetsResponse200ApplicationJSONImageUrl$Outbound =
  {
    id?: string | undefined;
    url: string;
    detail?: string | undefined;
  };

/** @internal */
export const FindOnePromptSnippet2PromptSnippetsResponse200ApplicationJSONImageUrl$outboundSchema:
  z.ZodType<
    FindOnePromptSnippet2PromptSnippetsResponse200ApplicationJSONImageUrl$Outbound,
    z.ZodTypeDef,
    FindOnePromptSnippet2PromptSnippetsResponse200ApplicationJSONImageUrl
  > = z.object({
    id: z.string().optional(),
    url: z.string(),
    detail: z.string().optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FindOnePromptSnippet2PromptSnippetsResponse200ApplicationJSONImageUrl$ {
  /** @deprecated use `FindOnePromptSnippet2PromptSnippetsResponse200ApplicationJSONImageUrl$inboundSchema` instead. */
  export const inboundSchema =
    FindOnePromptSnippet2PromptSnippetsResponse200ApplicationJSONImageUrl$inboundSchema;
  /** @deprecated use `FindOnePromptSnippet2PromptSnippetsResponse200ApplicationJSONImageUrl$outboundSchema` instead. */
  export const outboundSchema =
    FindOnePromptSnippet2PromptSnippetsResponse200ApplicationJSONImageUrl$outboundSchema;
  /** @deprecated use `FindOnePromptSnippet2PromptSnippetsResponse200ApplicationJSONImageUrl$Outbound` instead. */
  export type Outbound =
    FindOnePromptSnippet2PromptSnippetsResponse200ApplicationJSONImageUrl$Outbound;
}

export function findOnePromptSnippet2PromptSnippetsResponse200ApplicationJSONImageUrlToJSON(
  findOnePromptSnippet2PromptSnippetsResponse200ApplicationJSONImageUrl:
    FindOnePromptSnippet2PromptSnippetsResponse200ApplicationJSONImageUrl,
): string {
  return JSON.stringify(
    FindOnePromptSnippet2PromptSnippetsResponse200ApplicationJSONImageUrl$outboundSchema
      .parse(
        findOnePromptSnippet2PromptSnippetsResponse200ApplicationJSONImageUrl,
      ),
  );
}

export function findOnePromptSnippet2PromptSnippetsResponse200ApplicationJSONImageUrlFromJSON(
  jsonString: string,
): SafeParseResult<
  FindOnePromptSnippet2PromptSnippetsResponse200ApplicationJSONImageUrl,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      FindOnePromptSnippet2PromptSnippetsResponse200ApplicationJSONImageUrl$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'FindOnePromptSnippet2PromptSnippetsResponse200ApplicationJSONImageUrl' from JSON`,
  );
}

/** @internal */
export const FindOnePromptSnippet2PromptSnippetsResponse200ApplicationJson2$inboundSchema:
  z.ZodType<
    FindOnePromptSnippet2PromptSnippetsResponse200ApplicationJson2,
    z.ZodTypeDef,
    unknown
  > = z.object({
    type:
      FindOnePromptSnippet2PromptSnippetsResponse200ApplicationJSONResponseBody1VersionsType$inboundSchema,
    image_url: z.lazy(() =>
      FindOnePromptSnippet2PromptSnippetsResponse200ApplicationJSONImageUrl$inboundSchema
    ),
  }).transform((v) => {
    return remap$(v, {
      "image_url": "imageUrl",
    });
  });

/** @internal */
export type FindOnePromptSnippet2PromptSnippetsResponse200ApplicationJson2$Outbound =
  {
    type: string;
    image_url:
      FindOnePromptSnippet2PromptSnippetsResponse200ApplicationJSONImageUrl$Outbound;
  };

/** @internal */
export const FindOnePromptSnippet2PromptSnippetsResponse200ApplicationJson2$outboundSchema:
  z.ZodType<
    FindOnePromptSnippet2PromptSnippetsResponse200ApplicationJson2$Outbound,
    z.ZodTypeDef,
    FindOnePromptSnippet2PromptSnippetsResponse200ApplicationJson2
  > = z.object({
    type:
      FindOnePromptSnippet2PromptSnippetsResponse200ApplicationJSONResponseBody1VersionsType$outboundSchema,
    imageUrl: z.lazy(() =>
      FindOnePromptSnippet2PromptSnippetsResponse200ApplicationJSONImageUrl$outboundSchema
    ),
  }).transform((v) => {
    return remap$(v, {
      imageUrl: "image_url",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FindOnePromptSnippet2PromptSnippetsResponse200ApplicationJson2$ {
  /** @deprecated use `FindOnePromptSnippet2PromptSnippetsResponse200ApplicationJson2$inboundSchema` instead. */
  export const inboundSchema =
    FindOnePromptSnippet2PromptSnippetsResponse200ApplicationJson2$inboundSchema;
  /** @deprecated use `FindOnePromptSnippet2PromptSnippetsResponse200ApplicationJson2$outboundSchema` instead. */
  export const outboundSchema =
    FindOnePromptSnippet2PromptSnippetsResponse200ApplicationJson2$outboundSchema;
  /** @deprecated use `FindOnePromptSnippet2PromptSnippetsResponse200ApplicationJson2$Outbound` instead. */
  export type Outbound =
    FindOnePromptSnippet2PromptSnippetsResponse200ApplicationJson2$Outbound;
}

export function findOnePromptSnippet2PromptSnippetsResponse200ApplicationJson2ToJSON(
  findOnePromptSnippet2PromptSnippetsResponse200ApplicationJson2:
    FindOnePromptSnippet2PromptSnippetsResponse200ApplicationJson2,
): string {
  return JSON.stringify(
    FindOnePromptSnippet2PromptSnippetsResponse200ApplicationJson2$outboundSchema
      .parse(findOnePromptSnippet2PromptSnippetsResponse200ApplicationJson2),
  );
}

export function findOnePromptSnippet2PromptSnippetsResponse200ApplicationJson2FromJSON(
  jsonString: string,
): SafeParseResult<
  FindOnePromptSnippet2PromptSnippetsResponse200ApplicationJson2,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      FindOnePromptSnippet2PromptSnippetsResponse200ApplicationJson2$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'FindOnePromptSnippet2PromptSnippetsResponse200ApplicationJson2' from JSON`,
  );
}

/** @internal */
export const FindOnePromptSnippet2PromptSnippetsResponse200ApplicationJSONResponseBody1Type$inboundSchema:
  z.ZodNativeEnum<
    typeof FindOnePromptSnippet2PromptSnippetsResponse200ApplicationJSONResponseBody1Type
  > = z.nativeEnum(
    FindOnePromptSnippet2PromptSnippetsResponse200ApplicationJSONResponseBody1Type,
  );

/** @internal */
export const FindOnePromptSnippet2PromptSnippetsResponse200ApplicationJSONResponseBody1Type$outboundSchema:
  z.ZodNativeEnum<
    typeof FindOnePromptSnippet2PromptSnippetsResponse200ApplicationJSONResponseBody1Type
  > =
    FindOnePromptSnippet2PromptSnippetsResponse200ApplicationJSONResponseBody1Type$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FindOnePromptSnippet2PromptSnippetsResponse200ApplicationJSONResponseBody1Type$ {
  /** @deprecated use `FindOnePromptSnippet2PromptSnippetsResponse200ApplicationJSONResponseBody1Type$inboundSchema` instead. */
  export const inboundSchema =
    FindOnePromptSnippet2PromptSnippetsResponse200ApplicationJSONResponseBody1Type$inboundSchema;
  /** @deprecated use `FindOnePromptSnippet2PromptSnippetsResponse200ApplicationJSONResponseBody1Type$outboundSchema` instead. */
  export const outboundSchema =
    FindOnePromptSnippet2PromptSnippetsResponse200ApplicationJSONResponseBody1Type$outboundSchema;
}

/** @internal */
export const FindOnePromptSnippet2PromptSnippetsResponse200ApplicationJson1$inboundSchema:
  z.ZodType<
    FindOnePromptSnippet2PromptSnippetsResponse200ApplicationJson1,
    z.ZodTypeDef,
    unknown
  > = z.object({
    type:
      FindOnePromptSnippet2PromptSnippetsResponse200ApplicationJSONResponseBody1Type$inboundSchema,
    text: z.string(),
  });

/** @internal */
export type FindOnePromptSnippet2PromptSnippetsResponse200ApplicationJson1$Outbound =
  {
    type: string;
    text: string;
  };

/** @internal */
export const FindOnePromptSnippet2PromptSnippetsResponse200ApplicationJson1$outboundSchema:
  z.ZodType<
    FindOnePromptSnippet2PromptSnippetsResponse200ApplicationJson1$Outbound,
    z.ZodTypeDef,
    FindOnePromptSnippet2PromptSnippetsResponse200ApplicationJson1
  > = z.object({
    type:
      FindOnePromptSnippet2PromptSnippetsResponse200ApplicationJSONResponseBody1Type$outboundSchema,
    text: z.string(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FindOnePromptSnippet2PromptSnippetsResponse200ApplicationJson1$ {
  /** @deprecated use `FindOnePromptSnippet2PromptSnippetsResponse200ApplicationJson1$inboundSchema` instead. */
  export const inboundSchema =
    FindOnePromptSnippet2PromptSnippetsResponse200ApplicationJson1$inboundSchema;
  /** @deprecated use `FindOnePromptSnippet2PromptSnippetsResponse200ApplicationJson1$outboundSchema` instead. */
  export const outboundSchema =
    FindOnePromptSnippet2PromptSnippetsResponse200ApplicationJson1$outboundSchema;
  /** @deprecated use `FindOnePromptSnippet2PromptSnippetsResponse200ApplicationJson1$Outbound` instead. */
  export type Outbound =
    FindOnePromptSnippet2PromptSnippetsResponse200ApplicationJson1$Outbound;
}

export function findOnePromptSnippet2PromptSnippetsResponse200ApplicationJson1ToJSON(
  findOnePromptSnippet2PromptSnippetsResponse200ApplicationJson1:
    FindOnePromptSnippet2PromptSnippetsResponse200ApplicationJson1,
): string {
  return JSON.stringify(
    FindOnePromptSnippet2PromptSnippetsResponse200ApplicationJson1$outboundSchema
      .parse(findOnePromptSnippet2PromptSnippetsResponse200ApplicationJson1),
  );
}

export function findOnePromptSnippet2PromptSnippetsResponse200ApplicationJson1FromJSON(
  jsonString: string,
): SafeParseResult<
  FindOnePromptSnippet2PromptSnippetsResponse200ApplicationJson1,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      FindOnePromptSnippet2PromptSnippetsResponse200ApplicationJson1$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'FindOnePromptSnippet2PromptSnippetsResponse200ApplicationJson1' from JSON`,
  );
}

/** @internal */
export const FindOnePromptSnippetContentPromptSnippetsResponse200ApplicationJson2$inboundSchema:
  z.ZodType<
    FindOnePromptSnippetContentPromptSnippetsResponse200ApplicationJson2,
    z.ZodTypeDef,
    unknown
  > = z.union([
    z.lazy(() =>
      FindOnePromptSnippet2PromptSnippetsResponse200ApplicationJson1$inboundSchema
    ),
    z.lazy(() =>
      FindOnePromptSnippet2PromptSnippetsResponse200ApplicationJson2$inboundSchema
    ),
  ]);

/** @internal */
export type FindOnePromptSnippetContentPromptSnippetsResponse200ApplicationJson2$Outbound =
  | FindOnePromptSnippet2PromptSnippetsResponse200ApplicationJson1$Outbound
  | FindOnePromptSnippet2PromptSnippetsResponse200ApplicationJson2$Outbound;

/** @internal */
export const FindOnePromptSnippetContentPromptSnippetsResponse200ApplicationJson2$outboundSchema:
  z.ZodType<
    FindOnePromptSnippetContentPromptSnippetsResponse200ApplicationJson2$Outbound,
    z.ZodTypeDef,
    FindOnePromptSnippetContentPromptSnippetsResponse200ApplicationJson2
  > = z.union([
    z.lazy(() =>
      FindOnePromptSnippet2PromptSnippetsResponse200ApplicationJson1$outboundSchema
    ),
    z.lazy(() =>
      FindOnePromptSnippet2PromptSnippetsResponse200ApplicationJson2$outboundSchema
    ),
  ]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FindOnePromptSnippetContentPromptSnippetsResponse200ApplicationJson2$ {
  /** @deprecated use `FindOnePromptSnippetContentPromptSnippetsResponse200ApplicationJson2$inboundSchema` instead. */
  export const inboundSchema =
    FindOnePromptSnippetContentPromptSnippetsResponse200ApplicationJson2$inboundSchema;
  /** @deprecated use `FindOnePromptSnippetContentPromptSnippetsResponse200ApplicationJson2$outboundSchema` instead. */
  export const outboundSchema =
    FindOnePromptSnippetContentPromptSnippetsResponse200ApplicationJson2$outboundSchema;
  /** @deprecated use `FindOnePromptSnippetContentPromptSnippetsResponse200ApplicationJson2$Outbound` instead. */
  export type Outbound =
    FindOnePromptSnippetContentPromptSnippetsResponse200ApplicationJson2$Outbound;
}

export function findOnePromptSnippetContentPromptSnippetsResponse200ApplicationJson2ToJSON(
  findOnePromptSnippetContentPromptSnippetsResponse200ApplicationJson2:
    FindOnePromptSnippetContentPromptSnippetsResponse200ApplicationJson2,
): string {
  return JSON.stringify(
    FindOnePromptSnippetContentPromptSnippetsResponse200ApplicationJson2$outboundSchema
      .parse(
        findOnePromptSnippetContentPromptSnippetsResponse200ApplicationJson2,
      ),
  );
}

export function findOnePromptSnippetContentPromptSnippetsResponse200ApplicationJson2FromJSON(
  jsonString: string,
): SafeParseResult<
  FindOnePromptSnippetContentPromptSnippetsResponse200ApplicationJson2,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      FindOnePromptSnippetContentPromptSnippetsResponse200ApplicationJson2$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'FindOnePromptSnippetContentPromptSnippetsResponse200ApplicationJson2' from JSON`,
  );
}

/** @internal */
export const FindOnePromptSnippetResponseBodyPromptSnippetsResponse200Content$inboundSchema:
  z.ZodType<
    FindOnePromptSnippetResponseBodyPromptSnippetsResponse200Content,
    z.ZodTypeDef,
    unknown
  > = z.union([
    z.string(),
    z.array(z.union([
      z.lazy(() =>
        FindOnePromptSnippet2PromptSnippetsResponse200ApplicationJson1$inboundSchema
      ),
      z.lazy(() =>
        FindOnePromptSnippet2PromptSnippetsResponse200ApplicationJson2$inboundSchema
      ),
    ])),
  ]);

/** @internal */
export type FindOnePromptSnippetResponseBodyPromptSnippetsResponse200Content$Outbound =
  | string
  | Array<
    | FindOnePromptSnippet2PromptSnippetsResponse200ApplicationJson1$Outbound
    | FindOnePromptSnippet2PromptSnippetsResponse200ApplicationJson2$Outbound
  >;

/** @internal */
export const FindOnePromptSnippetResponseBodyPromptSnippetsResponse200Content$outboundSchema:
  z.ZodType<
    FindOnePromptSnippetResponseBodyPromptSnippetsResponse200Content$Outbound,
    z.ZodTypeDef,
    FindOnePromptSnippetResponseBodyPromptSnippetsResponse200Content
  > = z.union([
    z.string(),
    z.array(z.union([
      z.lazy(() =>
        FindOnePromptSnippet2PromptSnippetsResponse200ApplicationJson1$outboundSchema
      ),
      z.lazy(() =>
        FindOnePromptSnippet2PromptSnippetsResponse200ApplicationJson2$outboundSchema
      ),
    ])),
  ]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FindOnePromptSnippetResponseBodyPromptSnippetsResponse200Content$ {
  /** @deprecated use `FindOnePromptSnippetResponseBodyPromptSnippetsResponse200Content$inboundSchema` instead. */
  export const inboundSchema =
    FindOnePromptSnippetResponseBodyPromptSnippetsResponse200Content$inboundSchema;
  /** @deprecated use `FindOnePromptSnippetResponseBodyPromptSnippetsResponse200Content$outboundSchema` instead. */
  export const outboundSchema =
    FindOnePromptSnippetResponseBodyPromptSnippetsResponse200Content$outboundSchema;
  /** @deprecated use `FindOnePromptSnippetResponseBodyPromptSnippetsResponse200Content$Outbound` instead. */
  export type Outbound =
    FindOnePromptSnippetResponseBodyPromptSnippetsResponse200Content$Outbound;
}

export function findOnePromptSnippetResponseBodyPromptSnippetsResponse200ContentToJSON(
  findOnePromptSnippetResponseBodyPromptSnippetsResponse200Content:
    FindOnePromptSnippetResponseBodyPromptSnippetsResponse200Content,
): string {
  return JSON.stringify(
    FindOnePromptSnippetResponseBodyPromptSnippetsResponse200Content$outboundSchema
      .parse(findOnePromptSnippetResponseBodyPromptSnippetsResponse200Content),
  );
}

export function findOnePromptSnippetResponseBodyPromptSnippetsResponse200ContentFromJSON(
  jsonString: string,
): SafeParseResult<
  FindOnePromptSnippetResponseBodyPromptSnippetsResponse200Content,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      FindOnePromptSnippetResponseBodyPromptSnippetsResponse200Content$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'FindOnePromptSnippetResponseBodyPromptSnippetsResponse200Content' from JSON`,
  );
}

/** @internal */
export const FindOnePromptSnippetResponseBodyPromptSnippetsResponse200ApplicationJson1Type$inboundSchema:
  z.ZodNativeEnum<
    typeof FindOnePromptSnippetResponseBodyPromptSnippetsResponse200ApplicationJson1Type
  > = z.nativeEnum(
    FindOnePromptSnippetResponseBodyPromptSnippetsResponse200ApplicationJson1Type,
  );

/** @internal */
export const FindOnePromptSnippetResponseBodyPromptSnippetsResponse200ApplicationJson1Type$outboundSchema:
  z.ZodNativeEnum<
    typeof FindOnePromptSnippetResponseBodyPromptSnippetsResponse200ApplicationJson1Type
  > =
    FindOnePromptSnippetResponseBodyPromptSnippetsResponse200ApplicationJson1Type$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FindOnePromptSnippetResponseBodyPromptSnippetsResponse200ApplicationJson1Type$ {
  /** @deprecated use `FindOnePromptSnippetResponseBodyPromptSnippetsResponse200ApplicationJson1Type$inboundSchema` instead. */
  export const inboundSchema =
    FindOnePromptSnippetResponseBodyPromptSnippetsResponse200ApplicationJson1Type$inboundSchema;
  /** @deprecated use `FindOnePromptSnippetResponseBodyPromptSnippetsResponse200ApplicationJson1Type$outboundSchema` instead. */
  export const outboundSchema =
    FindOnePromptSnippetResponseBodyPromptSnippetsResponse200ApplicationJson1Type$outboundSchema;
}

/** @internal */
export const FindOnePromptSnippetResponseBodyPromptSnippetsResponse200Function$inboundSchema:
  z.ZodType<
    FindOnePromptSnippetResponseBodyPromptSnippetsResponse200Function,
    z.ZodTypeDef,
    unknown
  > = z.object({
    name: z.string(),
    arguments: z.string(),
  });

/** @internal */
export type FindOnePromptSnippetResponseBodyPromptSnippetsResponse200Function$Outbound =
  {
    name: string;
    arguments: string;
  };

/** @internal */
export const FindOnePromptSnippetResponseBodyPromptSnippetsResponse200Function$outboundSchema:
  z.ZodType<
    FindOnePromptSnippetResponseBodyPromptSnippetsResponse200Function$Outbound,
    z.ZodTypeDef,
    FindOnePromptSnippetResponseBodyPromptSnippetsResponse200Function
  > = z.object({
    name: z.string(),
    arguments: z.string(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FindOnePromptSnippetResponseBodyPromptSnippetsResponse200Function$ {
  /** @deprecated use `FindOnePromptSnippetResponseBodyPromptSnippetsResponse200Function$inboundSchema` instead. */
  export const inboundSchema =
    FindOnePromptSnippetResponseBodyPromptSnippetsResponse200Function$inboundSchema;
  /** @deprecated use `FindOnePromptSnippetResponseBodyPromptSnippetsResponse200Function$outboundSchema` instead. */
  export const outboundSchema =
    FindOnePromptSnippetResponseBodyPromptSnippetsResponse200Function$outboundSchema;
  /** @deprecated use `FindOnePromptSnippetResponseBodyPromptSnippetsResponse200Function$Outbound` instead. */
  export type Outbound =
    FindOnePromptSnippetResponseBodyPromptSnippetsResponse200Function$Outbound;
}

export function findOnePromptSnippetResponseBodyPromptSnippetsResponse200FunctionToJSON(
  findOnePromptSnippetResponseBodyPromptSnippetsResponse200Function:
    FindOnePromptSnippetResponseBodyPromptSnippetsResponse200Function,
): string {
  return JSON.stringify(
    FindOnePromptSnippetResponseBodyPromptSnippetsResponse200Function$outboundSchema
      .parse(findOnePromptSnippetResponseBodyPromptSnippetsResponse200Function),
  );
}

export function findOnePromptSnippetResponseBodyPromptSnippetsResponse200FunctionFromJSON(
  jsonString: string,
): SafeParseResult<
  FindOnePromptSnippetResponseBodyPromptSnippetsResponse200Function,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      FindOnePromptSnippetResponseBodyPromptSnippetsResponse200Function$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'FindOnePromptSnippetResponseBodyPromptSnippetsResponse200Function' from JSON`,
  );
}

/** @internal */
export const FindOnePromptSnippetResponseBodyPromptSnippetsResponse200ToolCalls$inboundSchema:
  z.ZodType<
    FindOnePromptSnippetResponseBodyPromptSnippetsResponse200ToolCalls,
    z.ZodTypeDef,
    unknown
  > = z.object({
    id: z.string().optional(),
    index: z.number().optional(),
    type:
      FindOnePromptSnippetResponseBodyPromptSnippetsResponse200ApplicationJson1Type$inboundSchema,
    function: z.lazy(() =>
      FindOnePromptSnippetResponseBodyPromptSnippetsResponse200Function$inboundSchema
    ),
  });

/** @internal */
export type FindOnePromptSnippetResponseBodyPromptSnippetsResponse200ToolCalls$Outbound =
  {
    id?: string | undefined;
    index?: number | undefined;
    type: string;
    function:
      FindOnePromptSnippetResponseBodyPromptSnippetsResponse200Function$Outbound;
  };

/** @internal */
export const FindOnePromptSnippetResponseBodyPromptSnippetsResponse200ToolCalls$outboundSchema:
  z.ZodType<
    FindOnePromptSnippetResponseBodyPromptSnippetsResponse200ToolCalls$Outbound,
    z.ZodTypeDef,
    FindOnePromptSnippetResponseBodyPromptSnippetsResponse200ToolCalls
  > = z.object({
    id: z.string().optional(),
    index: z.number().optional(),
    type:
      FindOnePromptSnippetResponseBodyPromptSnippetsResponse200ApplicationJson1Type$outboundSchema,
    function: z.lazy(() =>
      FindOnePromptSnippetResponseBodyPromptSnippetsResponse200Function$outboundSchema
    ),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FindOnePromptSnippetResponseBodyPromptSnippetsResponse200ToolCalls$ {
  /** @deprecated use `FindOnePromptSnippetResponseBodyPromptSnippetsResponse200ToolCalls$inboundSchema` instead. */
  export const inboundSchema =
    FindOnePromptSnippetResponseBodyPromptSnippetsResponse200ToolCalls$inboundSchema;
  /** @deprecated use `FindOnePromptSnippetResponseBodyPromptSnippetsResponse200ToolCalls$outboundSchema` instead. */
  export const outboundSchema =
    FindOnePromptSnippetResponseBodyPromptSnippetsResponse200ToolCalls$outboundSchema;
  /** @deprecated use `FindOnePromptSnippetResponseBodyPromptSnippetsResponse200ToolCalls$Outbound` instead. */
  export type Outbound =
    FindOnePromptSnippetResponseBodyPromptSnippetsResponse200ToolCalls$Outbound;
}

export function findOnePromptSnippetResponseBodyPromptSnippetsResponse200ToolCallsToJSON(
  findOnePromptSnippetResponseBodyPromptSnippetsResponse200ToolCalls:
    FindOnePromptSnippetResponseBodyPromptSnippetsResponse200ToolCalls,
): string {
  return JSON.stringify(
    FindOnePromptSnippetResponseBodyPromptSnippetsResponse200ToolCalls$outboundSchema
      .parse(
        findOnePromptSnippetResponseBodyPromptSnippetsResponse200ToolCalls,
      ),
  );
}

export function findOnePromptSnippetResponseBodyPromptSnippetsResponse200ToolCallsFromJSON(
  jsonString: string,
): SafeParseResult<
  FindOnePromptSnippetResponseBodyPromptSnippetsResponse200ToolCalls,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      FindOnePromptSnippetResponseBodyPromptSnippetsResponse200ToolCalls$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'FindOnePromptSnippetResponseBodyPromptSnippetsResponse200ToolCalls' from JSON`,
  );
}

/** @internal */
export const FindOnePromptSnippetResponseBodyPromptSnippetsResponse200Messages$inboundSchema:
  z.ZodType<
    FindOnePromptSnippetResponseBodyPromptSnippetsResponse200Messages,
    z.ZodTypeDef,
    unknown
  > = z.object({
    role:
      FindOnePromptSnippetResponseBodyPromptSnippetsResponse200Role$inboundSchema,
    content: z.union([
      z.string(),
      z.array(z.union([
        z.lazy(() =>
          FindOnePromptSnippet2PromptSnippetsResponse200ApplicationJson1$inboundSchema
        ),
        z.lazy(() =>
          FindOnePromptSnippet2PromptSnippetsResponse200ApplicationJson2$inboundSchema
        ),
      ])),
    ]),
    tool_calls: z.array(
      z.lazy(() =>
        FindOnePromptSnippetResponseBodyPromptSnippetsResponse200ToolCalls$inboundSchema
      ),
    ).optional(),
  }).transform((v) => {
    return remap$(v, {
      "tool_calls": "toolCalls",
    });
  });

/** @internal */
export type FindOnePromptSnippetResponseBodyPromptSnippetsResponse200Messages$Outbound =
  {
    role: string;
    content:
      | string
      | Array<
        | FindOnePromptSnippet2PromptSnippetsResponse200ApplicationJson1$Outbound
        | FindOnePromptSnippet2PromptSnippetsResponse200ApplicationJson2$Outbound
      >;
    tool_calls?:
      | Array<
        FindOnePromptSnippetResponseBodyPromptSnippetsResponse200ToolCalls$Outbound
      >
      | undefined;
  };

/** @internal */
export const FindOnePromptSnippetResponseBodyPromptSnippetsResponse200Messages$outboundSchema:
  z.ZodType<
    FindOnePromptSnippetResponseBodyPromptSnippetsResponse200Messages$Outbound,
    z.ZodTypeDef,
    FindOnePromptSnippetResponseBodyPromptSnippetsResponse200Messages
  > = z.object({
    role:
      FindOnePromptSnippetResponseBodyPromptSnippetsResponse200Role$outboundSchema,
    content: z.union([
      z.string(),
      z.array(z.union([
        z.lazy(() =>
          FindOnePromptSnippet2PromptSnippetsResponse200ApplicationJson1$outboundSchema
        ),
        z.lazy(() =>
          FindOnePromptSnippet2PromptSnippetsResponse200ApplicationJson2$outboundSchema
        ),
      ])),
    ]),
    toolCalls: z.array(
      z.lazy(() =>
        FindOnePromptSnippetResponseBodyPromptSnippetsResponse200ToolCalls$outboundSchema
      ),
    ).optional(),
  }).transform((v) => {
    return remap$(v, {
      toolCalls: "tool_calls",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FindOnePromptSnippetResponseBodyPromptSnippetsResponse200Messages$ {
  /** @deprecated use `FindOnePromptSnippetResponseBodyPromptSnippetsResponse200Messages$inboundSchema` instead. */
  export const inboundSchema =
    FindOnePromptSnippetResponseBodyPromptSnippetsResponse200Messages$inboundSchema;
  /** @deprecated use `FindOnePromptSnippetResponseBodyPromptSnippetsResponse200Messages$outboundSchema` instead. */
  export const outboundSchema =
    FindOnePromptSnippetResponseBodyPromptSnippetsResponse200Messages$outboundSchema;
  /** @deprecated use `FindOnePromptSnippetResponseBodyPromptSnippetsResponse200Messages$Outbound` instead. */
  export type Outbound =
    FindOnePromptSnippetResponseBodyPromptSnippetsResponse200Messages$Outbound;
}

export function findOnePromptSnippetResponseBodyPromptSnippetsResponse200MessagesToJSON(
  findOnePromptSnippetResponseBodyPromptSnippetsResponse200Messages:
    FindOnePromptSnippetResponseBodyPromptSnippetsResponse200Messages,
): string {
  return JSON.stringify(
    FindOnePromptSnippetResponseBodyPromptSnippetsResponse200Messages$outboundSchema
      .parse(findOnePromptSnippetResponseBodyPromptSnippetsResponse200Messages),
  );
}

export function findOnePromptSnippetResponseBodyPromptSnippetsResponse200MessagesFromJSON(
  jsonString: string,
): SafeParseResult<
  FindOnePromptSnippetResponseBodyPromptSnippetsResponse200Messages,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      FindOnePromptSnippetResponseBodyPromptSnippetsResponse200Messages$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'FindOnePromptSnippetResponseBodyPromptSnippetsResponse200Messages' from JSON`,
  );
}

/** @internal */
export const FindOnePromptSnippetResponseBodyPromptSnippetsResponse200PromptConfig$inboundSchema:
  z.ZodType<
    FindOnePromptSnippetResponseBodyPromptSnippetsResponse200PromptConfig,
    z.ZodTypeDef,
    unknown
  > = z.object({
    stream: z.boolean().optional(),
    model: z.string().optional(),
    model_db_id: z.string().optional(),
    model_type:
      FindOnePromptSnippetResponseBodyPromptSnippetsResponse200ModelType$inboundSchema
        .optional(),
    model_parameters: z.lazy(() =>
      FindOnePromptSnippetResponseBodyPromptSnippetsResponse200ModelParameters$inboundSchema
    ).optional(),
    provider:
      FindOnePromptSnippetResponseBodyPromptSnippetsResponse200Provider$inboundSchema
        .optional(),
    integration_id: z.nullable(z.string()).optional(),
    version: z.string().optional(),
    messages: z.array(
      z.lazy(() =>
        FindOnePromptSnippetResponseBodyPromptSnippetsResponse200Messages$inboundSchema
      ),
    ),
  }).transform((v) => {
    return remap$(v, {
      "model_db_id": "modelDbId",
      "model_type": "modelType",
      "model_parameters": "modelParameters",
      "integration_id": "integrationId",
    });
  });

/** @internal */
export type FindOnePromptSnippetResponseBodyPromptSnippetsResponse200PromptConfig$Outbound =
  {
    stream?: boolean | undefined;
    model?: string | undefined;
    model_db_id?: string | undefined;
    model_type?: string | undefined;
    model_parameters?:
      | FindOnePromptSnippetResponseBodyPromptSnippetsResponse200ModelParameters$Outbound
      | undefined;
    provider?: string | undefined;
    integration_id?: string | null | undefined;
    version?: string | undefined;
    messages: Array<
      FindOnePromptSnippetResponseBodyPromptSnippetsResponse200Messages$Outbound
    >;
  };

/** @internal */
export const FindOnePromptSnippetResponseBodyPromptSnippetsResponse200PromptConfig$outboundSchema:
  z.ZodType<
    FindOnePromptSnippetResponseBodyPromptSnippetsResponse200PromptConfig$Outbound,
    z.ZodTypeDef,
    FindOnePromptSnippetResponseBodyPromptSnippetsResponse200PromptConfig
  > = z.object({
    stream: z.boolean().optional(),
    model: z.string().optional(),
    modelDbId: z.string().optional(),
    modelType:
      FindOnePromptSnippetResponseBodyPromptSnippetsResponse200ModelType$outboundSchema
        .optional(),
    modelParameters: z.lazy(() =>
      FindOnePromptSnippetResponseBodyPromptSnippetsResponse200ModelParameters$outboundSchema
    ).optional(),
    provider:
      FindOnePromptSnippetResponseBodyPromptSnippetsResponse200Provider$outboundSchema
        .optional(),
    integrationId: z.nullable(z.string()).optional(),
    version: z.string().optional(),
    messages: z.array(
      z.lazy(() =>
        FindOnePromptSnippetResponseBodyPromptSnippetsResponse200Messages$outboundSchema
      ),
    ),
  }).transform((v) => {
    return remap$(v, {
      modelDbId: "model_db_id",
      modelType: "model_type",
      modelParameters: "model_parameters",
      integrationId: "integration_id",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FindOnePromptSnippetResponseBodyPromptSnippetsResponse200PromptConfig$ {
  /** @deprecated use `FindOnePromptSnippetResponseBodyPromptSnippetsResponse200PromptConfig$inboundSchema` instead. */
  export const inboundSchema =
    FindOnePromptSnippetResponseBodyPromptSnippetsResponse200PromptConfig$inboundSchema;
  /** @deprecated use `FindOnePromptSnippetResponseBodyPromptSnippetsResponse200PromptConfig$outboundSchema` instead. */
  export const outboundSchema =
    FindOnePromptSnippetResponseBodyPromptSnippetsResponse200PromptConfig$outboundSchema;
  /** @deprecated use `FindOnePromptSnippetResponseBodyPromptSnippetsResponse200PromptConfig$Outbound` instead. */
  export type Outbound =
    FindOnePromptSnippetResponseBodyPromptSnippetsResponse200PromptConfig$Outbound;
}

export function findOnePromptSnippetResponseBodyPromptSnippetsResponse200PromptConfigToJSON(
  findOnePromptSnippetResponseBodyPromptSnippetsResponse200PromptConfig:
    FindOnePromptSnippetResponseBodyPromptSnippetsResponse200PromptConfig,
): string {
  return JSON.stringify(
    FindOnePromptSnippetResponseBodyPromptSnippetsResponse200PromptConfig$outboundSchema
      .parse(
        findOnePromptSnippetResponseBodyPromptSnippetsResponse200PromptConfig,
      ),
  );
}

export function findOnePromptSnippetResponseBodyPromptSnippetsResponse200PromptConfigFromJSON(
  jsonString: string,
): SafeParseResult<
  FindOnePromptSnippetResponseBodyPromptSnippetsResponse200PromptConfig,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      FindOnePromptSnippetResponseBodyPromptSnippetsResponse200PromptConfig$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'FindOnePromptSnippetResponseBodyPromptSnippetsResponse200PromptConfig' from JSON`,
  );
}

/** @internal */
export const FindOnePromptSnippetResponseBodyPromptSnippetsResponse200Metadata$inboundSchema:
  z.ZodType<
    FindOnePromptSnippetResponseBodyPromptSnippetsResponse200Metadata,
    z.ZodTypeDef,
    unknown
  > = z.object({
    use_cases: z.array(z.string()).optional(),
    language: z.string().optional(),
  }).transform((v) => {
    return remap$(v, {
      "use_cases": "useCases",
    });
  });

/** @internal */
export type FindOnePromptSnippetResponseBodyPromptSnippetsResponse200Metadata$Outbound =
  {
    use_cases?: Array<string> | undefined;
    language?: string | undefined;
  };

/** @internal */
export const FindOnePromptSnippetResponseBodyPromptSnippetsResponse200Metadata$outboundSchema:
  z.ZodType<
    FindOnePromptSnippetResponseBodyPromptSnippetsResponse200Metadata$Outbound,
    z.ZodTypeDef,
    FindOnePromptSnippetResponseBodyPromptSnippetsResponse200Metadata
  > = z.object({
    useCases: z.array(z.string()).optional(),
    language: z.string().optional(),
  }).transform((v) => {
    return remap$(v, {
      useCases: "use_cases",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FindOnePromptSnippetResponseBodyPromptSnippetsResponse200Metadata$ {
  /** @deprecated use `FindOnePromptSnippetResponseBodyPromptSnippetsResponse200Metadata$inboundSchema` instead. */
  export const inboundSchema =
    FindOnePromptSnippetResponseBodyPromptSnippetsResponse200Metadata$inboundSchema;
  /** @deprecated use `FindOnePromptSnippetResponseBodyPromptSnippetsResponse200Metadata$outboundSchema` instead. */
  export const outboundSchema =
    FindOnePromptSnippetResponseBodyPromptSnippetsResponse200Metadata$outboundSchema;
  /** @deprecated use `FindOnePromptSnippetResponseBodyPromptSnippetsResponse200Metadata$Outbound` instead. */
  export type Outbound =
    FindOnePromptSnippetResponseBodyPromptSnippetsResponse200Metadata$Outbound;
}

export function findOnePromptSnippetResponseBodyPromptSnippetsResponse200MetadataToJSON(
  findOnePromptSnippetResponseBodyPromptSnippetsResponse200Metadata:
    FindOnePromptSnippetResponseBodyPromptSnippetsResponse200Metadata,
): string {
  return JSON.stringify(
    FindOnePromptSnippetResponseBodyPromptSnippetsResponse200Metadata$outboundSchema
      .parse(findOnePromptSnippetResponseBodyPromptSnippetsResponse200Metadata),
  );
}

export function findOnePromptSnippetResponseBodyPromptSnippetsResponse200MetadataFromJSON(
  jsonString: string,
): SafeParseResult<
  FindOnePromptSnippetResponseBodyPromptSnippetsResponse200Metadata,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      FindOnePromptSnippetResponseBodyPromptSnippetsResponse200Metadata$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'FindOnePromptSnippetResponseBodyPromptSnippetsResponse200Metadata' from JSON`,
  );
}

/** @internal */
export const Versions$inboundSchema: z.ZodType<
  Versions,
  z.ZodTypeDef,
  unknown
> = z.object({
  _id: z.string(),
  created_by_id: z.string(),
  display_name: z.string(),
  updated_by_id: z.string(),
  description: z.nullable(z.string()).optional(),
  prompt_config: z.lazy(() =>
    FindOnePromptSnippetResponseBodyPromptSnippetsResponse200PromptConfig$inboundSchema
  ),
  metadata: z.lazy(() =>
    FindOnePromptSnippetResponseBodyPromptSnippetsResponse200Metadata$inboundSchema
  ),
  commit: z.string(),
  timestamp: z.string(),
}).transform((v) => {
  return remap$(v, {
    "_id": "id",
    "created_by_id": "createdById",
    "display_name": "displayName",
    "updated_by_id": "updatedById",
    "prompt_config": "promptConfig",
  });
});

/** @internal */
export type Versions$Outbound = {
  _id: string;
  created_by_id: string;
  display_name: string;
  updated_by_id: string;
  description?: string | null | undefined;
  prompt_config:
    FindOnePromptSnippetResponseBodyPromptSnippetsResponse200PromptConfig$Outbound;
  metadata:
    FindOnePromptSnippetResponseBodyPromptSnippetsResponse200Metadata$Outbound;
  commit: string;
  timestamp: string;
};

/** @internal */
export const Versions$outboundSchema: z.ZodType<
  Versions$Outbound,
  z.ZodTypeDef,
  Versions
> = z.object({
  id: z.string(),
  createdById: z.string(),
  displayName: z.string(),
  updatedById: z.string(),
  description: z.nullable(z.string()).optional(),
  promptConfig: z.lazy(() =>
    FindOnePromptSnippetResponseBodyPromptSnippetsResponse200PromptConfig$outboundSchema
  ),
  metadata: z.lazy(() =>
    FindOnePromptSnippetResponseBodyPromptSnippetsResponse200Metadata$outboundSchema
  ),
  commit: z.string(),
  timestamp: z.string(),
}).transform((v) => {
  return remap$(v, {
    id: "_id",
    createdById: "created_by_id",
    displayName: "display_name",
    updatedById: "updated_by_id",
    promptConfig: "prompt_config",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Versions$ {
  /** @deprecated use `Versions$inboundSchema` instead. */
  export const inboundSchema = Versions$inboundSchema;
  /** @deprecated use `Versions$outboundSchema` instead. */
  export const outboundSchema = Versions$outboundSchema;
  /** @deprecated use `Versions$Outbound` instead. */
  export type Outbound = Versions$Outbound;
}

export function versionsToJSON(versions: Versions): string {
  return JSON.stringify(Versions$outboundSchema.parse(versions));
}

export function versionsFromJSON(
  jsonString: string,
): SafeParseResult<Versions, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Versions$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Versions' from JSON`,
  );
}

/** @internal */
export const ResponseBodyType$inboundSchema: z.ZodNativeEnum<
  typeof ResponseBodyType
> = z.nativeEnum(ResponseBodyType);

/** @internal */
export const ResponseBodyType$outboundSchema: z.ZodNativeEnum<
  typeof ResponseBodyType
> = ResponseBodyType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ResponseBodyType$ {
  /** @deprecated use `ResponseBodyType$inboundSchema` instead. */
  export const inboundSchema = ResponseBodyType$inboundSchema;
  /** @deprecated use `ResponseBodyType$outboundSchema` instead. */
  export const outboundSchema = ResponseBodyType$outboundSchema;
}

/** @internal */
export const ResponseBody1$inboundSchema: z.ZodType<
  ResponseBody1,
  z.ZodTypeDef,
  unknown
> = z.object({
  _id: z.string(),
  owner: z.union([z.string(), Owner2$inboundSchema]),
  domain_id: z.string(),
  created_by_id: z.string(),
  display_name: z.string(),
  updated_by_id: z.string(),
  description: z.nullable(z.string()).optional(),
  prompt_config: z.lazy(() => ResponseBodyPromptConfig$inboundSchema),
  metadata: z.lazy(() => ResponseBodyMetadata$inboundSchema),
  created: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
  updated: z.string().datetime({ offset: true }).default(
    "2024-11-26T03:01:20.782Z",
  ).transform(v => new Date(v)),
  versions: z.array(z.lazy(() => Versions$inboundSchema)),
  type: ResponseBodyType$inboundSchema,
}).transform((v) => {
  return remap$(v, {
    "_id": "id",
    "domain_id": "domainId",
    "created_by_id": "createdById",
    "display_name": "displayName",
    "updated_by_id": "updatedById",
    "prompt_config": "promptConfig",
  });
});

/** @internal */
export type ResponseBody1$Outbound = {
  _id: string;
  owner: string | string;
  domain_id: string;
  created_by_id: string;
  display_name: string;
  updated_by_id: string;
  description?: string | null | undefined;
  prompt_config: ResponseBodyPromptConfig$Outbound;
  metadata: ResponseBodyMetadata$Outbound;
  created?: string | undefined;
  updated: string;
  versions: Array<Versions$Outbound>;
  type: string;
};

/** @internal */
export const ResponseBody1$outboundSchema: z.ZodType<
  ResponseBody1$Outbound,
  z.ZodTypeDef,
  ResponseBody1
> = z.object({
  id: z.string(),
  owner: z.union([z.string(), Owner2$outboundSchema]),
  domainId: z.string(),
  createdById: z.string(),
  displayName: z.string(),
  updatedById: z.string(),
  description: z.nullable(z.string()).optional(),
  promptConfig: z.lazy(() => ResponseBodyPromptConfig$outboundSchema),
  metadata: z.lazy(() => ResponseBodyMetadata$outboundSchema),
  created: z.date().transform(v => v.toISOString()).optional(),
  updated: z.date().default(() => new Date("2024-11-26T03:01:20.782Z"))
    .transform(v => v.toISOString()),
  versions: z.array(z.lazy(() => Versions$outboundSchema)),
  type: ResponseBodyType$outboundSchema,
}).transform((v) => {
  return remap$(v, {
    id: "_id",
    domainId: "domain_id",
    createdById: "created_by_id",
    displayName: "display_name",
    updatedById: "updated_by_id",
    promptConfig: "prompt_config",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ResponseBody1$ {
  /** @deprecated use `ResponseBody1$inboundSchema` instead. */
  export const inboundSchema = ResponseBody1$inboundSchema;
  /** @deprecated use `ResponseBody1$outboundSchema` instead. */
  export const outboundSchema = ResponseBody1$outboundSchema;
  /** @deprecated use `ResponseBody1$Outbound` instead. */
  export type Outbound = ResponseBody1$Outbound;
}

export function responseBody1ToJSON(responseBody1: ResponseBody1): string {
  return JSON.stringify(ResponseBody1$outboundSchema.parse(responseBody1));
}

export function responseBody1FromJSON(
  jsonString: string,
): SafeParseResult<ResponseBody1, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ResponseBody1$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ResponseBody1' from JSON`,
  );
}

/** @internal */
export const FindOnePromptSnippetResponseBody$inboundSchema: z.ZodType<
  FindOnePromptSnippetResponseBody,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => ResponseBody1$inboundSchema),
  z.lazy(() => ResponseBody3$inboundSchema),
  z.lazy(() => ResponseBody2$inboundSchema),
]);

/** @internal */
export type FindOnePromptSnippetResponseBody$Outbound =
  | ResponseBody1$Outbound
  | ResponseBody3$Outbound
  | ResponseBody2$Outbound;

/** @internal */
export const FindOnePromptSnippetResponseBody$outboundSchema: z.ZodType<
  FindOnePromptSnippetResponseBody$Outbound,
  z.ZodTypeDef,
  FindOnePromptSnippetResponseBody
> = z.union([
  z.lazy(() => ResponseBody1$outboundSchema),
  z.lazy(() => ResponseBody3$outboundSchema),
  z.lazy(() => ResponseBody2$outboundSchema),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FindOnePromptSnippetResponseBody$ {
  /** @deprecated use `FindOnePromptSnippetResponseBody$inboundSchema` instead. */
  export const inboundSchema = FindOnePromptSnippetResponseBody$inboundSchema;
  /** @deprecated use `FindOnePromptSnippetResponseBody$outboundSchema` instead. */
  export const outboundSchema = FindOnePromptSnippetResponseBody$outboundSchema;
  /** @deprecated use `FindOnePromptSnippetResponseBody$Outbound` instead. */
  export type Outbound = FindOnePromptSnippetResponseBody$Outbound;
}

export function findOnePromptSnippetResponseBodyToJSON(
  findOnePromptSnippetResponseBody: FindOnePromptSnippetResponseBody,
): string {
  return JSON.stringify(
    FindOnePromptSnippetResponseBody$outboundSchema.parse(
      findOnePromptSnippetResponseBody,
    ),
  );
}

export function findOnePromptSnippetResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<FindOnePromptSnippetResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => FindOnePromptSnippetResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'FindOnePromptSnippetResponseBody' from JSON`,
  );
}
