/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type GetV2LogsIdRequest = {
  id: string;
};

/**
 * An optional field that is filled if the workflow was triggered by an HTTP request
 */
export type GetV2LogsIdResponseBodyResponseRequestProperties = {
  source?: string | undefined;
  location?: string | undefined;
  latitude?: string | undefined;
  longitude?: string | undefined;
  responseTime?: number | undefined;
  metadata?: { [k: string]: any } | undefined;
  status?: number | undefined;
  context?: { [k: string]: any } | undefined;
  extraParams?: { [k: string]: any } | undefined;
};

export const GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody47Type = {
  LlmEval: "llm_eval",
} as const;
export type GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody47Type =
  ClosedEnum<
    typeof GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody47Type
  >;

/**
 * An optional field that is filled if the workflow was triggered by an HTTP request
 */
export type GetV2LogsIdEvalsResponse200RequestProperties = {
  source?: string | undefined;
  location?: string | undefined;
  latitude?: string | undefined;
  longitude?: string | undefined;
  responseTime?: number | undefined;
  metadata?: { [k: string]: any } | undefined;
  status?: number | undefined;
  context?: { [k: string]: any } | undefined;
  extraParams?: { [k: string]: any } | undefined;
};

/**
 * Orquesta product
 */
export const GetV2LogsIdEvalsResponse200ProductType = {
  Remoteconfigs: "remoteconfigs",
  Deployments: "deployments",
  Experiments: "experiments",
  Playgrounds: "playgrounds",
  LlmEvaluator: "llm_evaluator",
  Knowledge: "knowledge",
  Router: "router",
  Workflows: "workflows",
} as const;
/**
 * Orquesta product
 */
export type GetV2LogsIdEvalsResponse200ProductType = ClosedEnum<
  typeof GetV2LogsIdEvalsResponse200ProductType
>;

export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRunType =
  {
    Evaluator: "evaluator",
  } as const;
export type GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRunType =
  ClosedEnum<
    typeof GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRunType
  >;

/**
 * Define the relationship between an evaluator and an entity. Can be LLM Evals, Code Evals or HTTP Evals
 */
export type GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRun1 =
  {
    type:
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRunType;
    /**
     * The id of the resource
     */
    evaluatorId: string;
  };

export type GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody47WorkflowRunRelatedEntities =
  GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRun1;

export const GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody4Evals7WorkflowRun4Type =
  {
    StringArray: "string_array",
  } as const;
export type GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody4Evals7WorkflowRun4Type =
  ClosedEnum<
    typeof GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody4Evals7WorkflowRun4Type
  >;

export const GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody4Evals7WorkflowRun4Status =
  {
    Pending: "pending",
    Completed: "completed",
    Failed: "failed",
  } as const;
export type GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody4Evals7WorkflowRun4Status =
  ClosedEnum<
    typeof GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody4Evals7WorkflowRun4Status
  >;

export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRunEvals44Type =
  {
    Evaluator: "evaluator",
  } as const;
export type GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRunEvals44Type =
  ClosedEnum<
    typeof GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRunEvals44Type
  >;

/**
 * Define the relationship between an evaluator and an entity. Can be LLM Evals, Code Evals or HTTP Evals
 */
export type GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRunEvals44 =
  {
    type:
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRunEvals44Type;
    /**
     * The id of the resource
     */
    evaluatorId: string;
  };

export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRunEvals43Type =
  {
    HumanEval: "human_eval",
  } as const;
export type GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRunEvals43Type =
  ClosedEnum<
    typeof GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRunEvals43Type
  >;

/**
 * Define the relationship between an entity and a human eval, also known as feedback
 */
export type GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRunEvals43 =
  {
    type:
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRunEvals43Type;
    /**
     * The id of the resource
     */
    humanEvalId: string;
  };

export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRunEvals42Type =
  {
    Contact: "contact",
  } as const;
export type GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRunEvals42Type =
  ClosedEnum<
    typeof GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRunEvals42Type
  >;

/**
 * Define the user set using the SDK
 */
export type GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRunEvals42 =
  {
    type:
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRunEvals42Type;
    contactId: string;
  };

export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRunEvals4Type =
  {
    Account: "account",
  } as const;
export type GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRunEvals4Type =
  ClosedEnum<
    typeof GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRunEvals4Type
  >;

/**
 * Define the internal account of the system. Also sometimes called user (internal)
 */
export type GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRunEvals41 =
  {
    type:
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRunEvals4Type;
    /**
     * The id of the resource
     */
    accountId: string;
  };

export type GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody4Evals7WorkflowRun4RelatedEntities =
  | GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRunEvals41
  | GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRunEvals42
  | GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRunEvals43
  | GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRunEvals44;

export type GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody44 = {
  type:
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody4Evals7WorkflowRun4Type;
  values: Array<string>;
  /**
   * The id of the resource
   */
  id: string;
  status:
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody4Evals7WorkflowRun4Status;
  timestamp: Date;
  relatedEntities: Array<
    | GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRunEvals41
    | GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRunEvals42
    | GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRunEvals43
    | GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRunEvals44
  >;
};

export const GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody4Evals7WorkflowRunType =
  {
    Boolean: "boolean",
  } as const;
export type GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody4Evals7WorkflowRunType =
  ClosedEnum<
    typeof GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody4Evals7WorkflowRunType
  >;

export const GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody4Evals7WorkflowRunStatus =
  {
    Pending: "pending",
    Completed: "completed",
    Failed: "failed",
  } as const;
export type GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody4Evals7WorkflowRunStatus =
  ClosedEnum<
    typeof GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody4Evals7WorkflowRunStatus
  >;

export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRunEvals34Type =
  {
    Evaluator: "evaluator",
  } as const;
export type GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRunEvals34Type =
  ClosedEnum<
    typeof GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRunEvals34Type
  >;

/**
 * Define the relationship between an evaluator and an entity. Can be LLM Evals, Code Evals or HTTP Evals
 */
export type GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRunEvals4 =
  {
    type:
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRunEvals34Type;
    /**
     * The id of the resource
     */
    evaluatorId: string;
  };

export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRunEvals33Type =
  {
    HumanEval: "human_eval",
  } as const;
export type GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRunEvals33Type =
  ClosedEnum<
    typeof GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRunEvals33Type
  >;

/**
 * Define the relationship between an entity and a human eval, also known as feedback
 */
export type GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRunEvals3 =
  {
    type:
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRunEvals33Type;
    /**
     * The id of the resource
     */
    humanEvalId: string;
  };

export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRunEvals32Type =
  {
    Contact: "contact",
  } as const;
export type GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRunEvals32Type =
  ClosedEnum<
    typeof GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRunEvals32Type
  >;

/**
 * Define the user set using the SDK
 */
export type GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRunEvals2 =
  {
    type:
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRunEvals32Type;
    contactId: string;
  };

export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRunEvals3Type =
  {
    Account: "account",
  } as const;
export type GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRunEvals3Type =
  ClosedEnum<
    typeof GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRunEvals3Type
  >;

/**
 * Define the internal account of the system. Also sometimes called user (internal)
 */
export type GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRunEvals31 =
  {
    type:
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRunEvals3Type;
    /**
     * The id of the resource
     */
    accountId: string;
  };

export type GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody4Evals7WorkflowRunRelatedEntities =
  | GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRunEvals31
  | GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRunEvals2
  | GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRunEvals3
  | GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRunEvals4;

export type GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody43 = {
  type:
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody4Evals7WorkflowRunType;
  value: boolean;
  /**
   * The id of the resource
   */
  id: string;
  status:
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody4Evals7WorkflowRunStatus;
  timestamp: Date;
  relatedEntities: Array<
    | GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRunEvals31
    | GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRunEvals2
    | GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRunEvals3
    | GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRunEvals4
  >;
};

export const GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody4Evals7Type =
  {
    Number: "number",
  } as const;
export type GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody4Evals7Type =
  ClosedEnum<
    typeof GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody4Evals7Type
  >;

export const GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody4Evals7Status =
  {
    Pending: "pending",
    Completed: "completed",
    Failed: "failed",
  } as const;
export type GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody4Evals7Status =
  ClosedEnum<
    typeof GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody4Evals7Status
  >;

export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRunEvals24Type =
  {
    Evaluator: "evaluator",
  } as const;
export type GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRunEvals24Type =
  ClosedEnum<
    typeof GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRunEvals24Type
  >;

/**
 * Define the relationship between an evaluator and an entity. Can be LLM Evals, Code Evals or HTTP Evals
 */
export type GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRun4 =
  {
    type:
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRunEvals24Type;
    /**
     * The id of the resource
     */
    evaluatorId: string;
  };

export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRunEvals23Type =
  {
    HumanEval: "human_eval",
  } as const;
export type GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRunEvals23Type =
  ClosedEnum<
    typeof GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRunEvals23Type
  >;

/**
 * Define the relationship between an entity and a human eval, also known as feedback
 */
export type GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRun3 =
  {
    type:
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRunEvals23Type;
    /**
     * The id of the resource
     */
    humanEvalId: string;
  };

export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRunEvals22Type =
  {
    Contact: "contact",
  } as const;
export type GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRunEvals22Type =
  ClosedEnum<
    typeof GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRunEvals22Type
  >;

/**
 * Define the user set using the SDK
 */
export type GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRun2 =
  {
    type:
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRunEvals22Type;
    contactId: string;
  };

export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRunEvals2Type =
  {
    Account: "account",
  } as const;
export type GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRunEvals2Type =
  ClosedEnum<
    typeof GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRunEvals2Type
  >;

/**
 * Define the internal account of the system. Also sometimes called user (internal)
 */
export type GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRunEvals1 =
  {
    type:
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRunEvals2Type;
    /**
     * The id of the resource
     */
    accountId: string;
  };

export type GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody4Evals7RelatedEntities =
  | GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRunEvals1
  | GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRun2
  | GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRun3
  | GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRun4;

export type GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody42 = {
  type: GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody4Evals7Type;
  value: number;
  /**
   * The id of the resource
   */
  id: string;
  status: GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody4Evals7Status;
  timestamp: Date;
  relatedEntities: Array<
    | GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRunEvals1
    | GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRun2
    | GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRun3
    | GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRun4
  >;
};

export const GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody4EvalsType =
  {
    String: "string",
  } as const;
export type GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody4EvalsType =
  ClosedEnum<
    typeof GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody4EvalsType
  >;

export const GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody4EvalsStatus =
  {
    Pending: "pending",
    Completed: "completed",
    Failed: "failed",
  } as const;
export type GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody4EvalsStatus =
  ClosedEnum<
    typeof GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody4EvalsStatus
  >;

export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRunEvals14Type =
  {
    Evaluator: "evaluator",
  } as const;
export type GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRunEvals14Type =
  ClosedEnum<
    typeof GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRunEvals14Type
  >;

/**
 * Define the relationship between an evaluator and an entity. Can be LLM Evals, Code Evals or HTTP Evals
 */
export type GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRunEvals14 =
  {
    type:
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRunEvals14Type;
    /**
     * The id of the resource
     */
    evaluatorId: string;
  };

export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRunEvals1Type =
  {
    HumanEval: "human_eval",
  } as const;
export type GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRunEvals1Type =
  ClosedEnum<
    typeof GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRunEvals1Type
  >;

/**
 * Define the relationship between an entity and a human eval, also known as feedback
 */
export type GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRunEvals13 =
  {
    type:
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRunEvals1Type;
    /**
     * The id of the resource
     */
    humanEvalId: string;
  };

export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRunEvalsType =
  {
    Contact: "contact",
  } as const;
export type GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRunEvalsType =
  ClosedEnum<
    typeof GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRunEvalsType
  >;

/**
 * Define the user set using the SDK
 */
export type GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRunEvals12 =
  {
    type:
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRunEvalsType;
    contactId: string;
  };

export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRunEvals11Type =
  {
    Account: "account",
  } as const;
export type GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRunEvals11Type =
  ClosedEnum<
    typeof GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRunEvals11Type
  >;

/**
 * Define the internal account of the system. Also sometimes called user (internal)
 */
export type GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRunEvals11 =
  {
    type:
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRunEvals11Type;
    /**
     * The id of the resource
     */
    accountId: string;
  };

export type GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody4EvalsRelatedEntities =
  | GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRunEvals11
  | GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRunEvals12
  | GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRunEvals13
  | GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRunEvals14;

export type GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody41 = {
  type: GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody4EvalsType;
  value: string;
  /**
   * The id of the resource
   */
  id: string;
  status: GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody4EvalsStatus;
  timestamp: Date;
  relatedEntities: Array<
    | GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRunEvals11
    | GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRunEvals12
    | GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRunEvals13
    | GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRunEvals14
  >;
};

export type GetV2LogsIdEvalsResponse200Evals =
  | GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody41
  | GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody42
  | GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody43
  | GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody44;

/**
 * The role of the prompt message
 */
export const GetV2LogsIdMessageResponse200ApplicationJSONResponseBody4Evals7Role =
  {
    System: "system",
    Assistant: "assistant",
    User: "user",
    Exception: "exception",
    Tool: "tool",
    Prompt: "prompt",
    Correction: "correction",
    ExpectedOutput: "expected_output",
  } as const;
/**
 * The role of the prompt message
 */
export type GetV2LogsIdMessageResponse200ApplicationJSONResponseBody4Evals7Role =
  ClosedEnum<
    typeof GetV2LogsIdMessageResponse200ApplicationJSONResponseBody4Evals7Role
  >;

export type GetV2LogsIdMessageResponse200ApplicationJSONResponseBody43 = {
  /**
   * The role of the prompt message
   */
  role: GetV2LogsIdMessageResponse200ApplicationJSONResponseBody4Evals7Role;
  url: string;
};

/**
 * The role of the prompt message
 */
export const GetV2LogsIdMessageResponse200ApplicationJSONResponseBody4EvalsRole =
  {
    System: "system",
    Assistant: "assistant",
    User: "user",
    Exception: "exception",
    Tool: "tool",
    Prompt: "prompt",
    Correction: "correction",
    ExpectedOutput: "expected_output",
  } as const;
/**
 * The role of the prompt message
 */
export type GetV2LogsIdMessageResponse200ApplicationJSONResponseBody4EvalsRole =
  ClosedEnum<
    typeof GetV2LogsIdMessageResponse200ApplicationJSONResponseBody4EvalsRole
  >;

export type GetV2LogsIdMessageResponse200ApplicationJSONResponseBody42 = {
  /**
   * The role of the prompt message
   */
  role: GetV2LogsIdMessageResponse200ApplicationJSONResponseBody4EvalsRole;
  content: string | null;
};

/**
 * The role of the prompt message
 */
export const GetV2LogsIdMessageResponse200ApplicationJSONResponseBody4Evals7WorkflowRunRole =
  {
    System: "system",
    Assistant: "assistant",
    User: "user",
    Exception: "exception",
    Tool: "tool",
    Prompt: "prompt",
    Correction: "correction",
    ExpectedOutput: "expected_output",
  } as const;
/**
 * The role of the prompt message
 */
export type GetV2LogsIdMessageResponse200ApplicationJSONResponseBody4Evals7WorkflowRunRole =
  ClosedEnum<
    typeof GetV2LogsIdMessageResponse200ApplicationJSONResponseBody4Evals7WorkflowRunRole
  >;

export const GetV2LogsIdMessageResponse200ApplicationJSONResponseBody4Type = {
  Function: "function",
} as const;
export type GetV2LogsIdMessageResponse200ApplicationJSONResponseBody4Type =
  ClosedEnum<
    typeof GetV2LogsIdMessageResponse200ApplicationJSONResponseBody4Type
  >;

export type GetV2LogsIdMessageResponse200ApplicationJSONResponseBody4Function =
  {
    name: string;
    /**
     * JSON string arguments for the functions
     */
    arguments: string;
  };

export type GetV2LogsIdMessageResponse200ApplicationJSONResponseBody4ToolCalls =
  {
    id?: string | undefined;
    index?: number | undefined;
    type: GetV2LogsIdMessageResponse200ApplicationJSONResponseBody4Type;
    function: GetV2LogsIdMessageResponse200ApplicationJSONResponseBody4Function;
  };

export type GetV2LogsIdMessageResponse200ApplicationJSONResponseBody41 = {
  /**
   * The role of the prompt message
   */
  role:
    GetV2LogsIdMessageResponse200ApplicationJSONResponseBody4Evals7WorkflowRunRole;
  content?: string | null | undefined;
  toolCalls: Array<
    GetV2LogsIdMessageResponse200ApplicationJSONResponseBody4ToolCalls
  >;
};

export type GetV2LogsIdEvalsResponse200Message =
  | GetV2LogsIdMessageResponse200ApplicationJSONResponseBody42
  | GetV2LogsIdMessageResponse200ApplicationJSONResponseBody43
  | GetV2LogsIdMessageResponse200ApplicationJSONResponseBody41;

export type GetV2LogsIdEvalsResponse200Choices = {
  index: number;
  message?:
    | GetV2LogsIdMessageResponse200ApplicationJSONResponseBody42
    | GetV2LogsIdMessageResponse200ApplicationJSONResponseBody43
    | GetV2LogsIdMessageResponse200ApplicationJSONResponseBody41
    | undefined;
  finishReason?: string | null | undefined;
};

export const GetV2LogsIdEvalsResponse200Action = {
  Invoke: "invoke",
} as const;
export type GetV2LogsIdEvalsResponse200Action = ClosedEnum<
  typeof GetV2LogsIdEvalsResponse200Action
>;

/**
 * The type of the model
 */
export const GetV2LogsIdEvalsResponse200ModelType = {
  Chat: "chat",
  Completion: "completion",
  Embedding: "embedding",
  Vision: "vision",
  Image: "image",
  Tts: "tts",
  Stt: "stt",
  Rerank: "rerank",
} as const;
/**
 * The type of the model
 */
export type GetV2LogsIdEvalsResponse200ModelType = ClosedEnum<
  typeof GetV2LogsIdEvalsResponse200ModelType
>;

/**
 * Only supported on `image` models.
 */
export const GetV2LogsIdEvalsResponse200ApplicationJSONFormat = {
  Url: "url",
  B64Json: "b64_json",
  Text: "text",
  JsonObject: "json_object",
} as const;
/**
 * Only supported on `image` models.
 */
export type GetV2LogsIdEvalsResponse200ApplicationJSONFormat = ClosedEnum<
  typeof GetV2LogsIdEvalsResponse200ApplicationJSONFormat
>;

/**
 * Only supported on `image` models.
 */
export const GetV2LogsIdEvalsResponse200Quality = {
  Standard: "standard",
  Hd: "hd",
} as const;
/**
 * Only supported on `image` models.
 */
export type GetV2LogsIdEvalsResponse200Quality = ClosedEnum<
  typeof GetV2LogsIdEvalsResponse200Quality
>;

export const GetV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody4EvalsType =
  {
    JsonObject: "json_object",
  } as const;
export type GetV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody4EvalsType =
  ClosedEnum<
    typeof GetV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody4EvalsType
  >;

export type GetV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody42 =
  {
    type:
      GetV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody4EvalsType;
  };

export const GetV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody4Evals7Type =
  {
    JsonSchema: "json_schema",
  } as const;
export type GetV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody4Evals7Type =
  ClosedEnum<
    typeof GetV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody4Evals7Type
  >;

export type GetV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody4JSONSchema =
  {
    name: string;
    strict: boolean;
    schema: { [k: string]: any };
  };

export type GetV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody41 =
  {
    type:
      GetV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody4Evals7Type;
    jsonSchema:
      GetV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody4JSONSchema;
  };

/**
 * An object specifying the format that the model must output.
 *
 * @remarks
 *
 *  Setting to `{ "type": "json_schema", "json_schema": {...} }` enables Structured Outputs which ensures the model will match your supplied JSON schema
 *
 *  Setting to `{ "type": "json_object" }` enables JSON mode, which ensures the message the model generates is valid JSON.
 *
 * Important: when using JSON mode, you must also instruct the model to produce JSON yourself via a system or user message. Without this, the model may generate an unending stream of whitespace until the generation reaches the token limit, resulting in a long-running and seemingly "stuck" request. Also note that the message content may be partially cut off if finish_reason="length", which indicates the generation exceeded max_tokens or the conversation exceeded the max context length.
 */
export type GetV2LogsIdEvalsResponse200ResponseFormat =
  | GetV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody42
  | GetV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody41;

/**
 * The version of photoReal to use. Must be v1 or v2. Only available for `leonardoai` provider
 */
export const GetV2LogsIdEvalsResponse200PhotoRealVersion = {
  V1: "v1",
  V2: "v2",
} as const;
/**
 * The version of photoReal to use. Must be v1 or v2. Only available for `leonardoai` provider
 */
export type GetV2LogsIdEvalsResponse200PhotoRealVersion = ClosedEnum<
  typeof GetV2LogsIdEvalsResponse200PhotoRealVersion
>;

/**
 * The format to return the embeddings
 */
export const GetV2LogsIdEvalsResponse200EncodingFormat = {
  Float: "float",
  Base64: "base64",
} as const;
/**
 * The format to return the embeddings
 */
export type GetV2LogsIdEvalsResponse200EncodingFormat = ClosedEnum<
  typeof GetV2LogsIdEvalsResponse200EncodingFormat
>;

/**
 * Model Parameters: Not all parameters apply to every model
 */
export type GetV2LogsIdEvalsResponse200ModelParameters = {
  /**
   * Only supported on `chat` and `completion` models.
   */
  temperature?: number | undefined;
  /**
   * Only supported on `chat` and `completion` models.
   */
  maxTokens?: number | undefined;
  /**
   * Only supported on `chat` and `completion` models.
   */
  topK?: number | undefined;
  /**
   * Only supported on `chat` and `completion` models.
   */
  topP?: number | undefined;
  /**
   * Only supported on `chat` and `completion` models.
   */
  frequencyPenalty?: number | undefined;
  /**
   * Only supported on `chat` and `completion` models.
   */
  presencePenalty?: number | undefined;
  /**
   * Only supported on `image` models.
   */
  numImages?: number | undefined;
  /**
   * Best effort deterministic seed for the model. Currently only OpenAI models support these
   */
  seed?: number | undefined;
  /**
   * Only supported on `image` models.
   */
  format?: GetV2LogsIdEvalsResponse200ApplicationJSONFormat | undefined;
  /**
   * Only supported on `image` models.
   */
  dimensions?: string | undefined;
  /**
   * Only supported on `image` models.
   */
  quality?: GetV2LogsIdEvalsResponse200Quality | undefined;
  /**
   * Only supported on `image` models.
   */
  style?: string | undefined;
  /**
   * An object specifying the format that the model must output.
   *
   * @remarks
   *
   *  Setting to `{ "type": "json_schema", "json_schema": {...} }` enables Structured Outputs which ensures the model will match your supplied JSON schema
   *
   *  Setting to `{ "type": "json_object" }` enables JSON mode, which ensures the message the model generates is valid JSON.
   *
   * Important: when using JSON mode, you must also instruct the model to produce JSON yourself via a system or user message. Without this, the model may generate an unending stream of whitespace until the generation reaches the token limit, resulting in a long-running and seemingly "stuck" request. Also note that the message content may be partially cut off if finish_reason="length", which indicates the generation exceeded max_tokens or the conversation exceeded the max context length.
   */
  responseFormat?:
    | GetV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody42
    | GetV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody41
    | null
    | undefined;
  /**
   * The version of photoReal to use. Must be v1 or v2. Only available for `leonardoai` provider
   */
  photoRealVersion?: GetV2LogsIdEvalsResponse200PhotoRealVersion | undefined;
  /**
   * The format to return the embeddings
   */
  encodingFormat?: GetV2LogsIdEvalsResponse200EncodingFormat | undefined;
};

export const GetV2LogsIdEvalsResponse200Provider = {
  Cohere: "cohere",
  Openai: "openai",
  Anthropic: "anthropic",
  Huggingface: "huggingface",
  Replicate: "replicate",
  Google: "google",
  GoogleAi: "google-ai",
  Azure: "azure",
  Aws: "aws",
  Anyscale: "anyscale",
  Perplexity: "perplexity",
  Groq: "groq",
  Fal: "fal",
  Leonardoai: "leonardoai",
  Nvidia: "nvidia",
} as const;
export type GetV2LogsIdEvalsResponse200Provider = ClosedEnum<
  typeof GetV2LogsIdEvalsResponse200Provider
>;

/**
 * The role of the prompt message
 */
export const GetV2LogsIdEvalsResponse200Role = {
  System: "system",
  Assistant: "assistant",
  User: "user",
  Exception: "exception",
  Tool: "tool",
  Prompt: "prompt",
  Correction: "correction",
  ExpectedOutput: "expected_output",
} as const;
/**
 * The role of the prompt message
 */
export type GetV2LogsIdEvalsResponse200Role = ClosedEnum<
  typeof GetV2LogsIdEvalsResponse200Role
>;

export const GetV2LogsId2Response200ApplicationJSONResponseBody4EvalsType = {
  ImageUrl: "image_url",
} as const;
export type GetV2LogsId2Response200ApplicationJSONResponseBody4EvalsType =
  ClosedEnum<
    typeof GetV2LogsId2Response200ApplicationJSONResponseBody4EvalsType
  >;

export type GetV2LogsId2Response200ApplicationJSONResponseBody4ImageUrl = {
  /**
   * The orq.ai id of the image
   */
  id?: string | undefined;
  /**
   * Either a URL of the image or the base64 encoded data URI.
   */
  url: string;
  /**
   * Specifies the detail level of the image. Currently only supported with OpenAI models
   */
  detail?: string | undefined;
};

/**
 * The image part of the prompt message. Only supported with vision models.
 */
export type GetV2LogsId2Response200ApplicationJSONResponseBody42 = {
  type: GetV2LogsId2Response200ApplicationJSONResponseBody4EvalsType;
  imageUrl: GetV2LogsId2Response200ApplicationJSONResponseBody4ImageUrl;
};

export const GetV2LogsId2Response200ApplicationJSONResponseBody4Evals7Type = {
  Text: "text",
} as const;
export type GetV2LogsId2Response200ApplicationJSONResponseBody4Evals7Type =
  ClosedEnum<
    typeof GetV2LogsId2Response200ApplicationJSONResponseBody4Evals7Type
  >;

/**
 * Text content part of a prompt message
 */
export type GetV2LogsId2Response200ApplicationJSONResponseBody41 = {
  type: GetV2LogsId2Response200ApplicationJSONResponseBody4Evals7Type;
  text: string;
};

export type GetV2LogsIdContentResponse200ApplicationJSONResponseBody42 =
  | GetV2LogsId2Response200ApplicationJSONResponseBody41
  | GetV2LogsId2Response200ApplicationJSONResponseBody42;

/**
 * The contents of the user message. Either the text content of the message or an array of content parts with a defined type, each can be of type `text` or `image_url` when passing in images. You can pass multiple images by adding multiple `image_url` content parts.
 */
export type GetV2LogsIdEvalsResponse200Content =
  | string
  | Array<
    | GetV2LogsId2Response200ApplicationJSONResponseBody41
    | GetV2LogsId2Response200ApplicationJSONResponseBody42
  >;

export const GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody47WorkflowRunDataType =
  {
    Function: "function",
  } as const;
export type GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody47WorkflowRunDataType =
  ClosedEnum<
    typeof GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody47WorkflowRunDataType
  >;

export type GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody4Function = {
  name: string;
  /**
   * JSON string arguments for the functions
   */
  arguments: string;
};

export type GetV2LogsIdEvalsResponse200ToolCalls = {
  id?: string | undefined;
  index?: number | undefined;
  type:
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody47WorkflowRunDataType;
  function: GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody4Function;
};

export type GetV2LogsIdEvalsResponse200Messages = {
  /**
   * The role of the prompt message
   */
  role: GetV2LogsIdEvalsResponse200Role;
  /**
   * The contents of the user message. Either the text content of the message or an array of content parts with a defined type, each can be of type `text` or `image_url` when passing in images. You can pass multiple images by adding multiple `image_url` content parts.
   */
  content:
    | string
    | Array<
      | GetV2LogsId2Response200ApplicationJSONResponseBody41
      | GetV2LogsId2Response200ApplicationJSONResponseBody42
    >;
  toolCalls?: Array<GetV2LogsIdEvalsResponse200ToolCalls> | undefined;
  /**
   * The id of the resource
   */
  id?: string | undefined;
};

export type GetV2LogsIdEvalsResponse200PromptConfig = {
  stream: boolean;
  model: string;
  /**
   * The id of the resource
   */
  modelDbId: string;
  /**
   * The type of the model
   */
  modelType: GetV2LogsIdEvalsResponse200ModelType;
  /**
   * Model Parameters: Not all parameters apply to every model
   */
  modelParameters: GetV2LogsIdEvalsResponse200ModelParameters;
  provider: GetV2LogsIdEvalsResponse200Provider;
  messages: Array<GetV2LogsIdEvalsResponse200Messages>;
  /**
   * The id of the resource
   */
  integrationId?: string | null | undefined;
  version?: string | undefined;
};

export type GetV2LogsIdEvalsResponse200Variables = {
  key: string;
  value?: any | undefined;
  isPii?: boolean | undefined;
};

export type GetV2LogsIdEvalsResponse200Performance = {
  latency: number;
  firstTimeToToken?: number | null | undefined;
  tokensPerSecond?: number | null | undefined;
};

export type GetV2LogsIdEvalsResponse200PromptTokensDetails = {
  cachedTokens?: number | undefined;
};

export type GetV2LogsIdEvalsResponse200CompletionTokensDetails = {
  reasoningTokens?: number | undefined;
};

export type GetV2LogsIdEvalsResponse200Usage = {
  totalTokens?: number | undefined;
  promptTokens?: number | undefined;
  completionTokens?: number | undefined;
  promptTokensDetails?:
    | GetV2LogsIdEvalsResponse200PromptTokensDetails
    | undefined;
  completionTokensDetails?:
    | GetV2LogsIdEvalsResponse200CompletionTokensDetails
    | undefined;
};

export type GetV2LogsIdEvalsResponse200Billing = {
  totalCost?: number | null | undefined;
  inputCost?: number | null | undefined;
  outputCost?: number | null | undefined;
  billable: boolean;
};

/**
 * The type of the tool. Currently, only `function` is supported.
 */
export const GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody47WorkflowRunType =
  {
    Function: "function",
  } as const;
/**
 * The type of the tool. Currently, only `function` is supported.
 */
export type GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody47WorkflowRunType =
  ClosedEnum<
    typeof GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody47WorkflowRunType
  >;

export const GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody47WorkflowRunDataToolsType =
  {
    Object: "object",
  } as const;
export type GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody47WorkflowRunDataToolsType =
  ClosedEnum<
    typeof GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody47WorkflowRunDataToolsType
  >;

/**
 * The parameters the functions accepts, described as a JSON Schema object.
 *
 * @remarks
 *
 *  Omitting `parameters` defines a function with an empty parameter list.
 */
export type GetV2LogsIdEvalsResponse200Parameters = {
  type:
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody47WorkflowRunDataToolsType;
  properties: { [k: string]: any };
  required?: Array<string> | undefined;
  additionalProperties?: boolean | undefined;
};

export type GetV2LogsIdEvalsResponse200Function = {
  /**
   * The name of the function to be called. Must be a-z, A-Z, 0-9, or contain underscores and dashes, with a maximum length of 64.
   */
  name: string;
  /**
   * A description of what the function does, used by the model to choose when and how to call the function.
   */
  description?: string | undefined;
  strict?: boolean | undefined;
  /**
   * The parameters the functions accepts, described as a JSON Schema object.
   *
   * @remarks
   *
   *  Omitting `parameters` defines a function with an empty parameter list.
   */
  parameters: GetV2LogsIdEvalsResponse200Parameters;
};

export type GetV2LogsIdEvalsResponse200Tools = {
  /**
   * The type of the tool. Currently, only `function` is supported.
   */
  type: GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody47WorkflowRunType;
  function: GetV2LogsIdEvalsResponse200Function;
};

export type GetV2LogsIdEvalsResponse200PromptSnippets = {
  /**
   * The id of the resource
   */
  id: string;
  key: string;
  value: string;
};

export type GetV2LogsIdEvalsResponse200Data = {
  choices?: Array<GetV2LogsIdEvalsResponse200Choices> | undefined;
  action: GetV2LogsIdEvalsResponse200Action;
  promptConfig: GetV2LogsIdEvalsResponse200PromptConfig;
  variables: Array<GetV2LogsIdEvalsResponse200Variables>;
  performance?: GetV2LogsIdEvalsResponse200Performance | undefined;
  usage?: GetV2LogsIdEvalsResponse200Usage | undefined;
  billing?: GetV2LogsIdEvalsResponse200Billing | undefined;
  tools?: Array<GetV2LogsIdEvalsResponse200Tools> | undefined;
  promptSnippets: Array<GetV2LogsIdEvalsResponse200PromptSnippets>;
};

export type GetV2LogsIdEvalsResponseWorkflowRun = {
  id: string;
  /**
   * Metadata for the workflow run
   */
  workflowMetadata?: { [k: string]: any } | undefined;
  /**
   * Input for the workflow run
   */
  workflowInput?: { [k: string]: any } | undefined;
  /**
   * Output for the workflow run
   */
  workflowOutput?: { [k: string]: any } | undefined;
  /**
   * An optional field that is filled if the workflow was triggered by an HTTP request
   */
  requestProperties?: GetV2LogsIdEvalsResponse200RequestProperties | undefined;
  startedAt: Date;
  finishedAt?: Date | undefined;
  /**
   * Orquesta product
   */
  productType: GetV2LogsIdEvalsResponse200ProductType;
  relatedEntities: Array<
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRun1
  >;
  evals: Array<
    | GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody41
    | GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody42
    | GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody43
    | GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody44
  >;
  data: GetV2LogsIdEvalsResponse200Data;
};

export const GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody47Status = {
  Pending: "pending",
  Completed: "completed",
  Failed: "failed",
} as const;
export type GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody47Status =
  ClosedEnum<
    typeof GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody47Status
  >;

export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals74Type =
  {
    Evaluator: "evaluator",
  } as const;
export type GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals74Type =
  ClosedEnum<
    typeof GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals74Type
  >;

/**
 * Define the relationship between an evaluator and an entity. Can be LLM Evals, Code Evals or HTTP Evals
 */
export type GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals74 =
  {
    type:
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals74Type;
    /**
     * The id of the resource
     */
    evaluatorId: string;
  };

export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals73Type =
  {
    HumanEval: "human_eval",
  } as const;
export type GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals73Type =
  ClosedEnum<
    typeof GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals73Type
  >;

/**
 * Define the relationship between an entity and a human eval, also known as feedback
 */
export type GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals73 =
  {
    type:
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals73Type;
    /**
     * The id of the resource
     */
    humanEvalId: string;
  };

export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals72Type =
  {
    Contact: "contact",
  } as const;
export type GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals72Type =
  ClosedEnum<
    typeof GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals72Type
  >;

/**
 * Define the user set using the SDK
 */
export type GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals72 =
  {
    type:
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals72Type;
    contactId: string;
  };

export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7Type =
  {
    Account: "account",
  } as const;
export type GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7Type =
  ClosedEnum<
    typeof GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7Type
  >;

/**
 * Define the internal account of the system. Also sometimes called user (internal)
 */
export type GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals71 =
  {
    type:
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7Type;
    /**
     * The id of the resource
     */
    accountId: string;
  };

export type GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody47RelatedEntities =
  | GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals71
  | GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals72
  | GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals73
  | GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals74;

export type GetV2LogsIdEvalsResponse2007 = {
  type: GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody47Type;
  workflowRun: GetV2LogsIdEvalsResponseWorkflowRun;
  /**
   * The id of the resource
   */
  id: string;
  status: GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody47Status;
  timestamp: Date;
  relatedEntities: Array<
    | GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals71
    | GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals72
    | GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals73
    | GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals74
  >;
};

export const GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody46Type = {
  BertScore: "bert_score",
} as const;
export type GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody46Type =
  ClosedEnum<
    typeof GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody46Type
  >;

export type GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody46Value = {
  f1: number;
  precision: number;
  recall: number;
};

export const GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody46Status = {
  Pending: "pending",
  Completed: "completed",
  Failed: "failed",
} as const;
export type GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody46Status =
  ClosedEnum<
    typeof GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody46Status
  >;

export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals64Type =
  {
    Evaluator: "evaluator",
  } as const;
export type GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals64Type =
  ClosedEnum<
    typeof GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals64Type
  >;

/**
 * Define the relationship between an evaluator and an entity. Can be LLM Evals, Code Evals or HTTP Evals
 */
export type GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals64 =
  {
    type:
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals64Type;
    /**
     * The id of the resource
     */
    evaluatorId: string;
  };

export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals63Type =
  {
    HumanEval: "human_eval",
  } as const;
export type GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals63Type =
  ClosedEnum<
    typeof GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals63Type
  >;

/**
 * Define the relationship between an entity and a human eval, also known as feedback
 */
export type GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals63 =
  {
    type:
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals63Type;
    /**
     * The id of the resource
     */
    humanEvalId: string;
  };

export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals62Type =
  {
    Contact: "contact",
  } as const;
export type GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals62Type =
  ClosedEnum<
    typeof GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals62Type
  >;

/**
 * Define the user set using the SDK
 */
export type GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals62 =
  {
    type:
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals62Type;
    contactId: string;
  };

export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals6Type =
  {
    Account: "account",
  } as const;
export type GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals6Type =
  ClosedEnum<
    typeof GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals6Type
  >;

/**
 * Define the internal account of the system. Also sometimes called user (internal)
 */
export type GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals61 =
  {
    type:
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals6Type;
    /**
     * The id of the resource
     */
    accountId: string;
  };

export type GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody46RelatedEntities =
  | GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals61
  | GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals62
  | GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals63
  | GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals64;

export type GetV2LogsIdEvalsResponse2006 = {
  type: GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody46Type;
  value: GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody46Value;
  /**
   * The id of the resource
   */
  id: string;
  status: GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody46Status;
  timestamp: Date;
  relatedEntities: Array<
    | GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals61
    | GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals62
    | GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals63
    | GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals64
  >;
};

export const GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody45Type = {
  RougeN: "rouge_n",
} as const;
export type GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody45Type =
  ClosedEnum<
    typeof GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody45Type
  >;

export type GetV2LogsIdEvalsResponseRouge1 = {
  f1: number;
  precision: number;
  recall: number;
};

export type GetV2LogsIdEvalsResponseRouge2 = {
  f1: number;
  precision: number;
  recall: number;
};

export type GetV2LogsIdEvalsResponseRougeL = {
  f1: number;
  precision: number;
  recall: number;
};

export type GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody4Value = {
  rouge1: GetV2LogsIdEvalsResponseRouge1;
  rouge2: GetV2LogsIdEvalsResponseRouge2;
  rougeL: GetV2LogsIdEvalsResponseRougeL;
};

export const GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody45Status = {
  Pending: "pending",
  Completed: "completed",
  Failed: "failed",
} as const;
export type GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody45Status =
  ClosedEnum<
    typeof GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody45Status
  >;

export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals54Type =
  {
    Evaluator: "evaluator",
  } as const;
export type GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals54Type =
  ClosedEnum<
    typeof GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals54Type
  >;

/**
 * Define the relationship between an evaluator and an entity. Can be LLM Evals, Code Evals or HTTP Evals
 */
export type GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals54 =
  {
    type:
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals54Type;
    /**
     * The id of the resource
     */
    evaluatorId: string;
  };

export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals53Type =
  {
    HumanEval: "human_eval",
  } as const;
export type GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals53Type =
  ClosedEnum<
    typeof GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals53Type
  >;

/**
 * Define the relationship between an entity and a human eval, also known as feedback
 */
export type GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals53 =
  {
    type:
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals53Type;
    /**
     * The id of the resource
     */
    humanEvalId: string;
  };

export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals52Type =
  {
    Contact: "contact",
  } as const;
export type GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals52Type =
  ClosedEnum<
    typeof GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals52Type
  >;

/**
 * Define the user set using the SDK
 */
export type GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals52 =
  {
    type:
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals52Type;
    contactId: string;
  };

export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals5Type =
  {
    Account: "account",
  } as const;
export type GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals5Type =
  ClosedEnum<
    typeof GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals5Type
  >;

/**
 * Define the internal account of the system. Also sometimes called user (internal)
 */
export type GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals51 =
  {
    type:
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals5Type;
    /**
     * The id of the resource
     */
    accountId: string;
  };

export type GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody45RelatedEntities =
  | GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals51
  | GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals52
  | GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals53
  | GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals54;

export type GetV2LogsIdEvalsResponse2005 = {
  type: GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody45Type;
  value: GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody4Value;
  /**
   * The id of the resource
   */
  id: string;
  status: GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody45Status;
  timestamp: Date;
  relatedEntities: Array<
    | GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals51
    | GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals52
    | GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals53
    | GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals54
  >;
};

export const GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody44Type = {
  StringArray: "string_array",
} as const;
export type GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody44Type =
  ClosedEnum<
    typeof GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody44Type
  >;

export const GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody44Status = {
  Pending: "pending",
  Completed: "completed",
  Failed: "failed",
} as const;
export type GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody44Status =
  ClosedEnum<
    typeof GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody44Status
  >;

export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals44Type =
  {
    Evaluator: "evaluator",
  } as const;
export type GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals44Type =
  ClosedEnum<
    typeof GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals44Type
  >;

/**
 * Define the relationship between an evaluator and an entity. Can be LLM Evals, Code Evals or HTTP Evals
 */
export type GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals44 =
  {
    type:
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals44Type;
    /**
     * The id of the resource
     */
    evaluatorId: string;
  };

export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals43Type =
  {
    HumanEval: "human_eval",
  } as const;
export type GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals43Type =
  ClosedEnum<
    typeof GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals43Type
  >;

/**
 * Define the relationship between an entity and a human eval, also known as feedback
 */
export type GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals43 =
  {
    type:
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals43Type;
    /**
     * The id of the resource
     */
    humanEvalId: string;
  };

export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals42Type =
  {
    Contact: "contact",
  } as const;
export type GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals42Type =
  ClosedEnum<
    typeof GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals42Type
  >;

/**
 * Define the user set using the SDK
 */
export type GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals42 =
  {
    type:
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals42Type;
    contactId: string;
  };

export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals4Type =
  {
    Account: "account",
  } as const;
export type GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals4Type =
  ClosedEnum<
    typeof GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals4Type
  >;

/**
 * Define the internal account of the system. Also sometimes called user (internal)
 */
export type GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals41 =
  {
    type:
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals4Type;
    /**
     * The id of the resource
     */
    accountId: string;
  };

export type GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody44RelatedEntities =
  | GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals41
  | GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals42
  | GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals43
  | GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals44;

export type GetV2LogsIdEvalsResponse2004 = {
  type: GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody44Type;
  values: Array<string>;
  /**
   * The id of the resource
   */
  id: string;
  status: GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody44Status;
  timestamp: Date;
  relatedEntities: Array<
    | GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals41
    | GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals42
    | GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals43
    | GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals44
  >;
};

export const GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody43Type = {
  Boolean: "boolean",
} as const;
export type GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody43Type =
  ClosedEnum<
    typeof GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody43Type
  >;

export const GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody43Status = {
  Pending: "pending",
  Completed: "completed",
  Failed: "failed",
} as const;
export type GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody43Status =
  ClosedEnum<
    typeof GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody43Status
  >;

export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals34Type =
  {
    Evaluator: "evaluator",
  } as const;
export type GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals34Type =
  ClosedEnum<
    typeof GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals34Type
  >;

/**
 * Define the relationship between an evaluator and an entity. Can be LLM Evals, Code Evals or HTTP Evals
 */
export type GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals34 =
  {
    type:
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals34Type;
    /**
     * The id of the resource
     */
    evaluatorId: string;
  };

export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals33Type =
  {
    HumanEval: "human_eval",
  } as const;
export type GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals33Type =
  ClosedEnum<
    typeof GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals33Type
  >;

/**
 * Define the relationship between an entity and a human eval, also known as feedback
 */
export type GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals33 =
  {
    type:
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals33Type;
    /**
     * The id of the resource
     */
    humanEvalId: string;
  };

export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals32Type =
  {
    Contact: "contact",
  } as const;
export type GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals32Type =
  ClosedEnum<
    typeof GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals32Type
  >;

/**
 * Define the user set using the SDK
 */
export type GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals32 =
  {
    type:
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals32Type;
    contactId: string;
  };

export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals3Type =
  {
    Account: "account",
  } as const;
export type GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals3Type =
  ClosedEnum<
    typeof GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals3Type
  >;

/**
 * Define the internal account of the system. Also sometimes called user (internal)
 */
export type GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals31 =
  {
    type:
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals3Type;
    /**
     * The id of the resource
     */
    accountId: string;
  };

export type GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody43RelatedEntities =
  | GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals31
  | GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals32
  | GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals33
  | GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals34;

export type GetV2LogsIdEvalsResponse2003 = {
  type: GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody43Type;
  value: boolean;
  /**
   * The id of the resource
   */
  id: string;
  status: GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody43Status;
  timestamp: Date;
  relatedEntities: Array<
    | GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals31
    | GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals32
    | GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals33
    | GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals34
  >;
};

export const GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody42Type = {
  Number: "number",
} as const;
export type GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody42Type =
  ClosedEnum<
    typeof GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody42Type
  >;

export const GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody42Status = {
  Pending: "pending",
  Completed: "completed",
  Failed: "failed",
} as const;
export type GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody42Status =
  ClosedEnum<
    typeof GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody42Status
  >;

export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals24Type =
  {
    Evaluator: "evaluator",
  } as const;
export type GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals24Type =
  ClosedEnum<
    typeof GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals24Type
  >;

/**
 * Define the relationship between an evaluator and an entity. Can be LLM Evals, Code Evals or HTTP Evals
 */
export type GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals4 =
  {
    type:
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals24Type;
    /**
     * The id of the resource
     */
    evaluatorId: string;
  };

export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals23Type =
  {
    HumanEval: "human_eval",
  } as const;
export type GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals23Type =
  ClosedEnum<
    typeof GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals23Type
  >;

/**
 * Define the relationship between an entity and a human eval, also known as feedback
 */
export type GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals3 =
  {
    type:
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals23Type;
    /**
     * The id of the resource
     */
    humanEvalId: string;
  };

export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals22Type =
  {
    Contact: "contact",
  } as const;
export type GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals22Type =
  ClosedEnum<
    typeof GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals22Type
  >;

/**
 * Define the user set using the SDK
 */
export type GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals2 =
  {
    type:
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals22Type;
    contactId: string;
  };

export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals2Type =
  {
    Account: "account",
  } as const;
export type GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals2Type =
  ClosedEnum<
    typeof GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals2Type
  >;

/**
 * Define the internal account of the system. Also sometimes called user (internal)
 */
export type GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals1 =
  {
    type:
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals2Type;
    /**
     * The id of the resource
     */
    accountId: string;
  };

export type GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody42RelatedEntities =
  | GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals1
  | GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals2
  | GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals3
  | GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals4;

export type GetV2LogsIdEvalsResponse2002 = {
  type: GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody42Type;
  value: number;
  /**
   * The id of the resource
   */
  id: string;
  status: GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody42Status;
  timestamp: Date;
  relatedEntities: Array<
    | GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals1
    | GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals2
    | GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals3
    | GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals4
  >;
};

export const GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody4Type = {
  String: "string",
} as const;
export type GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody4Type =
  ClosedEnum<
    typeof GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody4Type
  >;

export const GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody4Status = {
  Pending: "pending",
  Completed: "completed",
  Failed: "failed",
} as const;
export type GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody4Status =
  ClosedEnum<
    typeof GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody4Status
  >;

export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals14Type =
  {
    Evaluator: "evaluator",
  } as const;
export type GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals14Type =
  ClosedEnum<
    typeof GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals14Type
  >;

/**
 * Define the relationship between an evaluator and an entity. Can be LLM Evals, Code Evals or HTTP Evals
 */
export type GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody44 =
  {
    type:
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals14Type;
    /**
     * The id of the resource
     */
    evaluatorId: string;
  };

export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals1Type =
  {
    HumanEval: "human_eval",
  } as const;
export type GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals1Type =
  ClosedEnum<
    typeof GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals1Type
  >;

/**
 * Define the relationship between an entity and a human eval, also known as feedback
 */
export type GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody43 =
  {
    type:
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals1Type;
    /**
     * The id of the resource
     */
    humanEvalId: string;
  };

export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4EvalsType =
  {
    Contact: "contact",
  } as const;
export type GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4EvalsType =
  ClosedEnum<
    typeof GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4EvalsType
  >;

/**
 * Define the user set using the SDK
 */
export type GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody42 =
  {
    type:
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4EvalsType;
    contactId: string;
  };

export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals11Type =
  {
    Account: "account",
  } as const;
export type GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals11Type =
  ClosedEnum<
    typeof GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals11Type
  >;

/**
 * Define the internal account of the system. Also sometimes called user (internal)
 */
export type GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody41 =
  {
    type:
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals11Type;
    /**
     * The id of the resource
     */
    accountId: string;
  };

export type GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody4RelatedEntities =
  | GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody41
  | GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody42
  | GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody43
  | GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody44;

export type GetV2LogsIdEvalsResponse2001 = {
  type: GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody4Type;
  value: string;
  /**
   * The id of the resource
   */
  id: string;
  status: GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody4Status;
  timestamp: Date;
  relatedEntities: Array<
    | GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody41
    | GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody42
    | GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody43
    | GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody44
  >;
};

export type GetV2LogsIdResponseBodyResponseEvals =
  | GetV2LogsIdEvalsResponse2001
  | GetV2LogsIdEvalsResponse2002
  | GetV2LogsIdEvalsResponse2003
  | GetV2LogsIdEvalsResponse2004
  | GetV2LogsIdEvalsResponse2005
  | GetV2LogsIdEvalsResponse2006
  | GetV2LogsIdEvalsResponse2007;

export const GetV2LogsIdResponseBodyResponseProductType = {
  Experiments: "experiments",
} as const;
export type GetV2LogsIdResponseBodyResponseProductType = ClosedEnum<
  typeof GetV2LogsIdResponseBodyResponseProductType
>;

export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody45Type =
  {
    Account: "account",
  } as const;
export type GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody45Type =
  ClosedEnum<
    typeof GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody45Type
  >;

/**
 * Define the internal account of the system. Also sometimes called user (internal)
 */
export type GetV2LogsIdRelatedEntities5 = {
  type: GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody45Type;
  /**
   * The id of the resource
   */
  accountId: string;
};

export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody44Type =
  {
    ExperimentTestCase: "experiment_test_case",
  } as const;
export type GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody44Type =
  ClosedEnum<
    typeof GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody44Type
  >;

export type GetV2LogsIdRelatedEntitiesResponse4 = {
  type: GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody44Type;
  /**
   * The id of the resource
   */
  testCaseId: string;
};

export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody43Type =
  {
    TestCaseRun: "test_case_run",
  } as const;
export type GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody43Type =
  ClosedEnum<
    typeof GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody43Type
  >;

export type GetV2LogsIdRelatedEntitiesResponse2003 = {
  type: GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody43Type;
  /**
   * The id of the resource
   */
  testCaseRunId: string;
};

export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody42Type =
  {
    ExperimentRun: "experiment_run",
  } as const;
export type GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody42Type =
  ClosedEnum<
    typeof GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody42Type
  >;

export type GetV2LogsIdRelatedEntitiesResponse2002 = {
  type: GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody42Type;
  /**
   * The id of the resource
   */
  experimentRunId: string;
};

export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Type =
  {
    Experiment: "experiment",
  } as const;
export type GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Type =
  ClosedEnum<
    typeof GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Type
  >;

export type GetV2LogsIdRelatedEntitiesResponse2001 = {
  type: GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Type;
  /**
   * The id of the resource
   */
  experimentId: string;
};

export type GetV2LogsIdResponseBodyResponseRelatedEntities =
  | GetV2LogsIdRelatedEntitiesResponse2001
  | GetV2LogsIdRelatedEntitiesResponse2002
  | GetV2LogsIdRelatedEntitiesResponse2003
  | GetV2LogsIdRelatedEntitiesResponse4
  | GetV2LogsIdRelatedEntities5;

/**
 * The role of the prompt message
 */
export const GetV2LogsIdMessageResponse200ApplicationJSONResponseBody4DataChoicesRole =
  {
    System: "system",
    Assistant: "assistant",
    User: "user",
    Exception: "exception",
    Tool: "tool",
    Prompt: "prompt",
    Correction: "correction",
    ExpectedOutput: "expected_output",
  } as const;
/**
 * The role of the prompt message
 */
export type GetV2LogsIdMessageResponse200ApplicationJSONResponseBody4DataChoicesRole =
  ClosedEnum<
    typeof GetV2LogsIdMessageResponse200ApplicationJSONResponseBody4DataChoicesRole
  >;

export type GetV2LogsIdMessageResponse2003 = {
  /**
   * The role of the prompt message
   */
  role:
    GetV2LogsIdMessageResponse200ApplicationJSONResponseBody4DataChoicesRole;
  url: string;
};

/**
 * The role of the prompt message
 */
export const GetV2LogsIdMessageResponse200ApplicationJSONResponseBody4DataRole =
  {
    System: "system",
    Assistant: "assistant",
    User: "user",
    Exception: "exception",
    Tool: "tool",
    Prompt: "prompt",
    Correction: "correction",
    ExpectedOutput: "expected_output",
  } as const;
/**
 * The role of the prompt message
 */
export type GetV2LogsIdMessageResponse200ApplicationJSONResponseBody4DataRole =
  ClosedEnum<
    typeof GetV2LogsIdMessageResponse200ApplicationJSONResponseBody4DataRole
  >;

export type GetV2LogsIdMessageResponse2002 = {
  /**
   * The role of the prompt message
   */
  role: GetV2LogsIdMessageResponse200ApplicationJSONResponseBody4DataRole;
  content: string | null;
};

/**
 * The role of the prompt message
 */
export const GetV2LogsIdMessageResponse200ApplicationJSONResponseBody4Role = {
  System: "system",
  Assistant: "assistant",
  User: "user",
  Exception: "exception",
  Tool: "tool",
  Prompt: "prompt",
  Correction: "correction",
  ExpectedOutput: "expected_output",
} as const;
/**
 * The role of the prompt message
 */
export type GetV2LogsIdMessageResponse200ApplicationJSONResponseBody4Role =
  ClosedEnum<
    typeof GetV2LogsIdMessageResponse200ApplicationJSONResponseBody4Role
  >;

export const GetV2LogsIdMessageResponse200Type = {
  Function: "function",
} as const;
export type GetV2LogsIdMessageResponse200Type = ClosedEnum<
  typeof GetV2LogsIdMessageResponse200Type
>;

export type GetV2LogsIdMessageResponse200Function = {
  name: string;
  /**
   * JSON string arguments for the functions
   */
  arguments: string;
};

export type GetV2LogsIdMessageResponse200ToolCalls = {
  id?: string | undefined;
  index?: number | undefined;
  type: GetV2LogsIdMessageResponse200Type;
  function: GetV2LogsIdMessageResponse200Function;
};

export type GetV2LogsIdMessageResponse2001 = {
  /**
   * The role of the prompt message
   */
  role: GetV2LogsIdMessageResponse200ApplicationJSONResponseBody4Role;
  content?: string | null | undefined;
  toolCalls: Array<GetV2LogsIdMessageResponse200ToolCalls>;
};

export type GetV2LogsIdResponseBodyResponseMessage =
  | GetV2LogsIdMessageResponse2002
  | GetV2LogsIdMessageResponse2003
  | GetV2LogsIdMessageResponse2001;

export type GetV2LogsIdResponseBodyResponseChoices = {
  index: number;
  message?:
    | GetV2LogsIdMessageResponse2002
    | GetV2LogsIdMessageResponse2003
    | GetV2LogsIdMessageResponse2001
    | undefined;
  finishReason?: string | null | undefined;
};

export const GetV2LogsIdResponseBodyResponseAction = {
  Invoke: "invoke",
} as const;
export type GetV2LogsIdResponseBodyResponseAction = ClosedEnum<
  typeof GetV2LogsIdResponseBodyResponseAction
>;

/**
 * The type of the model
 */
export const GetV2LogsIdResponseBodyResponseModelType = {
  Chat: "chat",
  Completion: "completion",
  Embedding: "embedding",
  Vision: "vision",
  Image: "image",
  Tts: "tts",
  Stt: "stt",
  Rerank: "rerank",
} as const;
/**
 * The type of the model
 */
export type GetV2LogsIdResponseBodyResponseModelType = ClosedEnum<
  typeof GetV2LogsIdResponseBodyResponseModelType
>;

/**
 * Only supported on `image` models.
 */
export const GetV2LogsIdResponseBodyResponse200Format = {
  Url: "url",
  B64Json: "b64_json",
  Text: "text",
  JsonObject: "json_object",
} as const;
/**
 * Only supported on `image` models.
 */
export type GetV2LogsIdResponseBodyResponse200Format = ClosedEnum<
  typeof GetV2LogsIdResponseBodyResponse200Format
>;

/**
 * Only supported on `image` models.
 */
export const GetV2LogsIdResponseBodyResponseQuality = {
  Standard: "standard",
  Hd: "hd",
} as const;
/**
 * Only supported on `image` models.
 */
export type GetV2LogsIdResponseBodyResponseQuality = ClosedEnum<
  typeof GetV2LogsIdResponseBodyResponseQuality
>;

export const GetV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody4Type =
  {
    JsonObject: "json_object",
  } as const;
export type GetV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody4Type =
  ClosedEnum<
    typeof GetV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody4Type
  >;

export type GetV2LogsIdResponseFormatResponse2002 = {
  type: GetV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody4Type;
};

export const GetV2LogsIdResponseFormatResponse200ApplicationJSONResponseBodyType =
  {
    JsonSchema: "json_schema",
  } as const;
export type GetV2LogsIdResponseFormatResponse200ApplicationJSONResponseBodyType =
  ClosedEnum<
    typeof GetV2LogsIdResponseFormatResponse200ApplicationJSONResponseBodyType
  >;

export type GetV2LogsIdResponseFormatResponse200JsonSchema = {
  name: string;
  strict: boolean;
  schema: { [k: string]: any };
};

export type GetV2LogsIdResponseFormatResponse2001 = {
  type: GetV2LogsIdResponseFormatResponse200ApplicationJSONResponseBodyType;
  jsonSchema: GetV2LogsIdResponseFormatResponse200JsonSchema;
};

/**
 * An object specifying the format that the model must output.
 *
 * @remarks
 *
 *  Setting to `{ "type": "json_schema", "json_schema": {...} }` enables Structured Outputs which ensures the model will match your supplied JSON schema
 *
 *  Setting to `{ "type": "json_object" }` enables JSON mode, which ensures the message the model generates is valid JSON.
 *
 * Important: when using JSON mode, you must also instruct the model to produce JSON yourself via a system or user message. Without this, the model may generate an unending stream of whitespace until the generation reaches the token limit, resulting in a long-running and seemingly "stuck" request. Also note that the message content may be partially cut off if finish_reason="length", which indicates the generation exceeded max_tokens or the conversation exceeded the max context length.
 */
export type GetV2LogsIdResponseBodyResponseResponseFormat =
  | GetV2LogsIdResponseFormatResponse2002
  | GetV2LogsIdResponseFormatResponse2001;

/**
 * The version of photoReal to use. Must be v1 or v2. Only available for `leonardoai` provider
 */
export const GetV2LogsIdResponseBodyResponsePhotoRealVersion = {
  V1: "v1",
  V2: "v2",
} as const;
/**
 * The version of photoReal to use. Must be v1 or v2. Only available for `leonardoai` provider
 */
export type GetV2LogsIdResponseBodyResponsePhotoRealVersion = ClosedEnum<
  typeof GetV2LogsIdResponseBodyResponsePhotoRealVersion
>;

/**
 * The format to return the embeddings
 */
export const GetV2LogsIdResponseBodyResponseEncodingFormat = {
  Float: "float",
  Base64: "base64",
} as const;
/**
 * The format to return the embeddings
 */
export type GetV2LogsIdResponseBodyResponseEncodingFormat = ClosedEnum<
  typeof GetV2LogsIdResponseBodyResponseEncodingFormat
>;

/**
 * Model Parameters: Not all parameters apply to every model
 */
export type GetV2LogsIdResponseBodyResponseModelParameters = {
  /**
   * Only supported on `chat` and `completion` models.
   */
  temperature?: number | undefined;
  /**
   * Only supported on `chat` and `completion` models.
   */
  maxTokens?: number | undefined;
  /**
   * Only supported on `chat` and `completion` models.
   */
  topK?: number | undefined;
  /**
   * Only supported on `chat` and `completion` models.
   */
  topP?: number | undefined;
  /**
   * Only supported on `chat` and `completion` models.
   */
  frequencyPenalty?: number | undefined;
  /**
   * Only supported on `chat` and `completion` models.
   */
  presencePenalty?: number | undefined;
  /**
   * Only supported on `image` models.
   */
  numImages?: number | undefined;
  /**
   * Best effort deterministic seed for the model. Currently only OpenAI models support these
   */
  seed?: number | undefined;
  /**
   * Only supported on `image` models.
   */
  format?: GetV2LogsIdResponseBodyResponse200Format | undefined;
  /**
   * Only supported on `image` models.
   */
  dimensions?: string | undefined;
  /**
   * Only supported on `image` models.
   */
  quality?: GetV2LogsIdResponseBodyResponseQuality | undefined;
  /**
   * Only supported on `image` models.
   */
  style?: string | undefined;
  /**
   * An object specifying the format that the model must output.
   *
   * @remarks
   *
   *  Setting to `{ "type": "json_schema", "json_schema": {...} }` enables Structured Outputs which ensures the model will match your supplied JSON schema
   *
   *  Setting to `{ "type": "json_object" }` enables JSON mode, which ensures the message the model generates is valid JSON.
   *
   * Important: when using JSON mode, you must also instruct the model to produce JSON yourself via a system or user message. Without this, the model may generate an unending stream of whitespace until the generation reaches the token limit, resulting in a long-running and seemingly "stuck" request. Also note that the message content may be partially cut off if finish_reason="length", which indicates the generation exceeded max_tokens or the conversation exceeded the max context length.
   */
  responseFormat?:
    | GetV2LogsIdResponseFormatResponse2002
    | GetV2LogsIdResponseFormatResponse2001
    | null
    | undefined;
  /**
   * The version of photoReal to use. Must be v1 or v2. Only available for `leonardoai` provider
   */
  photoRealVersion?:
    | GetV2LogsIdResponseBodyResponsePhotoRealVersion
    | undefined;
  /**
   * The format to return the embeddings
   */
  encodingFormat?: GetV2LogsIdResponseBodyResponseEncodingFormat | undefined;
};

export const GetV2LogsIdResponseBodyResponseProvider = {
  Cohere: "cohere",
  Openai: "openai",
  Anthropic: "anthropic",
  Huggingface: "huggingface",
  Replicate: "replicate",
  Google: "google",
  GoogleAi: "google-ai",
  Azure: "azure",
  Aws: "aws",
  Anyscale: "anyscale",
  Perplexity: "perplexity",
  Groq: "groq",
  Fal: "fal",
  Leonardoai: "leonardoai",
  Nvidia: "nvidia",
} as const;
export type GetV2LogsIdResponseBodyResponseProvider = ClosedEnum<
  typeof GetV2LogsIdResponseBodyResponseProvider
>;

/**
 * The role of the prompt message
 */
export const GetV2LogsIdResponseBodyResponseRole = {
  System: "system",
  Assistant: "assistant",
  User: "user",
  Exception: "exception",
  Tool: "tool",
  Prompt: "prompt",
  Correction: "correction",
  ExpectedOutput: "expected_output",
} as const;
/**
 * The role of the prompt message
 */
export type GetV2LogsIdResponseBodyResponseRole = ClosedEnum<
  typeof GetV2LogsIdResponseBodyResponseRole
>;

export const GetV2LogsId2Response200ApplicationJSONResponseBody4Type = {
  ImageUrl: "image_url",
} as const;
export type GetV2LogsId2Response200ApplicationJSONResponseBody4Type =
  ClosedEnum<typeof GetV2LogsId2Response200ApplicationJSONResponseBody4Type>;

export type GetV2LogsId2Response200ImageUrl = {
  /**
   * The orq.ai id of the image
   */
  id?: string | undefined;
  /**
   * Either a URL of the image or the base64 encoded data URI.
   */
  url: string;
  /**
   * Specifies the detail level of the image. Currently only supported with OpenAI models
   */
  detail?: string | undefined;
};

/**
 * The image part of the prompt message. Only supported with vision models.
 */
export type GetV2LogsId2Response2002 = {
  type: GetV2LogsId2Response200ApplicationJSONResponseBody4Type;
  imageUrl: GetV2LogsId2Response200ImageUrl;
};

export const GetV2LogsId2Response200ApplicationJSONResponseBodyType = {
  Text: "text",
} as const;
export type GetV2LogsId2Response200ApplicationJSONResponseBodyType = ClosedEnum<
  typeof GetV2LogsId2Response200ApplicationJSONResponseBodyType
>;

/**
 * Text content part of a prompt message
 */
export type GetV2LogsId2Response2001 = {
  type: GetV2LogsId2Response200ApplicationJSONResponseBodyType;
  text: string;
};

export type GetV2LogsIdContentResponse2002 =
  | GetV2LogsId2Response2001
  | GetV2LogsId2Response2002;

/**
 * The contents of the user message. Either the text content of the message or an array of content parts with a defined type, each can be of type `text` or `image_url` when passing in images. You can pass multiple images by adding multiple `image_url` content parts.
 */
export type GetV2LogsIdResponseBodyResponseContent =
  | string
  | Array<GetV2LogsId2Response2001 | GetV2LogsId2Response2002>;

export const GetV2LogsIdResponseBodyResponse200ApplicationJson4Type = {
  Function: "function",
} as const;
export type GetV2LogsIdResponseBodyResponse200ApplicationJson4Type = ClosedEnum<
  typeof GetV2LogsIdResponseBodyResponse200ApplicationJson4Type
>;

export type GetV2LogsIdResponseBodyResponse200ApplicationJSONFunction = {
  name: string;
  /**
   * JSON string arguments for the functions
   */
  arguments: string;
};

export type GetV2LogsIdResponseBodyResponseToolCalls = {
  id?: string | undefined;
  index?: number | undefined;
  type: GetV2LogsIdResponseBodyResponse200ApplicationJson4Type;
  function: GetV2LogsIdResponseBodyResponse200ApplicationJSONFunction;
};

export type GetV2LogsIdResponseBodyResponseMessages = {
  /**
   * The role of the prompt message
   */
  role: GetV2LogsIdResponseBodyResponseRole;
  /**
   * The contents of the user message. Either the text content of the message or an array of content parts with a defined type, each can be of type `text` or `image_url` when passing in images. You can pass multiple images by adding multiple `image_url` content parts.
   */
  content: string | Array<GetV2LogsId2Response2001 | GetV2LogsId2Response2002>;
  toolCalls?: Array<GetV2LogsIdResponseBodyResponseToolCalls> | undefined;
  /**
   * The id of the resource
   */
  id?: string | undefined;
};

export type GetV2LogsIdResponseBodyResponsePromptConfig = {
  stream: boolean;
  model: string;
  /**
   * The id of the resource
   */
  modelDbId: string;
  /**
   * The type of the model
   */
  modelType: GetV2LogsIdResponseBodyResponseModelType;
  /**
   * Model Parameters: Not all parameters apply to every model
   */
  modelParameters: GetV2LogsIdResponseBodyResponseModelParameters;
  provider: GetV2LogsIdResponseBodyResponseProvider;
  messages: Array<GetV2LogsIdResponseBodyResponseMessages>;
  /**
   * The id of the resource
   */
  integrationId?: string | null | undefined;
  version?: string | undefined;
};

export type GetV2LogsIdResponseBodyVariables = {
  key: string;
  value?: any | undefined;
  isPii?: boolean | undefined;
};

export type GetV2LogsIdResponseBodyResponsePerformance = {
  latency: number;
  firstTimeToToken?: number | null | undefined;
  tokensPerSecond?: number | null | undefined;
};

export type GetV2LogsIdResponseBodyPromptTokensDetails = {
  cachedTokens?: number | undefined;
};

export type GetV2LogsIdResponseBodyCompletionTokensDetails = {
  reasoningTokens?: number | undefined;
};

export type GetV2LogsIdResponseBodyResponseUsage = {
  totalTokens?: number | undefined;
  promptTokens?: number | undefined;
  completionTokens?: number | undefined;
  promptTokensDetails?: GetV2LogsIdResponseBodyPromptTokensDetails | undefined;
  completionTokensDetails?:
    | GetV2LogsIdResponseBodyCompletionTokensDetails
    | undefined;
};

export type GetV2LogsIdResponseBodyBilling = {
  totalCost?: number | null | undefined;
  inputCost?: number | null | undefined;
  outputCost?: number | null | undefined;
  billable: boolean;
};

export type GetV2LogsIdResponseBodyResponse200Metadata = {
  /**
   * Unique identifier for the data source
   */
  datasourceId: string;
  /**
   * Unique identifier for the chunk
   */
  chunkId: string;
  /**
   * Name of the uploaded file during the datasource creation.
   */
  fileName: string;
  /**
   * Reference to the page number the chunk was extracted from. The property will only be available for `application/pdf` type of files. For other file types, the property will be `null`.
   */
  pageNumber?: number | null | undefined;
  /**
   * Type of the uploaded file when the datasource was created.
   */
  fileType: string;
};

export type GetV2LogsIdResponseBodyDocuments = {
  /**
   * The id of the resource
   */
  id: string;
  /**
   * Text content of the document
   */
  text: string;
  metadata: GetV2LogsIdResponseBodyResponse200Metadata;
  /**
   * The score of the document
   */
  score: number;
  /**
   * The rerank score of the document
   */
  rerankScore?: number | undefined;
};

export type GetV2LogsIdResponseBodyResponseRetrievals = {
  /**
   * Unique id of the knowledge base
   */
  knowledgeId: string;
  /**
   * The documents returned
   */
  documents: Array<GetV2LogsIdResponseBodyDocuments>;
  /**
   * The key of the knowledge base
   */
  knowledgeKey: string;
  /**
   * The query used to search the knowledge base
   */
  query: string;
};

export const GetV2LogsIdConfigurationResponse200ApplicationJSONResponseBodyType =
  {
    Query: "query",
  } as const;
export type GetV2LogsIdConfigurationResponse200ApplicationJSONResponseBodyType =
  ClosedEnum<
    typeof GetV2LogsIdConfigurationResponse200ApplicationJSONResponseBodyType
  >;

export type GetV2LogsIdConfigurationResponse2 = {
  type: GetV2LogsIdConfigurationResponse200ApplicationJSONResponseBodyType;
  query: string;
};

export const GetV2LogsIdConfigurationResponse200ApplicationJSONType = {
  LastUserMessage: "last_user_message",
} as const;
export type GetV2LogsIdConfigurationResponse200ApplicationJSONType = ClosedEnum<
  typeof GetV2LogsIdConfigurationResponse200ApplicationJSONType
>;

export type GetV2LogsIdConfigurationResponse1 = {
  type: GetV2LogsIdConfigurationResponse200ApplicationJSONType;
};

/**
 * Defines the configuration settings which can either be for a user message or a text entry.
 */
export type GetV2LogsIdResponseBodyConfiguration =
  | GetV2LogsIdConfigurationResponse1
  | GetV2LogsIdConfigurationResponse2;

export type GetV2LogsIdResponseBodyKnowledgeBases = {
  /**
   * The id of the resource
   */
  knowledgeId: string;
  /**
   * Defines the configuration settings which can either be for a user message or a text entry.
   */
  configuration:
    | GetV2LogsIdConfigurationResponse1
    | GetV2LogsIdConfigurationResponse2;
};

/**
 * The type of the tool. Currently, only `function` is supported.
 */
export const GetV2LogsIdResponseBodyResponseType = {
  Function: "function",
} as const;
/**
 * The type of the tool. Currently, only `function` is supported.
 */
export type GetV2LogsIdResponseBodyResponseType = ClosedEnum<
  typeof GetV2LogsIdResponseBodyResponseType
>;

export const GetV2LogsIdResponseBodyResponse200ApplicationJson4DataType = {
  Object: "object",
} as const;
export type GetV2LogsIdResponseBodyResponse200ApplicationJson4DataType =
  ClosedEnum<typeof GetV2LogsIdResponseBodyResponse200ApplicationJson4DataType>;

/**
 * The parameters the functions accepts, described as a JSON Schema object.
 *
 * @remarks
 *
 *  Omitting `parameters` defines a function with an empty parameter list.
 */
export type GetV2LogsIdResponseBodyResponseParameters = {
  type: GetV2LogsIdResponseBodyResponse200ApplicationJson4DataType;
  properties: { [k: string]: any };
  required?: Array<string> | undefined;
  additionalProperties?: boolean | undefined;
};

export type GetV2LogsIdResponseBodyResponseFunction = {
  /**
   * The name of the function to be called. Must be a-z, A-Z, 0-9, or contain underscores and dashes, with a maximum length of 64.
   */
  name: string;
  /**
   * A description of what the function does, used by the model to choose when and how to call the function.
   */
  description?: string | undefined;
  strict?: boolean | undefined;
  /**
   * The parameters the functions accepts, described as a JSON Schema object.
   *
   * @remarks
   *
   *  Omitting `parameters` defines a function with an empty parameter list.
   */
  parameters: GetV2LogsIdResponseBodyResponseParameters;
};

export type GetV2LogsIdResponseBodyResponseTools = {
  /**
   * The type of the tool. Currently, only `function` is supported.
   */
  type: GetV2LogsIdResponseBodyResponseType;
  function: GetV2LogsIdResponseBodyResponseFunction;
};

export type GetV2LogsIdResponseBodyPromptSnippets = {
  /**
   * The id of the resource
   */
  id: string;
  key: string;
  value: string;
};

export type GetV2LogsIdResponseBodyResponse200Data = {
  choices?: Array<GetV2LogsIdResponseBodyResponseChoices> | undefined;
  action?: GetV2LogsIdResponseBodyResponseAction | undefined;
  integrationIds?: Array<string> | undefined;
  promptConfig: GetV2LogsIdResponseBodyResponsePromptConfig;
  variables: Array<GetV2LogsIdResponseBodyVariables>;
  performance?: GetV2LogsIdResponseBodyResponsePerformance | undefined;
  usage?: GetV2LogsIdResponseBodyResponseUsage | undefined;
  billing?: GetV2LogsIdResponseBodyBilling | undefined;
  providerResponse?: any | undefined;
  retrievals?: Array<GetV2LogsIdResponseBodyResponseRetrievals> | undefined;
  knowledgeBases?: Array<GetV2LogsIdResponseBodyKnowledgeBases> | undefined;
  tools?: Array<GetV2LogsIdResponseBodyResponseTools> | undefined;
  promptSnippets: Array<GetV2LogsIdResponseBodyPromptSnippets>;
};

/**
 * The schema for the experiment workflow run
 */
export type ResponseBody4 = {
  /**
   * The unique identifier for the workflow run
   */
  id: string;
  /**
   * The unique identifier for the workspace
   */
  workspaceId: string;
  /**
   * Metadata for the workflow run
   */
  workflowMetadata?: { [k: string]: any } | undefined;
  /**
   * Input for the workflow run
   */
  workflowInput?: { [k: string]: any } | undefined;
  /**
   * Output for the workflow run
   */
  workflowOutput?: { [k: string]: any } | undefined;
  /**
   * The optional project_id for the entity of the event
   */
  projectId?: string | undefined;
  /**
   * An optional field that is filled if the workflow was triggered by an HTTP request
   */
  requestProperties?:
    | GetV2LogsIdResponseBodyResponseRequestProperties
    | undefined;
  startedAt: Date;
  finishedAt?: Date | undefined;
  evals: Array<
    | GetV2LogsIdEvalsResponse2001
    | GetV2LogsIdEvalsResponse2002
    | GetV2LogsIdEvalsResponse2003
    | GetV2LogsIdEvalsResponse2004
    | GetV2LogsIdEvalsResponse2005
    | GetV2LogsIdEvalsResponse2006
    | GetV2LogsIdEvalsResponse2007
  >;
  productType: GetV2LogsIdResponseBodyResponseProductType;
  relatedEntities: Array<
    | GetV2LogsIdRelatedEntitiesResponse2001
    | GetV2LogsIdRelatedEntitiesResponse2002
    | GetV2LogsIdRelatedEntitiesResponse2003
    | GetV2LogsIdRelatedEntitiesResponse4
    | GetV2LogsIdRelatedEntities5
  >;
  data: GetV2LogsIdResponseBodyResponse200Data;
};

/**
 * An optional field that is filled if the workflow was triggered by an HTTP request
 */
export type GetV2LogsIdResponseBodyRequestProperties = {
  source?: string | undefined;
  location?: string | undefined;
  latitude?: string | undefined;
  longitude?: string | undefined;
  responseTime?: number | undefined;
  metadata?: { [k: string]: any } | undefined;
  status?: number | undefined;
  context?: { [k: string]: any } | undefined;
  extraParams?: { [k: string]: any } | undefined;
};

export const GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody37Type = {
  LlmEval: "llm_eval",
} as const;
export type GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody37Type =
  ClosedEnum<
    typeof GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody37Type
  >;

/**
 * An optional field that is filled if the workflow was triggered by an HTTP request
 */
export type GetV2LogsIdEvalsResponseRequestProperties = {
  source?: string | undefined;
  location?: string | undefined;
  latitude?: string | undefined;
  longitude?: string | undefined;
  responseTime?: number | undefined;
  metadata?: { [k: string]: any } | undefined;
  status?: number | undefined;
  context?: { [k: string]: any } | undefined;
  extraParams?: { [k: string]: any } | undefined;
};

/**
 * Orquesta product
 */
export const GetV2LogsIdEvalsResponseProductType = {
  Remoteconfigs: "remoteconfigs",
  Deployments: "deployments",
  Experiments: "experiments",
  Playgrounds: "playgrounds",
  LlmEvaluator: "llm_evaluator",
  Knowledge: "knowledge",
  Router: "router",
  Workflows: "workflows",
} as const;
/**
 * Orquesta product
 */
export type GetV2LogsIdEvalsResponseProductType = ClosedEnum<
  typeof GetV2LogsIdEvalsResponseProductType
>;

export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRunType =
  {
    Evaluator: "evaluator",
  } as const;
export type GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRunType =
  ClosedEnum<
    typeof GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRunType
  >;

/**
 * Define the relationship between an evaluator and an entity. Can be LLM Evals, Code Evals or HTTP Evals
 */
export type GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRun1 =
  {
    type:
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRunType;
    /**
     * The id of the resource
     */
    evaluatorId: string;
  };

export type GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody37WorkflowRunRelatedEntities =
  GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRun1;

export const GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody3Evals7WorkflowRun4Type =
  {
    StringArray: "string_array",
  } as const;
export type GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody3Evals7WorkflowRun4Type =
  ClosedEnum<
    typeof GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody3Evals7WorkflowRun4Type
  >;

export const GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody3Evals7WorkflowRun4Status =
  {
    Pending: "pending",
    Completed: "completed",
    Failed: "failed",
  } as const;
export type GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody3Evals7WorkflowRun4Status =
  ClosedEnum<
    typeof GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody3Evals7WorkflowRun4Status
  >;

export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRunEvals44Type =
  {
    Evaluator: "evaluator",
  } as const;
export type GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRunEvals44Type =
  ClosedEnum<
    typeof GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRunEvals44Type
  >;

/**
 * Define the relationship between an evaluator and an entity. Can be LLM Evals, Code Evals or HTTP Evals
 */
export type GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRunEvals44 =
  {
    type:
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRunEvals44Type;
    /**
     * The id of the resource
     */
    evaluatorId: string;
  };

export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRunEvals43Type =
  {
    HumanEval: "human_eval",
  } as const;
export type GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRunEvals43Type =
  ClosedEnum<
    typeof GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRunEvals43Type
  >;

/**
 * Define the relationship between an entity and a human eval, also known as feedback
 */
export type GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRunEvals43 =
  {
    type:
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRunEvals43Type;
    /**
     * The id of the resource
     */
    humanEvalId: string;
  };

export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRunEvals42Type =
  {
    Contact: "contact",
  } as const;
export type GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRunEvals42Type =
  ClosedEnum<
    typeof GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRunEvals42Type
  >;

/**
 * Define the user set using the SDK
 */
export type GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRunEvals42 =
  {
    type:
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRunEvals42Type;
    contactId: string;
  };

export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRunEvals4Type =
  {
    Account: "account",
  } as const;
export type GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRunEvals4Type =
  ClosedEnum<
    typeof GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRunEvals4Type
  >;

/**
 * Define the internal account of the system. Also sometimes called user (internal)
 */
export type GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRunEvals41 =
  {
    type:
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRunEvals4Type;
    /**
     * The id of the resource
     */
    accountId: string;
  };

export type GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody3Evals7WorkflowRun4RelatedEntities =
  | GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRunEvals41
  | GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRunEvals42
  | GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRunEvals43
  | GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRunEvals44;

export type GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody4 = {
  type:
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody3Evals7WorkflowRun4Type;
  values: Array<string>;
  /**
   * The id of the resource
   */
  id: string;
  status:
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody3Evals7WorkflowRun4Status;
  timestamp: Date;
  relatedEntities: Array<
    | GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRunEvals41
    | GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRunEvals42
    | GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRunEvals43
    | GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRunEvals44
  >;
};

export const GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody3Evals7WorkflowRunType =
  {
    Boolean: "boolean",
  } as const;
export type GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody3Evals7WorkflowRunType =
  ClosedEnum<
    typeof GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody3Evals7WorkflowRunType
  >;

export const GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody3Evals7WorkflowRunStatus =
  {
    Pending: "pending",
    Completed: "completed",
    Failed: "failed",
  } as const;
export type GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody3Evals7WorkflowRunStatus =
  ClosedEnum<
    typeof GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody3Evals7WorkflowRunStatus
  >;

export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRunEvals34Type =
  {
    Evaluator: "evaluator",
  } as const;
export type GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRunEvals34Type =
  ClosedEnum<
    typeof GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRunEvals34Type
  >;

/**
 * Define the relationship between an evaluator and an entity. Can be LLM Evals, Code Evals or HTTP Evals
 */
export type GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRunEvals4 =
  {
    type:
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRunEvals34Type;
    /**
     * The id of the resource
     */
    evaluatorId: string;
  };

export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRunEvals33Type =
  {
    HumanEval: "human_eval",
  } as const;
export type GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRunEvals33Type =
  ClosedEnum<
    typeof GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRunEvals33Type
  >;

/**
 * Define the relationship between an entity and a human eval, also known as feedback
 */
export type GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRunEvals3 =
  {
    type:
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRunEvals33Type;
    /**
     * The id of the resource
     */
    humanEvalId: string;
  };

export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRunEvals32Type =
  {
    Contact: "contact",
  } as const;
export type GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRunEvals32Type =
  ClosedEnum<
    typeof GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRunEvals32Type
  >;

/**
 * Define the user set using the SDK
 */
export type GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRunEvals2 =
  {
    type:
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRunEvals32Type;
    contactId: string;
  };

export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRunEvals3Type =
  {
    Account: "account",
  } as const;
export type GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRunEvals3Type =
  ClosedEnum<
    typeof GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRunEvals3Type
  >;

/**
 * Define the internal account of the system. Also sometimes called user (internal)
 */
export type GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRunEvals31 =
  {
    type:
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRunEvals3Type;
    /**
     * The id of the resource
     */
    accountId: string;
  };

export type GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody3Evals7WorkflowRunRelatedEntities =
  | GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRunEvals31
  | GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRunEvals2
  | GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRunEvals3
  | GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRunEvals4;

export type GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody3 = {
  type:
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody3Evals7WorkflowRunType;
  value: boolean;
  /**
   * The id of the resource
   */
  id: string;
  status:
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody3Evals7WorkflowRunStatus;
  timestamp: Date;
  relatedEntities: Array<
    | GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRunEvals31
    | GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRunEvals2
    | GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRunEvals3
    | GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRunEvals4
  >;
};

export const GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody3Evals7Type =
  {
    Number: "number",
  } as const;
export type GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody3Evals7Type =
  ClosedEnum<
    typeof GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody3Evals7Type
  >;

export const GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody3Evals7Status =
  {
    Pending: "pending",
    Completed: "completed",
    Failed: "failed",
  } as const;
export type GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody3Evals7Status =
  ClosedEnum<
    typeof GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody3Evals7Status
  >;

export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRunEvals24Type =
  {
    Evaluator: "evaluator",
  } as const;
export type GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRunEvals24Type =
  ClosedEnum<
    typeof GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRunEvals24Type
  >;

/**
 * Define the relationship between an evaluator and an entity. Can be LLM Evals, Code Evals or HTTP Evals
 */
export type GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRun4 =
  {
    type:
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRunEvals24Type;
    /**
     * The id of the resource
     */
    evaluatorId: string;
  };

export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRunEvals23Type =
  {
    HumanEval: "human_eval",
  } as const;
export type GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRunEvals23Type =
  ClosedEnum<
    typeof GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRunEvals23Type
  >;

/**
 * Define the relationship between an entity and a human eval, also known as feedback
 */
export type GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRun3 =
  {
    type:
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRunEvals23Type;
    /**
     * The id of the resource
     */
    humanEvalId: string;
  };

export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRunEvals22Type =
  {
    Contact: "contact",
  } as const;
export type GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRunEvals22Type =
  ClosedEnum<
    typeof GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRunEvals22Type
  >;

/**
 * Define the user set using the SDK
 */
export type GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRun2 =
  {
    type:
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRunEvals22Type;
    contactId: string;
  };

export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRunEvals2Type =
  {
    Account: "account",
  } as const;
export type GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRunEvals2Type =
  ClosedEnum<
    typeof GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRunEvals2Type
  >;

/**
 * Define the internal account of the system. Also sometimes called user (internal)
 */
export type GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRunEvals1 =
  {
    type:
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRunEvals2Type;
    /**
     * The id of the resource
     */
    accountId: string;
  };

export type GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody3Evals7RelatedEntities =
  | GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRunEvals1
  | GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRun2
  | GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRun3
  | GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRun4;

export type GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody2 = {
  type: GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody3Evals7Type;
  value: number;
  /**
   * The id of the resource
   */
  id: string;
  status: GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody3Evals7Status;
  timestamp: Date;
  relatedEntities: Array<
    | GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRunEvals1
    | GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRun2
    | GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRun3
    | GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRun4
  >;
};

export const GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody3EvalsType =
  {
    String: "string",
  } as const;
export type GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody3EvalsType =
  ClosedEnum<
    typeof GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody3EvalsType
  >;

export const GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody3EvalsStatus =
  {
    Pending: "pending",
    Completed: "completed",
    Failed: "failed",
  } as const;
export type GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody3EvalsStatus =
  ClosedEnum<
    typeof GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody3EvalsStatus
  >;

export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRunEvals14Type =
  {
    Evaluator: "evaluator",
  } as const;
export type GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRunEvals14Type =
  ClosedEnum<
    typeof GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRunEvals14Type
  >;

/**
 * Define the relationship between an evaluator and an entity. Can be LLM Evals, Code Evals or HTTP Evals
 */
export type GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRunEvals14 =
  {
    type:
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRunEvals14Type;
    /**
     * The id of the resource
     */
    evaluatorId: string;
  };

export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRunEvals1Type =
  {
    HumanEval: "human_eval",
  } as const;
export type GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRunEvals1Type =
  ClosedEnum<
    typeof GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRunEvals1Type
  >;

/**
 * Define the relationship between an entity and a human eval, also known as feedback
 */
export type GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRunEvals13 =
  {
    type:
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRunEvals1Type;
    /**
     * The id of the resource
     */
    humanEvalId: string;
  };

export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRunEvalsType =
  {
    Contact: "contact",
  } as const;
export type GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRunEvalsType =
  ClosedEnum<
    typeof GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRunEvalsType
  >;

/**
 * Define the user set using the SDK
 */
export type GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRunEvals12 =
  {
    type:
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRunEvalsType;
    contactId: string;
  };

export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRunEvals11Type =
  {
    Account: "account",
  } as const;
export type GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRunEvals11Type =
  ClosedEnum<
    typeof GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRunEvals11Type
  >;

/**
 * Define the internal account of the system. Also sometimes called user (internal)
 */
export type GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRunEvals11 =
  {
    type:
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRunEvals11Type;
    /**
     * The id of the resource
     */
    accountId: string;
  };

export type GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody3EvalsRelatedEntities =
  | GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRunEvals11
  | GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRunEvals12
  | GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRunEvals13
  | GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRunEvals14;

export type GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody1 = {
  type: GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody3EvalsType;
  value: string;
  /**
   * The id of the resource
   */
  id: string;
  status: GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody3EvalsStatus;
  timestamp: Date;
  relatedEntities: Array<
    | GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRunEvals11
    | GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRunEvals12
    | GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRunEvals13
    | GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRunEvals14
  >;
};

export type GetV2LogsIdEvalsResponseEvals =
  | GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody1
  | GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody2
  | GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody3
  | GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody4;

/**
 * The role of the prompt message
 */
export const GetV2LogsIdMessageResponse200ApplicationJSONResponseBody3Evals7Role =
  {
    System: "system",
    Assistant: "assistant",
    User: "user",
    Exception: "exception",
    Tool: "tool",
    Prompt: "prompt",
    Correction: "correction",
    ExpectedOutput: "expected_output",
  } as const;
/**
 * The role of the prompt message
 */
export type GetV2LogsIdMessageResponse200ApplicationJSONResponseBody3Evals7Role =
  ClosedEnum<
    typeof GetV2LogsIdMessageResponse200ApplicationJSONResponseBody3Evals7Role
  >;

export type GetV2LogsIdMessageResponse200ApplicationJson3 = {
  /**
   * The role of the prompt message
   */
  role: GetV2LogsIdMessageResponse200ApplicationJSONResponseBody3Evals7Role;
  url: string;
};

/**
 * The role of the prompt message
 */
export const GetV2LogsIdMessageResponse200ApplicationJSONResponseBody3EvalsRole =
  {
    System: "system",
    Assistant: "assistant",
    User: "user",
    Exception: "exception",
    Tool: "tool",
    Prompt: "prompt",
    Correction: "correction",
    ExpectedOutput: "expected_output",
  } as const;
/**
 * The role of the prompt message
 */
export type GetV2LogsIdMessageResponse200ApplicationJSONResponseBody3EvalsRole =
  ClosedEnum<
    typeof GetV2LogsIdMessageResponse200ApplicationJSONResponseBody3EvalsRole
  >;

export type GetV2LogsIdMessageResponse200ApplicationJson2 = {
  /**
   * The role of the prompt message
   */
  role: GetV2LogsIdMessageResponse200ApplicationJSONResponseBody3EvalsRole;
  content: string | null;
};

/**
 * The role of the prompt message
 */
export const GetV2LogsIdMessageResponse200ApplicationJSONResponseBody3Evals7WorkflowRunRole =
  {
    System: "system",
    Assistant: "assistant",
    User: "user",
    Exception: "exception",
    Tool: "tool",
    Prompt: "prompt",
    Correction: "correction",
    ExpectedOutput: "expected_output",
  } as const;
/**
 * The role of the prompt message
 */
export type GetV2LogsIdMessageResponse200ApplicationJSONResponseBody3Evals7WorkflowRunRole =
  ClosedEnum<
    typeof GetV2LogsIdMessageResponse200ApplicationJSONResponseBody3Evals7WorkflowRunRole
  >;

export const GetV2LogsIdMessageResponse200ApplicationJSONType = {
  Function: "function",
} as const;
export type GetV2LogsIdMessageResponse200ApplicationJSONType = ClosedEnum<
  typeof GetV2LogsIdMessageResponse200ApplicationJSONType
>;

export type GetV2LogsIdMessageResponse200ApplicationJSONFunction = {
  name: string;
  /**
   * JSON string arguments for the functions
   */
  arguments: string;
};

export type GetV2LogsIdMessageResponse200ApplicationJSONToolCalls = {
  id?: string | undefined;
  index?: number | undefined;
  type: GetV2LogsIdMessageResponse200ApplicationJSONType;
  function: GetV2LogsIdMessageResponse200ApplicationJSONFunction;
};

export type GetV2LogsIdMessageResponse200ApplicationJson1 = {
  /**
   * The role of the prompt message
   */
  role:
    GetV2LogsIdMessageResponse200ApplicationJSONResponseBody3Evals7WorkflowRunRole;
  content?: string | null | undefined;
  toolCalls: Array<GetV2LogsIdMessageResponse200ApplicationJSONToolCalls>;
};

export type GetV2LogsIdEvalsResponseMessage =
  | GetV2LogsIdMessageResponse200ApplicationJson2
  | GetV2LogsIdMessageResponse200ApplicationJson3
  | GetV2LogsIdMessageResponse200ApplicationJson1;

export type GetV2LogsIdEvalsResponseChoices = {
  index: number;
  message?:
    | GetV2LogsIdMessageResponse200ApplicationJson2
    | GetV2LogsIdMessageResponse200ApplicationJson3
    | GetV2LogsIdMessageResponse200ApplicationJson1
    | undefined;
  finishReason?: string | null | undefined;
};

export const GetV2LogsIdEvalsResponseAction = {
  Invoke: "invoke",
} as const;
export type GetV2LogsIdEvalsResponseAction = ClosedEnum<
  typeof GetV2LogsIdEvalsResponseAction
>;

/**
 * The type of the model
 */
export const GetV2LogsIdEvalsResponseModelType = {
  Chat: "chat",
  Completion: "completion",
  Embedding: "embedding",
  Vision: "vision",
  Image: "image",
  Tts: "tts",
  Stt: "stt",
  Rerank: "rerank",
} as const;
/**
 * The type of the model
 */
export type GetV2LogsIdEvalsResponseModelType = ClosedEnum<
  typeof GetV2LogsIdEvalsResponseModelType
>;

/**
 * Only supported on `image` models.
 */
export const GetV2LogsIdEvalsResponse200Format = {
  Url: "url",
  B64Json: "b64_json",
  Text: "text",
  JsonObject: "json_object",
} as const;
/**
 * Only supported on `image` models.
 */
export type GetV2LogsIdEvalsResponse200Format = ClosedEnum<
  typeof GetV2LogsIdEvalsResponse200Format
>;

/**
 * Only supported on `image` models.
 */
export const GetV2LogsIdEvalsResponseQuality = {
  Standard: "standard",
  Hd: "hd",
} as const;
/**
 * Only supported on `image` models.
 */
export type GetV2LogsIdEvalsResponseQuality = ClosedEnum<
  typeof GetV2LogsIdEvalsResponseQuality
>;

export const GetV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody3EvalsType =
  {
    JsonObject: "json_object",
  } as const;
export type GetV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody3EvalsType =
  ClosedEnum<
    typeof GetV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody3EvalsType
  >;

export type GetV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody32 =
  {
    type:
      GetV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody3EvalsType;
  };

export const GetV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody3Type =
  {
    JsonSchema: "json_schema",
  } as const;
export type GetV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody3Type =
  ClosedEnum<
    typeof GetV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody3Type
  >;

export type GetV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody3JSONSchema =
  {
    name: string;
    strict: boolean;
    schema: { [k: string]: any };
  };

export type GetV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody31 =
  {
    type: GetV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody3Type;
    jsonSchema:
      GetV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody3JSONSchema;
  };

/**
 * An object specifying the format that the model must output.
 *
 * @remarks
 *
 *  Setting to `{ "type": "json_schema", "json_schema": {...} }` enables Structured Outputs which ensures the model will match your supplied JSON schema
 *
 *  Setting to `{ "type": "json_object" }` enables JSON mode, which ensures the message the model generates is valid JSON.
 *
 * Important: when using JSON mode, you must also instruct the model to produce JSON yourself via a system or user message. Without this, the model may generate an unending stream of whitespace until the generation reaches the token limit, resulting in a long-running and seemingly "stuck" request. Also note that the message content may be partially cut off if finish_reason="length", which indicates the generation exceeded max_tokens or the conversation exceeded the max context length.
 */
export type GetV2LogsIdEvalsResponseResponseFormat =
  | GetV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody32
  | GetV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody31;

/**
 * The version of photoReal to use. Must be v1 or v2. Only available for `leonardoai` provider
 */
export const GetV2LogsIdEvalsResponsePhotoRealVersion = {
  V1: "v1",
  V2: "v2",
} as const;
/**
 * The version of photoReal to use. Must be v1 or v2. Only available for `leonardoai` provider
 */
export type GetV2LogsIdEvalsResponsePhotoRealVersion = ClosedEnum<
  typeof GetV2LogsIdEvalsResponsePhotoRealVersion
>;

/**
 * The format to return the embeddings
 */
export const GetV2LogsIdEvalsResponseEncodingFormat = {
  Float: "float",
  Base64: "base64",
} as const;
/**
 * The format to return the embeddings
 */
export type GetV2LogsIdEvalsResponseEncodingFormat = ClosedEnum<
  typeof GetV2LogsIdEvalsResponseEncodingFormat
>;

/**
 * Model Parameters: Not all parameters apply to every model
 */
export type GetV2LogsIdEvalsResponseModelParameters = {
  /**
   * Only supported on `chat` and `completion` models.
   */
  temperature?: number | undefined;
  /**
   * Only supported on `chat` and `completion` models.
   */
  maxTokens?: number | undefined;
  /**
   * Only supported on `chat` and `completion` models.
   */
  topK?: number | undefined;
  /**
   * Only supported on `chat` and `completion` models.
   */
  topP?: number | undefined;
  /**
   * Only supported on `chat` and `completion` models.
   */
  frequencyPenalty?: number | undefined;
  /**
   * Only supported on `chat` and `completion` models.
   */
  presencePenalty?: number | undefined;
  /**
   * Only supported on `image` models.
   */
  numImages?: number | undefined;
  /**
   * Best effort deterministic seed for the model. Currently only OpenAI models support these
   */
  seed?: number | undefined;
  /**
   * Only supported on `image` models.
   */
  format?: GetV2LogsIdEvalsResponse200Format | undefined;
  /**
   * Only supported on `image` models.
   */
  dimensions?: string | undefined;
  /**
   * Only supported on `image` models.
   */
  quality?: GetV2LogsIdEvalsResponseQuality | undefined;
  /**
   * Only supported on `image` models.
   */
  style?: string | undefined;
  /**
   * An object specifying the format that the model must output.
   *
   * @remarks
   *
   *  Setting to `{ "type": "json_schema", "json_schema": {...} }` enables Structured Outputs which ensures the model will match your supplied JSON schema
   *
   *  Setting to `{ "type": "json_object" }` enables JSON mode, which ensures the message the model generates is valid JSON.
   *
   * Important: when using JSON mode, you must also instruct the model to produce JSON yourself via a system or user message. Without this, the model may generate an unending stream of whitespace until the generation reaches the token limit, resulting in a long-running and seemingly "stuck" request. Also note that the message content may be partially cut off if finish_reason="length", which indicates the generation exceeded max_tokens or the conversation exceeded the max context length.
   */
  responseFormat?:
    | GetV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody32
    | GetV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody31
    | null
    | undefined;
  /**
   * The version of photoReal to use. Must be v1 or v2. Only available for `leonardoai` provider
   */
  photoRealVersion?: GetV2LogsIdEvalsResponsePhotoRealVersion | undefined;
  /**
   * The format to return the embeddings
   */
  encodingFormat?: GetV2LogsIdEvalsResponseEncodingFormat | undefined;
};

export const GetV2LogsIdEvalsResponseProvider = {
  Cohere: "cohere",
  Openai: "openai",
  Anthropic: "anthropic",
  Huggingface: "huggingface",
  Replicate: "replicate",
  Google: "google",
  GoogleAi: "google-ai",
  Azure: "azure",
  Aws: "aws",
  Anyscale: "anyscale",
  Perplexity: "perplexity",
  Groq: "groq",
  Fal: "fal",
  Leonardoai: "leonardoai",
  Nvidia: "nvidia",
} as const;
export type GetV2LogsIdEvalsResponseProvider = ClosedEnum<
  typeof GetV2LogsIdEvalsResponseProvider
>;

/**
 * The role of the prompt message
 */
export const GetV2LogsIdEvalsResponseRole = {
  System: "system",
  Assistant: "assistant",
  User: "user",
  Exception: "exception",
  Tool: "tool",
  Prompt: "prompt",
  Correction: "correction",
  ExpectedOutput: "expected_output",
} as const;
/**
 * The role of the prompt message
 */
export type GetV2LogsIdEvalsResponseRole = ClosedEnum<
  typeof GetV2LogsIdEvalsResponseRole
>;

export const GetV2LogsId2Response200ApplicationJSONResponseBody3EvalsType = {
  ImageUrl: "image_url",
} as const;
export type GetV2LogsId2Response200ApplicationJSONResponseBody3EvalsType =
  ClosedEnum<
    typeof GetV2LogsId2Response200ApplicationJSONResponseBody3EvalsType
  >;

export type GetV2LogsId2Response200ApplicationJSONImageUrl = {
  /**
   * The orq.ai id of the image
   */
  id?: string | undefined;
  /**
   * Either a URL of the image or the base64 encoded data URI.
   */
  url: string;
  /**
   * Specifies the detail level of the image. Currently only supported with OpenAI models
   */
  detail?: string | undefined;
};

/**
 * The image part of the prompt message. Only supported with vision models.
 */
export type GetV2LogsId2Response200ApplicationJson2 = {
  type: GetV2LogsId2Response200ApplicationJSONResponseBody3EvalsType;
  imageUrl: GetV2LogsId2Response200ApplicationJSONImageUrl;
};

export const GetV2LogsId2Response200ApplicationJSONResponseBody3Type = {
  Text: "text",
} as const;
export type GetV2LogsId2Response200ApplicationJSONResponseBody3Type =
  ClosedEnum<typeof GetV2LogsId2Response200ApplicationJSONResponseBody3Type>;

/**
 * Text content part of a prompt message
 */
export type GetV2LogsId2Response200ApplicationJson1 = {
  type: GetV2LogsId2Response200ApplicationJSONResponseBody3Type;
  text: string;
};

export type GetV2LogsIdContentResponse200ApplicationJson2 =
  | GetV2LogsId2Response200ApplicationJson1
  | GetV2LogsId2Response200ApplicationJson2;

/**
 * The contents of the user message. Either the text content of the message or an array of content parts with a defined type, each can be of type `text` or `image_url` when passing in images. You can pass multiple images by adding multiple `image_url` content parts.
 */
export type GetV2LogsIdEvalsResponseContent =
  | string
  | Array<
    | GetV2LogsId2Response200ApplicationJson1
    | GetV2LogsId2Response200ApplicationJson2
  >;

export const GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody37WorkflowRunDataType =
  {
    Function: "function",
  } as const;
export type GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody37WorkflowRunDataType =
  ClosedEnum<
    typeof GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody37WorkflowRunDataType
  >;

export type GetV2LogsIdEvalsResponse200ApplicationJSONFunction = {
  name: string;
  /**
   * JSON string arguments for the functions
   */
  arguments: string;
};

export type GetV2LogsIdEvalsResponseToolCalls = {
  id?: string | undefined;
  index?: number | undefined;
  type:
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody37WorkflowRunDataType;
  function: GetV2LogsIdEvalsResponse200ApplicationJSONFunction;
};

export type GetV2LogsIdEvalsResponseMessages = {
  /**
   * The role of the prompt message
   */
  role: GetV2LogsIdEvalsResponseRole;
  /**
   * The contents of the user message. Either the text content of the message or an array of content parts with a defined type, each can be of type `text` or `image_url` when passing in images. You can pass multiple images by adding multiple `image_url` content parts.
   */
  content:
    | string
    | Array<
      | GetV2LogsId2Response200ApplicationJson1
      | GetV2LogsId2Response200ApplicationJson2
    >;
  toolCalls?: Array<GetV2LogsIdEvalsResponseToolCalls> | undefined;
  /**
   * The id of the resource
   */
  id?: string | undefined;
};

export type GetV2LogsIdEvalsResponsePromptConfig = {
  stream: boolean;
  model: string;
  /**
   * The id of the resource
   */
  modelDbId: string;
  /**
   * The type of the model
   */
  modelType: GetV2LogsIdEvalsResponseModelType;
  /**
   * Model Parameters: Not all parameters apply to every model
   */
  modelParameters: GetV2LogsIdEvalsResponseModelParameters;
  provider: GetV2LogsIdEvalsResponseProvider;
  messages: Array<GetV2LogsIdEvalsResponseMessages>;
  /**
   * The id of the resource
   */
  integrationId?: string | null | undefined;
  version?: string | undefined;
};

export type GetV2LogsIdEvalsResponseVariables = {
  key: string;
  value?: any | undefined;
  isPii?: boolean | undefined;
};

export type GetV2LogsIdEvalsResponsePerformance = {
  latency: number;
  firstTimeToToken?: number | null | undefined;
  tokensPerSecond?: number | null | undefined;
};

export type GetV2LogsIdEvalsResponsePromptTokensDetails = {
  cachedTokens?: number | undefined;
};

export type GetV2LogsIdEvalsResponseCompletionTokensDetails = {
  reasoningTokens?: number | undefined;
};

export type GetV2LogsIdEvalsResponseUsage = {
  totalTokens?: number | undefined;
  promptTokens?: number | undefined;
  completionTokens?: number | undefined;
  promptTokensDetails?: GetV2LogsIdEvalsResponsePromptTokensDetails | undefined;
  completionTokensDetails?:
    | GetV2LogsIdEvalsResponseCompletionTokensDetails
    | undefined;
};

export type GetV2LogsIdEvalsResponseBilling = {
  totalCost?: number | null | undefined;
  inputCost?: number | null | undefined;
  outputCost?: number | null | undefined;
  billable: boolean;
};

/**
 * The type of the tool. Currently, only `function` is supported.
 */
export const GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody37WorkflowRunType =
  {
    Function: "function",
  } as const;
/**
 * The type of the tool. Currently, only `function` is supported.
 */
export type GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody37WorkflowRunType =
  ClosedEnum<
    typeof GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody37WorkflowRunType
  >;

export const GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody37WorkflowRunDataToolsType =
  {
    Object: "object",
  } as const;
export type GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody37WorkflowRunDataToolsType =
  ClosedEnum<
    typeof GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody37WorkflowRunDataToolsType
  >;

/**
 * The parameters the functions accepts, described as a JSON Schema object.
 *
 * @remarks
 *
 *  Omitting `parameters` defines a function with an empty parameter list.
 */
export type GetV2LogsIdEvalsResponseParameters = {
  type:
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody37WorkflowRunDataToolsType;
  properties: { [k: string]: any };
  required?: Array<string> | undefined;
  additionalProperties?: boolean | undefined;
};

export type GetV2LogsIdEvalsResponseFunction = {
  /**
   * The name of the function to be called. Must be a-z, A-Z, 0-9, or contain underscores and dashes, with a maximum length of 64.
   */
  name: string;
  /**
   * A description of what the function does, used by the model to choose when and how to call the function.
   */
  description?: string | undefined;
  strict?: boolean | undefined;
  /**
   * The parameters the functions accepts, described as a JSON Schema object.
   *
   * @remarks
   *
   *  Omitting `parameters` defines a function with an empty parameter list.
   */
  parameters: GetV2LogsIdEvalsResponseParameters;
};

export type GetV2LogsIdEvalsResponseTools = {
  /**
   * The type of the tool. Currently, only `function` is supported.
   */
  type: GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody37WorkflowRunType;
  function: GetV2LogsIdEvalsResponseFunction;
};

export type GetV2LogsIdEvalsResponsePromptSnippets = {
  /**
   * The id of the resource
   */
  id: string;
  key: string;
  value: string;
};

export type GetV2LogsIdEvalsResponseData = {
  choices?: Array<GetV2LogsIdEvalsResponseChoices> | undefined;
  action: GetV2LogsIdEvalsResponseAction;
  promptConfig: GetV2LogsIdEvalsResponsePromptConfig;
  variables: Array<GetV2LogsIdEvalsResponseVariables>;
  performance?: GetV2LogsIdEvalsResponsePerformance | undefined;
  usage?: GetV2LogsIdEvalsResponseUsage | undefined;
  billing?: GetV2LogsIdEvalsResponseBilling | undefined;
  tools?: Array<GetV2LogsIdEvalsResponseTools> | undefined;
  promptSnippets: Array<GetV2LogsIdEvalsResponsePromptSnippets>;
};

export type GetV2LogsIdEvalsWorkflowRun = {
  id: string;
  /**
   * Metadata for the workflow run
   */
  workflowMetadata?: { [k: string]: any } | undefined;
  /**
   * Input for the workflow run
   */
  workflowInput?: { [k: string]: any } | undefined;
  /**
   * Output for the workflow run
   */
  workflowOutput?: { [k: string]: any } | undefined;
  /**
   * An optional field that is filled if the workflow was triggered by an HTTP request
   */
  requestProperties?: GetV2LogsIdEvalsResponseRequestProperties | undefined;
  startedAt: Date;
  finishedAt?: Date | undefined;
  /**
   * Orquesta product
   */
  productType: GetV2LogsIdEvalsResponseProductType;
  relatedEntities: Array<
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRun1
  >;
  evals: Array<
    | GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody1
    | GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody2
    | GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody3
    | GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody4
  >;
  data: GetV2LogsIdEvalsResponseData;
};

export const GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody37Status = {
  Pending: "pending",
  Completed: "completed",
  Failed: "failed",
} as const;
export type GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody37Status =
  ClosedEnum<
    typeof GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody37Status
  >;

export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals74Type =
  {
    Evaluator: "evaluator",
  } as const;
export type GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals74Type =
  ClosedEnum<
    typeof GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals74Type
  >;

/**
 * Define the relationship between an evaluator and an entity. Can be LLM Evals, Code Evals or HTTP Evals
 */
export type GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals74 =
  {
    type:
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals74Type;
    /**
     * The id of the resource
     */
    evaluatorId: string;
  };

export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals73Type =
  {
    HumanEval: "human_eval",
  } as const;
export type GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals73Type =
  ClosedEnum<
    typeof GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals73Type
  >;

/**
 * Define the relationship between an entity and a human eval, also known as feedback
 */
export type GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals73 =
  {
    type:
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals73Type;
    /**
     * The id of the resource
     */
    humanEvalId: string;
  };

export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals72Type =
  {
    Contact: "contact",
  } as const;
export type GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals72Type =
  ClosedEnum<
    typeof GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals72Type
  >;

/**
 * Define the user set using the SDK
 */
export type GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals72 =
  {
    type:
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals72Type;
    contactId: string;
  };

export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7Type =
  {
    Account: "account",
  } as const;
export type GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7Type =
  ClosedEnum<
    typeof GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7Type
  >;

/**
 * Define the internal account of the system. Also sometimes called user (internal)
 */
export type GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals71 =
  {
    type:
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7Type;
    /**
     * The id of the resource
     */
    accountId: string;
  };

export type GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody37RelatedEntities =
  | GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals71
  | GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals72
  | GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals73
  | GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals74;

export type GetV2LogsIdEvalsResponse7 = {
  type: GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody37Type;
  workflowRun: GetV2LogsIdEvalsWorkflowRun;
  /**
   * The id of the resource
   */
  id: string;
  status: GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody37Status;
  timestamp: Date;
  relatedEntities: Array<
    | GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals71
    | GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals72
    | GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals73
    | GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals74
  >;
};

export const GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody36Type = {
  BertScore: "bert_score",
} as const;
export type GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody36Type =
  ClosedEnum<
    typeof GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody36Type
  >;

export type GetV2LogsIdEvalsResponse200ApplicationJSONResponseBodyValue = {
  f1: number;
  precision: number;
  recall: number;
};

export const GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody36Status = {
  Pending: "pending",
  Completed: "completed",
  Failed: "failed",
} as const;
export type GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody36Status =
  ClosedEnum<
    typeof GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody36Status
  >;

export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals64Type =
  {
    Evaluator: "evaluator",
  } as const;
export type GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals64Type =
  ClosedEnum<
    typeof GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals64Type
  >;

/**
 * Define the relationship between an evaluator and an entity. Can be LLM Evals, Code Evals or HTTP Evals
 */
export type GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals64 =
  {
    type:
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals64Type;
    /**
     * The id of the resource
     */
    evaluatorId: string;
  };

export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals63Type =
  {
    HumanEval: "human_eval",
  } as const;
export type GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals63Type =
  ClosedEnum<
    typeof GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals63Type
  >;

/**
 * Define the relationship between an entity and a human eval, also known as feedback
 */
export type GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals63 =
  {
    type:
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals63Type;
    /**
     * The id of the resource
     */
    humanEvalId: string;
  };

export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals62Type =
  {
    Contact: "contact",
  } as const;
export type GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals62Type =
  ClosedEnum<
    typeof GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals62Type
  >;

/**
 * Define the user set using the SDK
 */
export type GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals62 =
  {
    type:
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals62Type;
    contactId: string;
  };

export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals6Type =
  {
    Account: "account",
  } as const;
export type GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals6Type =
  ClosedEnum<
    typeof GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals6Type
  >;

/**
 * Define the internal account of the system. Also sometimes called user (internal)
 */
export type GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals61 =
  {
    type:
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals6Type;
    /**
     * The id of the resource
     */
    accountId: string;
  };

export type GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody36RelatedEntities =
  | GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals61
  | GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals62
  | GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals63
  | GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals64;

export type GetV2LogsIdEvalsResponse6 = {
  type: GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody36Type;
  value: GetV2LogsIdEvalsResponse200ApplicationJSONResponseBodyValue;
  /**
   * The id of the resource
   */
  id: string;
  status: GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody36Status;
  timestamp: Date;
  relatedEntities: Array<
    | GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals61
    | GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals62
    | GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals63
    | GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals64
  >;
};

export const GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody35Type = {
  RougeN: "rouge_n",
} as const;
export type GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody35Type =
  ClosedEnum<
    typeof GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody35Type
  >;

export type GetV2LogsIdEvalsRouge1 = {
  f1: number;
  precision: number;
  recall: number;
};

export type GetV2LogsIdEvalsRouge2 = {
  f1: number;
  precision: number;
  recall: number;
};

export type GetV2LogsIdEvalsRougeL = {
  f1: number;
  precision: number;
  recall: number;
};

export type GetV2LogsIdEvalsResponse200ApplicationJSONValue = {
  rouge1: GetV2LogsIdEvalsRouge1;
  rouge2: GetV2LogsIdEvalsRouge2;
  rougeL: GetV2LogsIdEvalsRougeL;
};

export const GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody35Status = {
  Pending: "pending",
  Completed: "completed",
  Failed: "failed",
} as const;
export type GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody35Status =
  ClosedEnum<
    typeof GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody35Status
  >;

export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals54Type =
  {
    Evaluator: "evaluator",
  } as const;
export type GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals54Type =
  ClosedEnum<
    typeof GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals54Type
  >;

/**
 * Define the relationship between an evaluator and an entity. Can be LLM Evals, Code Evals or HTTP Evals
 */
export type GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals54 =
  {
    type:
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals54Type;
    /**
     * The id of the resource
     */
    evaluatorId: string;
  };

export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals53Type =
  {
    HumanEval: "human_eval",
  } as const;
export type GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals53Type =
  ClosedEnum<
    typeof GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals53Type
  >;

/**
 * Define the relationship between an entity and a human eval, also known as feedback
 */
export type GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals53 =
  {
    type:
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals53Type;
    /**
     * The id of the resource
     */
    humanEvalId: string;
  };

export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals52Type =
  {
    Contact: "contact",
  } as const;
export type GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals52Type =
  ClosedEnum<
    typeof GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals52Type
  >;

/**
 * Define the user set using the SDK
 */
export type GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals52 =
  {
    type:
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals52Type;
    contactId: string;
  };

export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals5Type =
  {
    Account: "account",
  } as const;
export type GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals5Type =
  ClosedEnum<
    typeof GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals5Type
  >;

/**
 * Define the internal account of the system. Also sometimes called user (internal)
 */
export type GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals51 =
  {
    type:
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals5Type;
    /**
     * The id of the resource
     */
    accountId: string;
  };

export type GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody35RelatedEntities =
  | GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals51
  | GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals52
  | GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals53
  | GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals54;

export type GetV2LogsIdEvalsResponse5 = {
  type: GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody35Type;
  value: GetV2LogsIdEvalsResponse200ApplicationJSONValue;
  /**
   * The id of the resource
   */
  id: string;
  status: GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody35Status;
  timestamp: Date;
  relatedEntities: Array<
    | GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals51
    | GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals52
    | GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals53
    | GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals54
  >;
};

export const GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody34Type = {
  StringArray: "string_array",
} as const;
export type GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody34Type =
  ClosedEnum<
    typeof GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody34Type
  >;

export const GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody34Status = {
  Pending: "pending",
  Completed: "completed",
  Failed: "failed",
} as const;
export type GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody34Status =
  ClosedEnum<
    typeof GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody34Status
  >;

export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals44Type =
  {
    Evaluator: "evaluator",
  } as const;
export type GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals44Type =
  ClosedEnum<
    typeof GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals44Type
  >;

/**
 * Define the relationship between an evaluator and an entity. Can be LLM Evals, Code Evals or HTTP Evals
 */
export type GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals44 =
  {
    type:
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals44Type;
    /**
     * The id of the resource
     */
    evaluatorId: string;
  };

export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals43Type =
  {
    HumanEval: "human_eval",
  } as const;
export type GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals43Type =
  ClosedEnum<
    typeof GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals43Type
  >;

/**
 * Define the relationship between an entity and a human eval, also known as feedback
 */
export type GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals43 =
  {
    type:
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals43Type;
    /**
     * The id of the resource
     */
    humanEvalId: string;
  };

export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals42Type =
  {
    Contact: "contact",
  } as const;
export type GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals42Type =
  ClosedEnum<
    typeof GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals42Type
  >;

/**
 * Define the user set using the SDK
 */
export type GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals42 =
  {
    type:
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals42Type;
    contactId: string;
  };

export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals4Type =
  {
    Account: "account",
  } as const;
export type GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals4Type =
  ClosedEnum<
    typeof GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals4Type
  >;

/**
 * Define the internal account of the system. Also sometimes called user (internal)
 */
export type GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals41 =
  {
    type:
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals4Type;
    /**
     * The id of the resource
     */
    accountId: string;
  };

export type GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody34RelatedEntities =
  | GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals41
  | GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals42
  | GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals43
  | GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals44;

export type GetV2LogsIdEvalsResponse4 = {
  type: GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody34Type;
  values: Array<string>;
  /**
   * The id of the resource
   */
  id: string;
  status: GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody34Status;
  timestamp: Date;
  relatedEntities: Array<
    | GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals41
    | GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals42
    | GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals43
    | GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals44
  >;
};

export const GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody33Type = {
  Boolean: "boolean",
} as const;
export type GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody33Type =
  ClosedEnum<
    typeof GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody33Type
  >;

export const GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody33Status = {
  Pending: "pending",
  Completed: "completed",
  Failed: "failed",
} as const;
export type GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody33Status =
  ClosedEnum<
    typeof GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody33Status
  >;

export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals34Type =
  {
    Evaluator: "evaluator",
  } as const;
export type GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals34Type =
  ClosedEnum<
    typeof GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals34Type
  >;

/**
 * Define the relationship between an evaluator and an entity. Can be LLM Evals, Code Evals or HTTP Evals
 */
export type GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals34 =
  {
    type:
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals34Type;
    /**
     * The id of the resource
     */
    evaluatorId: string;
  };

export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals33Type =
  {
    HumanEval: "human_eval",
  } as const;
export type GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals33Type =
  ClosedEnum<
    typeof GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals33Type
  >;

/**
 * Define the relationship between an entity and a human eval, also known as feedback
 */
export type GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals33 =
  {
    type:
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals33Type;
    /**
     * The id of the resource
     */
    humanEvalId: string;
  };

export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals32Type =
  {
    Contact: "contact",
  } as const;
export type GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals32Type =
  ClosedEnum<
    typeof GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals32Type
  >;

/**
 * Define the user set using the SDK
 */
export type GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals32 =
  {
    type:
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals32Type;
    contactId: string;
  };

export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals3Type =
  {
    Account: "account",
  } as const;
export type GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals3Type =
  ClosedEnum<
    typeof GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals3Type
  >;

/**
 * Define the internal account of the system. Also sometimes called user (internal)
 */
export type GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals31 =
  {
    type:
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals3Type;
    /**
     * The id of the resource
     */
    accountId: string;
  };

export type GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody33RelatedEntities =
  | GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals31
  | GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals32
  | GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals33
  | GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals34;

export type GetV2LogsIdEvalsResponse3 = {
  type: GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody33Type;
  value: boolean;
  /**
   * The id of the resource
   */
  id: string;
  status: GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody33Status;
  timestamp: Date;
  relatedEntities: Array<
    | GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals31
    | GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals32
    | GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals33
    | GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals34
  >;
};

export const GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody32Type = {
  Number: "number",
} as const;
export type GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody32Type =
  ClosedEnum<
    typeof GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody32Type
  >;

export const GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody32Status = {
  Pending: "pending",
  Completed: "completed",
  Failed: "failed",
} as const;
export type GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody32Status =
  ClosedEnum<
    typeof GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody32Status
  >;

export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals24Type =
  {
    Evaluator: "evaluator",
  } as const;
export type GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals24Type =
  ClosedEnum<
    typeof GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals24Type
  >;

/**
 * Define the relationship between an evaluator and an entity. Can be LLM Evals, Code Evals or HTTP Evals
 */
export type GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals4 =
  {
    type:
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals24Type;
    /**
     * The id of the resource
     */
    evaluatorId: string;
  };

export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals23Type =
  {
    HumanEval: "human_eval",
  } as const;
export type GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals23Type =
  ClosedEnum<
    typeof GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals23Type
  >;

/**
 * Define the relationship between an entity and a human eval, also known as feedback
 */
export type GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals3 =
  {
    type:
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals23Type;
    /**
     * The id of the resource
     */
    humanEvalId: string;
  };

export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals22Type =
  {
    Contact: "contact",
  } as const;
export type GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals22Type =
  ClosedEnum<
    typeof GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals22Type
  >;

/**
 * Define the user set using the SDK
 */
export type GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals2 =
  {
    type:
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals22Type;
    contactId: string;
  };

export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals2Type =
  {
    Account: "account",
  } as const;
export type GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals2Type =
  ClosedEnum<
    typeof GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals2Type
  >;

/**
 * Define the internal account of the system. Also sometimes called user (internal)
 */
export type GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals1 =
  {
    type:
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals2Type;
    /**
     * The id of the resource
     */
    accountId: string;
  };

export type GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody32RelatedEntities =
  | GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals1
  | GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals2
  | GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals3
  | GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals4;

export type GetV2LogsIdEvalsResponse2 = {
  type: GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody32Type;
  value: number;
  /**
   * The id of the resource
   */
  id: string;
  status: GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody32Status;
  timestamp: Date;
  relatedEntities: Array<
    | GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals1
    | GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals2
    | GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals3
    | GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals4
  >;
};

export const GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody3Type = {
  String: "string",
} as const;
export type GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody3Type =
  ClosedEnum<
    typeof GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody3Type
  >;

export const GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody3Status = {
  Pending: "pending",
  Completed: "completed",
  Failed: "failed",
} as const;
export type GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody3Status =
  ClosedEnum<
    typeof GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody3Status
  >;

export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals14Type =
  {
    Evaluator: "evaluator",
  } as const;
export type GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals14Type =
  ClosedEnum<
    typeof GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals14Type
  >;

/**
 * Define the relationship between an evaluator and an entity. Can be LLM Evals, Code Evals or HTTP Evals
 */
export type GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody34 =
  {
    type:
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals14Type;
    /**
     * The id of the resource
     */
    evaluatorId: string;
  };

export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals1Type =
  {
    HumanEval: "human_eval",
  } as const;
export type GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals1Type =
  ClosedEnum<
    typeof GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals1Type
  >;

/**
 * Define the relationship between an entity and a human eval, also known as feedback
 */
export type GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody33 =
  {
    type:
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals1Type;
    /**
     * The id of the resource
     */
    humanEvalId: string;
  };

export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3EvalsType =
  {
    Contact: "contact",
  } as const;
export type GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3EvalsType =
  ClosedEnum<
    typeof GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3EvalsType
  >;

/**
 * Define the user set using the SDK
 */
export type GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody32 =
  {
    type:
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3EvalsType;
    contactId: string;
  };

export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals11Type =
  {
    Account: "account",
  } as const;
export type GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals11Type =
  ClosedEnum<
    typeof GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals11Type
  >;

/**
 * Define the internal account of the system. Also sometimes called user (internal)
 */
export type GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody31 =
  {
    type:
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals11Type;
    /**
     * The id of the resource
     */
    accountId: string;
  };

export type GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody3RelatedEntities =
  | GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody31
  | GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody32
  | GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody33
  | GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody34;

export type GetV2LogsIdEvalsResponse1 = {
  type: GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody3Type;
  value: string;
  /**
   * The id of the resource
   */
  id: string;
  status: GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody3Status;
  timestamp: Date;
  relatedEntities: Array<
    | GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody31
    | GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody32
    | GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody33
    | GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody34
  >;
};

export type GetV2LogsIdResponseBodyEvals =
  | GetV2LogsIdEvalsResponse1
  | GetV2LogsIdEvalsResponse2
  | GetV2LogsIdEvalsResponse3
  | GetV2LogsIdEvalsResponse4
  | GetV2LogsIdEvalsResponse5
  | GetV2LogsIdEvalsResponse6
  | GetV2LogsIdEvalsResponse7;

export const GetV2LogsIdResponseBodyProductType = {
  Playgrounds: "playgrounds",
} as const;
export type GetV2LogsIdResponseBodyProductType = ClosedEnum<
  typeof GetV2LogsIdResponseBodyProductType
>;

export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody34Type =
  {
    Account: "account",
  } as const;
export type GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody34Type =
  ClosedEnum<
    typeof GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody34Type
  >;

/**
 * Define the internal account of the system. Also sometimes called user (internal)
 */
export type GetV2LogsIdRelatedEntities4 = {
  type: GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody34Type;
  /**
   * The id of the resource
   */
  accountId: string;
};

export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody33Type =
  {
    PlaygroundCompletion: "playground_completion",
  } as const;
export type GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody33Type =
  ClosedEnum<
    typeof GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody33Type
  >;

export type GetV2LogsIdRelatedEntitiesResponse3 = {
  type: GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody33Type;
  /**
   * The id of the resource
   */
  playgroundCompletionId: string;
};

export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody32Type =
  {
    PlaygroundBlock: "playground_block",
  } as const;
export type GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody32Type =
  ClosedEnum<
    typeof GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody32Type
  >;

export type GetV2LogsIdRelatedEntitiesResponse2 = {
  type: GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody32Type;
  /**
   * The id of the resource
   */
  playgroundBlockId: string;
};

export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Type =
  {
    Playground: "playground",
  } as const;
export type GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Type =
  ClosedEnum<
    typeof GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Type
  >;

export type GetV2LogsIdRelatedEntitiesResponse1 = {
  type: GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Type;
  /**
   * The id of the resource
   */
  playgroundId: string;
};

export type GetV2LogsIdResponseBodyRelatedEntities =
  | GetV2LogsIdRelatedEntitiesResponse1
  | GetV2LogsIdRelatedEntitiesResponse2
  | GetV2LogsIdRelatedEntitiesResponse3
  | GetV2LogsIdRelatedEntities4;

/**
 * The role of the prompt message
 */
export const GetV2LogsIdMessageResponse200ApplicationJSONResponseBody3Role = {
  System: "system",
  Assistant: "assistant",
  User: "user",
  Exception: "exception",
  Tool: "tool",
  Prompt: "prompt",
  Correction: "correction",
  ExpectedOutput: "expected_output",
} as const;
/**
 * The role of the prompt message
 */
export type GetV2LogsIdMessageResponse200ApplicationJSONResponseBody3Role =
  ClosedEnum<
    typeof GetV2LogsIdMessageResponse200ApplicationJSONResponseBody3Role
  >;

export type GetV2LogsIdMessageResponse3 = {
  /**
   * The role of the prompt message
   */
  role: GetV2LogsIdMessageResponse200ApplicationJSONResponseBody3Role;
  url: string;
};

/**
 * The role of the prompt message
 */
export const GetV2LogsIdMessageResponse200ApplicationJSONResponseBodyRole = {
  System: "system",
  Assistant: "assistant",
  User: "user",
  Exception: "exception",
  Tool: "tool",
  Prompt: "prompt",
  Correction: "correction",
  ExpectedOutput: "expected_output",
} as const;
/**
 * The role of the prompt message
 */
export type GetV2LogsIdMessageResponse200ApplicationJSONResponseBodyRole =
  ClosedEnum<
    typeof GetV2LogsIdMessageResponse200ApplicationJSONResponseBodyRole
  >;

export type GetV2LogsIdMessageResponse2 = {
  /**
   * The role of the prompt message
   */
  role: GetV2LogsIdMessageResponse200ApplicationJSONResponseBodyRole;
  content: string | null;
};

/**
 * The role of the prompt message
 */
export const GetV2LogsIdMessageResponse200ApplicationJSONRole = {
  System: "system",
  Assistant: "assistant",
  User: "user",
  Exception: "exception",
  Tool: "tool",
  Prompt: "prompt",
  Correction: "correction",
  ExpectedOutput: "expected_output",
} as const;
/**
 * The role of the prompt message
 */
export type GetV2LogsIdMessageResponse200ApplicationJSONRole = ClosedEnum<
  typeof GetV2LogsIdMessageResponse200ApplicationJSONRole
>;

export const GetV2LogsIdMessageResponseType = {
  Function: "function",
} as const;
export type GetV2LogsIdMessageResponseType = ClosedEnum<
  typeof GetV2LogsIdMessageResponseType
>;

export type GetV2LogsIdMessageResponseFunction = {
  name: string;
  /**
   * JSON string arguments for the functions
   */
  arguments: string;
};

export type GetV2LogsIdMessageResponseToolCalls = {
  id?: string | undefined;
  index?: number | undefined;
  type: GetV2LogsIdMessageResponseType;
  function: GetV2LogsIdMessageResponseFunction;
};

export type GetV2LogsIdMessageResponse1 = {
  /**
   * The role of the prompt message
   */
  role: GetV2LogsIdMessageResponse200ApplicationJSONRole;
  content?: string | null | undefined;
  toolCalls: Array<GetV2LogsIdMessageResponseToolCalls>;
};

export type GetV2LogsIdResponseBodyMessage =
  | GetV2LogsIdMessageResponse2
  | GetV2LogsIdMessageResponse3
  | GetV2LogsIdMessageResponse1;

export type GetV2LogsIdResponseBodyChoices = {
  index: number;
  message?:
    | GetV2LogsIdMessageResponse2
    | GetV2LogsIdMessageResponse3
    | GetV2LogsIdMessageResponse1
    | undefined;
  finishReason?: string | null | undefined;
};

export const GetV2LogsIdResponseBodyAction = {
  Invoke: "invoke",
} as const;
export type GetV2LogsIdResponseBodyAction = ClosedEnum<
  typeof GetV2LogsIdResponseBodyAction
>;

/**
 * The type of the model
 */
export const GetV2LogsIdResponseBodyModelType = {
  Chat: "chat",
  Completion: "completion",
  Embedding: "embedding",
  Vision: "vision",
  Image: "image",
  Tts: "tts",
  Stt: "stt",
  Rerank: "rerank",
} as const;
/**
 * The type of the model
 */
export type GetV2LogsIdResponseBodyModelType = ClosedEnum<
  typeof GetV2LogsIdResponseBodyModelType
>;

/**
 * Only supported on `image` models.
 */
export const GetV2LogsIdResponseBodyFormat = {
  Url: "url",
  B64Json: "b64_json",
  Text: "text",
  JsonObject: "json_object",
} as const;
/**
 * Only supported on `image` models.
 */
export type GetV2LogsIdResponseBodyFormat = ClosedEnum<
  typeof GetV2LogsIdResponseBodyFormat
>;

/**
 * Only supported on `image` models.
 */
export const GetV2LogsIdResponseBodyQuality = {
  Standard: "standard",
  Hd: "hd",
} as const;
/**
 * Only supported on `image` models.
 */
export type GetV2LogsIdResponseBodyQuality = ClosedEnum<
  typeof GetV2LogsIdResponseBodyQuality
>;

export const GetV2LogsIdResponseFormatResponse200ApplicationJSONType = {
  JsonObject: "json_object",
} as const;
export type GetV2LogsIdResponseFormatResponse200ApplicationJSONType =
  ClosedEnum<typeof GetV2LogsIdResponseFormatResponse200ApplicationJSONType>;

export type GetV2LogsIdResponseFormatResponse2 = {
  type: GetV2LogsIdResponseFormatResponse200ApplicationJSONType;
};

export const GetV2LogsIdResponseFormatResponse200Type = {
  JsonSchema: "json_schema",
} as const;
export type GetV2LogsIdResponseFormatResponse200Type = ClosedEnum<
  typeof GetV2LogsIdResponseFormatResponse200Type
>;

export type GetV2LogsIdResponseFormatResponseJsonSchema = {
  name: string;
  strict: boolean;
  schema: { [k: string]: any };
};

export type GetV2LogsIdResponseFormatResponse1 = {
  type: GetV2LogsIdResponseFormatResponse200Type;
  jsonSchema: GetV2LogsIdResponseFormatResponseJsonSchema;
};

/**
 * An object specifying the format that the model must output.
 *
 * @remarks
 *
 *  Setting to `{ "type": "json_schema", "json_schema": {...} }` enables Structured Outputs which ensures the model will match your supplied JSON schema
 *
 *  Setting to `{ "type": "json_object" }` enables JSON mode, which ensures the message the model generates is valid JSON.
 *
 * Important: when using JSON mode, you must also instruct the model to produce JSON yourself via a system or user message. Without this, the model may generate an unending stream of whitespace until the generation reaches the token limit, resulting in a long-running and seemingly "stuck" request. Also note that the message content may be partially cut off if finish_reason="length", which indicates the generation exceeded max_tokens or the conversation exceeded the max context length.
 */
export type GetV2LogsIdResponseBodyResponseFormat =
  | GetV2LogsIdResponseFormatResponse2
  | GetV2LogsIdResponseFormatResponse1;

/**
 * The version of photoReal to use. Must be v1 or v2. Only available for `leonardoai` provider
 */
export const GetV2LogsIdResponseBodyPhotoRealVersion = {
  V1: "v1",
  V2: "v2",
} as const;
/**
 * The version of photoReal to use. Must be v1 or v2. Only available for `leonardoai` provider
 */
export type GetV2LogsIdResponseBodyPhotoRealVersion = ClosedEnum<
  typeof GetV2LogsIdResponseBodyPhotoRealVersion
>;

/**
 * The format to return the embeddings
 */
export const GetV2LogsIdResponseBodyEncodingFormat = {
  Float: "float",
  Base64: "base64",
} as const;
/**
 * The format to return the embeddings
 */
export type GetV2LogsIdResponseBodyEncodingFormat = ClosedEnum<
  typeof GetV2LogsIdResponseBodyEncodingFormat
>;

/**
 * Model Parameters: Not all parameters apply to every model
 */
export type GetV2LogsIdResponseBodyModelParameters = {
  /**
   * Only supported on `chat` and `completion` models.
   */
  temperature?: number | undefined;
  /**
   * Only supported on `chat` and `completion` models.
   */
  maxTokens?: number | undefined;
  /**
   * Only supported on `chat` and `completion` models.
   */
  topK?: number | undefined;
  /**
   * Only supported on `chat` and `completion` models.
   */
  topP?: number | undefined;
  /**
   * Only supported on `chat` and `completion` models.
   */
  frequencyPenalty?: number | undefined;
  /**
   * Only supported on `chat` and `completion` models.
   */
  presencePenalty?: number | undefined;
  /**
   * Only supported on `image` models.
   */
  numImages?: number | undefined;
  /**
   * Best effort deterministic seed for the model. Currently only OpenAI models support these
   */
  seed?: number | undefined;
  /**
   * Only supported on `image` models.
   */
  format?: GetV2LogsIdResponseBodyFormat | undefined;
  /**
   * Only supported on `image` models.
   */
  dimensions?: string | undefined;
  /**
   * Only supported on `image` models.
   */
  quality?: GetV2LogsIdResponseBodyQuality | undefined;
  /**
   * Only supported on `image` models.
   */
  style?: string | undefined;
  /**
   * An object specifying the format that the model must output.
   *
   * @remarks
   *
   *  Setting to `{ "type": "json_schema", "json_schema": {...} }` enables Structured Outputs which ensures the model will match your supplied JSON schema
   *
   *  Setting to `{ "type": "json_object" }` enables JSON mode, which ensures the message the model generates is valid JSON.
   *
   * Important: when using JSON mode, you must also instruct the model to produce JSON yourself via a system or user message. Without this, the model may generate an unending stream of whitespace until the generation reaches the token limit, resulting in a long-running and seemingly "stuck" request. Also note that the message content may be partially cut off if finish_reason="length", which indicates the generation exceeded max_tokens or the conversation exceeded the max context length.
   */
  responseFormat?:
    | GetV2LogsIdResponseFormatResponse2
    | GetV2LogsIdResponseFormatResponse1
    | null
    | undefined;
  /**
   * The version of photoReal to use. Must be v1 or v2. Only available for `leonardoai` provider
   */
  photoRealVersion?: GetV2LogsIdResponseBodyPhotoRealVersion | undefined;
  /**
   * The format to return the embeddings
   */
  encodingFormat?: GetV2LogsIdResponseBodyEncodingFormat | undefined;
};

export const GetV2LogsIdResponseBodyProvider = {
  Cohere: "cohere",
  Openai: "openai",
  Anthropic: "anthropic",
  Huggingface: "huggingface",
  Replicate: "replicate",
  Google: "google",
  GoogleAi: "google-ai",
  Azure: "azure",
  Aws: "aws",
  Anyscale: "anyscale",
  Perplexity: "perplexity",
  Groq: "groq",
  Fal: "fal",
  Leonardoai: "leonardoai",
  Nvidia: "nvidia",
} as const;
export type GetV2LogsIdResponseBodyProvider = ClosedEnum<
  typeof GetV2LogsIdResponseBodyProvider
>;

/**
 * The role of the prompt message
 */
export const GetV2LogsIdResponseBodyRole = {
  System: "system",
  Assistant: "assistant",
  User: "user",
  Exception: "exception",
  Tool: "tool",
  Prompt: "prompt",
  Correction: "correction",
  ExpectedOutput: "expected_output",
} as const;
/**
 * The role of the prompt message
 */
export type GetV2LogsIdResponseBodyRole = ClosedEnum<
  typeof GetV2LogsIdResponseBodyRole
>;

export const GetV2LogsId2Response200ApplicationJSONType = {
  ImageUrl: "image_url",
} as const;
export type GetV2LogsId2Response200ApplicationJSONType = ClosedEnum<
  typeof GetV2LogsId2Response200ApplicationJSONType
>;

export type GetV2LogsId2ResponseImageUrl = {
  /**
   * The orq.ai id of the image
   */
  id?: string | undefined;
  /**
   * Either a URL of the image or the base64 encoded data URI.
   */
  url: string;
  /**
   * Specifies the detail level of the image. Currently only supported with OpenAI models
   */
  detail?: string | undefined;
};

/**
 * The image part of the prompt message. Only supported with vision models.
 */
export type GetV2LogsId2Response2 = {
  type: GetV2LogsId2Response200ApplicationJSONType;
  imageUrl: GetV2LogsId2ResponseImageUrl;
};

export const GetV2LogsId2Response200Type = {
  Text: "text",
} as const;
export type GetV2LogsId2Response200Type = ClosedEnum<
  typeof GetV2LogsId2Response200Type
>;

/**
 * Text content part of a prompt message
 */
export type GetV2LogsId2Response1 = {
  type: GetV2LogsId2Response200Type;
  text: string;
};

export type GetV2LogsIdContentResponse2 =
  | GetV2LogsId2Response1
  | GetV2LogsId2Response2;

/**
 * The contents of the user message. Either the text content of the message or an array of content parts with a defined type, each can be of type `text` or `image_url` when passing in images. You can pass multiple images by adding multiple `image_url` content parts.
 */
export type GetV2LogsIdResponseBodyContent =
  | string
  | Array<GetV2LogsId2Response1 | GetV2LogsId2Response2>;

export const GetV2LogsIdResponseBodyResponse200Type = {
  Function: "function",
} as const;
export type GetV2LogsIdResponseBodyResponse200Type = ClosedEnum<
  typeof GetV2LogsIdResponseBodyResponse200Type
>;

export type GetV2LogsIdResponseBodyResponse200ApplicationJson3Function = {
  name: string;
  /**
   * JSON string arguments for the functions
   */
  arguments: string;
};

export type GetV2LogsIdResponseBodyToolCalls = {
  id?: string | undefined;
  index?: number | undefined;
  type: GetV2LogsIdResponseBodyResponse200Type;
  function: GetV2LogsIdResponseBodyResponse200ApplicationJson3Function;
};

export type GetV2LogsIdResponseBodyMessages = {
  /**
   * The role of the prompt message
   */
  role: GetV2LogsIdResponseBodyRole;
  /**
   * The contents of the user message. Either the text content of the message or an array of content parts with a defined type, each can be of type `text` or `image_url` when passing in images. You can pass multiple images by adding multiple `image_url` content parts.
   */
  content: string | Array<GetV2LogsId2Response1 | GetV2LogsId2Response2>;
  toolCalls?: Array<GetV2LogsIdResponseBodyToolCalls> | undefined;
  /**
   * The id of the resource
   */
  id?: string | undefined;
};

export type GetV2LogsIdResponseBodyPromptConfig = {
  stream: boolean;
  model: string;
  /**
   * The id of the resource
   */
  modelDbId: string;
  /**
   * The type of the model
   */
  modelType: GetV2LogsIdResponseBodyModelType;
  /**
   * Model Parameters: Not all parameters apply to every model
   */
  modelParameters: GetV2LogsIdResponseBodyModelParameters;
  provider: GetV2LogsIdResponseBodyProvider;
  messages: Array<GetV2LogsIdResponseBodyMessages>;
  /**
   * The id of the resource
   */
  integrationId?: string | null | undefined;
  version?: string | undefined;
};

export type ResponseBodyVariables = {
  key: string;
  value?: any | undefined;
  isPii?: boolean | undefined;
};

export type GetV2LogsIdResponseBodyPerformance = {
  latency: number;
  firstTimeToToken?: number | null | undefined;
  tokensPerSecond?: number | null | undefined;
};

export type ResponseBodyPromptTokensDetails = {
  cachedTokens?: number | undefined;
};

export type ResponseBodyCompletionTokensDetails = {
  reasoningTokens?: number | undefined;
};

export type GetV2LogsIdResponseBodyUsage = {
  totalTokens?: number | undefined;
  promptTokens?: number | undefined;
  completionTokens?: number | undefined;
  promptTokensDetails?: ResponseBodyPromptTokensDetails | undefined;
  completionTokensDetails?: ResponseBodyCompletionTokensDetails | undefined;
};

export type ResponseBodyBilling = {
  totalCost?: number | null | undefined;
  inputCost?: number | null | undefined;
  outputCost?: number | null | undefined;
  billable: boolean;
};

export type GetV2LogsIdResponseBodyResponseMetadata = {
  /**
   * Unique identifier for the data source
   */
  datasourceId: string;
  /**
   * Unique identifier for the chunk
   */
  chunkId: string;
  /**
   * Name of the uploaded file during the datasource creation.
   */
  fileName: string;
  /**
   * Reference to the page number the chunk was extracted from. The property will only be available for `application/pdf` type of files. For other file types, the property will be `null`.
   */
  pageNumber?: number | null | undefined;
  /**
   * Type of the uploaded file when the datasource was created.
   */
  fileType: string;
};

export type ResponseBodyDocuments = {
  /**
   * The id of the resource
   */
  id: string;
  /**
   * Text content of the document
   */
  text: string;
  metadata: GetV2LogsIdResponseBodyResponseMetadata;
  /**
   * The score of the document
   */
  score: number;
  /**
   * The rerank score of the document
   */
  rerankScore?: number | undefined;
};

export type GetV2LogsIdResponseBodyRetrievals = {
  /**
   * Unique id of the knowledge base
   */
  knowledgeId: string;
  /**
   * The documents returned
   */
  documents: Array<ResponseBodyDocuments>;
  /**
   * The key of the knowledge base
   */
  knowledgeKey: string;
  /**
   * The query used to search the knowledge base
   */
  query: string;
};

export const GetV2LogsIdConfigurationResponse200Type = {
  Query: "query",
} as const;
export type GetV2LogsIdConfigurationResponse200Type = ClosedEnum<
  typeof GetV2LogsIdConfigurationResponse200Type
>;

export type GetV2LogsIdConfiguration2 = {
  type: GetV2LogsIdConfigurationResponse200Type;
  query: string;
};

export const GetV2LogsIdConfigurationResponseType = {
  LastUserMessage: "last_user_message",
} as const;
export type GetV2LogsIdConfigurationResponseType = ClosedEnum<
  typeof GetV2LogsIdConfigurationResponseType
>;

export type GetV2LogsIdConfiguration1 = {
  type: GetV2LogsIdConfigurationResponseType;
};

/**
 * Defines the configuration settings which can either be for a user message or a text entry.
 */
export type ResponseBodyConfiguration =
  | GetV2LogsIdConfiguration1
  | GetV2LogsIdConfiguration2;

export type ResponseBodyKnowledgeBases = {
  /**
   * The id of the resource
   */
  knowledgeId: string;
  /**
   * Defines the configuration settings which can either be for a user message or a text entry.
   */
  configuration: GetV2LogsIdConfiguration1 | GetV2LogsIdConfiguration2;
};

/**
 * The type of the tool. Currently, only `function` is supported.
 */
export const GetV2LogsIdResponseBodyType = {
  Function: "function",
} as const;
/**
 * The type of the tool. Currently, only `function` is supported.
 */
export type GetV2LogsIdResponseBodyType = ClosedEnum<
  typeof GetV2LogsIdResponseBodyType
>;

export const GetV2LogsIdResponseBodyResponse200ApplicationJson3Type = {
  Object: "object",
} as const;
export type GetV2LogsIdResponseBodyResponse200ApplicationJson3Type = ClosedEnum<
  typeof GetV2LogsIdResponseBodyResponse200ApplicationJson3Type
>;

/**
 * The parameters the functions accepts, described as a JSON Schema object.
 *
 * @remarks
 *
 *  Omitting `parameters` defines a function with an empty parameter list.
 */
export type GetV2LogsIdResponseBodyParameters = {
  type: GetV2LogsIdResponseBodyResponse200ApplicationJson3Type;
  properties: { [k: string]: any };
  required?: Array<string> | undefined;
  additionalProperties?: boolean | undefined;
};

export type GetV2LogsIdResponseBodyFunction = {
  /**
   * The name of the function to be called. Must be a-z, A-Z, 0-9, or contain underscores and dashes, with a maximum length of 64.
   */
  name: string;
  /**
   * A description of what the function does, used by the model to choose when and how to call the function.
   */
  description?: string | undefined;
  strict?: boolean | undefined;
  /**
   * The parameters the functions accepts, described as a JSON Schema object.
   *
   * @remarks
   *
   *  Omitting `parameters` defines a function with an empty parameter list.
   */
  parameters: GetV2LogsIdResponseBodyParameters;
};

export type GetV2LogsIdResponseBodyTools = {
  /**
   * The type of the tool. Currently, only `function` is supported.
   */
  type: GetV2LogsIdResponseBodyType;
  function: GetV2LogsIdResponseBodyFunction;
};

export type ResponseBodyPromptSnippets = {
  /**
   * The id of the resource
   */
  id: string;
  key: string;
  value: string;
};

export type GetV2LogsIdResponseBodyResponseData = {
  choices: Array<GetV2LogsIdResponseBodyChoices>;
  integrationIds?: Array<string> | undefined;
  action: GetV2LogsIdResponseBodyAction;
  promptConfig: GetV2LogsIdResponseBodyPromptConfig;
  variables: Array<ResponseBodyVariables>;
  performance?: GetV2LogsIdResponseBodyPerformance | undefined;
  usage?: GetV2LogsIdResponseBodyUsage | undefined;
  billing: ResponseBodyBilling;
  providerResponse?: any | undefined;
  retrievals?: Array<GetV2LogsIdResponseBodyRetrievals> | undefined;
  knowledgeBases?: Array<ResponseBodyKnowledgeBases> | undefined;
  tools?: Array<GetV2LogsIdResponseBodyTools> | undefined;
  promptSnippets: Array<ResponseBodyPromptSnippets>;
};

/**
 * The schema for the deployment workflow run
 */
export type ResponseBody3 = {
  /**
   * The unique identifier for the workflow run
   */
  id: string;
  /**
   * The unique identifier for the workspace
   */
  workspaceId: string;
  /**
   * Metadata for the workflow run
   */
  workflowMetadata?: { [k: string]: any } | undefined;
  /**
   * Input for the workflow run
   */
  workflowInput?: { [k: string]: any } | undefined;
  /**
   * Output for the workflow run
   */
  workflowOutput?: { [k: string]: any } | undefined;
  /**
   * The optional project_id for the entity of the event
   */
  projectId?: string | undefined;
  /**
   * An optional field that is filled if the workflow was triggered by an HTTP request
   */
  requestProperties?: GetV2LogsIdResponseBodyRequestProperties | undefined;
  startedAt: Date;
  finishedAt?: Date | undefined;
  evals: Array<
    | GetV2LogsIdEvalsResponse1
    | GetV2LogsIdEvalsResponse2
    | GetV2LogsIdEvalsResponse3
    | GetV2LogsIdEvalsResponse4
    | GetV2LogsIdEvalsResponse5
    | GetV2LogsIdEvalsResponse6
    | GetV2LogsIdEvalsResponse7
  >;
  productType: GetV2LogsIdResponseBodyProductType;
  relatedEntities: Array<
    | GetV2LogsIdRelatedEntitiesResponse1
    | GetV2LogsIdRelatedEntitiesResponse2
    | GetV2LogsIdRelatedEntitiesResponse3
    | GetV2LogsIdRelatedEntities4
  >;
  data: GetV2LogsIdResponseBodyResponseData;
};

/**
 * An optional field that is filled if the workflow was triggered by an HTTP request
 */
export type ResponseBodyRequestProperties = {
  source?: string | undefined;
  location?: string | undefined;
  latitude?: string | undefined;
  longitude?: string | undefined;
  responseTime?: number | undefined;
  metadata?: { [k: string]: any } | undefined;
  status?: number | undefined;
  context?: { [k: string]: any } | undefined;
  extraParams?: { [k: string]: any } | undefined;
};

export const GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody27Type = {
  LlmEval: "llm_eval",
} as const;
export type GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody27Type =
  ClosedEnum<
    typeof GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody27Type
  >;

/**
 * An optional field that is filled if the workflow was triggered by an HTTP request
 */
export type GetV2LogsIdEvalsRequestProperties = {
  source?: string | undefined;
  location?: string | undefined;
  latitude?: string | undefined;
  longitude?: string | undefined;
  responseTime?: number | undefined;
  metadata?: { [k: string]: any } | undefined;
  status?: number | undefined;
  context?: { [k: string]: any } | undefined;
  extraParams?: { [k: string]: any } | undefined;
};

/**
 * Orquesta product
 */
export const GetV2LogsIdEvalsProductType = {
  Remoteconfigs: "remoteconfigs",
  Deployments: "deployments",
  Experiments: "experiments",
  Playgrounds: "playgrounds",
  LlmEvaluator: "llm_evaluator",
  Knowledge: "knowledge",
  Router: "router",
  Workflows: "workflows",
} as const;
/**
 * Orquesta product
 */
export type GetV2LogsIdEvalsProductType = ClosedEnum<
  typeof GetV2LogsIdEvalsProductType
>;

export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRunType =
  {
    Evaluator: "evaluator",
  } as const;
export type GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRunType =
  ClosedEnum<
    typeof GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRunType
  >;

/**
 * Define the relationship between an evaluator and an entity. Can be LLM Evals, Code Evals or HTTP Evals
 */
export type GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRun1 =
  {
    type:
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRunType;
    /**
     * The id of the resource
     */
    evaluatorId: string;
  };

export type GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody27WorkflowRunRelatedEntities =
  GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRun1;

export const GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody2Evals7WorkflowRun4Type =
  {
    StringArray: "string_array",
  } as const;
export type GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody2Evals7WorkflowRun4Type =
  ClosedEnum<
    typeof GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody2Evals7WorkflowRun4Type
  >;

export const GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody2Evals7WorkflowRun4Status =
  {
    Pending: "pending",
    Completed: "completed",
    Failed: "failed",
  } as const;
export type GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody2Evals7WorkflowRun4Status =
  ClosedEnum<
    typeof GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody2Evals7WorkflowRun4Status
  >;

export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRunEvals44Type =
  {
    Evaluator: "evaluator",
  } as const;
export type GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRunEvals44Type =
  ClosedEnum<
    typeof GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRunEvals44Type
  >;

/**
 * Define the relationship between an evaluator and an entity. Can be LLM Evals, Code Evals or HTTP Evals
 */
export type GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRunEvals44 =
  {
    type:
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRunEvals44Type;
    /**
     * The id of the resource
     */
    evaluatorId: string;
  };

export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRunEvals43Type =
  {
    HumanEval: "human_eval",
  } as const;
export type GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRunEvals43Type =
  ClosedEnum<
    typeof GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRunEvals43Type
  >;

/**
 * Define the relationship between an entity and a human eval, also known as feedback
 */
export type GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRunEvals43 =
  {
    type:
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRunEvals43Type;
    /**
     * The id of the resource
     */
    humanEvalId: string;
  };

export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRunEvals42Type =
  {
    Contact: "contact",
  } as const;
export type GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRunEvals42Type =
  ClosedEnum<
    typeof GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRunEvals42Type
  >;

/**
 * Define the user set using the SDK
 */
export type GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRunEvals42 =
  {
    type:
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRunEvals42Type;
    contactId: string;
  };

export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRunEvals4Type =
  {
    Account: "account",
  } as const;
export type GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRunEvals4Type =
  ClosedEnum<
    typeof GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRunEvals4Type
  >;

/**
 * Define the internal account of the system. Also sometimes called user (internal)
 */
export type GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRunEvals41 =
  {
    type:
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRunEvals4Type;
    /**
     * The id of the resource
     */
    accountId: string;
  };

export type GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody2Evals7WorkflowRun4RelatedEntities =
  | GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRunEvals41
  | GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRunEvals42
  | GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRunEvals43
  | GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRunEvals44;

export type GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody24 = {
  type:
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody2Evals7WorkflowRun4Type;
  values: Array<string>;
  /**
   * The id of the resource
   */
  id: string;
  status:
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody2Evals7WorkflowRun4Status;
  timestamp: Date;
  relatedEntities: Array<
    | GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRunEvals41
    | GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRunEvals42
    | GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRunEvals43
    | GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRunEvals44
  >;
};

export const GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody2Evals7WorkflowRunType =
  {
    Boolean: "boolean",
  } as const;
export type GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody2Evals7WorkflowRunType =
  ClosedEnum<
    typeof GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody2Evals7WorkflowRunType
  >;

export const GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody2Evals7WorkflowRunStatus =
  {
    Pending: "pending",
    Completed: "completed",
    Failed: "failed",
  } as const;
export type GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody2Evals7WorkflowRunStatus =
  ClosedEnum<
    typeof GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody2Evals7WorkflowRunStatus
  >;

export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRunEvals34Type =
  {
    Evaluator: "evaluator",
  } as const;
export type GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRunEvals34Type =
  ClosedEnum<
    typeof GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRunEvals34Type
  >;

/**
 * Define the relationship between an evaluator and an entity. Can be LLM Evals, Code Evals or HTTP Evals
 */
export type GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRunEvals4 =
  {
    type:
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRunEvals34Type;
    /**
     * The id of the resource
     */
    evaluatorId: string;
  };

export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRunEvals33Type =
  {
    HumanEval: "human_eval",
  } as const;
export type GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRunEvals33Type =
  ClosedEnum<
    typeof GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRunEvals33Type
  >;

/**
 * Define the relationship between an entity and a human eval, also known as feedback
 */
export type GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRunEvals3 =
  {
    type:
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRunEvals33Type;
    /**
     * The id of the resource
     */
    humanEvalId: string;
  };

export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRunEvals32Type =
  {
    Contact: "contact",
  } as const;
export type GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRunEvals32Type =
  ClosedEnum<
    typeof GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRunEvals32Type
  >;

/**
 * Define the user set using the SDK
 */
export type GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRunEvals2 =
  {
    type:
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRunEvals32Type;
    contactId: string;
  };

export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRunEvals3Type =
  {
    Account: "account",
  } as const;
export type GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRunEvals3Type =
  ClosedEnum<
    typeof GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRunEvals3Type
  >;

/**
 * Define the internal account of the system. Also sometimes called user (internal)
 */
export type GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRunEvals31 =
  {
    type:
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRunEvals3Type;
    /**
     * The id of the resource
     */
    accountId: string;
  };

export type GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody2Evals7WorkflowRunRelatedEntities =
  | GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRunEvals31
  | GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRunEvals2
  | GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRunEvals3
  | GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRunEvals4;

export type GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody23 = {
  type:
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody2Evals7WorkflowRunType;
  value: boolean;
  /**
   * The id of the resource
   */
  id: string;
  status:
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody2Evals7WorkflowRunStatus;
  timestamp: Date;
  relatedEntities: Array<
    | GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRunEvals31
    | GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRunEvals2
    | GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRunEvals3
    | GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRunEvals4
  >;
};

export const GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody2Evals7Type =
  {
    Number: "number",
  } as const;
export type GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody2Evals7Type =
  ClosedEnum<
    typeof GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody2Evals7Type
  >;

export const GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody2Evals7Status =
  {
    Pending: "pending",
    Completed: "completed",
    Failed: "failed",
  } as const;
export type GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody2Evals7Status =
  ClosedEnum<
    typeof GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody2Evals7Status
  >;

export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRunEvals24Type =
  {
    Evaluator: "evaluator",
  } as const;
export type GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRunEvals24Type =
  ClosedEnum<
    typeof GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRunEvals24Type
  >;

/**
 * Define the relationship between an evaluator and an entity. Can be LLM Evals, Code Evals or HTTP Evals
 */
export type GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRun4 =
  {
    type:
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRunEvals24Type;
    /**
     * The id of the resource
     */
    evaluatorId: string;
  };

export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRunEvals23Type =
  {
    HumanEval: "human_eval",
  } as const;
export type GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRunEvals23Type =
  ClosedEnum<
    typeof GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRunEvals23Type
  >;

/**
 * Define the relationship between an entity and a human eval, also known as feedback
 */
export type GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRun3 =
  {
    type:
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRunEvals23Type;
    /**
     * The id of the resource
     */
    humanEvalId: string;
  };

export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRunEvals22Type =
  {
    Contact: "contact",
  } as const;
export type GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRunEvals22Type =
  ClosedEnum<
    typeof GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRunEvals22Type
  >;

/**
 * Define the user set using the SDK
 */
export type GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRun2 =
  {
    type:
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRunEvals22Type;
    contactId: string;
  };

export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRunEvals2Type =
  {
    Account: "account",
  } as const;
export type GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRunEvals2Type =
  ClosedEnum<
    typeof GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRunEvals2Type
  >;

/**
 * Define the internal account of the system. Also sometimes called user (internal)
 */
export type GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRunEvals1 =
  {
    type:
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRunEvals2Type;
    /**
     * The id of the resource
     */
    accountId: string;
  };

export type GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody2Evals7RelatedEntities =
  | GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRunEvals1
  | GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRun2
  | GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRun3
  | GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRun4;

export type GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody22 = {
  type: GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody2Evals7Type;
  value: number;
  /**
   * The id of the resource
   */
  id: string;
  status: GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody2Evals7Status;
  timestamp: Date;
  relatedEntities: Array<
    | GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRunEvals1
    | GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRun2
    | GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRun3
    | GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRun4
  >;
};

export const GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody2EvalsType =
  {
    String: "string",
  } as const;
export type GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody2EvalsType =
  ClosedEnum<
    typeof GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody2EvalsType
  >;

export const GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody2EvalsStatus =
  {
    Pending: "pending",
    Completed: "completed",
    Failed: "failed",
  } as const;
export type GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody2EvalsStatus =
  ClosedEnum<
    typeof GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody2EvalsStatus
  >;

export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRunEvals14Type =
  {
    Evaluator: "evaluator",
  } as const;
export type GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRunEvals14Type =
  ClosedEnum<
    typeof GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRunEvals14Type
  >;

/**
 * Define the relationship between an evaluator and an entity. Can be LLM Evals, Code Evals or HTTP Evals
 */
export type GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRunEvals14 =
  {
    type:
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRunEvals14Type;
    /**
     * The id of the resource
     */
    evaluatorId: string;
  };

export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRunEvals1Type =
  {
    HumanEval: "human_eval",
  } as const;
export type GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRunEvals1Type =
  ClosedEnum<
    typeof GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRunEvals1Type
  >;

/**
 * Define the relationship between an entity and a human eval, also known as feedback
 */
export type GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRunEvals13 =
  {
    type:
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRunEvals1Type;
    /**
     * The id of the resource
     */
    humanEvalId: string;
  };

export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRunEvalsType =
  {
    Contact: "contact",
  } as const;
export type GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRunEvalsType =
  ClosedEnum<
    typeof GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRunEvalsType
  >;

/**
 * Define the user set using the SDK
 */
export type GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRunEvals12 =
  {
    type:
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRunEvalsType;
    contactId: string;
  };

export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRunEvals11Type =
  {
    Account: "account",
  } as const;
export type GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRunEvals11Type =
  ClosedEnum<
    typeof GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRunEvals11Type
  >;

/**
 * Define the internal account of the system. Also sometimes called user (internal)
 */
export type GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRunEvals11 =
  {
    type:
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRunEvals11Type;
    /**
     * The id of the resource
     */
    accountId: string;
  };

export type GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody2EvalsRelatedEntities =
  | GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRunEvals11
  | GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRunEvals12
  | GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRunEvals13
  | GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRunEvals14;

export type GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody21 = {
  type: GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody2EvalsType;
  value: string;
  /**
   * The id of the resource
   */
  id: string;
  status: GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody2EvalsStatus;
  timestamp: Date;
  relatedEntities: Array<
    | GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRunEvals11
    | GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRunEvals12
    | GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRunEvals13
    | GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRunEvals14
  >;
};

export type GetV2LogsIdEvalsEvals =
  | GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody21
  | GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody22
  | GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody23
  | GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody24;

/**
 * The role of the prompt message
 */
export const GetV2LogsIdMessageResponse200ApplicationJSONResponseBody2Role = {
  System: "system",
  Assistant: "assistant",
  User: "user",
  Exception: "exception",
  Tool: "tool",
  Prompt: "prompt",
  Correction: "correction",
  ExpectedOutput: "expected_output",
} as const;
/**
 * The role of the prompt message
 */
export type GetV2LogsIdMessageResponse200ApplicationJSONResponseBody2Role =
  ClosedEnum<
    typeof GetV2LogsIdMessageResponse200ApplicationJSONResponseBody2Role
  >;

export type GetV2LogsIdMessageResponse200ApplicationJSONResponseBody3 = {
  /**
   * The role of the prompt message
   */
  role: GetV2LogsIdMessageResponse200ApplicationJSONResponseBody2Role;
  url: string;
};

/**
 * The role of the prompt message
 */
export const GetV2LogsIdMessageResponse200ApplicationJSONResponseBody2Evals7Role =
  {
    System: "system",
    Assistant: "assistant",
    User: "user",
    Exception: "exception",
    Tool: "tool",
    Prompt: "prompt",
    Correction: "correction",
    ExpectedOutput: "expected_output",
  } as const;
/**
 * The role of the prompt message
 */
export type GetV2LogsIdMessageResponse200ApplicationJSONResponseBody2Evals7Role =
  ClosedEnum<
    typeof GetV2LogsIdMessageResponse200ApplicationJSONResponseBody2Evals7Role
  >;

export type GetV2LogsIdMessageResponse200ApplicationJSONResponseBody2 = {
  /**
   * The role of the prompt message
   */
  role: GetV2LogsIdMessageResponse200ApplicationJSONResponseBody2Evals7Role;
  content: string | null;
};

/**
 * The role of the prompt message
 */
export const GetV2LogsIdMessageResponse200ApplicationJSONResponseBody2EvalsRole =
  {
    System: "system",
    Assistant: "assistant",
    User: "user",
    Exception: "exception",
    Tool: "tool",
    Prompt: "prompt",
    Correction: "correction",
    ExpectedOutput: "expected_output",
  } as const;
/**
 * The role of the prompt message
 */
export type GetV2LogsIdMessageResponse200ApplicationJSONResponseBody2EvalsRole =
  ClosedEnum<
    typeof GetV2LogsIdMessageResponse200ApplicationJSONResponseBody2EvalsRole
  >;

export const GetV2LogsIdMessageResponse200ApplicationJSONResponseBodyType = {
  Function: "function",
} as const;
export type GetV2LogsIdMessageResponse200ApplicationJSONResponseBodyType =
  ClosedEnum<
    typeof GetV2LogsIdMessageResponse200ApplicationJSONResponseBodyType
  >;

export type GetV2LogsIdMessageResponse200ApplicationJSONResponseBodyFunction = {
  name: string;
  /**
   * JSON string arguments for the functions
   */
  arguments: string;
};

export type GetV2LogsIdMessageResponse200ApplicationJSONResponseBodyToolCalls =
  {
    id?: string | undefined;
    index?: number | undefined;
    type: GetV2LogsIdMessageResponse200ApplicationJSONResponseBodyType;
    function: GetV2LogsIdMessageResponse200ApplicationJSONResponseBodyFunction;
  };

export type GetV2LogsIdMessageResponse200ApplicationJSONResponseBody1 = {
  /**
   * The role of the prompt message
   */
  role: GetV2LogsIdMessageResponse200ApplicationJSONResponseBody2EvalsRole;
  content?: string | null | undefined;
  toolCalls: Array<
    GetV2LogsIdMessageResponse200ApplicationJSONResponseBodyToolCalls
  >;
};

export type GetV2LogsIdEvalsMessage =
  | GetV2LogsIdMessageResponse200ApplicationJSONResponseBody2
  | GetV2LogsIdMessageResponse200ApplicationJSONResponseBody3
  | GetV2LogsIdMessageResponse200ApplicationJSONResponseBody1;

export type GetV2LogsIdEvalsChoices = {
  index: number;
  message?:
    | GetV2LogsIdMessageResponse200ApplicationJSONResponseBody2
    | GetV2LogsIdMessageResponse200ApplicationJSONResponseBody3
    | GetV2LogsIdMessageResponse200ApplicationJSONResponseBody1
    | undefined;
  finishReason?: string | null | undefined;
};

export const GetV2LogsIdEvalsAction = {
  Invoke: "invoke",
} as const;
export type GetV2LogsIdEvalsAction = ClosedEnum<typeof GetV2LogsIdEvalsAction>;

/**
 * The type of the model
 */
export const GetV2LogsIdEvalsModelType = {
  Chat: "chat",
  Completion: "completion",
  Embedding: "embedding",
  Vision: "vision",
  Image: "image",
  Tts: "tts",
  Stt: "stt",
  Rerank: "rerank",
} as const;
/**
 * The type of the model
 */
export type GetV2LogsIdEvalsModelType = ClosedEnum<
  typeof GetV2LogsIdEvalsModelType
>;

/**
 * Only supported on `image` models.
 */
export const GetV2LogsIdEvalsFormat = {
  Url: "url",
  B64Json: "b64_json",
  Text: "text",
  JsonObject: "json_object",
} as const;
/**
 * Only supported on `image` models.
 */
export type GetV2LogsIdEvalsFormat = ClosedEnum<typeof GetV2LogsIdEvalsFormat>;

/**
 * Only supported on `image` models.
 */
export const GetV2LogsIdEvalsQuality = {
  Standard: "standard",
  Hd: "hd",
} as const;
/**
 * Only supported on `image` models.
 */
export type GetV2LogsIdEvalsQuality = ClosedEnum<
  typeof GetV2LogsIdEvalsQuality
>;

export const GetV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody2Evals7Type =
  {
    JsonObject: "json_object",
  } as const;
export type GetV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody2Evals7Type =
  ClosedEnum<
    typeof GetV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody2Evals7Type
  >;

export type GetV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody22 =
  {
    type:
      GetV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody2Evals7Type;
  };

export const GetV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody2EvalsType =
  {
    JsonSchema: "json_schema",
  } as const;
export type GetV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody2EvalsType =
  ClosedEnum<
    typeof GetV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody2EvalsType
  >;

export type GetV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody2JSONSchema =
  {
    name: string;
    strict: boolean;
    schema: { [k: string]: any };
  };

export type GetV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody21 =
  {
    type:
      GetV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody2EvalsType;
    jsonSchema:
      GetV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody2JSONSchema;
  };

/**
 * An object specifying the format that the model must output.
 *
 * @remarks
 *
 *  Setting to `{ "type": "json_schema", "json_schema": {...} }` enables Structured Outputs which ensures the model will match your supplied JSON schema
 *
 *  Setting to `{ "type": "json_object" }` enables JSON mode, which ensures the message the model generates is valid JSON.
 *
 * Important: when using JSON mode, you must also instruct the model to produce JSON yourself via a system or user message. Without this, the model may generate an unending stream of whitespace until the generation reaches the token limit, resulting in a long-running and seemingly "stuck" request. Also note that the message content may be partially cut off if finish_reason="length", which indicates the generation exceeded max_tokens or the conversation exceeded the max context length.
 */
export type GetV2LogsIdEvalsResponseFormat =
  | GetV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody22
  | GetV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody21;

/**
 * The version of photoReal to use. Must be v1 or v2. Only available for `leonardoai` provider
 */
export const GetV2LogsIdEvalsPhotoRealVersion = {
  V1: "v1",
  V2: "v2",
} as const;
/**
 * The version of photoReal to use. Must be v1 or v2. Only available for `leonardoai` provider
 */
export type GetV2LogsIdEvalsPhotoRealVersion = ClosedEnum<
  typeof GetV2LogsIdEvalsPhotoRealVersion
>;

/**
 * The format to return the embeddings
 */
export const GetV2LogsIdEvalsEncodingFormat = {
  Float: "float",
  Base64: "base64",
} as const;
/**
 * The format to return the embeddings
 */
export type GetV2LogsIdEvalsEncodingFormat = ClosedEnum<
  typeof GetV2LogsIdEvalsEncodingFormat
>;

/**
 * Model Parameters: Not all parameters apply to every model
 */
export type GetV2LogsIdEvalsModelParameters = {
  /**
   * Only supported on `chat` and `completion` models.
   */
  temperature?: number | undefined;
  /**
   * Only supported on `chat` and `completion` models.
   */
  maxTokens?: number | undefined;
  /**
   * Only supported on `chat` and `completion` models.
   */
  topK?: number | undefined;
  /**
   * Only supported on `chat` and `completion` models.
   */
  topP?: number | undefined;
  /**
   * Only supported on `chat` and `completion` models.
   */
  frequencyPenalty?: number | undefined;
  /**
   * Only supported on `chat` and `completion` models.
   */
  presencePenalty?: number | undefined;
  /**
   * Only supported on `image` models.
   */
  numImages?: number | undefined;
  /**
   * Best effort deterministic seed for the model. Currently only OpenAI models support these
   */
  seed?: number | undefined;
  /**
   * Only supported on `image` models.
   */
  format?: GetV2LogsIdEvalsFormat | undefined;
  /**
   * Only supported on `image` models.
   */
  dimensions?: string | undefined;
  /**
   * Only supported on `image` models.
   */
  quality?: GetV2LogsIdEvalsQuality | undefined;
  /**
   * Only supported on `image` models.
   */
  style?: string | undefined;
  /**
   * An object specifying the format that the model must output.
   *
   * @remarks
   *
   *  Setting to `{ "type": "json_schema", "json_schema": {...} }` enables Structured Outputs which ensures the model will match your supplied JSON schema
   *
   *  Setting to `{ "type": "json_object" }` enables JSON mode, which ensures the message the model generates is valid JSON.
   *
   * Important: when using JSON mode, you must also instruct the model to produce JSON yourself via a system or user message. Without this, the model may generate an unending stream of whitespace until the generation reaches the token limit, resulting in a long-running and seemingly "stuck" request. Also note that the message content may be partially cut off if finish_reason="length", which indicates the generation exceeded max_tokens or the conversation exceeded the max context length.
   */
  responseFormat?:
    | GetV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody22
    | GetV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody21
    | null
    | undefined;
  /**
   * The version of photoReal to use. Must be v1 or v2. Only available for `leonardoai` provider
   */
  photoRealVersion?: GetV2LogsIdEvalsPhotoRealVersion | undefined;
  /**
   * The format to return the embeddings
   */
  encodingFormat?: GetV2LogsIdEvalsEncodingFormat | undefined;
};

export const GetV2LogsIdEvalsProvider = {
  Cohere: "cohere",
  Openai: "openai",
  Anthropic: "anthropic",
  Huggingface: "huggingface",
  Replicate: "replicate",
  Google: "google",
  GoogleAi: "google-ai",
  Azure: "azure",
  Aws: "aws",
  Anyscale: "anyscale",
  Perplexity: "perplexity",
  Groq: "groq",
  Fal: "fal",
  Leonardoai: "leonardoai",
  Nvidia: "nvidia",
} as const;
export type GetV2LogsIdEvalsProvider = ClosedEnum<
  typeof GetV2LogsIdEvalsProvider
>;

/**
 * The role of the prompt message
 */
export const GetV2LogsIdEvalsRole = {
  System: "system",
  Assistant: "assistant",
  User: "user",
  Exception: "exception",
  Tool: "tool",
  Prompt: "prompt",
  Correction: "correction",
  ExpectedOutput: "expected_output",
} as const;
/**
 * The role of the prompt message
 */
export type GetV2LogsIdEvalsRole = ClosedEnum<typeof GetV2LogsIdEvalsRole>;

export const GetV2LogsId2Response200ApplicationJSONResponseBody2EvalsType = {
  ImageUrl: "image_url",
} as const;
export type GetV2LogsId2Response200ApplicationJSONResponseBody2EvalsType =
  ClosedEnum<
    typeof GetV2LogsId2Response200ApplicationJSONResponseBody2EvalsType
  >;

export type GetV2LogsId2Response200ApplicationJSONResponseBodyImageUrl = {
  /**
   * The orq.ai id of the image
   */
  id?: string | undefined;
  /**
   * Either a URL of the image or the base64 encoded data URI.
   */
  url: string;
  /**
   * Specifies the detail level of the image. Currently only supported with OpenAI models
   */
  detail?: string | undefined;
};

/**
 * The image part of the prompt message. Only supported with vision models.
 */
export type GetV2LogsId2Response200ApplicationJSONResponseBody2 = {
  type: GetV2LogsId2Response200ApplicationJSONResponseBody2EvalsType;
  imageUrl: GetV2LogsId2Response200ApplicationJSONResponseBodyImageUrl;
};

export const GetV2LogsId2Response200ApplicationJSONResponseBody2Type = {
  Text: "text",
} as const;
export type GetV2LogsId2Response200ApplicationJSONResponseBody2Type =
  ClosedEnum<typeof GetV2LogsId2Response200ApplicationJSONResponseBody2Type>;

/**
 * Text content part of a prompt message
 */
export type GetV2LogsId2Response200ApplicationJSONResponseBody1 = {
  type: GetV2LogsId2Response200ApplicationJSONResponseBody2Type;
  text: string;
};

export type GetV2LogsIdContentResponse200ApplicationJSONResponseBody2 =
  | GetV2LogsId2Response200ApplicationJSONResponseBody1
  | GetV2LogsId2Response200ApplicationJSONResponseBody2;

/**
 * The contents of the user message. Either the text content of the message or an array of content parts with a defined type, each can be of type `text` or `image_url` when passing in images. You can pass multiple images by adding multiple `image_url` content parts.
 */
export type GetV2LogsIdEvalsContent =
  | string
  | Array<
    | GetV2LogsId2Response200ApplicationJSONResponseBody1
    | GetV2LogsId2Response200ApplicationJSONResponseBody2
  >;

export const GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody27WorkflowRunDataType =
  {
    Function: "function",
  } as const;
export type GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody27WorkflowRunDataType =
  ClosedEnum<
    typeof GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody27WorkflowRunDataType
  >;

export type GetV2LogsIdEvalsResponse200ApplicationJSONResponseBodyFunction = {
  name: string;
  /**
   * JSON string arguments for the functions
   */
  arguments: string;
};

export type GetV2LogsIdEvalsToolCalls = {
  id?: string | undefined;
  index?: number | undefined;
  type:
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody27WorkflowRunDataType;
  function: GetV2LogsIdEvalsResponse200ApplicationJSONResponseBodyFunction;
};

export type GetV2LogsIdEvalsMessages = {
  /**
   * The role of the prompt message
   */
  role: GetV2LogsIdEvalsRole;
  /**
   * The contents of the user message. Either the text content of the message or an array of content parts with a defined type, each can be of type `text` or `image_url` when passing in images. You can pass multiple images by adding multiple `image_url` content parts.
   */
  content:
    | string
    | Array<
      | GetV2LogsId2Response200ApplicationJSONResponseBody1
      | GetV2LogsId2Response200ApplicationJSONResponseBody2
    >;
  toolCalls?: Array<GetV2LogsIdEvalsToolCalls> | undefined;
  /**
   * The id of the resource
   */
  id?: string | undefined;
};

export type GetV2LogsIdEvalsPromptConfig = {
  stream: boolean;
  model: string;
  /**
   * The id of the resource
   */
  modelDbId: string;
  /**
   * The type of the model
   */
  modelType: GetV2LogsIdEvalsModelType;
  /**
   * Model Parameters: Not all parameters apply to every model
   */
  modelParameters: GetV2LogsIdEvalsModelParameters;
  provider: GetV2LogsIdEvalsProvider;
  messages: Array<GetV2LogsIdEvalsMessages>;
  /**
   * The id of the resource
   */
  integrationId?: string | null | undefined;
  version?: string | undefined;
};

export type GetV2LogsIdEvalsVariables = {
  key: string;
  value?: any | undefined;
  isPii?: boolean | undefined;
};

export type GetV2LogsIdEvalsPerformance = {
  latency: number;
  firstTimeToToken?: number | null | undefined;
  tokensPerSecond?: number | null | undefined;
};

export type GetV2LogsIdEvalsPromptTokensDetails = {
  cachedTokens?: number | undefined;
};

export type GetV2LogsIdEvalsCompletionTokensDetails = {
  reasoningTokens?: number | undefined;
};

export type GetV2LogsIdEvalsUsage = {
  totalTokens?: number | undefined;
  promptTokens?: number | undefined;
  completionTokens?: number | undefined;
  promptTokensDetails?: GetV2LogsIdEvalsPromptTokensDetails | undefined;
  completionTokensDetails?: GetV2LogsIdEvalsCompletionTokensDetails | undefined;
};

export type GetV2LogsIdEvalsBilling = {
  totalCost?: number | null | undefined;
  inputCost?: number | null | undefined;
  outputCost?: number | null | undefined;
  billable: boolean;
};

/**
 * The type of the tool. Currently, only `function` is supported.
 */
export const GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody27WorkflowRunType =
  {
    Function: "function",
  } as const;
/**
 * The type of the tool. Currently, only `function` is supported.
 */
export type GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody27WorkflowRunType =
  ClosedEnum<
    typeof GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody27WorkflowRunType
  >;

export const GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody27WorkflowRunDataToolsType =
  {
    Object: "object",
  } as const;
export type GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody27WorkflowRunDataToolsType =
  ClosedEnum<
    typeof GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody27WorkflowRunDataToolsType
  >;

/**
 * The parameters the functions accepts, described as a JSON Schema object.
 *
 * @remarks
 *
 *  Omitting `parameters` defines a function with an empty parameter list.
 */
export type GetV2LogsIdEvalsParameters = {
  type:
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody27WorkflowRunDataToolsType;
  properties: { [k: string]: any };
  required?: Array<string> | undefined;
  additionalProperties?: boolean | undefined;
};

export type GetV2LogsIdEvalsFunction = {
  /**
   * The name of the function to be called. Must be a-z, A-Z, 0-9, or contain underscores and dashes, with a maximum length of 64.
   */
  name: string;
  /**
   * A description of what the function does, used by the model to choose when and how to call the function.
   */
  description?: string | undefined;
  strict?: boolean | undefined;
  /**
   * The parameters the functions accepts, described as a JSON Schema object.
   *
   * @remarks
   *
   *  Omitting `parameters` defines a function with an empty parameter list.
   */
  parameters: GetV2LogsIdEvalsParameters;
};

export type GetV2LogsIdEvalsTools = {
  /**
   * The type of the tool. Currently, only `function` is supported.
   */
  type: GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody27WorkflowRunType;
  function: GetV2LogsIdEvalsFunction;
};

export type GetV2LogsIdEvalsPromptSnippets = {
  /**
   * The id of the resource
   */
  id: string;
  key: string;
  value: string;
};

export type GetV2LogsIdEvalsData = {
  choices?: Array<GetV2LogsIdEvalsChoices> | undefined;
  action: GetV2LogsIdEvalsAction;
  promptConfig: GetV2LogsIdEvalsPromptConfig;
  variables: Array<GetV2LogsIdEvalsVariables>;
  performance?: GetV2LogsIdEvalsPerformance | undefined;
  usage?: GetV2LogsIdEvalsUsage | undefined;
  billing?: GetV2LogsIdEvalsBilling | undefined;
  tools?: Array<GetV2LogsIdEvalsTools> | undefined;
  promptSnippets: Array<GetV2LogsIdEvalsPromptSnippets>;
};

export type EvalsWorkflowRun = {
  id: string;
  /**
   * Metadata for the workflow run
   */
  workflowMetadata?: { [k: string]: any } | undefined;
  /**
   * Input for the workflow run
   */
  workflowInput?: { [k: string]: any } | undefined;
  /**
   * Output for the workflow run
   */
  workflowOutput?: { [k: string]: any } | undefined;
  /**
   * An optional field that is filled if the workflow was triggered by an HTTP request
   */
  requestProperties?: GetV2LogsIdEvalsRequestProperties | undefined;
  startedAt: Date;
  finishedAt?: Date | undefined;
  /**
   * Orquesta product
   */
  productType: GetV2LogsIdEvalsProductType;
  relatedEntities: Array<
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRun1
  >;
  evals: Array<
    | GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody21
    | GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody22
    | GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody23
    | GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody24
  >;
  data: GetV2LogsIdEvalsData;
};

export const GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody27Status = {
  Pending: "pending",
  Completed: "completed",
  Failed: "failed",
} as const;
export type GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody27Status =
  ClosedEnum<
    typeof GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody27Status
  >;

export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals74Type =
  {
    Evaluator: "evaluator",
  } as const;
export type GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals74Type =
  ClosedEnum<
    typeof GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals74Type
  >;

/**
 * Define the relationship between an evaluator and an entity. Can be LLM Evals, Code Evals or HTTP Evals
 */
export type GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals74 =
  {
    type:
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals74Type;
    /**
     * The id of the resource
     */
    evaluatorId: string;
  };

export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals73Type =
  {
    HumanEval: "human_eval",
  } as const;
export type GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals73Type =
  ClosedEnum<
    typeof GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals73Type
  >;

/**
 * Define the relationship between an entity and a human eval, also known as feedback
 */
export type GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals73 =
  {
    type:
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals73Type;
    /**
     * The id of the resource
     */
    humanEvalId: string;
  };

export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals72Type =
  {
    Contact: "contact",
  } as const;
export type GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals72Type =
  ClosedEnum<
    typeof GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals72Type
  >;

/**
 * Define the user set using the SDK
 */
export type GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals72 =
  {
    type:
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals72Type;
    contactId: string;
  };

export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7Type =
  {
    Account: "account",
  } as const;
export type GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7Type =
  ClosedEnum<
    typeof GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7Type
  >;

/**
 * Define the internal account of the system. Also sometimes called user (internal)
 */
export type GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals71 =
  {
    type:
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7Type;
    /**
     * The id of the resource
     */
    accountId: string;
  };

export type GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody27RelatedEntities =
  | GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals71
  | GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals72
  | GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals73
  | GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals74;

export type GetV2LogsIdEvals7 = {
  type: GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody27Type;
  workflowRun: EvalsWorkflowRun;
  /**
   * The id of the resource
   */
  id: string;
  status: GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody27Status;
  timestamp: Date;
  relatedEntities: Array<
    | GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals71
    | GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals72
    | GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals73
    | GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals74
  >;
};

export const GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody26Type = {
  BertScore: "bert_score",
} as const;
export type GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody26Type =
  ClosedEnum<
    typeof GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody26Type
  >;

export type GetV2LogsIdEvalsResponse200Value = {
  f1: number;
  precision: number;
  recall: number;
};

export const GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody26Status = {
  Pending: "pending",
  Completed: "completed",
  Failed: "failed",
} as const;
export type GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody26Status =
  ClosedEnum<
    typeof GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody26Status
  >;

export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals64Type =
  {
    Evaluator: "evaluator",
  } as const;
export type GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals64Type =
  ClosedEnum<
    typeof GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals64Type
  >;

/**
 * Define the relationship between an evaluator and an entity. Can be LLM Evals, Code Evals or HTTP Evals
 */
export type GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals64 =
  {
    type:
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals64Type;
    /**
     * The id of the resource
     */
    evaluatorId: string;
  };

export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals63Type =
  {
    HumanEval: "human_eval",
  } as const;
export type GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals63Type =
  ClosedEnum<
    typeof GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals63Type
  >;

/**
 * Define the relationship between an entity and a human eval, also known as feedback
 */
export type GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals63 =
  {
    type:
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals63Type;
    /**
     * The id of the resource
     */
    humanEvalId: string;
  };

export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals62Type =
  {
    Contact: "contact",
  } as const;
export type GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals62Type =
  ClosedEnum<
    typeof GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals62Type
  >;

/**
 * Define the user set using the SDK
 */
export type GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals62 =
  {
    type:
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals62Type;
    contactId: string;
  };

export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals6Type =
  {
    Account: "account",
  } as const;
export type GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals6Type =
  ClosedEnum<
    typeof GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals6Type
  >;

/**
 * Define the internal account of the system. Also sometimes called user (internal)
 */
export type GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals61 =
  {
    type:
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals6Type;
    /**
     * The id of the resource
     */
    accountId: string;
  };

export type GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody26RelatedEntities =
  | GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals61
  | GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals62
  | GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals63
  | GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals64;

export type GetV2LogsIdEvals6 = {
  type: GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody26Type;
  value: GetV2LogsIdEvalsResponse200Value;
  /**
   * The id of the resource
   */
  id: string;
  status: GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody26Status;
  timestamp: Date;
  relatedEntities: Array<
    | GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals61
    | GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals62
    | GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals63
    | GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals64
  >;
};

export const GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody25Type = {
  RougeN: "rouge_n",
} as const;
export type GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody25Type =
  ClosedEnum<
    typeof GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody25Type
  >;

export type EvalsRouge1 = {
  f1: number;
  precision: number;
  recall: number;
};

export type EvalsRouge2 = {
  f1: number;
  precision: number;
  recall: number;
};

export type EvalsRougeL = {
  f1: number;
  precision: number;
  recall: number;
};

export type GetV2LogsIdEvalsResponseValue = {
  rouge1: EvalsRouge1;
  rouge2: EvalsRouge2;
  rougeL: EvalsRougeL;
};

export const GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody25Status = {
  Pending: "pending",
  Completed: "completed",
  Failed: "failed",
} as const;
export type GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody25Status =
  ClosedEnum<
    typeof GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody25Status
  >;

export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals54Type =
  {
    Evaluator: "evaluator",
  } as const;
export type GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals54Type =
  ClosedEnum<
    typeof GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals54Type
  >;

/**
 * Define the relationship between an evaluator and an entity. Can be LLM Evals, Code Evals or HTTP Evals
 */
export type GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals54 =
  {
    type:
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals54Type;
    /**
     * The id of the resource
     */
    evaluatorId: string;
  };

export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals53Type =
  {
    HumanEval: "human_eval",
  } as const;
export type GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals53Type =
  ClosedEnum<
    typeof GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals53Type
  >;

/**
 * Define the relationship between an entity and a human eval, also known as feedback
 */
export type GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals53 =
  {
    type:
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals53Type;
    /**
     * The id of the resource
     */
    humanEvalId: string;
  };

export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals52Type =
  {
    Contact: "contact",
  } as const;
export type GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals52Type =
  ClosedEnum<
    typeof GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals52Type
  >;

/**
 * Define the user set using the SDK
 */
export type GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals52 =
  {
    type:
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals52Type;
    contactId: string;
  };

export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals5Type =
  {
    Account: "account",
  } as const;
export type GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals5Type =
  ClosedEnum<
    typeof GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals5Type
  >;

/**
 * Define the internal account of the system. Also sometimes called user (internal)
 */
export type GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals51 =
  {
    type:
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals5Type;
    /**
     * The id of the resource
     */
    accountId: string;
  };

export type GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody25RelatedEntities =
  | GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals51
  | GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals52
  | GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals53
  | GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals54;

export type GetV2LogsIdEvals5 = {
  type: GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody25Type;
  value: GetV2LogsIdEvalsResponseValue;
  /**
   * The id of the resource
   */
  id: string;
  status: GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody25Status;
  timestamp: Date;
  relatedEntities: Array<
    | GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals51
    | GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals52
    | GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals53
    | GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals54
  >;
};

export const GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody24Type = {
  StringArray: "string_array",
} as const;
export type GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody24Type =
  ClosedEnum<
    typeof GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody24Type
  >;

export const GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody24Status = {
  Pending: "pending",
  Completed: "completed",
  Failed: "failed",
} as const;
export type GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody24Status =
  ClosedEnum<
    typeof GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody24Status
  >;

export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals44Type =
  {
    Evaluator: "evaluator",
  } as const;
export type GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals44Type =
  ClosedEnum<
    typeof GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals44Type
  >;

/**
 * Define the relationship between an evaluator and an entity. Can be LLM Evals, Code Evals or HTTP Evals
 */
export type GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals44 =
  {
    type:
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals44Type;
    /**
     * The id of the resource
     */
    evaluatorId: string;
  };

export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals43Type =
  {
    HumanEval: "human_eval",
  } as const;
export type GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals43Type =
  ClosedEnum<
    typeof GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals43Type
  >;

/**
 * Define the relationship between an entity and a human eval, also known as feedback
 */
export type GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals43 =
  {
    type:
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals43Type;
    /**
     * The id of the resource
     */
    humanEvalId: string;
  };

export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals42Type =
  {
    Contact: "contact",
  } as const;
export type GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals42Type =
  ClosedEnum<
    typeof GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals42Type
  >;

/**
 * Define the user set using the SDK
 */
export type GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals42 =
  {
    type:
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals42Type;
    contactId: string;
  };

export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals4Type =
  {
    Account: "account",
  } as const;
export type GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals4Type =
  ClosedEnum<
    typeof GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals4Type
  >;

/**
 * Define the internal account of the system. Also sometimes called user (internal)
 */
export type GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals41 =
  {
    type:
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals4Type;
    /**
     * The id of the resource
     */
    accountId: string;
  };

export type GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody24RelatedEntities =
  | GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals41
  | GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals42
  | GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals43
  | GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals44;

export type GetV2LogsIdEvals4 = {
  type: GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody24Type;
  values: Array<string>;
  /**
   * The id of the resource
   */
  id: string;
  status: GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody24Status;
  timestamp: Date;
  relatedEntities: Array<
    | GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals41
    | GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals42
    | GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals43
    | GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals44
  >;
};

export const GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody23Type = {
  Boolean: "boolean",
} as const;
export type GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody23Type =
  ClosedEnum<
    typeof GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody23Type
  >;

export const GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody23Status = {
  Pending: "pending",
  Completed: "completed",
  Failed: "failed",
} as const;
export type GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody23Status =
  ClosedEnum<
    typeof GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody23Status
  >;

export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals34Type =
  {
    Evaluator: "evaluator",
  } as const;
export type GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals34Type =
  ClosedEnum<
    typeof GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals34Type
  >;

/**
 * Define the relationship between an evaluator and an entity. Can be LLM Evals, Code Evals or HTTP Evals
 */
export type GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals34 =
  {
    type:
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals34Type;
    /**
     * The id of the resource
     */
    evaluatorId: string;
  };

export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals33Type =
  {
    HumanEval: "human_eval",
  } as const;
export type GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals33Type =
  ClosedEnum<
    typeof GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals33Type
  >;

/**
 * Define the relationship between an entity and a human eval, also known as feedback
 */
export type GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals33 =
  {
    type:
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals33Type;
    /**
     * The id of the resource
     */
    humanEvalId: string;
  };

export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals32Type =
  {
    Contact: "contact",
  } as const;
export type GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals32Type =
  ClosedEnum<
    typeof GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals32Type
  >;

/**
 * Define the user set using the SDK
 */
export type GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals32 =
  {
    type:
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals32Type;
    contactId: string;
  };

export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals3Type =
  {
    Account: "account",
  } as const;
export type GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals3Type =
  ClosedEnum<
    typeof GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals3Type
  >;

/**
 * Define the internal account of the system. Also sometimes called user (internal)
 */
export type GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals31 =
  {
    type:
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals3Type;
    /**
     * The id of the resource
     */
    accountId: string;
  };

export type GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody23RelatedEntities =
  | GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals31
  | GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals32
  | GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals33
  | GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals34;

export type GetV2LogsIdEvals3 = {
  type: GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody23Type;
  value: boolean;
  /**
   * The id of the resource
   */
  id: string;
  status: GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody23Status;
  timestamp: Date;
  relatedEntities: Array<
    | GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals31
    | GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals32
    | GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals33
    | GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals34
  >;
};

export const GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody22Type = {
  Number: "number",
} as const;
export type GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody22Type =
  ClosedEnum<
    typeof GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody22Type
  >;

export const GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody22Status = {
  Pending: "pending",
  Completed: "completed",
  Failed: "failed",
} as const;
export type GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody22Status =
  ClosedEnum<
    typeof GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody22Status
  >;

export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals24Type =
  {
    Evaluator: "evaluator",
  } as const;
export type GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals24Type =
  ClosedEnum<
    typeof GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals24Type
  >;

/**
 * Define the relationship between an evaluator and an entity. Can be LLM Evals, Code Evals or HTTP Evals
 */
export type GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals4 =
  {
    type:
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals24Type;
    /**
     * The id of the resource
     */
    evaluatorId: string;
  };

export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals23Type =
  {
    HumanEval: "human_eval",
  } as const;
export type GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals23Type =
  ClosedEnum<
    typeof GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals23Type
  >;

/**
 * Define the relationship between an entity and a human eval, also known as feedback
 */
export type GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals3 =
  {
    type:
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals23Type;
    /**
     * The id of the resource
     */
    humanEvalId: string;
  };

export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals22Type =
  {
    Contact: "contact",
  } as const;
export type GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals22Type =
  ClosedEnum<
    typeof GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals22Type
  >;

/**
 * Define the user set using the SDK
 */
export type GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals2 =
  {
    type:
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals22Type;
    contactId: string;
  };

export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals2Type =
  {
    Account: "account",
  } as const;
export type GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals2Type =
  ClosedEnum<
    typeof GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals2Type
  >;

/**
 * Define the internal account of the system. Also sometimes called user (internal)
 */
export type GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals1 =
  {
    type:
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals2Type;
    /**
     * The id of the resource
     */
    accountId: string;
  };

export type GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody22RelatedEntities =
  | GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals1
  | GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals2
  | GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals3
  | GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals4;

export type GetV2LogsIdEvals2 = {
  type: GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody22Type;
  value: number;
  /**
   * The id of the resource
   */
  id: string;
  status: GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody22Status;
  timestamp: Date;
  relatedEntities: Array<
    | GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals1
    | GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals2
    | GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals3
    | GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals4
  >;
};

export const GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody2Type = {
  String: "string",
} as const;
export type GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody2Type =
  ClosedEnum<
    typeof GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody2Type
  >;

export const GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody2Status = {
  Pending: "pending",
  Completed: "completed",
  Failed: "failed",
} as const;
export type GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody2Status =
  ClosedEnum<
    typeof GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody2Status
  >;

export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals14Type =
  {
    Evaluator: "evaluator",
  } as const;
export type GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals14Type =
  ClosedEnum<
    typeof GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals14Type
  >;

/**
 * Define the relationship between an evaluator and an entity. Can be LLM Evals, Code Evals or HTTP Evals
 */
export type GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody24 =
  {
    type:
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals14Type;
    /**
     * The id of the resource
     */
    evaluatorId: string;
  };

export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals1Type =
  {
    HumanEval: "human_eval",
  } as const;
export type GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals1Type =
  ClosedEnum<
    typeof GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals1Type
  >;

/**
 * Define the relationship between an entity and a human eval, also known as feedback
 */
export type GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody23 =
  {
    type:
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals1Type;
    /**
     * The id of the resource
     */
    humanEvalId: string;
  };

export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2EvalsType =
  {
    Contact: "contact",
  } as const;
export type GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2EvalsType =
  ClosedEnum<
    typeof GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2EvalsType
  >;

/**
 * Define the user set using the SDK
 */
export type GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody22 =
  {
    type:
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2EvalsType;
    contactId: string;
  };

export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals11Type =
  {
    Account: "account",
  } as const;
export type GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals11Type =
  ClosedEnum<
    typeof GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals11Type
  >;

/**
 * Define the internal account of the system. Also sometimes called user (internal)
 */
export type GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody21 =
  {
    type:
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals11Type;
    /**
     * The id of the resource
     */
    accountId: string;
  };

export type GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody2RelatedEntities =
  | GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody21
  | GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody22
  | GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody23
  | GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody24;

export type GetV2LogsIdEvals1 = {
  type: GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody2Type;
  value: string;
  /**
   * The id of the resource
   */
  id: string;
  status: GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody2Status;
  timestamp: Date;
  relatedEntities: Array<
    | GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody21
    | GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody22
    | GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody23
    | GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody24
  >;
};

export type ResponseBodyEvals =
  | GetV2LogsIdEvals1
  | GetV2LogsIdEvals2
  | GetV2LogsIdEvals3
  | GetV2LogsIdEvals4
  | GetV2LogsIdEvals5
  | GetV2LogsIdEvals6
  | GetV2LogsIdEvals7;

export const ResponseBodyProductType = {
  Deployments: "deployments",
} as const;
export type ResponseBodyProductType = ClosedEnum<
  typeof ResponseBodyProductType
>;

export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody27Type =
  {
    Conversation: "conversation",
  } as const;
export type GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody27Type =
  ClosedEnum<
    typeof GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody27Type
  >;

/**
 * Define the relationship between multiple logs that are part of the same conversation
 */
export type RelatedEntities7 = {
  type: GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody27Type;
  conversationId: string;
};

export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody26Type =
  {
    Chain: "chain",
  } as const;
export type GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody26Type =
  ClosedEnum<
    typeof GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody26Type
  >;

/**
 * Define the relationship between multiple logs that are part of the same chain
 */
export type RelatedEntities6 = {
  type: GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody26Type;
  chainId: string;
};

export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody25Type =
  {
    Contact: "contact",
  } as const;
export type GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody25Type =
  ClosedEnum<
    typeof GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody25Type
  >;

/**
 * Define the user set using the SDK
 */
export type RelatedEntities5 = {
  type: GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody25Type;
  contactId: string;
};

export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Type =
  {
    DeploymentCompletion: "deployment_completion",
  } as const;
export type GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Type =
  ClosedEnum<
    typeof GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Type
  >;

export type RelatedEntities4 = {
  type: GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Type;
  /**
   * The id of the resource
   */
  deploymentCompletionId: string;
};

export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBodyType =
  {
    DeploymentVariant: "deployment_variant",
  } as const;
export type GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBodyType =
  ClosedEnum<
    typeof GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBodyType
  >;

export type GetV2LogsIdRelatedEntities3 = {
  type: GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBodyType;
  /**
   * The id of the resource
   */
  deploymentVariantId: string;
};

export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONType = {
  Deployment: "deployment",
} as const;
export type GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONType =
  ClosedEnum<typeof GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONType>;

export type GetV2LogsIdRelatedEntities2 = {
  type: GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONType;
  /**
   * The id of the resource
   */
  deploymentId: string;
};

export const GetV2LogsIdRelatedEntitiesResponse200Type = {
  DeploymentKey: "deployment_key",
} as const;
export type GetV2LogsIdRelatedEntitiesResponse200Type = ClosedEnum<
  typeof GetV2LogsIdRelatedEntitiesResponse200Type
>;

export type GetV2LogsIdRelatedEntities1 = {
  type: GetV2LogsIdRelatedEntitiesResponse200Type;
  deploymentKey: string;
};

export type ResponseBodyRelatedEntities =
  | GetV2LogsIdRelatedEntities1
  | GetV2LogsIdRelatedEntities2
  | GetV2LogsIdRelatedEntities3
  | RelatedEntities4
  | RelatedEntities5
  | RelatedEntities6
  | RelatedEntities7;

/**
 * The role of the prompt message
 */
export const GetV2LogsIdMessageResponse200Role = {
  System: "system",
  Assistant: "assistant",
  User: "user",
  Exception: "exception",
  Tool: "tool",
  Prompt: "prompt",
  Correction: "correction",
  ExpectedOutput: "expected_output",
} as const;
/**
 * The role of the prompt message
 */
export type GetV2LogsIdMessageResponse200Role = ClosedEnum<
  typeof GetV2LogsIdMessageResponse200Role
>;

export type GetV2LogsIdMessage3 = {
  /**
   * The role of the prompt message
   */
  role: GetV2LogsIdMessageResponse200Role;
  url: string;
};

/**
 * The role of the prompt message
 */
export const GetV2LogsIdMessageResponseRole = {
  System: "system",
  Assistant: "assistant",
  User: "user",
  Exception: "exception",
  Tool: "tool",
  Prompt: "prompt",
  Correction: "correction",
  ExpectedOutput: "expected_output",
} as const;
/**
 * The role of the prompt message
 */
export type GetV2LogsIdMessageResponseRole = ClosedEnum<
  typeof GetV2LogsIdMessageResponseRole
>;

export type GetV2LogsIdMessage2 = {
  /**
   * The role of the prompt message
   */
  role: GetV2LogsIdMessageResponseRole;
  content: string | null;
};

/**
 * The role of the prompt message
 */
export const GetV2LogsIdMessageRole = {
  System: "system",
  Assistant: "assistant",
  User: "user",
  Exception: "exception",
  Tool: "tool",
  Prompt: "prompt",
  Correction: "correction",
  ExpectedOutput: "expected_output",
} as const;
/**
 * The role of the prompt message
 */
export type GetV2LogsIdMessageRole = ClosedEnum<typeof GetV2LogsIdMessageRole>;

export const GetV2LogsIdMessageType = {
  Function: "function",
} as const;
export type GetV2LogsIdMessageType = ClosedEnum<typeof GetV2LogsIdMessageType>;

export type GetV2LogsIdMessageFunction = {
  name: string;
  /**
   * JSON string arguments for the functions
   */
  arguments: string;
};

export type GetV2LogsIdMessageToolCalls = {
  id?: string | undefined;
  index?: number | undefined;
  type: GetV2LogsIdMessageType;
  function: GetV2LogsIdMessageFunction;
};

export type GetV2LogsIdMessage1 = {
  /**
   * The role of the prompt message
   */
  role: GetV2LogsIdMessageRole;
  content?: string | null | undefined;
  toolCalls: Array<GetV2LogsIdMessageToolCalls>;
};

export type ResponseBodyMessage =
  | GetV2LogsIdMessage2
  | GetV2LogsIdMessage3
  | GetV2LogsIdMessage1;

export type ResponseBodyChoices = {
  index: number;
  message?:
    | GetV2LogsIdMessage2
    | GetV2LogsIdMessage3
    | GetV2LogsIdMessage1
    | undefined;
  finishReason?: string | null | undefined;
};

export const ResponseBodyAction = {
  GetConfig: "get_config",
  Invoke: "invoke",
  Simulate: "simulate",
} as const;
export type ResponseBodyAction = ClosedEnum<typeof ResponseBodyAction>;

/**
 * The type of the model
 */
export const ResponseBodyModelType = {
  Chat: "chat",
  Completion: "completion",
  Embedding: "embedding",
  Vision: "vision",
  Image: "image",
  Tts: "tts",
  Stt: "stt",
  Rerank: "rerank",
} as const;
/**
 * The type of the model
 */
export type ResponseBodyModelType = ClosedEnum<typeof ResponseBodyModelType>;

/**
 * Only supported on `image` models.
 */
export const ResponseBodyFormat = {
  Url: "url",
  B64Json: "b64_json",
  Text: "text",
  JsonObject: "json_object",
} as const;
/**
 * Only supported on `image` models.
 */
export type ResponseBodyFormat = ClosedEnum<typeof ResponseBodyFormat>;

/**
 * Only supported on `image` models.
 */
export const ResponseBodyQuality = {
  Standard: "standard",
  Hd: "hd",
} as const;
/**
 * Only supported on `image` models.
 */
export type ResponseBodyQuality = ClosedEnum<typeof ResponseBodyQuality>;

export const GetV2LogsIdResponseFormatResponseType = {
  JsonObject: "json_object",
} as const;
export type GetV2LogsIdResponseFormatResponseType = ClosedEnum<
  typeof GetV2LogsIdResponseFormatResponseType
>;

export type GetV2LogsIdResponseFormat2 = {
  type: GetV2LogsIdResponseFormatResponseType;
};

export const GetV2LogsIdResponseFormatType = {
  JsonSchema: "json_schema",
} as const;
export type GetV2LogsIdResponseFormatType = ClosedEnum<
  typeof GetV2LogsIdResponseFormatType
>;

export type GetV2LogsIdResponseFormatJsonSchema = {
  name: string;
  strict: boolean;
  schema: { [k: string]: any };
};

export type GetV2LogsIdResponseFormat1 = {
  type: GetV2LogsIdResponseFormatType;
  jsonSchema: GetV2LogsIdResponseFormatJsonSchema;
};

/**
 * An object specifying the format that the model must output.
 *
 * @remarks
 *
 *  Setting to `{ "type": "json_schema", "json_schema": {...} }` enables Structured Outputs which ensures the model will match your supplied JSON schema
 *
 *  Setting to `{ "type": "json_object" }` enables JSON mode, which ensures the message the model generates is valid JSON.
 *
 * Important: when using JSON mode, you must also instruct the model to produce JSON yourself via a system or user message. Without this, the model may generate an unending stream of whitespace until the generation reaches the token limit, resulting in a long-running and seemingly "stuck" request. Also note that the message content may be partially cut off if finish_reason="length", which indicates the generation exceeded max_tokens or the conversation exceeded the max context length.
 */
export type ResponseBodyResponseFormat =
  | GetV2LogsIdResponseFormat2
  | GetV2LogsIdResponseFormat1;

/**
 * The version of photoReal to use. Must be v1 or v2. Only available for `leonardoai` provider
 */
export const ResponseBodyPhotoRealVersion = {
  V1: "v1",
  V2: "v2",
} as const;
/**
 * The version of photoReal to use. Must be v1 or v2. Only available for `leonardoai` provider
 */
export type ResponseBodyPhotoRealVersion = ClosedEnum<
  typeof ResponseBodyPhotoRealVersion
>;

/**
 * The format to return the embeddings
 */
export const ResponseBodyEncodingFormat = {
  Float: "float",
  Base64: "base64",
} as const;
/**
 * The format to return the embeddings
 */
export type ResponseBodyEncodingFormat = ClosedEnum<
  typeof ResponseBodyEncodingFormat
>;

/**
 * Model Parameters: Not all parameters apply to every model
 */
export type ResponseBodyModelParameters = {
  /**
   * Only supported on `chat` and `completion` models.
   */
  temperature?: number | undefined;
  /**
   * Only supported on `chat` and `completion` models.
   */
  maxTokens?: number | undefined;
  /**
   * Only supported on `chat` and `completion` models.
   */
  topK?: number | undefined;
  /**
   * Only supported on `chat` and `completion` models.
   */
  topP?: number | undefined;
  /**
   * Only supported on `chat` and `completion` models.
   */
  frequencyPenalty?: number | undefined;
  /**
   * Only supported on `chat` and `completion` models.
   */
  presencePenalty?: number | undefined;
  /**
   * Only supported on `image` models.
   */
  numImages?: number | undefined;
  /**
   * Best effort deterministic seed for the model. Currently only OpenAI models support these
   */
  seed?: number | undefined;
  /**
   * Only supported on `image` models.
   */
  format?: ResponseBodyFormat | undefined;
  /**
   * Only supported on `image` models.
   */
  dimensions?: string | undefined;
  /**
   * Only supported on `image` models.
   */
  quality?: ResponseBodyQuality | undefined;
  /**
   * Only supported on `image` models.
   */
  style?: string | undefined;
  /**
   * An object specifying the format that the model must output.
   *
   * @remarks
   *
   *  Setting to `{ "type": "json_schema", "json_schema": {...} }` enables Structured Outputs which ensures the model will match your supplied JSON schema
   *
   *  Setting to `{ "type": "json_object" }` enables JSON mode, which ensures the message the model generates is valid JSON.
   *
   * Important: when using JSON mode, you must also instruct the model to produce JSON yourself via a system or user message. Without this, the model may generate an unending stream of whitespace until the generation reaches the token limit, resulting in a long-running and seemingly "stuck" request. Also note that the message content may be partially cut off if finish_reason="length", which indicates the generation exceeded max_tokens or the conversation exceeded the max context length.
   */
  responseFormat?:
    | GetV2LogsIdResponseFormat2
    | GetV2LogsIdResponseFormat1
    | null
    | undefined;
  /**
   * The version of photoReal to use. Must be v1 or v2. Only available for `leonardoai` provider
   */
  photoRealVersion?: ResponseBodyPhotoRealVersion | undefined;
  /**
   * The format to return the embeddings
   */
  encodingFormat?: ResponseBodyEncodingFormat | undefined;
};

export const ResponseBodyProvider = {
  Cohere: "cohere",
  Openai: "openai",
  Anthropic: "anthropic",
  Huggingface: "huggingface",
  Replicate: "replicate",
  Google: "google",
  GoogleAi: "google-ai",
  Azure: "azure",
  Aws: "aws",
  Anyscale: "anyscale",
  Perplexity: "perplexity",
  Groq: "groq",
  Fal: "fal",
  Leonardoai: "leonardoai",
  Nvidia: "nvidia",
} as const;
export type ResponseBodyProvider = ClosedEnum<typeof ResponseBodyProvider>;

/**
 * The role of the prompt message
 */
export const ResponseBodyRole = {
  System: "system",
  Assistant: "assistant",
  User: "user",
  Exception: "exception",
  Tool: "tool",
  Prompt: "prompt",
  Correction: "correction",
  ExpectedOutput: "expected_output",
} as const;
/**
 * The role of the prompt message
 */
export type ResponseBodyRole = ClosedEnum<typeof ResponseBodyRole>;

export const GetV2LogsId2ResponseType = {
  ImageUrl: "image_url",
} as const;
export type GetV2LogsId2ResponseType = ClosedEnum<
  typeof GetV2LogsId2ResponseType
>;

export type GetV2LogsId2ImageUrl = {
  /**
   * The orq.ai id of the image
   */
  id?: string | undefined;
  /**
   * Either a URL of the image or the base64 encoded data URI.
   */
  url: string;
  /**
   * Specifies the detail level of the image. Currently only supported with OpenAI models
   */
  detail?: string | undefined;
};

/**
 * The image part of the prompt message. Only supported with vision models.
 */
export type GetV2LogsId22 = {
  type: GetV2LogsId2ResponseType;
  imageUrl: GetV2LogsId2ImageUrl;
};

export const GetV2LogsId2Type = {
  Text: "text",
} as const;
export type GetV2LogsId2Type = ClosedEnum<typeof GetV2LogsId2Type>;

/**
 * Text content part of a prompt message
 */
export type GetV2LogsId21 = {
  type: GetV2LogsId2Type;
  text: string;
};

export type GetV2LogsIdContent2 = GetV2LogsId21 | GetV2LogsId22;

/**
 * The contents of the user message. Either the text content of the message or an array of content parts with a defined type, each can be of type `text` or `image_url` when passing in images. You can pass multiple images by adding multiple `image_url` content parts.
 */
export type ResponseBodyContent = string | Array<GetV2LogsId21 | GetV2LogsId22>;

export const GetV2LogsIdResponseBodyResponse200ApplicationJSONType = {
  Function: "function",
} as const;
export type GetV2LogsIdResponseBodyResponse200ApplicationJSONType = ClosedEnum<
  typeof GetV2LogsIdResponseBodyResponse200ApplicationJSONType
>;

export type GetV2LogsIdResponseBodyResponse200Function = {
  name: string;
  /**
   * JSON string arguments for the functions
   */
  arguments: string;
};

export type ResponseBodyToolCalls = {
  id?: string | undefined;
  index?: number | undefined;
  type: GetV2LogsIdResponseBodyResponse200ApplicationJSONType;
  function: GetV2LogsIdResponseBodyResponse200Function;
};

export type ResponseBodyMessages = {
  /**
   * The role of the prompt message
   */
  role: ResponseBodyRole;
  /**
   * The contents of the user message. Either the text content of the message or an array of content parts with a defined type, each can be of type `text` or `image_url` when passing in images. You can pass multiple images by adding multiple `image_url` content parts.
   */
  content: string | Array<GetV2LogsId21 | GetV2LogsId22>;
  toolCalls?: Array<ResponseBodyToolCalls> | undefined;
  /**
   * The id of the resource
   */
  id?: string | undefined;
};

export type ResponseBodyPromptConfig = {
  stream: boolean;
  model: string;
  /**
   * The id of the resource
   */
  modelDbId: string;
  /**
   * The type of the model
   */
  modelType: ResponseBodyModelType;
  /**
   * Model Parameters: Not all parameters apply to every model
   */
  modelParameters: ResponseBodyModelParameters;
  provider: ResponseBodyProvider;
  messages: Array<ResponseBodyMessages>;
  /**
   * The id of the resource
   */
  integrationId?: string | null | undefined;
  version?: string | undefined;
};

export type Variables = {
  key: string;
  value?: any | undefined;
  isPii?: boolean | undefined;
};

export type ResponseBodyPerformance = {
  latency: number;
  firstTimeToToken?: number | null | undefined;
  tokensPerSecond?: number | null | undefined;
};

export type PromptTokensDetails = {
  cachedTokens?: number | undefined;
};

export type CompletionTokensDetails = {
  reasoningTokens?: number | undefined;
};

export type ResponseBodyUsage = {
  totalTokens?: number | undefined;
  promptTokens?: number | undefined;
  completionTokens?: number | undefined;
  promptTokensDetails?: PromptTokensDetails | undefined;
  completionTokensDetails?: CompletionTokensDetails | undefined;
};

export type Billing = {
  totalCost?: number | null | undefined;
  inputCost?: number | null | undefined;
  outputCost?: number | null | undefined;
  billable: boolean;
};

export type Retries = {
  retryAttempt: number;
  status: number;
  message?: string | undefined;
  isFallback?: boolean | undefined;
};

export type GetV2LogsIdResponseBodyMetadata = {
  /**
   * Unique identifier for the data source
   */
  datasourceId: string;
  /**
   * Unique identifier for the chunk
   */
  chunkId: string;
  /**
   * Name of the uploaded file during the datasource creation.
   */
  fileName: string;
  /**
   * Reference to the page number the chunk was extracted from. The property will only be available for `application/pdf` type of files. For other file types, the property will be `null`.
   */
  pageNumber?: number | null | undefined;
  /**
   * Type of the uploaded file when the datasource was created.
   */
  fileType: string;
};

export type Documents = {
  /**
   * The id of the resource
   */
  id: string;
  /**
   * Text content of the document
   */
  text: string;
  metadata: GetV2LogsIdResponseBodyMetadata;
  /**
   * The score of the document
   */
  score: number;
  /**
   * The rerank score of the document
   */
  rerankScore?: number | undefined;
};

export type ResponseBodyRetrievals = {
  /**
   * Unique id of the knowledge base
   */
  knowledgeId: string;
  /**
   * The documents returned
   */
  documents: Array<Documents>;
  /**
   * The key of the knowledge base
   */
  knowledgeKey: string;
  /**
   * The query used to search the knowledge base
   */
  query: string;
};

export const GetV2LogsIdConfigurationType = {
  Query: "query",
} as const;
export type GetV2LogsIdConfigurationType = ClosedEnum<
  typeof GetV2LogsIdConfigurationType
>;

export type Configuration2 = {
  type: GetV2LogsIdConfigurationType;
  query: string;
};

export const ConfigurationType = {
  LastUserMessage: "last_user_message",
} as const;
export type ConfigurationType = ClosedEnum<typeof ConfigurationType>;

export type Configuration1 = {
  type: ConfigurationType;
};

/**
 * Defines the configuration settings which can either be for a user message or a text entry.
 */
export type Configuration = Configuration1 | Configuration2;

export type KnowledgeBases = {
  /**
   * The id of the resource
   */
  knowledgeId: string;
  /**
   * Defines the configuration settings which can either be for a user message or a text entry.
   */
  configuration: Configuration1 | Configuration2;
};

/**
 * The type of the tool. Currently, only `function` is supported.
 */
export const ResponseBodyType = {
  Function: "function",
} as const;
/**
 * The type of the tool. Currently, only `function` is supported.
 */
export type ResponseBodyType = ClosedEnum<typeof ResponseBodyType>;

export const GetV2LogsIdResponseBodyResponse200ApplicationJson2Type = {
  Object: "object",
} as const;
export type GetV2LogsIdResponseBodyResponse200ApplicationJson2Type = ClosedEnum<
  typeof GetV2LogsIdResponseBodyResponse200ApplicationJson2Type
>;

/**
 * The parameters the functions accepts, described as a JSON Schema object.
 *
 * @remarks
 *
 *  Omitting `parameters` defines a function with an empty parameter list.
 */
export type ResponseBodyParameters = {
  type: GetV2LogsIdResponseBodyResponse200ApplicationJson2Type;
  properties: { [k: string]: any };
  required?: Array<string> | undefined;
  additionalProperties?: boolean | undefined;
};

export type ResponseBodyFunction = {
  /**
   * The name of the function to be called. Must be a-z, A-Z, 0-9, or contain underscores and dashes, with a maximum length of 64.
   */
  name: string;
  /**
   * A description of what the function does, used by the model to choose when and how to call the function.
   */
  description?: string | undefined;
  strict?: boolean | undefined;
  /**
   * The parameters the functions accepts, described as a JSON Schema object.
   *
   * @remarks
   *
   *  Omitting `parameters` defines a function with an empty parameter list.
   */
  parameters: ResponseBodyParameters;
};

export type ResponseBodyTools = {
  /**
   * The type of the tool. Currently, only `function` is supported.
   */
  type: ResponseBodyType;
  function: ResponseBodyFunction;
};

export const GetV2LogsIdCacheConfigResponseType = {
  Semantic: "semantic",
} as const;
export type GetV2LogsIdCacheConfigResponseType = ClosedEnum<
  typeof GetV2LogsIdCacheConfigResponseType
>;

/**
 * The type of the model
 */
export const GetV2LogsIdCacheConfigModelType = {
  Chat: "chat",
  Completion: "completion",
  Embedding: "embedding",
  Vision: "vision",
  Image: "image",
  Tts: "tts",
  Stt: "stt",
  Rerank: "rerank",
} as const;
/**
 * The type of the model
 */
export type GetV2LogsIdCacheConfigModelType = ClosedEnum<
  typeof GetV2LogsIdCacheConfigModelType
>;

/**
 * Only supported on `image` models.
 */
export const GetV2LogsIdCacheConfigFormat = {
  Url: "url",
  B64Json: "b64_json",
  Text: "text",
  JsonObject: "json_object",
} as const;
/**
 * Only supported on `image` models.
 */
export type GetV2LogsIdCacheConfigFormat = ClosedEnum<
  typeof GetV2LogsIdCacheConfigFormat
>;

/**
 * Only supported on `image` models.
 */
export const GetV2LogsIdCacheConfigQuality = {
  Standard: "standard",
  Hd: "hd",
} as const;
/**
 * Only supported on `image` models.
 */
export type GetV2LogsIdCacheConfigQuality = ClosedEnum<
  typeof GetV2LogsIdCacheConfigQuality
>;

export const GetV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody2DataMetadataCacheConfigType =
  {
    JsonObject: "json_object",
  } as const;
export type GetV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody2DataMetadataCacheConfigType =
  ClosedEnum<
    typeof GetV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody2DataMetadataCacheConfigType
  >;

export type GetV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody2Data2 =
  {
    type:
      GetV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody2DataMetadataCacheConfigType;
  };

export const GetV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody2DataMetadataType =
  {
    JsonSchema: "json_schema",
  } as const;
export type GetV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody2DataMetadataType =
  ClosedEnum<
    typeof GetV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody2DataMetadataType
  >;

export type GetV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody2DataJSONSchema =
  {
    name: string;
    strict: boolean;
    schema: { [k: string]: any };
  };

export type GetV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody2Data1 =
  {
    type:
      GetV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody2DataMetadataType;
    jsonSchema:
      GetV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody2DataJSONSchema;
  };

/**
 * An object specifying the format that the model must output.
 *
 * @remarks
 *
 *  Setting to `{ "type": "json_schema", "json_schema": {...} }` enables Structured Outputs which ensures the model will match your supplied JSON schema
 *
 *  Setting to `{ "type": "json_object" }` enables JSON mode, which ensures the message the model generates is valid JSON.
 *
 * Important: when using JSON mode, you must also instruct the model to produce JSON yourself via a system or user message. Without this, the model may generate an unending stream of whitespace until the generation reaches the token limit, resulting in a long-running and seemingly "stuck" request. Also note that the message content may be partially cut off if finish_reason="length", which indicates the generation exceeded max_tokens or the conversation exceeded the max context length.
 */
export type GetV2LogsIdCacheConfigResponseFormat =
  | GetV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody2Data2
  | GetV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody2Data1;

/**
 * The version of photoReal to use. Must be v1 or v2. Only available for `leonardoai` provider
 */
export const GetV2LogsIdCacheConfigPhotoRealVersion = {
  V1: "v1",
  V2: "v2",
} as const;
/**
 * The version of photoReal to use. Must be v1 or v2. Only available for `leonardoai` provider
 */
export type GetV2LogsIdCacheConfigPhotoRealVersion = ClosedEnum<
  typeof GetV2LogsIdCacheConfigPhotoRealVersion
>;

/**
 * The format to return the embeddings
 */
export const GetV2LogsIdCacheConfigEncodingFormat = {
  Float: "float",
  Base64: "base64",
} as const;
/**
 * The format to return the embeddings
 */
export type GetV2LogsIdCacheConfigEncodingFormat = ClosedEnum<
  typeof GetV2LogsIdCacheConfigEncodingFormat
>;

/**
 * Model Parameters: Not all parameters apply to every model
 */
export type GetV2LogsIdCacheConfigModelParameters = {
  /**
   * Only supported on `chat` and `completion` models.
   */
  temperature?: number | undefined;
  /**
   * Only supported on `chat` and `completion` models.
   */
  maxTokens?: number | undefined;
  /**
   * Only supported on `chat` and `completion` models.
   */
  topK?: number | undefined;
  /**
   * Only supported on `chat` and `completion` models.
   */
  topP?: number | undefined;
  /**
   * Only supported on `chat` and `completion` models.
   */
  frequencyPenalty?: number | undefined;
  /**
   * Only supported on `chat` and `completion` models.
   */
  presencePenalty?: number | undefined;
  /**
   * Only supported on `image` models.
   */
  numImages?: number | undefined;
  /**
   * Best effort deterministic seed for the model. Currently only OpenAI models support these
   */
  seed?: number | undefined;
  /**
   * Only supported on `image` models.
   */
  format?: GetV2LogsIdCacheConfigFormat | undefined;
  /**
   * Only supported on `image` models.
   */
  dimensions?: string | undefined;
  /**
   * Only supported on `image` models.
   */
  quality?: GetV2LogsIdCacheConfigQuality | undefined;
  /**
   * Only supported on `image` models.
   */
  style?: string | undefined;
  /**
   * An object specifying the format that the model must output.
   *
   * @remarks
   *
   *  Setting to `{ "type": "json_schema", "json_schema": {...} }` enables Structured Outputs which ensures the model will match your supplied JSON schema
   *
   *  Setting to `{ "type": "json_object" }` enables JSON mode, which ensures the message the model generates is valid JSON.
   *
   * Important: when using JSON mode, you must also instruct the model to produce JSON yourself via a system or user message. Without this, the model may generate an unending stream of whitespace until the generation reaches the token limit, resulting in a long-running and seemingly "stuck" request. Also note that the message content may be partially cut off if finish_reason="length", which indicates the generation exceeded max_tokens or the conversation exceeded the max context length.
   */
  responseFormat?:
    | GetV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody2Data2
    | GetV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody2Data1
    | null
    | undefined;
  /**
   * The version of photoReal to use. Must be v1 or v2. Only available for `leonardoai` provider
   */
  photoRealVersion?: GetV2LogsIdCacheConfigPhotoRealVersion | undefined;
  /**
   * The format to return the embeddings
   */
  encodingFormat?: GetV2LogsIdCacheConfigEncodingFormat | undefined;
};

export const GetV2LogsIdCacheConfigProvider = {
  Cohere: "cohere",
  Openai: "openai",
  Anthropic: "anthropic",
  Huggingface: "huggingface",
  Replicate: "replicate",
  Google: "google",
  GoogleAi: "google-ai",
  Azure: "azure",
  Aws: "aws",
  Anyscale: "anyscale",
  Perplexity: "perplexity",
  Groq: "groq",
  Fal: "fal",
  Leonardoai: "leonardoai",
  Nvidia: "nvidia",
} as const;
export type GetV2LogsIdCacheConfigProvider = ClosedEnum<
  typeof GetV2LogsIdCacheConfigProvider
>;

/**
 * Configuration of embedding model to be used
 */
export type CacheConfigModelConfig = {
  model: string;
  /**
   * The id of the resource
   */
  modelDbId: string;
  /**
   * The type of the model
   */
  modelType: GetV2LogsIdCacheConfigModelType;
  /**
   * Model Parameters: Not all parameters apply to every model
   */
  modelParameters: GetV2LogsIdCacheConfigModelParameters;
  provider: GetV2LogsIdCacheConfigProvider;
  /**
   * The id of the resource
   */
  integrationId?: string | null | undefined;
  version?: string | undefined;
};

/**
 * Schema for exact matching type of cache.
 */
export type GetV2LogsIdCacheConfig2 = {
  type: GetV2LogsIdCacheConfigResponseType;
  /**
   * Configuration of embedding model to be used
   */
  modelConfig: CacheConfigModelConfig;
  /**
   * Time To Live
   */
  ttl?: number | undefined;
  /**
   * A floating-point number typically ranging from 0 to 1.
   */
  similarityScoreThreshold?: number | undefined;
};

export const GetV2LogsIdCacheConfigResponse200ApplicationJSONResponseBodyType =
  {
    Exact: "exact",
  } as const;
export type GetV2LogsIdCacheConfigResponse200ApplicationJSONResponseBodyType =
  ClosedEnum<
    typeof GetV2LogsIdCacheConfigResponse200ApplicationJSONResponseBodyType
  >;

/**
 * Schema for exact matching type of cache.
 */
export type GetV2LogsIdCacheConfig1 = {
  type: GetV2LogsIdCacheConfigResponse200ApplicationJSONResponseBodyType;
  /**
   * Time To Live
   */
  ttl?: number | undefined;
};

export type ResponseBodyCacheConfig =
  | GetV2LogsIdCacheConfig1
  | GetV2LogsIdCacheConfig2;

export const EvaluatorsConfigType = {
  InputEvaluator: "input_evaluator",
  OutputEvaluator: "output_evaluator",
  InputGuardrail: "input_guardrail",
  OutputGuardrail: "output_guardrail",
} as const;
export type EvaluatorsConfigType = ClosedEnum<typeof EvaluatorsConfigType>;

export const GetV2LogsIdEvaluatorsType = {
  Guardrail: "guardrail",
} as const;
export type GetV2LogsIdEvaluatorsType = ClosedEnum<
  typeof GetV2LogsIdEvaluatorsType
>;

export type Evaluators2 = {
  id: string;
  configType: EvaluatorsConfigType;
  evaluatorId: string;
  enabled?: boolean | undefined;
  type: GetV2LogsIdEvaluatorsType;
  sampleRate?: number | undefined;
};

export const ConfigType = {
  InputEvaluator: "input_evaluator",
  OutputEvaluator: "output_evaluator",
  InputGuardrail: "input_guardrail",
  OutputGuardrail: "output_guardrail",
} as const;
export type ConfigType = ClosedEnum<typeof ConfigType>;

export const EvaluatorsType = {
  Evaluator: "evaluator",
} as const;
export type EvaluatorsType = ClosedEnum<typeof EvaluatorsType>;

export type Evaluators1 = {
  id: string;
  configType: ConfigType;
  evaluatorId: string;
  enabled?: boolean | undefined;
  type: EvaluatorsType;
  sampleRate?: number | undefined;
};

export type Evaluators = Evaluators1 | Evaluators2;

export const GuardrailsBehavior = {
  Retry: "retry",
  Fallback: "fallback",
} as const;
export type GuardrailsBehavior = ClosedEnum<typeof GuardrailsBehavior>;

export type ResponseBodyMetadata = {
  outputMasking?: boolean | undefined;
  isCachingEnabled?: boolean | undefined;
  cacheConfig?:
    | GetV2LogsIdCacheConfig1
    | GetV2LogsIdCacheConfig2
    | null
    | undefined;
  evaluators?: Array<Evaluators1 | Evaluators2> | undefined;
  guardrailsBehavior?: GuardrailsBehavior | undefined;
};

export const GetV2LogsIdCacheConfigResponse200ApplicationJSONType = {
  Semantic: "semantic",
} as const;
export type GetV2LogsIdCacheConfigResponse200ApplicationJSONType = ClosedEnum<
  typeof GetV2LogsIdCacheConfigResponse200ApplicationJSONType
>;

/**
 * The type of the model
 */
export const GetV2LogsIdCacheConfigResponseModelType = {
  Chat: "chat",
  Completion: "completion",
  Embedding: "embedding",
  Vision: "vision",
  Image: "image",
  Tts: "tts",
  Stt: "stt",
  Rerank: "rerank",
} as const;
/**
 * The type of the model
 */
export type GetV2LogsIdCacheConfigResponseModelType = ClosedEnum<
  typeof GetV2LogsIdCacheConfigResponseModelType
>;

/**
 * Only supported on `image` models.
 */
export const GetV2LogsIdCacheConfigResponse200Format = {
  Url: "url",
  B64Json: "b64_json",
  Text: "text",
  JsonObject: "json_object",
} as const;
/**
 * Only supported on `image` models.
 */
export type GetV2LogsIdCacheConfigResponse200Format = ClosedEnum<
  typeof GetV2LogsIdCacheConfigResponse200Format
>;

/**
 * Only supported on `image` models.
 */
export const GetV2LogsIdCacheConfigResponseQuality = {
  Standard: "standard",
  Hd: "hd",
} as const;
/**
 * Only supported on `image` models.
 */
export type GetV2LogsIdCacheConfigResponseQuality = ClosedEnum<
  typeof GetV2LogsIdCacheConfigResponseQuality
>;

export const GetV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody2DataSettingsCacheConfigType =
  {
    JsonObject: "json_object",
  } as const;
export type GetV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody2DataSettingsCacheConfigType =
  ClosedEnum<
    typeof GetV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody2DataSettingsCacheConfigType
  >;

export type GetV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody2 = {
  type:
    GetV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody2DataSettingsCacheConfigType;
};

export const GetV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody2DataSettingsType =
  {
    JsonSchema: "json_schema",
  } as const;
export type GetV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody2DataSettingsType =
  ClosedEnum<
    typeof GetV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody2DataSettingsType
  >;

export type GetV2LogsIdResponseFormatResponse200ApplicationJSONResponseBodyJSONSchema =
  {
    name: string;
    strict: boolean;
    schema: { [k: string]: any };
  };

export type GetV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody1 = {
  type:
    GetV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody2DataSettingsType;
  jsonSchema:
    GetV2LogsIdResponseFormatResponse200ApplicationJSONResponseBodyJSONSchema;
};

/**
 * An object specifying the format that the model must output.
 *
 * @remarks
 *
 *  Setting to `{ "type": "json_schema", "json_schema": {...} }` enables Structured Outputs which ensures the model will match your supplied JSON schema
 *
 *  Setting to `{ "type": "json_object" }` enables JSON mode, which ensures the message the model generates is valid JSON.
 *
 * Important: when using JSON mode, you must also instruct the model to produce JSON yourself via a system or user message. Without this, the model may generate an unending stream of whitespace until the generation reaches the token limit, resulting in a long-running and seemingly "stuck" request. Also note that the message content may be partially cut off if finish_reason="length", which indicates the generation exceeded max_tokens or the conversation exceeded the max context length.
 */
export type GetV2LogsIdCacheConfigResponseResponseFormat =
  | GetV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody2
  | GetV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody1;

/**
 * The version of photoReal to use. Must be v1 or v2. Only available for `leonardoai` provider
 */
export const GetV2LogsIdCacheConfigResponsePhotoRealVersion = {
  V1: "v1",
  V2: "v2",
} as const;
/**
 * The version of photoReal to use. Must be v1 or v2. Only available for `leonardoai` provider
 */
export type GetV2LogsIdCacheConfigResponsePhotoRealVersion = ClosedEnum<
  typeof GetV2LogsIdCacheConfigResponsePhotoRealVersion
>;

/**
 * The format to return the embeddings
 */
export const GetV2LogsIdCacheConfigResponseEncodingFormat = {
  Float: "float",
  Base64: "base64",
} as const;
/**
 * The format to return the embeddings
 */
export type GetV2LogsIdCacheConfigResponseEncodingFormat = ClosedEnum<
  typeof GetV2LogsIdCacheConfigResponseEncodingFormat
>;

/**
 * Model Parameters: Not all parameters apply to every model
 */
export type GetV2LogsIdCacheConfigResponseModelParameters = {
  /**
   * Only supported on `chat` and `completion` models.
   */
  temperature?: number | undefined;
  /**
   * Only supported on `chat` and `completion` models.
   */
  maxTokens?: number | undefined;
  /**
   * Only supported on `chat` and `completion` models.
   */
  topK?: number | undefined;
  /**
   * Only supported on `chat` and `completion` models.
   */
  topP?: number | undefined;
  /**
   * Only supported on `chat` and `completion` models.
   */
  frequencyPenalty?: number | undefined;
  /**
   * Only supported on `chat` and `completion` models.
   */
  presencePenalty?: number | undefined;
  /**
   * Only supported on `image` models.
   */
  numImages?: number | undefined;
  /**
   * Best effort deterministic seed for the model. Currently only OpenAI models support these
   */
  seed?: number | undefined;
  /**
   * Only supported on `image` models.
   */
  format?: GetV2LogsIdCacheConfigResponse200Format | undefined;
  /**
   * Only supported on `image` models.
   */
  dimensions?: string | undefined;
  /**
   * Only supported on `image` models.
   */
  quality?: GetV2LogsIdCacheConfigResponseQuality | undefined;
  /**
   * Only supported on `image` models.
   */
  style?: string | undefined;
  /**
   * An object specifying the format that the model must output.
   *
   * @remarks
   *
   *  Setting to `{ "type": "json_schema", "json_schema": {...} }` enables Structured Outputs which ensures the model will match your supplied JSON schema
   *
   *  Setting to `{ "type": "json_object" }` enables JSON mode, which ensures the message the model generates is valid JSON.
   *
   * Important: when using JSON mode, you must also instruct the model to produce JSON yourself via a system or user message. Without this, the model may generate an unending stream of whitespace until the generation reaches the token limit, resulting in a long-running and seemingly "stuck" request. Also note that the message content may be partially cut off if finish_reason="length", which indicates the generation exceeded max_tokens or the conversation exceeded the max context length.
   */
  responseFormat?:
    | GetV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody2
    | GetV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody1
    | null
    | undefined;
  /**
   * The version of photoReal to use. Must be v1 or v2. Only available for `leonardoai` provider
   */
  photoRealVersion?: GetV2LogsIdCacheConfigResponsePhotoRealVersion | undefined;
  /**
   * The format to return the embeddings
   */
  encodingFormat?: GetV2LogsIdCacheConfigResponseEncodingFormat | undefined;
};

export const GetV2LogsIdCacheConfigResponseProvider = {
  Cohere: "cohere",
  Openai: "openai",
  Anthropic: "anthropic",
  Huggingface: "huggingface",
  Replicate: "replicate",
  Google: "google",
  GoogleAi: "google-ai",
  Azure: "azure",
  Aws: "aws",
  Anyscale: "anyscale",
  Perplexity: "perplexity",
  Groq: "groq",
  Fal: "fal",
  Leonardoai: "leonardoai",
  Nvidia: "nvidia",
} as const;
export type GetV2LogsIdCacheConfigResponseProvider = ClosedEnum<
  typeof GetV2LogsIdCacheConfigResponseProvider
>;

/**
 * Configuration of embedding model to be used
 */
export type GetV2LogsIdCacheConfigModelConfig = {
  model: string;
  /**
   * The id of the resource
   */
  modelDbId: string;
  /**
   * The type of the model
   */
  modelType: GetV2LogsIdCacheConfigResponseModelType;
  /**
   * Model Parameters: Not all parameters apply to every model
   */
  modelParameters: GetV2LogsIdCacheConfigResponseModelParameters;
  provider: GetV2LogsIdCacheConfigResponseProvider;
  /**
   * The id of the resource
   */
  integrationId?: string | null | undefined;
  version?: string | undefined;
};

/**
 * Schema for exact matching type of cache.
 */
export type GetV2LogsIdCacheConfigResponse2 = {
  type: GetV2LogsIdCacheConfigResponse200ApplicationJSONType;
  /**
   * Configuration of embedding model to be used
   */
  modelConfig: GetV2LogsIdCacheConfigModelConfig;
  /**
   * Time To Live
   */
  ttl?: number | undefined;
  /**
   * A floating-point number typically ranging from 0 to 1.
   */
  similarityScoreThreshold?: number | undefined;
};

export const GetV2LogsIdCacheConfigResponse200Type = {
  Exact: "exact",
} as const;
export type GetV2LogsIdCacheConfigResponse200Type = ClosedEnum<
  typeof GetV2LogsIdCacheConfigResponse200Type
>;

/**
 * Schema for exact matching type of cache.
 */
export type GetV2LogsIdCacheConfigResponse1 = {
  type: GetV2LogsIdCacheConfigResponse200Type;
  /**
   * Time To Live
   */
  ttl?: number | undefined;
};

export type GetV2LogsIdResponseBodyCacheConfig =
  | GetV2LogsIdCacheConfigResponse1
  | GetV2LogsIdCacheConfigResponse2;

export const GetV2LogsIdEvaluatorsResponseConfigType = {
  InputEvaluator: "input_evaluator",
  OutputEvaluator: "output_evaluator",
  InputGuardrail: "input_guardrail",
  OutputGuardrail: "output_guardrail",
} as const;
export type GetV2LogsIdEvaluatorsResponseConfigType = ClosedEnum<
  typeof GetV2LogsIdEvaluatorsResponseConfigType
>;

export const GetV2LogsIdEvaluatorsResponse200Type = {
  Guardrail: "guardrail",
} as const;
export type GetV2LogsIdEvaluatorsResponse200Type = ClosedEnum<
  typeof GetV2LogsIdEvaluatorsResponse200Type
>;

export type GetV2LogsIdEvaluators2 = {
  id: string;
  configType: GetV2LogsIdEvaluatorsResponseConfigType;
  evaluatorId: string;
  enabled?: boolean | undefined;
  type: GetV2LogsIdEvaluatorsResponse200Type;
  sampleRate?: number | undefined;
};

export const GetV2LogsIdEvaluatorsConfigType = {
  InputEvaluator: "input_evaluator",
  OutputEvaluator: "output_evaluator",
  InputGuardrail: "input_guardrail",
  OutputGuardrail: "output_guardrail",
} as const;
export type GetV2LogsIdEvaluatorsConfigType = ClosedEnum<
  typeof GetV2LogsIdEvaluatorsConfigType
>;

export const GetV2LogsIdEvaluatorsResponseType = {
  Evaluator: "evaluator",
} as const;
export type GetV2LogsIdEvaluatorsResponseType = ClosedEnum<
  typeof GetV2LogsIdEvaluatorsResponseType
>;

export type GetV2LogsIdEvaluators1 = {
  id: string;
  configType: GetV2LogsIdEvaluatorsConfigType;
  evaluatorId: string;
  enabled?: boolean | undefined;
  type: GetV2LogsIdEvaluatorsResponseType;
  sampleRate?: number | undefined;
};

export type ResponseBodyEvaluators =
  | GetV2LogsIdEvaluators1
  | GetV2LogsIdEvaluators2;

export const ResponseBodyGuardrailsBehavior = {
  Retry: "retry",
  Fallback: "fallback",
} as const;
export type ResponseBodyGuardrailsBehavior = ClosedEnum<
  typeof ResponseBodyGuardrailsBehavior
>;

export type Settings = {
  outputMasking?: boolean | undefined;
  isCachingEnabled?: boolean | undefined;
  cacheConfig?:
    | GetV2LogsIdCacheConfigResponse1
    | GetV2LogsIdCacheConfigResponse2
    | null
    | undefined;
  evaluators?:
    | Array<GetV2LogsIdEvaluators1 | GetV2LogsIdEvaluators2>
    | undefined;
  guardrailsBehavior?: ResponseBodyGuardrailsBehavior | undefined;
};

export type Errors = {
  code: number;
  message: string;
};

export type ProcessingAttempts = {
  id: string;
  startedAt: string;
  queuedAt?: string | undefined;
  completedAt?: string | undefined;
  errors?: Array<Errors> | undefined;
};

export type PromptSnippets = {
  /**
   * The id of the resource
   */
  id: string;
  key: string;
  value: string;
};

export type ResponseBodyFiles = {
  fileId: string;
  fileName: string;
  objectName: string;
  content: string;
};

export const GetV2LogsIdCacheConfigType = {
  Semantic: "semantic",
} as const;
export type GetV2LogsIdCacheConfigType = ClosedEnum<
  typeof GetV2LogsIdCacheConfigType
>;

/**
 * The type of the model
 */
export const CacheConfigModelType = {
  Chat: "chat",
  Completion: "completion",
  Embedding: "embedding",
  Vision: "vision",
  Image: "image",
  Tts: "tts",
  Stt: "stt",
  Rerank: "rerank",
} as const;
/**
 * The type of the model
 */
export type CacheConfigModelType = ClosedEnum<typeof CacheConfigModelType>;

/**
 * Only supported on `image` models.
 */
export const CacheConfigFormat = {
  Url: "url",
  B64Json: "b64_json",
  Text: "text",
  JsonObject: "json_object",
} as const;
/**
 * Only supported on `image` models.
 */
export type CacheConfigFormat = ClosedEnum<typeof CacheConfigFormat>;

/**
 * Only supported on `image` models.
 */
export const CacheConfigQuality = {
  Standard: "standard",
  Hd: "hd",
} as const;
/**
 * Only supported on `image` models.
 */
export type CacheConfigQuality = ClosedEnum<typeof CacheConfigQuality>;

export const GetV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody2Type =
  {
    JsonObject: "json_object",
  } as const;
export type GetV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody2Type =
  ClosedEnum<
    typeof GetV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody2Type
  >;

export type GetV2LogsIdResponseFormatResponse200ApplicationJson2 = {
  type: GetV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody2Type;
};

export const GetV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody2DataType =
  {
    JsonSchema: "json_schema",
  } as const;
export type GetV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody2DataType =
  ClosedEnum<
    typeof GetV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody2DataType
  >;

export type GetV2LogsIdResponseFormatResponse200ApplicationJSONJSONSchema = {
  name: string;
  strict: boolean;
  schema: { [k: string]: any };
};

export type GetV2LogsIdResponseFormatResponse200ApplicationJson1 = {
  type:
    GetV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody2DataType;
  jsonSchema: GetV2LogsIdResponseFormatResponse200ApplicationJSONJSONSchema;
};

/**
 * An object specifying the format that the model must output.
 *
 * @remarks
 *
 *  Setting to `{ "type": "json_schema", "json_schema": {...} }` enables Structured Outputs which ensures the model will match your supplied JSON schema
 *
 *  Setting to `{ "type": "json_object" }` enables JSON mode, which ensures the message the model generates is valid JSON.
 *
 * Important: when using JSON mode, you must also instruct the model to produce JSON yourself via a system or user message. Without this, the model may generate an unending stream of whitespace until the generation reaches the token limit, resulting in a long-running and seemingly "stuck" request. Also note that the message content may be partially cut off if finish_reason="length", which indicates the generation exceeded max_tokens or the conversation exceeded the max context length.
 */
export type CacheConfigResponseFormat =
  | GetV2LogsIdResponseFormatResponse200ApplicationJson2
  | GetV2LogsIdResponseFormatResponse200ApplicationJson1;

/**
 * The version of photoReal to use. Must be v1 or v2. Only available for `leonardoai` provider
 */
export const CacheConfigPhotoRealVersion = {
  V1: "v1",
  V2: "v2",
} as const;
/**
 * The version of photoReal to use. Must be v1 or v2. Only available for `leonardoai` provider
 */
export type CacheConfigPhotoRealVersion = ClosedEnum<
  typeof CacheConfigPhotoRealVersion
>;

/**
 * The format to return the embeddings
 */
export const CacheConfigEncodingFormat = {
  Float: "float",
  Base64: "base64",
} as const;
/**
 * The format to return the embeddings
 */
export type CacheConfigEncodingFormat = ClosedEnum<
  typeof CacheConfigEncodingFormat
>;

/**
 * Model Parameters: Not all parameters apply to every model
 */
export type CacheConfigModelParameters = {
  /**
   * Only supported on `chat` and `completion` models.
   */
  temperature?: number | undefined;
  /**
   * Only supported on `chat` and `completion` models.
   */
  maxTokens?: number | undefined;
  /**
   * Only supported on `chat` and `completion` models.
   */
  topK?: number | undefined;
  /**
   * Only supported on `chat` and `completion` models.
   */
  topP?: number | undefined;
  /**
   * Only supported on `chat` and `completion` models.
   */
  frequencyPenalty?: number | undefined;
  /**
   * Only supported on `chat` and `completion` models.
   */
  presencePenalty?: number | undefined;
  /**
   * Only supported on `image` models.
   */
  numImages?: number | undefined;
  /**
   * Best effort deterministic seed for the model. Currently only OpenAI models support these
   */
  seed?: number | undefined;
  /**
   * Only supported on `image` models.
   */
  format?: CacheConfigFormat | undefined;
  /**
   * Only supported on `image` models.
   */
  dimensions?: string | undefined;
  /**
   * Only supported on `image` models.
   */
  quality?: CacheConfigQuality | undefined;
  /**
   * Only supported on `image` models.
   */
  style?: string | undefined;
  /**
   * An object specifying the format that the model must output.
   *
   * @remarks
   *
   *  Setting to `{ "type": "json_schema", "json_schema": {...} }` enables Structured Outputs which ensures the model will match your supplied JSON schema
   *
   *  Setting to `{ "type": "json_object" }` enables JSON mode, which ensures the message the model generates is valid JSON.
   *
   * Important: when using JSON mode, you must also instruct the model to produce JSON yourself via a system or user message. Without this, the model may generate an unending stream of whitespace until the generation reaches the token limit, resulting in a long-running and seemingly "stuck" request. Also note that the message content may be partially cut off if finish_reason="length", which indicates the generation exceeded max_tokens or the conversation exceeded the max context length.
   */
  responseFormat?:
    | GetV2LogsIdResponseFormatResponse200ApplicationJson2
    | GetV2LogsIdResponseFormatResponse200ApplicationJson1
    | null
    | undefined;
  /**
   * The version of photoReal to use. Must be v1 or v2. Only available for `leonardoai` provider
   */
  photoRealVersion?: CacheConfigPhotoRealVersion | undefined;
  /**
   * The format to return the embeddings
   */
  encodingFormat?: CacheConfigEncodingFormat | undefined;
};

export const CacheConfigProvider = {
  Cohere: "cohere",
  Openai: "openai",
  Anthropic: "anthropic",
  Huggingface: "huggingface",
  Replicate: "replicate",
  Google: "google",
  GoogleAi: "google-ai",
  Azure: "azure",
  Aws: "aws",
  Anyscale: "anyscale",
  Perplexity: "perplexity",
  Groq: "groq",
  Fal: "fal",
  Leonardoai: "leonardoai",
  Nvidia: "nvidia",
} as const;
export type CacheConfigProvider = ClosedEnum<typeof CacheConfigProvider>;

/**
 * Configuration of embedding model to be used
 */
export type ModelConfig = {
  model: string;
  /**
   * The id of the resource
   */
  modelDbId: string;
  /**
   * The type of the model
   */
  modelType: CacheConfigModelType;
  /**
   * Model Parameters: Not all parameters apply to every model
   */
  modelParameters: CacheConfigModelParameters;
  provider: CacheConfigProvider;
  /**
   * The id of the resource
   */
  integrationId?: string | null | undefined;
  version?: string | undefined;
};

/**
 * Schema for exact matching type of cache.
 */
export type CacheConfig2 = {
  type: GetV2LogsIdCacheConfigType;
  /**
   * Configuration of embedding model to be used
   */
  modelConfig: ModelConfig;
  /**
   * Time To Live
   */
  ttl?: number | undefined;
  /**
   * A floating-point number typically ranging from 0 to 1.
   */
  similarityScoreThreshold?: number | undefined;
};

export const CacheConfigType = {
  Exact: "exact",
} as const;
export type CacheConfigType = ClosedEnum<typeof CacheConfigType>;

/**
 * Schema for exact matching type of cache.
 */
export type CacheConfig1 = {
  type: CacheConfigType;
  /**
   * Time To Live
   */
  ttl?: number | undefined;
};

export type CacheConfig = CacheConfig1 | CacheConfig2;

export const CacheStatus = {
  Hit: "HIT",
  Miss: "MISS",
} as const;
export type CacheStatus = ClosedEnum<typeof CacheStatus>;

export type GetV2LogsIdResponseBodyData = {
  deploymentId: string;
  deploymentKey: string;
  deploymentVariantVersion: string;
  deploymentVariantPosition: number;
  deploymentVariantId: string;
  isDefaultMatched: boolean;
  choices?: Array<ResponseBodyChoices> | undefined;
  integrationIds?: Array<string> | undefined;
  action: ResponseBodyAction;
  promptConfig: ResponseBodyPromptConfig;
  variables: Array<Variables>;
  performance?: ResponseBodyPerformance | undefined;
  usage?: ResponseBodyUsage | undefined;
  billing?: Billing | undefined;
  retries: Array<Retries>;
  providerResponse?: any | undefined;
  retrievals?: Array<ResponseBodyRetrievals> | undefined;
  knowledgeBases?: Array<KnowledgeBases> | undefined;
  tools?: Array<ResponseBodyTools> | undefined;
  metadata?: ResponseBodyMetadata | undefined;
  settings?: Settings | undefined;
  processingAttempts?: Array<ProcessingAttempts> | undefined;
  promptSnippets: Array<PromptSnippets>;
  files?: Array<ResponseBodyFiles> | undefined;
  cacheKey?: string | undefined;
  cacheConfig?: CacheConfig1 | CacheConfig2 | undefined;
  isCachingEnabled?: boolean | undefined;
  cacheStatus?: CacheStatus | undefined;
};

/**
 * The schema for the deployment workflow run
 */
export type ResponseBody2 = {
  /**
   * The unique identifier for the workflow run
   */
  id: string;
  /**
   * The unique identifier for the workspace
   */
  workspaceId: string;
  /**
   * Metadata for the workflow run
   */
  workflowMetadata?: { [k: string]: any } | undefined;
  /**
   * Input for the workflow run
   */
  workflowInput?: { [k: string]: any } | undefined;
  /**
   * Output for the workflow run
   */
  workflowOutput?: { [k: string]: any } | undefined;
  /**
   * The optional project_id for the entity of the event
   */
  projectId?: string | undefined;
  /**
   * An optional field that is filled if the workflow was triggered by an HTTP request
   */
  requestProperties?: ResponseBodyRequestProperties | undefined;
  startedAt: Date;
  finishedAt?: Date | undefined;
  evals: Array<
    | GetV2LogsIdEvals1
    | GetV2LogsIdEvals2
    | GetV2LogsIdEvals3
    | GetV2LogsIdEvals4
    | GetV2LogsIdEvals5
    | GetV2LogsIdEvals6
    | GetV2LogsIdEvals7
  >;
  productType: ResponseBodyProductType;
  relatedEntities: Array<
    | GetV2LogsIdRelatedEntities1
    | GetV2LogsIdRelatedEntities2
    | GetV2LogsIdRelatedEntities3
    | RelatedEntities4
    | RelatedEntities5
    | RelatedEntities6
    | RelatedEntities7
  >;
  data: GetV2LogsIdResponseBodyData;
};

/**
 * An optional field that is filled if the workflow was triggered by an HTTP request
 */
export type RequestProperties = {
  source?: string | undefined;
  location?: string | undefined;
  latitude?: string | undefined;
  longitude?: string | undefined;
  responseTime?: number | undefined;
  metadata?: { [k: string]: any } | undefined;
  status?: number | undefined;
  context?: { [k: string]: any } | undefined;
  extraParams?: { [k: string]: any } | undefined;
};

export const GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody1Type = {
  LlmEval: "llm_eval",
} as const;
export type GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody1Type =
  ClosedEnum<
    typeof GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody1Type
  >;

/**
 * An optional field that is filled if the workflow was triggered by an HTTP request
 */
export type EvalsRequestProperties = {
  source?: string | undefined;
  location?: string | undefined;
  latitude?: string | undefined;
  longitude?: string | undefined;
  responseTime?: number | undefined;
  metadata?: { [k: string]: any } | undefined;
  status?: number | undefined;
  context?: { [k: string]: any } | undefined;
  extraParams?: { [k: string]: any } | undefined;
};

/**
 * Orquesta product
 */
export const EvalsProductType = {
  Remoteconfigs: "remoteconfigs",
  Deployments: "deployments",
  Experiments: "experiments",
  Playgrounds: "playgrounds",
  LlmEvaluator: "llm_evaluator",
  Knowledge: "knowledge",
  Router: "router",
  Workflows: "workflows",
} as const;
/**
 * Orquesta product
 */
export type EvalsProductType = ClosedEnum<typeof EvalsProductType>;

export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals7WorkflowRunType =
  {
    Evaluator: "evaluator",
  } as const;
export type GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals7WorkflowRunType =
  ClosedEnum<
    typeof GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals7WorkflowRunType
  >;

/**
 * Define the relationship between an evaluator and an entity. Can be LLM Evals, Code Evals or HTTP Evals
 */
export type GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals71 =
  {
    type:
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals7WorkflowRunType;
    /**
     * The id of the resource
     */
    evaluatorId: string;
  };

export type GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody17RelatedEntities =
  GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals71;

export const GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody1Evals7WorkflowRun4Type =
  {
    StringArray: "string_array",
  } as const;
export type GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody1Evals7WorkflowRun4Type =
  ClosedEnum<
    typeof GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody1Evals7WorkflowRun4Type
  >;

export const GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody1Evals7Status =
  {
    Pending: "pending",
    Completed: "completed",
    Failed: "failed",
  } as const;
export type GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody1Evals7Status =
  ClosedEnum<
    typeof GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody1Evals7Status
  >;

export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals7WorkflowRunEvals44Type =
  {
    Evaluator: "evaluator",
  } as const;
export type GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals7WorkflowRunEvals44Type =
  ClosedEnum<
    typeof GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals7WorkflowRunEvals44Type
  >;

/**
 * Define the relationship between an evaluator and an entity. Can be LLM Evals, Code Evals or HTTP Evals
 */
export type GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals7WorkflowRunEvals4 =
  {
    type:
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals7WorkflowRunEvals44Type;
    /**
     * The id of the resource
     */
    evaluatorId: string;
  };

export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals7WorkflowRunEvals43Type =
  {
    HumanEval: "human_eval",
  } as const;
export type GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals7WorkflowRunEvals43Type =
  ClosedEnum<
    typeof GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals7WorkflowRunEvals43Type
  >;

/**
 * Define the relationship between an entity and a human eval, also known as feedback
 */
export type GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals7WorkflowRunEvals3 =
  {
    type:
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals7WorkflowRunEvals43Type;
    /**
     * The id of the resource
     */
    humanEvalId: string;
  };

export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals7WorkflowRunEvals42Type =
  {
    Contact: "contact",
  } as const;
export type GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals7WorkflowRunEvals42Type =
  ClosedEnum<
    typeof GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals7WorkflowRunEvals42Type
  >;

/**
 * Define the user set using the SDK
 */
export type GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals7WorkflowRunEvals2 =
  {
    type:
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals7WorkflowRunEvals42Type;
    contactId: string;
  };

export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals7WorkflowRunEvals4Type =
  {
    Account: "account",
  } as const;
export type GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals7WorkflowRunEvals4Type =
  ClosedEnum<
    typeof GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals7WorkflowRunEvals4Type
  >;

/**
 * Define the internal account of the system. Also sometimes called user (internal)
 */
export type GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals7WorkflowRunEvals41 =
  {
    type:
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals7WorkflowRunEvals4Type;
    /**
     * The id of the resource
     */
    accountId: string;
  };

export type GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody1Evals7WorkflowRun4RelatedEntities =
  | GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals7WorkflowRunEvals41
  | GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals7WorkflowRunEvals2
  | GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals7WorkflowRunEvals3
  | GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals7WorkflowRunEvals4;

export type GetV2LogsIdEvalsResponse200ApplicationJson4 = {
  type:
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody1Evals7WorkflowRun4Type;
  values: Array<string>;
  /**
   * The id of the resource
   */
  id: string;
  status: GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody1Evals7Status;
  timestamp: Date;
  relatedEntities: Array<
    | GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals7WorkflowRunEvals41
    | GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals7WorkflowRunEvals2
    | GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals7WorkflowRunEvals3
    | GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals7WorkflowRunEvals4
  >;
};

export const GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody1Evals7WorkflowRunType =
  {
    Boolean: "boolean",
  } as const;
export type GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody1Evals7WorkflowRunType =
  ClosedEnum<
    typeof GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody1Evals7WorkflowRunType
  >;

export const GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody1EvalsStatus =
  {
    Pending: "pending",
    Completed: "completed",
    Failed: "failed",
  } as const;
export type GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody1EvalsStatus =
  ClosedEnum<
    typeof GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody1EvalsStatus
  >;

export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals7WorkflowRunEvals34Type =
  {
    Evaluator: "evaluator",
  } as const;
export type GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals7WorkflowRunEvals34Type =
  ClosedEnum<
    typeof GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals7WorkflowRunEvals34Type
  >;

/**
 * Define the relationship between an evaluator and an entity. Can be LLM Evals, Code Evals or HTTP Evals
 */
export type GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals7WorkflowRun4 =
  {
    type:
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals7WorkflowRunEvals34Type;
    /**
     * The id of the resource
     */
    evaluatorId: string;
  };

export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals7WorkflowRunEvals33Type =
  {
    HumanEval: "human_eval",
  } as const;
export type GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals7WorkflowRunEvals33Type =
  ClosedEnum<
    typeof GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals7WorkflowRunEvals33Type
  >;

/**
 * Define the relationship between an entity and a human eval, also known as feedback
 */
export type GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals7WorkflowRun3 =
  {
    type:
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals7WorkflowRunEvals33Type;
    /**
     * The id of the resource
     */
    humanEvalId: string;
  };

export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals7WorkflowRunEvals32Type =
  {
    Contact: "contact",
  } as const;
export type GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals7WorkflowRunEvals32Type =
  ClosedEnum<
    typeof GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals7WorkflowRunEvals32Type
  >;

/**
 * Define the user set using the SDK
 */
export type GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals7WorkflowRun2 =
  {
    type:
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals7WorkflowRunEvals32Type;
    contactId: string;
  };

export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals7WorkflowRunEvals3Type =
  {
    Account: "account",
  } as const;
export type GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals7WorkflowRunEvals3Type =
  ClosedEnum<
    typeof GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals7WorkflowRunEvals3Type
  >;

/**
 * Define the internal account of the system. Also sometimes called user (internal)
 */
export type GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals7WorkflowRunEvals1 =
  {
    type:
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals7WorkflowRunEvals3Type;
    /**
     * The id of the resource
     */
    accountId: string;
  };

export type GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody1Evals7WorkflowRunRelatedEntities =
  | GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals7WorkflowRunEvals1
  | GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals7WorkflowRun2
  | GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals7WorkflowRun3
  | GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals7WorkflowRun4;

export type GetV2LogsIdEvalsResponse200ApplicationJson3 = {
  type:
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody1Evals7WorkflowRunType;
  value: boolean;
  /**
   * The id of the resource
   */
  id: string;
  status: GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody1EvalsStatus;
  timestamp: Date;
  relatedEntities: Array<
    | GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals7WorkflowRunEvals1
    | GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals7WorkflowRun2
    | GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals7WorkflowRun3
    | GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals7WorkflowRun4
  >;
};

export const GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody1Evals7Type =
  {
    Number: "number",
  } as const;
export type GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody1Evals7Type =
  ClosedEnum<
    typeof GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody1Evals7Type
  >;

export const GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody1Status = {
  Pending: "pending",
  Completed: "completed",
  Failed: "failed",
} as const;
export type GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody1Status =
  ClosedEnum<
    typeof GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody1Status
  >;

export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals7WorkflowRunEvals24Type =
  {
    Evaluator: "evaluator",
  } as const;
export type GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals7WorkflowRunEvals24Type =
  ClosedEnum<
    typeof GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals7WorkflowRunEvals24Type
  >;

/**
 * Define the relationship between an evaluator and an entity. Can be LLM Evals, Code Evals or HTTP Evals
 */
export type GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals74 =
  {
    type:
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals7WorkflowRunEvals24Type;
    /**
     * The id of the resource
     */
    evaluatorId: string;
  };

export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals7WorkflowRunEvals23Type =
  {
    HumanEval: "human_eval",
  } as const;
export type GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals7WorkflowRunEvals23Type =
  ClosedEnum<
    typeof GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals7WorkflowRunEvals23Type
  >;

/**
 * Define the relationship between an entity and a human eval, also known as feedback
 */
export type GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals73 =
  {
    type:
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals7WorkflowRunEvals23Type;
    /**
     * The id of the resource
     */
    humanEvalId: string;
  };

export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals7WorkflowRunEvals22Type =
  {
    Contact: "contact",
  } as const;
export type GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals7WorkflowRunEvals22Type =
  ClosedEnum<
    typeof GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals7WorkflowRunEvals22Type
  >;

/**
 * Define the user set using the SDK
 */
export type GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals72 =
  {
    type:
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals7WorkflowRunEvals22Type;
    contactId: string;
  };

export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals7WorkflowRunEvals2Type =
  {
    Account: "account",
  } as const;
export type GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals7WorkflowRunEvals2Type =
  ClosedEnum<
    typeof GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals7WorkflowRunEvals2Type
  >;

/**
 * Define the internal account of the system. Also sometimes called user (internal)
 */
export type GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals7WorkflowRun1 =
  {
    type:
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals7WorkflowRunEvals2Type;
    /**
     * The id of the resource
     */
    accountId: string;
  };

export type GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody1Evals7RelatedEntities =
  | GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals7WorkflowRun1
  | GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals72
  | GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals73
  | GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals74;

export type GetV2LogsIdEvalsResponse200ApplicationJson2 = {
  type: GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody1Evals7Type;
  value: number;
  /**
   * The id of the resource
   */
  id: string;
  status: GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody1Status;
  timestamp: Date;
  relatedEntities: Array<
    | GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals7WorkflowRun1
    | GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals72
    | GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals73
    | GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals74
  >;
};

export const GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody1EvalsType =
  {
    String: "string",
  } as const;
export type GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody1EvalsType =
  ClosedEnum<
    typeof GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody1EvalsType
  >;

export const GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody1Evals7WorkflowRunStatus =
  {
    Pending: "pending",
    Completed: "completed",
    Failed: "failed",
  } as const;
export type GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody1Evals7WorkflowRunStatus =
  ClosedEnum<
    typeof GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody1Evals7WorkflowRunStatus
  >;

export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals7WorkflowRunEvals14Type =
  {
    Evaluator: "evaluator",
  } as const;
export type GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals7WorkflowRunEvals14Type =
  ClosedEnum<
    typeof GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals7WorkflowRunEvals14Type
  >;

/**
 * Define the relationship between an evaluator and an entity. Can be LLM Evals, Code Evals or HTTP Evals
 */
export type GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals7WorkflowRunEvals14 =
  {
    type:
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals7WorkflowRunEvals14Type;
    /**
     * The id of the resource
     */
    evaluatorId: string;
  };

export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals7WorkflowRunEvals1Type =
  {
    HumanEval: "human_eval",
  } as const;
export type GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals7WorkflowRunEvals1Type =
  ClosedEnum<
    typeof GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals7WorkflowRunEvals1Type
  >;

/**
 * Define the relationship between an entity and a human eval, also known as feedback
 */
export type GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals7WorkflowRunEvals13 =
  {
    type:
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals7WorkflowRunEvals1Type;
    /**
     * The id of the resource
     */
    humanEvalId: string;
  };

export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals7WorkflowRunEvalsType =
  {
    Contact: "contact",
  } as const;
export type GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals7WorkflowRunEvalsType =
  ClosedEnum<
    typeof GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals7WorkflowRunEvalsType
  >;

/**
 * Define the user set using the SDK
 */
export type GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals7WorkflowRunEvals12 =
  {
    type:
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals7WorkflowRunEvalsType;
    contactId: string;
  };

export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals7WorkflowRunEvals11Type =
  {
    Account: "account",
  } as const;
export type GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals7WorkflowRunEvals11Type =
  ClosedEnum<
    typeof GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals7WorkflowRunEvals11Type
  >;

/**
 * Define the internal account of the system. Also sometimes called user (internal)
 */
export type GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals7WorkflowRunEvals11 =
  {
    type:
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals7WorkflowRunEvals11Type;
    /**
     * The id of the resource
     */
    accountId: string;
  };

export type GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody1EvalsRelatedEntities =
  | GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals7WorkflowRunEvals11
  | GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals7WorkflowRunEvals12
  | GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals7WorkflowRunEvals13
  | GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals7WorkflowRunEvals14;

export type GetV2LogsIdEvalsResponse200ApplicationJson1 = {
  type: GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody1EvalsType;
  value: string;
  /**
   * The id of the resource
   */
  id: string;
  status:
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody1Evals7WorkflowRunStatus;
  timestamp: Date;
  relatedEntities: Array<
    | GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals7WorkflowRunEvals11
    | GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals7WorkflowRunEvals12
    | GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals7WorkflowRunEvals13
    | GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals7WorkflowRunEvals14
  >;
};

export type EvalsEvals =
  | GetV2LogsIdEvalsResponse200ApplicationJson1
  | GetV2LogsIdEvalsResponse200ApplicationJson2
  | GetV2LogsIdEvalsResponse200ApplicationJson3
  | GetV2LogsIdEvalsResponse200ApplicationJson4;

/**
 * The role of the prompt message
 */
export const GetV2LogsIdMessageResponse200ApplicationJSONResponseBody1Evals7Role =
  {
    System: "system",
    Assistant: "assistant",
    User: "user",
    Exception: "exception",
    Tool: "tool",
    Prompt: "prompt",
    Correction: "correction",
    ExpectedOutput: "expected_output",
  } as const;
/**
 * The role of the prompt message
 */
export type GetV2LogsIdMessageResponse200ApplicationJSONResponseBody1Evals7Role =
  ClosedEnum<
    typeof GetV2LogsIdMessageResponse200ApplicationJSONResponseBody1Evals7Role
  >;

export type GetV2LogsIdMessageResponse200ApplicationJSONResponseBody13 = {
  /**
   * The role of the prompt message
   */
  role: GetV2LogsIdMessageResponse200ApplicationJSONResponseBody1Evals7Role;
  url: string;
};

/**
 * The role of the prompt message
 */
export const GetV2LogsIdMessageResponse200ApplicationJSONResponseBody1EvalsRole =
  {
    System: "system",
    Assistant: "assistant",
    User: "user",
    Exception: "exception",
    Tool: "tool",
    Prompt: "prompt",
    Correction: "correction",
    ExpectedOutput: "expected_output",
  } as const;
/**
 * The role of the prompt message
 */
export type GetV2LogsIdMessageResponse200ApplicationJSONResponseBody1EvalsRole =
  ClosedEnum<
    typeof GetV2LogsIdMessageResponse200ApplicationJSONResponseBody1EvalsRole
  >;

export type GetV2LogsIdMessageResponse200ApplicationJSONResponseBody12 = {
  /**
   * The role of the prompt message
   */
  role: GetV2LogsIdMessageResponse200ApplicationJSONResponseBody1EvalsRole;
  content: string | null;
};

/**
 * The role of the prompt message
 */
export const GetV2LogsIdMessageResponse200ApplicationJSONResponseBody1Role = {
  System: "system",
  Assistant: "assistant",
  User: "user",
  Exception: "exception",
  Tool: "tool",
  Prompt: "prompt",
  Correction: "correction",
  ExpectedOutput: "expected_output",
} as const;
/**
 * The role of the prompt message
 */
export type GetV2LogsIdMessageResponse200ApplicationJSONResponseBody1Role =
  ClosedEnum<
    typeof GetV2LogsIdMessageResponse200ApplicationJSONResponseBody1Role
  >;

export const GetV2LogsIdMessageResponse200ApplicationJSONResponseBody1Type = {
  Function: "function",
} as const;
export type GetV2LogsIdMessageResponse200ApplicationJSONResponseBody1Type =
  ClosedEnum<
    typeof GetV2LogsIdMessageResponse200ApplicationJSONResponseBody1Type
  >;

export type GetV2LogsIdMessageResponse200ApplicationJSONResponseBody1Function =
  {
    name: string;
    /**
     * JSON string arguments for the functions
     */
    arguments: string;
  };

export type GetV2LogsIdMessageResponse200ApplicationJSONResponseBody1ToolCalls =
  {
    id?: string | undefined;
    index?: number | undefined;
    type: GetV2LogsIdMessageResponse200ApplicationJSONResponseBody1Type;
    function: GetV2LogsIdMessageResponse200ApplicationJSONResponseBody1Function;
  };

export type GetV2LogsIdMessageResponse200ApplicationJSONResponseBody11 = {
  /**
   * The role of the prompt message
   */
  role: GetV2LogsIdMessageResponse200ApplicationJSONResponseBody1Role;
  content?: string | null | undefined;
  toolCalls: Array<
    GetV2LogsIdMessageResponse200ApplicationJSONResponseBody1ToolCalls
  >;
};

export type EvalsMessage =
  | GetV2LogsIdMessageResponse200ApplicationJSONResponseBody12
  | GetV2LogsIdMessageResponse200ApplicationJSONResponseBody13
  | GetV2LogsIdMessageResponse200ApplicationJSONResponseBody11;

export type EvalsChoices = {
  index: number;
  message?:
    | GetV2LogsIdMessageResponse200ApplicationJSONResponseBody12
    | GetV2LogsIdMessageResponse200ApplicationJSONResponseBody13
    | GetV2LogsIdMessageResponse200ApplicationJSONResponseBody11
    | undefined;
  finishReason?: string | null | undefined;
};

export const EvalsAction = {
  Invoke: "invoke",
} as const;
export type EvalsAction = ClosedEnum<typeof EvalsAction>;

/**
 * The type of the model
 */
export const EvalsModelType = {
  Chat: "chat",
  Completion: "completion",
  Embedding: "embedding",
  Vision: "vision",
  Image: "image",
  Tts: "tts",
  Stt: "stt",
  Rerank: "rerank",
} as const;
/**
 * The type of the model
 */
export type EvalsModelType = ClosedEnum<typeof EvalsModelType>;

/**
 * Only supported on `image` models.
 */
export const EvalsFormat = {
  Url: "url",
  B64Json: "b64_json",
  Text: "text",
  JsonObject: "json_object",
} as const;
/**
 * Only supported on `image` models.
 */
export type EvalsFormat = ClosedEnum<typeof EvalsFormat>;

/**
 * Only supported on `image` models.
 */
export const EvalsQuality = {
  Standard: "standard",
  Hd: "hd",
} as const;
/**
 * Only supported on `image` models.
 */
export type EvalsQuality = ClosedEnum<typeof EvalsQuality>;

export const GetV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody1Type =
  {
    JsonObject: "json_object",
  } as const;
export type GetV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody1Type =
  ClosedEnum<
    typeof GetV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody1Type
  >;

export type GetV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody12 =
  {
    type: GetV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody1Type;
  };

export const GetV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody1EvalsType =
  {
    JsonSchema: "json_schema",
  } as const;
export type GetV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody1EvalsType =
  ClosedEnum<
    typeof GetV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody1EvalsType
  >;

export type GetV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody1JSONSchema =
  {
    name: string;
    strict: boolean;
    schema: { [k: string]: any };
  };

export type GetV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody11 =
  {
    type:
      GetV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody1EvalsType;
    jsonSchema:
      GetV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody1JSONSchema;
  };

/**
 * An object specifying the format that the model must output.
 *
 * @remarks
 *
 *  Setting to `{ "type": "json_schema", "json_schema": {...} }` enables Structured Outputs which ensures the model will match your supplied JSON schema
 *
 *  Setting to `{ "type": "json_object" }` enables JSON mode, which ensures the message the model generates is valid JSON.
 *
 * Important: when using JSON mode, you must also instruct the model to produce JSON yourself via a system or user message. Without this, the model may generate an unending stream of whitespace until the generation reaches the token limit, resulting in a long-running and seemingly "stuck" request. Also note that the message content may be partially cut off if finish_reason="length", which indicates the generation exceeded max_tokens or the conversation exceeded the max context length.
 */
export type EvalsResponseFormat =
  | GetV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody12
  | GetV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody11;

/**
 * The version of photoReal to use. Must be v1 or v2. Only available for `leonardoai` provider
 */
export const EvalsPhotoRealVersion = {
  V1: "v1",
  V2: "v2",
} as const;
/**
 * The version of photoReal to use. Must be v1 or v2. Only available for `leonardoai` provider
 */
export type EvalsPhotoRealVersion = ClosedEnum<typeof EvalsPhotoRealVersion>;

/**
 * The format to return the embeddings
 */
export const EvalsEncodingFormat = {
  Float: "float",
  Base64: "base64",
} as const;
/**
 * The format to return the embeddings
 */
export type EvalsEncodingFormat = ClosedEnum<typeof EvalsEncodingFormat>;

/**
 * Model Parameters: Not all parameters apply to every model
 */
export type EvalsModelParameters = {
  /**
   * Only supported on `chat` and `completion` models.
   */
  temperature?: number | undefined;
  /**
   * Only supported on `chat` and `completion` models.
   */
  maxTokens?: number | undefined;
  /**
   * Only supported on `chat` and `completion` models.
   */
  topK?: number | undefined;
  /**
   * Only supported on `chat` and `completion` models.
   */
  topP?: number | undefined;
  /**
   * Only supported on `chat` and `completion` models.
   */
  frequencyPenalty?: number | undefined;
  /**
   * Only supported on `chat` and `completion` models.
   */
  presencePenalty?: number | undefined;
  /**
   * Only supported on `image` models.
   */
  numImages?: number | undefined;
  /**
   * Best effort deterministic seed for the model. Currently only OpenAI models support these
   */
  seed?: number | undefined;
  /**
   * Only supported on `image` models.
   */
  format?: EvalsFormat | undefined;
  /**
   * Only supported on `image` models.
   */
  dimensions?: string | undefined;
  /**
   * Only supported on `image` models.
   */
  quality?: EvalsQuality | undefined;
  /**
   * Only supported on `image` models.
   */
  style?: string | undefined;
  /**
   * An object specifying the format that the model must output.
   *
   * @remarks
   *
   *  Setting to `{ "type": "json_schema", "json_schema": {...} }` enables Structured Outputs which ensures the model will match your supplied JSON schema
   *
   *  Setting to `{ "type": "json_object" }` enables JSON mode, which ensures the message the model generates is valid JSON.
   *
   * Important: when using JSON mode, you must also instruct the model to produce JSON yourself via a system or user message. Without this, the model may generate an unending stream of whitespace until the generation reaches the token limit, resulting in a long-running and seemingly "stuck" request. Also note that the message content may be partially cut off if finish_reason="length", which indicates the generation exceeded max_tokens or the conversation exceeded the max context length.
   */
  responseFormat?:
    | GetV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody12
    | GetV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody11
    | null
    | undefined;
  /**
   * The version of photoReal to use. Must be v1 or v2. Only available for `leonardoai` provider
   */
  photoRealVersion?: EvalsPhotoRealVersion | undefined;
  /**
   * The format to return the embeddings
   */
  encodingFormat?: EvalsEncodingFormat | undefined;
};

export const EvalsProvider = {
  Cohere: "cohere",
  Openai: "openai",
  Anthropic: "anthropic",
  Huggingface: "huggingface",
  Replicate: "replicate",
  Google: "google",
  GoogleAi: "google-ai",
  Azure: "azure",
  Aws: "aws",
  Anyscale: "anyscale",
  Perplexity: "perplexity",
  Groq: "groq",
  Fal: "fal",
  Leonardoai: "leonardoai",
  Nvidia: "nvidia",
} as const;
export type EvalsProvider = ClosedEnum<typeof EvalsProvider>;

/**
 * The role of the prompt message
 */
export const EvalsRole = {
  System: "system",
  Assistant: "assistant",
  User: "user",
  Exception: "exception",
  Tool: "tool",
  Prompt: "prompt",
  Correction: "correction",
  ExpectedOutput: "expected_output",
} as const;
/**
 * The role of the prompt message
 */
export type EvalsRole = ClosedEnum<typeof EvalsRole>;

export const GetV2LogsId2Response200ApplicationJSONResponseBody1Type = {
  ImageUrl: "image_url",
} as const;
export type GetV2LogsId2Response200ApplicationJSONResponseBody1Type =
  ClosedEnum<typeof GetV2LogsId2Response200ApplicationJSONResponseBody1Type>;

export type GetV2LogsId2Response200ApplicationJSONResponseBody1ImageUrl = {
  /**
   * The orq.ai id of the image
   */
  id?: string | undefined;
  /**
   * Either a URL of the image or the base64 encoded data URI.
   */
  url: string;
  /**
   * Specifies the detail level of the image. Currently only supported with OpenAI models
   */
  detail?: string | undefined;
};

/**
 * The image part of the prompt message. Only supported with vision models.
 */
export type GetV2LogsId2Response200ApplicationJSONResponseBody12 = {
  type: GetV2LogsId2Response200ApplicationJSONResponseBody1Type;
  imageUrl: GetV2LogsId2Response200ApplicationJSONResponseBody1ImageUrl;
};

export const GetV2LogsId2Response200ApplicationJSONResponseBody1EvalsType = {
  Text: "text",
} as const;
export type GetV2LogsId2Response200ApplicationJSONResponseBody1EvalsType =
  ClosedEnum<
    typeof GetV2LogsId2Response200ApplicationJSONResponseBody1EvalsType
  >;

/**
 * Text content part of a prompt message
 */
export type GetV2LogsId2Response200ApplicationJSONResponseBody11 = {
  type: GetV2LogsId2Response200ApplicationJSONResponseBody1EvalsType;
  text: string;
};

export type GetV2LogsIdContentResponse200ApplicationJSONResponseBody12 =
  | GetV2LogsId2Response200ApplicationJSONResponseBody11
  | GetV2LogsId2Response200ApplicationJSONResponseBody12;

/**
 * The contents of the user message. Either the text content of the message or an array of content parts with a defined type, each can be of type `text` or `image_url` when passing in images. You can pass multiple images by adding multiple `image_url` content parts.
 */
export type EvalsContent =
  | string
  | Array<
    | GetV2LogsId2Response200ApplicationJSONResponseBody11
    | GetV2LogsId2Response200ApplicationJSONResponseBody12
  >;

export const GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody17WorkflowRunType =
  {
    Function: "function",
  } as const;
export type GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody17WorkflowRunType =
  ClosedEnum<
    typeof GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody17WorkflowRunType
  >;

export type GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody1Function = {
  name: string;
  /**
   * JSON string arguments for the functions
   */
  arguments: string;
};

export type EvalsToolCalls = {
  id?: string | undefined;
  index?: number | undefined;
  type: GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody17WorkflowRunType;
  function: GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody1Function;
};

export type EvalsMessages = {
  /**
   * The role of the prompt message
   */
  role: EvalsRole;
  /**
   * The contents of the user message. Either the text content of the message or an array of content parts with a defined type, each can be of type `text` or `image_url` when passing in images. You can pass multiple images by adding multiple `image_url` content parts.
   */
  content:
    | string
    | Array<
      | GetV2LogsId2Response200ApplicationJSONResponseBody11
      | GetV2LogsId2Response200ApplicationJSONResponseBody12
    >;
  toolCalls?: Array<EvalsToolCalls> | undefined;
  /**
   * The id of the resource
   */
  id?: string | undefined;
};

export type EvalsPromptConfig = {
  stream: boolean;
  model: string;
  /**
   * The id of the resource
   */
  modelDbId: string;
  /**
   * The type of the model
   */
  modelType: EvalsModelType;
  /**
   * Model Parameters: Not all parameters apply to every model
   */
  modelParameters: EvalsModelParameters;
  provider: EvalsProvider;
  messages: Array<EvalsMessages>;
  /**
   * The id of the resource
   */
  integrationId?: string | null | undefined;
  version?: string | undefined;
};

export type EvalsVariables = {
  key: string;
  value?: any | undefined;
  isPii?: boolean | undefined;
};

export type EvalsPerformance = {
  latency: number;
  firstTimeToToken?: number | null | undefined;
  tokensPerSecond?: number | null | undefined;
};

export type EvalsPromptTokensDetails = {
  cachedTokens?: number | undefined;
};

export type EvalsCompletionTokensDetails = {
  reasoningTokens?: number | undefined;
};

export type EvalsUsage = {
  totalTokens?: number | undefined;
  promptTokens?: number | undefined;
  completionTokens?: number | undefined;
  promptTokensDetails?: EvalsPromptTokensDetails | undefined;
  completionTokensDetails?: EvalsCompletionTokensDetails | undefined;
};

export type EvalsBilling = {
  totalCost?: number | null | undefined;
  inputCost?: number | null | undefined;
  outputCost?: number | null | undefined;
  billable: boolean;
};

/**
 * The type of the tool. Currently, only `function` is supported.
 */
export const GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody17Type = {
  Function: "function",
} as const;
/**
 * The type of the tool. Currently, only `function` is supported.
 */
export type GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody17Type =
  ClosedEnum<
    typeof GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody17Type
  >;

export const GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody17WorkflowRunDataType =
  {
    Object: "object",
  } as const;
export type GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody17WorkflowRunDataType =
  ClosedEnum<
    typeof GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody17WorkflowRunDataType
  >;

/**
 * The parameters the functions accepts, described as a JSON Schema object.
 *
 * @remarks
 *
 *  Omitting `parameters` defines a function with an empty parameter list.
 */
export type EvalsParameters = {
  type:
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody17WorkflowRunDataType;
  properties: { [k: string]: any };
  required?: Array<string> | undefined;
  additionalProperties?: boolean | undefined;
};

export type EvalsFunction = {
  /**
   * The name of the function to be called. Must be a-z, A-Z, 0-9, or contain underscores and dashes, with a maximum length of 64.
   */
  name: string;
  /**
   * A description of what the function does, used by the model to choose when and how to call the function.
   */
  description?: string | undefined;
  strict?: boolean | undefined;
  /**
   * The parameters the functions accepts, described as a JSON Schema object.
   *
   * @remarks
   *
   *  Omitting `parameters` defines a function with an empty parameter list.
   */
  parameters: EvalsParameters;
};

export type EvalsTools = {
  /**
   * The type of the tool. Currently, only `function` is supported.
   */
  type: GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody17Type;
  function: EvalsFunction;
};

export type EvalsPromptSnippets = {
  /**
   * The id of the resource
   */
  id: string;
  key: string;
  value: string;
};

export type EvalsData = {
  choices?: Array<EvalsChoices> | undefined;
  action: EvalsAction;
  promptConfig: EvalsPromptConfig;
  variables: Array<EvalsVariables>;
  performance?: EvalsPerformance | undefined;
  usage?: EvalsUsage | undefined;
  billing?: EvalsBilling | undefined;
  tools?: Array<EvalsTools> | undefined;
  promptSnippets: Array<EvalsPromptSnippets>;
};

export type WorkflowRun = {
  id: string;
  /**
   * Metadata for the workflow run
   */
  workflowMetadata?: { [k: string]: any } | undefined;
  /**
   * Input for the workflow run
   */
  workflowInput?: { [k: string]: any } | undefined;
  /**
   * Output for the workflow run
   */
  workflowOutput?: { [k: string]: any } | undefined;
  /**
   * An optional field that is filled if the workflow was triggered by an HTTP request
   */
  requestProperties?: EvalsRequestProperties | undefined;
  startedAt: Date;
  finishedAt?: Date | undefined;
  /**
   * Orquesta product
   */
  productType: EvalsProductType;
  relatedEntities: Array<
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals71
  >;
  evals: Array<
    | GetV2LogsIdEvalsResponse200ApplicationJson1
    | GetV2LogsIdEvalsResponse200ApplicationJson2
    | GetV2LogsIdEvalsResponse200ApplicationJson3
    | GetV2LogsIdEvalsResponse200ApplicationJson4
  >;
  data: EvalsData;
};

export const GetV2LogsIdEvalsResponse200ApplicationJSONResponseBodyStatus = {
  Pending: "pending",
  Completed: "completed",
  Failed: "failed",
} as const;
export type GetV2LogsIdEvalsResponse200ApplicationJSONResponseBodyStatus =
  ClosedEnum<
    typeof GetV2LogsIdEvalsResponse200ApplicationJSONResponseBodyStatus
  >;

export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals74Type =
  {
    Evaluator: "evaluator",
  } as const;
export type GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals74Type =
  ClosedEnum<
    typeof GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals74Type
  >;

/**
 * Define the relationship between an evaluator and an entity. Can be LLM Evals, Code Evals or HTTP Evals
 */
export type GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals4 =
  {
    type:
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals74Type;
    /**
     * The id of the resource
     */
    evaluatorId: string;
  };

export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals73Type =
  {
    HumanEval: "human_eval",
  } as const;
export type GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals73Type =
  ClosedEnum<
    typeof GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals73Type
  >;

/**
 * Define the relationship between an entity and a human eval, also known as feedback
 */
export type GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals3 =
  {
    type:
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals73Type;
    /**
     * The id of the resource
     */
    humanEvalId: string;
  };

export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals72Type =
  {
    Contact: "contact",
  } as const;
export type GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals72Type =
  ClosedEnum<
    typeof GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals72Type
  >;

/**
 * Define the user set using the SDK
 */
export type GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals2 =
  {
    type:
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals72Type;
    contactId: string;
  };

export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals7Type =
  {
    Account: "account",
  } as const;
export type GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals7Type =
  ClosedEnum<
    typeof GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals7Type
  >;

/**
 * Define the internal account of the system. Also sometimes called user (internal)
 */
export type GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals1 =
  {
    type:
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals7Type;
    /**
     * The id of the resource
     */
    accountId: string;
  };

export type GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody1RelatedEntities =
  | GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals1
  | GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals2
  | GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals3
  | GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals4;

export type Evals7 = {
  type: GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody1Type;
  workflowRun: WorkflowRun;
  /**
   * The id of the resource
   */
  id: string;
  status: GetV2LogsIdEvalsResponse200ApplicationJSONResponseBodyStatus;
  timestamp: Date;
  relatedEntities: Array<
    | GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals1
    | GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals2
    | GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals3
    | GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals4
  >;
};

export const GetV2LogsIdEvalsResponse200ApplicationJSONResponseBodyType = {
  BertScore: "bert_score",
} as const;
export type GetV2LogsIdEvalsResponse200ApplicationJSONResponseBodyType =
  ClosedEnum<typeof GetV2LogsIdEvalsResponse200ApplicationJSONResponseBodyType>;

export type GetV2LogsIdEvalsValue = {
  f1: number;
  precision: number;
  recall: number;
};

export const GetV2LogsIdEvalsResponse200ApplicationJSONStatus = {
  Pending: "pending",
  Completed: "completed",
  Failed: "failed",
} as const;
export type GetV2LogsIdEvalsResponse200ApplicationJSONStatus = ClosedEnum<
  typeof GetV2LogsIdEvalsResponse200ApplicationJSONStatus
>;

export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals64Type =
  {
    Evaluator: "evaluator",
  } as const;
export type GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals64Type =
  ClosedEnum<
    typeof GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals64Type
  >;

/**
 * Define the relationship between an evaluator and an entity. Can be LLM Evals, Code Evals or HTTP Evals
 */
export type GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody14 =
  {
    type:
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals64Type;
    /**
     * The id of the resource
     */
    evaluatorId: string;
  };

export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals63Type =
  {
    HumanEval: "human_eval",
  } as const;
export type GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals63Type =
  ClosedEnum<
    typeof GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals63Type
  >;

/**
 * Define the relationship between an entity and a human eval, also known as feedback
 */
export type GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody13 =
  {
    type:
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals63Type;
    /**
     * The id of the resource
     */
    humanEvalId: string;
  };

export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals62Type =
  {
    Contact: "contact",
  } as const;
export type GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals62Type =
  ClosedEnum<
    typeof GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals62Type
  >;

/**
 * Define the user set using the SDK
 */
export type GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody12 =
  {
    type:
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals62Type;
    contactId: string;
  };

export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals6Type =
  {
    Account: "account",
  } as const;
export type GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals6Type =
  ClosedEnum<
    typeof GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals6Type
  >;

/**
 * Define the internal account of the system. Also sometimes called user (internal)
 */
export type GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody11 =
  {
    type:
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals6Type;
    /**
     * The id of the resource
     */
    accountId: string;
  };

export type GetV2LogsIdEvalsResponse200ApplicationJSONResponseBodyRelatedEntities =
  | GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody11
  | GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody12
  | GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody13
  | GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody14;

export type Evals6 = {
  type: GetV2LogsIdEvalsResponse200ApplicationJSONResponseBodyType;
  value: GetV2LogsIdEvalsValue;
  /**
   * The id of the resource
   */
  id: string;
  status: GetV2LogsIdEvalsResponse200ApplicationJSONStatus;
  timestamp: Date;
  relatedEntities: Array<
    | GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody11
    | GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody12
    | GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody13
    | GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody14
  >;
};

export const GetV2LogsIdEvalsResponse200ApplicationJSONType = {
  RougeN: "rouge_n",
} as const;
export type GetV2LogsIdEvalsResponse200ApplicationJSONType = ClosedEnum<
  typeof GetV2LogsIdEvalsResponse200ApplicationJSONType
>;

export type Rouge1 = {
  f1: number;
  precision: number;
  recall: number;
};

export type Rouge2 = {
  f1: number;
  precision: number;
  recall: number;
};

export type RougeL = {
  f1: number;
  precision: number;
  recall: number;
};

export type EvalsValue = {
  rouge1: Rouge1;
  rouge2: Rouge2;
  rougeL: RougeL;
};

export const GetV2LogsIdEvalsResponse200Status = {
  Pending: "pending",
  Completed: "completed",
  Failed: "failed",
} as const;
export type GetV2LogsIdEvalsResponse200Status = ClosedEnum<
  typeof GetV2LogsIdEvalsResponse200Status
>;

export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals54Type =
  {
    Evaluator: "evaluator",
  } as const;
export type GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals54Type =
  ClosedEnum<
    typeof GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals54Type
  >;

/**
 * Define the relationship between an evaluator and an entity. Can be LLM Evals, Code Evals or HTTP Evals
 */
export type GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4 =
  {
    type:
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals54Type;
    /**
     * The id of the resource
     */
    evaluatorId: string;
  };

export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals53Type =
  {
    HumanEval: "human_eval",
  } as const;
export type GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals53Type =
  ClosedEnum<
    typeof GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals53Type
  >;

/**
 * Define the relationship between an entity and a human eval, also known as feedback
 */
export type GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3 =
  {
    type:
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals53Type;
    /**
     * The id of the resource
     */
    humanEvalId: string;
  };

export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals52Type =
  {
    Contact: "contact",
  } as const;
export type GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals52Type =
  ClosedEnum<
    typeof GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals52Type
  >;

/**
 * Define the user set using the SDK
 */
export type GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2 =
  {
    type:
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals52Type;
    contactId: string;
  };

export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals5Type =
  {
    Account: "account",
  } as const;
export type GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals5Type =
  ClosedEnum<
    typeof GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals5Type
  >;

/**
 * Define the internal account of the system. Also sometimes called user (internal)
 */
export type GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1 =
  {
    type:
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals5Type;
    /**
     * The id of the resource
     */
    accountId: string;
  };

export type GetV2LogsIdEvalsResponse200ApplicationJSONRelatedEntities =
  | GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1
  | GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2
  | GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3
  | GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4;

export type Evals5 = {
  type: GetV2LogsIdEvalsResponse200ApplicationJSONType;
  value: EvalsValue;
  /**
   * The id of the resource
   */
  id: string;
  status: GetV2LogsIdEvalsResponse200Status;
  timestamp: Date;
  relatedEntities: Array<
    | GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1
    | GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2
    | GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3
    | GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4
  >;
};

export const GetV2LogsIdEvalsResponse200Type = {
  StringArray: "string_array",
} as const;
export type GetV2LogsIdEvalsResponse200Type = ClosedEnum<
  typeof GetV2LogsIdEvalsResponse200Type
>;

export const GetV2LogsIdEvalsResponseStatus = {
  Pending: "pending",
  Completed: "completed",
  Failed: "failed",
} as const;
export type GetV2LogsIdEvalsResponseStatus = ClosedEnum<
  typeof GetV2LogsIdEvalsResponseStatus
>;

export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals44Type =
  {
    Evaluator: "evaluator",
  } as const;
export type GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals44Type =
  ClosedEnum<
    typeof GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals44Type
  >;

/**
 * Define the relationship between an evaluator and an entity. Can be LLM Evals, Code Evals or HTTP Evals
 */
export type GetV2LogsIdRelatedEntitiesResponse200ApplicationJson4 = {
  type:
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals44Type;
  /**
   * The id of the resource
   */
  evaluatorId: string;
};

export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals43Type =
  {
    HumanEval: "human_eval",
  } as const;
export type GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals43Type =
  ClosedEnum<
    typeof GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals43Type
  >;

/**
 * Define the relationship between an entity and a human eval, also known as feedback
 */
export type GetV2LogsIdRelatedEntitiesResponse200ApplicationJson3 = {
  type:
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals43Type;
  /**
   * The id of the resource
   */
  humanEvalId: string;
};

export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals42Type =
  {
    Contact: "contact",
  } as const;
export type GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals42Type =
  ClosedEnum<
    typeof GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals42Type
  >;

/**
 * Define the user set using the SDK
 */
export type GetV2LogsIdRelatedEntitiesResponse200ApplicationJson2 = {
  type:
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals42Type;
  contactId: string;
};

export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals4Type =
  {
    Account: "account",
  } as const;
export type GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals4Type =
  ClosedEnum<
    typeof GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals4Type
  >;

/**
 * Define the internal account of the system. Also sometimes called user (internal)
 */
export type GetV2LogsIdRelatedEntitiesResponse200ApplicationJson1 = {
  type:
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals4Type;
  /**
   * The id of the resource
   */
  accountId: string;
};

export type GetV2LogsIdEvalsResponse200RelatedEntities =
  | GetV2LogsIdRelatedEntitiesResponse200ApplicationJson1
  | GetV2LogsIdRelatedEntitiesResponse200ApplicationJson2
  | GetV2LogsIdRelatedEntitiesResponse200ApplicationJson3
  | GetV2LogsIdRelatedEntitiesResponse200ApplicationJson4;

export type Evals4 = {
  type: GetV2LogsIdEvalsResponse200Type;
  values: Array<string>;
  /**
   * The id of the resource
   */
  id: string;
  status: GetV2LogsIdEvalsResponseStatus;
  timestamp: Date;
  relatedEntities: Array<
    | GetV2LogsIdRelatedEntitiesResponse200ApplicationJson1
    | GetV2LogsIdRelatedEntitiesResponse200ApplicationJson2
    | GetV2LogsIdRelatedEntitiesResponse200ApplicationJson3
    | GetV2LogsIdRelatedEntitiesResponse200ApplicationJson4
  >;
};

export const GetV2LogsIdEvalsResponseType = {
  Boolean: "boolean",
} as const;
export type GetV2LogsIdEvalsResponseType = ClosedEnum<
  typeof GetV2LogsIdEvalsResponseType
>;

export const GetV2LogsIdEvalsStatus = {
  Pending: "pending",
  Completed: "completed",
  Failed: "failed",
} as const;
export type GetV2LogsIdEvalsStatus = ClosedEnum<typeof GetV2LogsIdEvalsStatus>;

export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals34Type =
  {
    Evaluator: "evaluator",
  } as const;
export type GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals34Type =
  ClosedEnum<
    typeof GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals34Type
  >;

/**
 * Define the relationship between an evaluator and an entity. Can be LLM Evals, Code Evals or HTTP Evals
 */
export type GetV2LogsIdRelatedEntitiesResponse2004 = {
  type:
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals34Type;
  /**
   * The id of the resource
   */
  evaluatorId: string;
};

export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals33Type =
  {
    HumanEval: "human_eval",
  } as const;
export type GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals33Type =
  ClosedEnum<
    typeof GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals33Type
  >;

/**
 * Define the relationship between an entity and a human eval, also known as feedback
 */
export type GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals33 =
  {
    type:
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals33Type;
    /**
     * The id of the resource
     */
    humanEvalId: string;
  };

export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals32Type =
  {
    Contact: "contact",
  } as const;
export type GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals32Type =
  ClosedEnum<
    typeof GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals32Type
  >;

/**
 * Define the user set using the SDK
 */
export type GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals32 =
  {
    type:
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals32Type;
    contactId: string;
  };

export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals3Type =
  {
    Account: "account",
  } as const;
export type GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals3Type =
  ClosedEnum<
    typeof GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals3Type
  >;

/**
 * Define the internal account of the system. Also sometimes called user (internal)
 */
export type GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals31 =
  {
    type:
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals3Type;
    /**
     * The id of the resource
     */
    accountId: string;
  };

export type GetV2LogsIdEvalsResponseRelatedEntities =
  | GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals31
  | GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals32
  | GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals33
  | GetV2LogsIdRelatedEntitiesResponse2004;

export type Evals3 = {
  type: GetV2LogsIdEvalsResponseType;
  value: boolean;
  /**
   * The id of the resource
   */
  id: string;
  status: GetV2LogsIdEvalsStatus;
  timestamp: Date;
  relatedEntities: Array<
    | GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals31
    | GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals32
    | GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals33
    | GetV2LogsIdRelatedEntitiesResponse2004
  >;
};

export const GetV2LogsIdEvalsType = {
  Number: "number",
} as const;
export type GetV2LogsIdEvalsType = ClosedEnum<typeof GetV2LogsIdEvalsType>;

export const EvalsStatus = {
  Pending: "pending",
  Completed: "completed",
  Failed: "failed",
} as const;
export type EvalsStatus = ClosedEnum<typeof EvalsStatus>;

export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals2Type =
  {
    Evaluator: "evaluator",
  } as const;
export type GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals2Type =
  ClosedEnum<
    typeof GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals2Type
  >;

/**
 * Define the relationship between an evaluator and an entity. Can be LLM Evals, Code Evals or HTTP Evals
 */
export type GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals24 =
  {
    type:
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals2Type;
    /**
     * The id of the resource
     */
    evaluatorId: string;
  };

export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1EvalsType =
  {
    HumanEval: "human_eval",
  } as const;
export type GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1EvalsType =
  ClosedEnum<
    typeof GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1EvalsType
  >;

/**
 * Define the relationship between an entity and a human eval, also known as feedback
 */
export type GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals23 =
  {
    type:
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1EvalsType;
    /**
     * The id of the resource
     */
    humanEvalId: string;
  };

export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Type =
  {
    Contact: "contact",
  } as const;
export type GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Type =
  ClosedEnum<
    typeof GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Type
  >;

/**
 * Define the user set using the SDK
 */
export type GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals22 =
  {
    type: GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Type;
    contactId: string;
  };

export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals21Type =
  {
    Account: "account",
  } as const;
export type GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals21Type =
  ClosedEnum<
    typeof GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals21Type
  >;

/**
 * Define the internal account of the system. Also sometimes called user (internal)
 */
export type GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals21 =
  {
    type:
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals21Type;
    /**
     * The id of the resource
     */
    accountId: string;
  };

export type GetV2LogsIdEvalsRelatedEntities =
  | GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals21
  | GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals22
  | GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals23
  | GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals24;

export type Evals2 = {
  type: GetV2LogsIdEvalsType;
  value: number;
  /**
   * The id of the resource
   */
  id: string;
  status: EvalsStatus;
  timestamp: Date;
  relatedEntities: Array<
    | GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals21
    | GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals22
    | GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals23
    | GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals24
  >;
};

export const EvalsType = {
  String: "string",
} as const;
export type EvalsType = ClosedEnum<typeof EvalsType>;

export const Status = {
  Pending: "pending",
  Completed: "completed",
  Failed: "failed",
} as const;
export type Status = ClosedEnum<typeof Status>;

export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals14Type =
  {
    Evaluator: "evaluator",
  } as const;
export type GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals14Type =
  ClosedEnum<
    typeof GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals14Type
  >;

/**
 * Define the relationship between an evaluator and an entity. Can be LLM Evals, Code Evals or HTTP Evals
 */
export type GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals14 =
  {
    type:
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals14Type;
    /**
     * The id of the resource
     */
    evaluatorId: string;
  };

export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals13Type =
  {
    HumanEval: "human_eval",
  } as const;
export type GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals13Type =
  ClosedEnum<
    typeof GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals13Type
  >;

/**
 * Define the relationship between an entity and a human eval, also known as feedback
 */
export type GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals13 =
  {
    type:
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals13Type;
    /**
     * The id of the resource
     */
    humanEvalId: string;
  };

export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals12Type =
  {
    Contact: "contact",
  } as const;
export type GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals12Type =
  ClosedEnum<
    typeof GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals12Type
  >;

/**
 * Define the user set using the SDK
 */
export type GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals12 =
  {
    type:
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals12Type;
    contactId: string;
  };

export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals1Type =
  {
    Account: "account",
  } as const;
export type GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals1Type =
  ClosedEnum<
    typeof GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals1Type
  >;

/**
 * Define the internal account of the system. Also sometimes called user (internal)
 */
export type GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals11 =
  {
    type:
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals1Type;
    /**
     * The id of the resource
     */
    accountId: string;
  };

export type EvalsRelatedEntities =
  | GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals11
  | GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals12
  | GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals13
  | GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals14;

export type Evals1 = {
  type: EvalsType;
  value: string;
  /**
   * The id of the resource
   */
  id: string;
  status: Status;
  timestamp: Date;
  relatedEntities: Array<
    | GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals11
    | GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals12
    | GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals13
    | GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals14
  >;
};

export type Evals =
  | Evals1
  | Evals2
  | Evals3
  | Evals4
  | Evals5
  | Evals6
  | Evals7;

export const ProductType = {
  Remoteconfigs: "remoteconfigs",
} as const;
export type ProductType = ClosedEnum<typeof ProductType>;

export const GetV2LogsIdRelatedEntitiesResponseType = {
  Contact: "contact",
} as const;
export type GetV2LogsIdRelatedEntitiesResponseType = ClosedEnum<
  typeof GetV2LogsIdRelatedEntitiesResponseType
>;

/**
 * Define the user set using the SDK
 */
export type RelatedEntities3 = {
  type: GetV2LogsIdRelatedEntitiesResponseType;
  contactId: string;
};

export const GetV2LogsIdRelatedEntitiesType = {
  RemoteconfigVariant: "remoteconfig_variant",
} as const;
export type GetV2LogsIdRelatedEntitiesType = ClosedEnum<
  typeof GetV2LogsIdRelatedEntitiesType
>;

export type RelatedEntities2 = {
  type: GetV2LogsIdRelatedEntitiesType;
  remoteConfigVariantId: string;
};

export const RelatedEntitiesType = {
  Remoteconfig: "remoteconfig",
} as const;
export type RelatedEntitiesType = ClosedEnum<typeof RelatedEntitiesType>;

export type RelatedEntities1 = {
  type: RelatedEntitiesType;
  remoteConfigId: string;
};

export type RelatedEntities =
  | RelatedEntities1
  | RelatedEntities2
  | RelatedEntities3;

export const Action = {
  GetConfig: "get_config",
  Simulate: "simulate",
} as const;
export type Action = ClosedEnum<typeof Action>;

export type ResponseBodyData = {
  remoteConfigId: string;
  remoteConfigKey: string;
  remoteConfigType: string;
  remoteConfigVersion: number;
  remoteConfigVariantId: string;
  remoteConfigVariantPosition: number;
  remoteConfigValue?: any | undefined;
  isDefaultMatched: boolean;
  action: Action;
};

/**
 * The schema for a remote config workflow run
 */
export type ResponseBody1 = {
  /**
   * The unique identifier for the workflow run
   */
  id: string;
  /**
   * The unique identifier for the workspace
   */
  workspaceId: string;
  /**
   * Metadata for the workflow run
   */
  workflowMetadata?: { [k: string]: any } | undefined;
  /**
   * Input for the workflow run
   */
  workflowInput?: { [k: string]: any } | undefined;
  /**
   * Output for the workflow run
   */
  workflowOutput?: { [k: string]: any } | undefined;
  /**
   * The optional project_id for the entity of the event
   */
  projectId?: string | undefined;
  /**
   * An optional field that is filled if the workflow was triggered by an HTTP request
   */
  requestProperties?: RequestProperties | undefined;
  startedAt: Date;
  finishedAt?: Date | undefined;
  evals: Array<Evals1 | Evals2 | Evals3 | Evals4 | Evals5 | Evals6 | Evals7>;
  productType: ProductType;
  relatedEntities: Array<
    RelatedEntities1 | RelatedEntities2 | RelatedEntities3
  >;
  data: ResponseBodyData;
};

/**
 * The schema for a workflow run
 */
export type GetV2LogsIdResponseBody =
  | ResponseBody1
  | ResponseBody2
  | ResponseBody3
  | ResponseBody4;

/** @internal */
export const GetV2LogsIdRequest$inboundSchema: z.ZodType<
  GetV2LogsIdRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
});

/** @internal */
export type GetV2LogsIdRequest$Outbound = {
  id: string;
};

/** @internal */
export const GetV2LogsIdRequest$outboundSchema: z.ZodType<
  GetV2LogsIdRequest$Outbound,
  z.ZodTypeDef,
  GetV2LogsIdRequest
> = z.object({
  id: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdRequest$ {
  /** @deprecated use `GetV2LogsIdRequest$inboundSchema` instead. */
  export const inboundSchema = GetV2LogsIdRequest$inboundSchema;
  /** @deprecated use `GetV2LogsIdRequest$outboundSchema` instead. */
  export const outboundSchema = GetV2LogsIdRequest$outboundSchema;
  /** @deprecated use `GetV2LogsIdRequest$Outbound` instead. */
  export type Outbound = GetV2LogsIdRequest$Outbound;
}

export function getV2LogsIdRequestToJSON(
  getV2LogsIdRequest: GetV2LogsIdRequest,
): string {
  return JSON.stringify(
    GetV2LogsIdRequest$outboundSchema.parse(getV2LogsIdRequest),
  );
}

export function getV2LogsIdRequestFromJSON(
  jsonString: string,
): SafeParseResult<GetV2LogsIdRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetV2LogsIdRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetV2LogsIdRequest' from JSON`,
  );
}

/** @internal */
export const GetV2LogsIdResponseBodyResponseRequestProperties$inboundSchema:
  z.ZodType<
    GetV2LogsIdResponseBodyResponseRequestProperties,
    z.ZodTypeDef,
    unknown
  > = z.object({
    source: z.string().optional(),
    location: z.string().optional(),
    latitude: z.string().optional(),
    longitude: z.string().optional(),
    response_time: z.number().optional(),
    metadata: z.record(z.any()).optional(),
    status: z.number().optional(),
    context: z.record(z.any()).optional(),
    extra_params: z.record(z.any()).optional(),
  }).transform((v) => {
    return remap$(v, {
      "response_time": "responseTime",
      "extra_params": "extraParams",
    });
  });

/** @internal */
export type GetV2LogsIdResponseBodyResponseRequestProperties$Outbound = {
  source?: string | undefined;
  location?: string | undefined;
  latitude?: string | undefined;
  longitude?: string | undefined;
  response_time?: number | undefined;
  metadata?: { [k: string]: any } | undefined;
  status?: number | undefined;
  context?: { [k: string]: any } | undefined;
  extra_params?: { [k: string]: any } | undefined;
};

/** @internal */
export const GetV2LogsIdResponseBodyResponseRequestProperties$outboundSchema:
  z.ZodType<
    GetV2LogsIdResponseBodyResponseRequestProperties$Outbound,
    z.ZodTypeDef,
    GetV2LogsIdResponseBodyResponseRequestProperties
  > = z.object({
    source: z.string().optional(),
    location: z.string().optional(),
    latitude: z.string().optional(),
    longitude: z.string().optional(),
    responseTime: z.number().optional(),
    metadata: z.record(z.any()).optional(),
    status: z.number().optional(),
    context: z.record(z.any()).optional(),
    extraParams: z.record(z.any()).optional(),
  }).transform((v) => {
    return remap$(v, {
      responseTime: "response_time",
      extraParams: "extra_params",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdResponseBodyResponseRequestProperties$ {
  /** @deprecated use `GetV2LogsIdResponseBodyResponseRequestProperties$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsIdResponseBodyResponseRequestProperties$inboundSchema;
  /** @deprecated use `GetV2LogsIdResponseBodyResponseRequestProperties$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdResponseBodyResponseRequestProperties$outboundSchema;
  /** @deprecated use `GetV2LogsIdResponseBodyResponseRequestProperties$Outbound` instead. */
  export type Outbound =
    GetV2LogsIdResponseBodyResponseRequestProperties$Outbound;
}

export function getV2LogsIdResponseBodyResponseRequestPropertiesToJSON(
  getV2LogsIdResponseBodyResponseRequestProperties:
    GetV2LogsIdResponseBodyResponseRequestProperties,
): string {
  return JSON.stringify(
    GetV2LogsIdResponseBodyResponseRequestProperties$outboundSchema.parse(
      getV2LogsIdResponseBodyResponseRequestProperties,
    ),
  );
}

export function getV2LogsIdResponseBodyResponseRequestPropertiesFromJSON(
  jsonString: string,
): SafeParseResult<
  GetV2LogsIdResponseBodyResponseRequestProperties,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetV2LogsIdResponseBodyResponseRequestProperties$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'GetV2LogsIdResponseBodyResponseRequestProperties' from JSON`,
  );
}

/** @internal */
export const GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody47Type$inboundSchema:
  z.ZodNativeEnum<
    typeof GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody47Type
  > = z.nativeEnum(
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody47Type,
  );

/** @internal */
export const GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody47Type$outboundSchema:
  z.ZodNativeEnum<
    typeof GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody47Type
  > =
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody47Type$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody47Type$ {
  /** @deprecated use `GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody47Type$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody47Type$inboundSchema;
  /** @deprecated use `GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody47Type$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody47Type$outboundSchema;
}

/** @internal */
export const GetV2LogsIdEvalsResponse200RequestProperties$inboundSchema:
  z.ZodType<
    GetV2LogsIdEvalsResponse200RequestProperties,
    z.ZodTypeDef,
    unknown
  > = z.object({
    source: z.string().optional(),
    location: z.string().optional(),
    latitude: z.string().optional(),
    longitude: z.string().optional(),
    response_time: z.number().optional(),
    metadata: z.record(z.any()).optional(),
    status: z.number().optional(),
    context: z.record(z.any()).optional(),
    extra_params: z.record(z.any()).optional(),
  }).transform((v) => {
    return remap$(v, {
      "response_time": "responseTime",
      "extra_params": "extraParams",
    });
  });

/** @internal */
export type GetV2LogsIdEvalsResponse200RequestProperties$Outbound = {
  source?: string | undefined;
  location?: string | undefined;
  latitude?: string | undefined;
  longitude?: string | undefined;
  response_time?: number | undefined;
  metadata?: { [k: string]: any } | undefined;
  status?: number | undefined;
  context?: { [k: string]: any } | undefined;
  extra_params?: { [k: string]: any } | undefined;
};

/** @internal */
export const GetV2LogsIdEvalsResponse200RequestProperties$outboundSchema:
  z.ZodType<
    GetV2LogsIdEvalsResponse200RequestProperties$Outbound,
    z.ZodTypeDef,
    GetV2LogsIdEvalsResponse200RequestProperties
  > = z.object({
    source: z.string().optional(),
    location: z.string().optional(),
    latitude: z.string().optional(),
    longitude: z.string().optional(),
    responseTime: z.number().optional(),
    metadata: z.record(z.any()).optional(),
    status: z.number().optional(),
    context: z.record(z.any()).optional(),
    extraParams: z.record(z.any()).optional(),
  }).transform((v) => {
    return remap$(v, {
      responseTime: "response_time",
      extraParams: "extra_params",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdEvalsResponse200RequestProperties$ {
  /** @deprecated use `GetV2LogsIdEvalsResponse200RequestProperties$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsIdEvalsResponse200RequestProperties$inboundSchema;
  /** @deprecated use `GetV2LogsIdEvalsResponse200RequestProperties$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdEvalsResponse200RequestProperties$outboundSchema;
  /** @deprecated use `GetV2LogsIdEvalsResponse200RequestProperties$Outbound` instead. */
  export type Outbound = GetV2LogsIdEvalsResponse200RequestProperties$Outbound;
}

export function getV2LogsIdEvalsResponse200RequestPropertiesToJSON(
  getV2LogsIdEvalsResponse200RequestProperties:
    GetV2LogsIdEvalsResponse200RequestProperties,
): string {
  return JSON.stringify(
    GetV2LogsIdEvalsResponse200RequestProperties$outboundSchema.parse(
      getV2LogsIdEvalsResponse200RequestProperties,
    ),
  );
}

export function getV2LogsIdEvalsResponse200RequestPropertiesFromJSON(
  jsonString: string,
): SafeParseResult<
  GetV2LogsIdEvalsResponse200RequestProperties,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetV2LogsIdEvalsResponse200RequestProperties$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'GetV2LogsIdEvalsResponse200RequestProperties' from JSON`,
  );
}

/** @internal */
export const GetV2LogsIdEvalsResponse200ProductType$inboundSchema:
  z.ZodNativeEnum<typeof GetV2LogsIdEvalsResponse200ProductType> = z.nativeEnum(
    GetV2LogsIdEvalsResponse200ProductType,
  );

/** @internal */
export const GetV2LogsIdEvalsResponse200ProductType$outboundSchema:
  z.ZodNativeEnum<typeof GetV2LogsIdEvalsResponse200ProductType> =
    GetV2LogsIdEvalsResponse200ProductType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdEvalsResponse200ProductType$ {
  /** @deprecated use `GetV2LogsIdEvalsResponse200ProductType$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsIdEvalsResponse200ProductType$inboundSchema;
  /** @deprecated use `GetV2LogsIdEvalsResponse200ProductType$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdEvalsResponse200ProductType$outboundSchema;
}

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRunType$inboundSchema:
  z.ZodNativeEnum<
    typeof GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRunType
  > = z.nativeEnum(
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRunType,
  );

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRunType$outboundSchema:
  z.ZodNativeEnum<
    typeof GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRunType
  > =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRunType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRunType$ {
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRunType$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRunType$inboundSchema;
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRunType$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRunType$outboundSchema;
}

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRun1$inboundSchema:
  z.ZodType<
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRun1,
    z.ZodTypeDef,
    unknown
  > = z.object({
    type:
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRunType$inboundSchema,
    evaluator_id: z.string(),
  }).transform((v) => {
    return remap$(v, {
      "evaluator_id": "evaluatorId",
    });
  });

/** @internal */
export type GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRun1$Outbound =
  {
    type: string;
    evaluator_id: string;
  };

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRun1$outboundSchema:
  z.ZodType<
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRun1$Outbound,
    z.ZodTypeDef,
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRun1
  > = z.object({
    type:
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRunType$outboundSchema,
    evaluatorId: z.string(),
  }).transform((v) => {
    return remap$(v, {
      evaluatorId: "evaluator_id",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRun1$ {
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRun1$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRun1$inboundSchema;
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRun1$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRun1$outboundSchema;
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRun1$Outbound` instead. */
  export type Outbound =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRun1$Outbound;
}

export function getV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRun1ToJSON(
  getV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRun1:
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRun1,
): string {
  return JSON.stringify(
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRun1$outboundSchema
      .parse(
        getV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRun1,
      ),
  );
}

export function getV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRun1FromJSON(
  jsonString: string,
): SafeParseResult<
  GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRun1,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRun1$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRun1' from JSON`,
  );
}

/** @internal */
export const GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody47WorkflowRunRelatedEntities$inboundSchema:
  z.ZodType<
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody47WorkflowRunRelatedEntities,
    z.ZodTypeDef,
    unknown
  > = z.lazy(() =>
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRun1$inboundSchema
  );

/** @internal */
export type GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody47WorkflowRunRelatedEntities$Outbound =
  GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRun1$Outbound;

/** @internal */
export const GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody47WorkflowRunRelatedEntities$outboundSchema:
  z.ZodType<
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody47WorkflowRunRelatedEntities$Outbound,
    z.ZodTypeDef,
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody47WorkflowRunRelatedEntities
  > = z.lazy(() =>
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRun1$outboundSchema
  );

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody47WorkflowRunRelatedEntities$ {
  /** @deprecated use `GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody47WorkflowRunRelatedEntities$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody47WorkflowRunRelatedEntities$inboundSchema;
  /** @deprecated use `GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody47WorkflowRunRelatedEntities$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody47WorkflowRunRelatedEntities$outboundSchema;
  /** @deprecated use `GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody47WorkflowRunRelatedEntities$Outbound` instead. */
  export type Outbound =
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody47WorkflowRunRelatedEntities$Outbound;
}

export function getV2LogsIdEvalsResponse200ApplicationJSONResponseBody47WorkflowRunRelatedEntitiesToJSON(
  getV2LogsIdEvalsResponse200ApplicationJSONResponseBody47WorkflowRunRelatedEntities:
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody47WorkflowRunRelatedEntities,
): string {
  return JSON.stringify(
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody47WorkflowRunRelatedEntities$outboundSchema
      .parse(
        getV2LogsIdEvalsResponse200ApplicationJSONResponseBody47WorkflowRunRelatedEntities,
      ),
  );
}

export function getV2LogsIdEvalsResponse200ApplicationJSONResponseBody47WorkflowRunRelatedEntitiesFromJSON(
  jsonString: string,
): SafeParseResult<
  GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody47WorkflowRunRelatedEntities,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody47WorkflowRunRelatedEntities$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody47WorkflowRunRelatedEntities' from JSON`,
  );
}

/** @internal */
export const GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody4Evals7WorkflowRun4Type$inboundSchema:
  z.ZodNativeEnum<
    typeof GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody4Evals7WorkflowRun4Type
  > = z.nativeEnum(
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody4Evals7WorkflowRun4Type,
  );

/** @internal */
export const GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody4Evals7WorkflowRun4Type$outboundSchema:
  z.ZodNativeEnum<
    typeof GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody4Evals7WorkflowRun4Type
  > =
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody4Evals7WorkflowRun4Type$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody4Evals7WorkflowRun4Type$ {
  /** @deprecated use `GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody4Evals7WorkflowRun4Type$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody4Evals7WorkflowRun4Type$inboundSchema;
  /** @deprecated use `GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody4Evals7WorkflowRun4Type$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody4Evals7WorkflowRun4Type$outboundSchema;
}

/** @internal */
export const GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody4Evals7WorkflowRun4Status$inboundSchema:
  z.ZodNativeEnum<
    typeof GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody4Evals7WorkflowRun4Status
  > = z.nativeEnum(
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody4Evals7WorkflowRun4Status,
  );

/** @internal */
export const GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody4Evals7WorkflowRun4Status$outboundSchema:
  z.ZodNativeEnum<
    typeof GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody4Evals7WorkflowRun4Status
  > =
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody4Evals7WorkflowRun4Status$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody4Evals7WorkflowRun4Status$ {
  /** @deprecated use `GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody4Evals7WorkflowRun4Status$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody4Evals7WorkflowRun4Status$inboundSchema;
  /** @deprecated use `GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody4Evals7WorkflowRun4Status$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody4Evals7WorkflowRun4Status$outboundSchema;
}

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRunEvals44Type$inboundSchema:
  z.ZodNativeEnum<
    typeof GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRunEvals44Type
  > = z.nativeEnum(
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRunEvals44Type,
  );

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRunEvals44Type$outboundSchema:
  z.ZodNativeEnum<
    typeof GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRunEvals44Type
  > =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRunEvals44Type$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRunEvals44Type$ {
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRunEvals44Type$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRunEvals44Type$inboundSchema;
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRunEvals44Type$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRunEvals44Type$outboundSchema;
}

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRunEvals44$inboundSchema:
  z.ZodType<
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRunEvals44,
    z.ZodTypeDef,
    unknown
  > = z.object({
    type:
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRunEvals44Type$inboundSchema,
    evaluator_id: z.string(),
  }).transform((v) => {
    return remap$(v, {
      "evaluator_id": "evaluatorId",
    });
  });

/** @internal */
export type GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRunEvals44$Outbound =
  {
    type: string;
    evaluator_id: string;
  };

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRunEvals44$outboundSchema:
  z.ZodType<
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRunEvals44$Outbound,
    z.ZodTypeDef,
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRunEvals44
  > = z.object({
    type:
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRunEvals44Type$outboundSchema,
    evaluatorId: z.string(),
  }).transform((v) => {
    return remap$(v, {
      evaluatorId: "evaluator_id",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRunEvals44$ {
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRunEvals44$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRunEvals44$inboundSchema;
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRunEvals44$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRunEvals44$outboundSchema;
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRunEvals44$Outbound` instead. */
  export type Outbound =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRunEvals44$Outbound;
}

export function getV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRunEvals44ToJSON(
  getV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRunEvals44:
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRunEvals44,
): string {
  return JSON.stringify(
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRunEvals44$outboundSchema
      .parse(
        getV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRunEvals44,
      ),
  );
}

export function getV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRunEvals44FromJSON(
  jsonString: string,
): SafeParseResult<
  GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRunEvals44,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRunEvals44$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRunEvals44' from JSON`,
  );
}

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRunEvals43Type$inboundSchema:
  z.ZodNativeEnum<
    typeof GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRunEvals43Type
  > = z.nativeEnum(
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRunEvals43Type,
  );

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRunEvals43Type$outboundSchema:
  z.ZodNativeEnum<
    typeof GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRunEvals43Type
  > =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRunEvals43Type$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRunEvals43Type$ {
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRunEvals43Type$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRunEvals43Type$inboundSchema;
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRunEvals43Type$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRunEvals43Type$outboundSchema;
}

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRunEvals43$inboundSchema:
  z.ZodType<
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRunEvals43,
    z.ZodTypeDef,
    unknown
  > = z.object({
    type:
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRunEvals43Type$inboundSchema,
    human_eval_id: z.string(),
  }).transform((v) => {
    return remap$(v, {
      "human_eval_id": "humanEvalId",
    });
  });

/** @internal */
export type GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRunEvals43$Outbound =
  {
    type: string;
    human_eval_id: string;
  };

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRunEvals43$outboundSchema:
  z.ZodType<
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRunEvals43$Outbound,
    z.ZodTypeDef,
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRunEvals43
  > = z.object({
    type:
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRunEvals43Type$outboundSchema,
    humanEvalId: z.string(),
  }).transform((v) => {
    return remap$(v, {
      humanEvalId: "human_eval_id",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRunEvals43$ {
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRunEvals43$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRunEvals43$inboundSchema;
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRunEvals43$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRunEvals43$outboundSchema;
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRunEvals43$Outbound` instead. */
  export type Outbound =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRunEvals43$Outbound;
}

export function getV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRunEvals43ToJSON(
  getV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRunEvals43:
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRunEvals43,
): string {
  return JSON.stringify(
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRunEvals43$outboundSchema
      .parse(
        getV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRunEvals43,
      ),
  );
}

export function getV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRunEvals43FromJSON(
  jsonString: string,
): SafeParseResult<
  GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRunEvals43,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRunEvals43$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRunEvals43' from JSON`,
  );
}

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRunEvals42Type$inboundSchema:
  z.ZodNativeEnum<
    typeof GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRunEvals42Type
  > = z.nativeEnum(
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRunEvals42Type,
  );

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRunEvals42Type$outboundSchema:
  z.ZodNativeEnum<
    typeof GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRunEvals42Type
  > =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRunEvals42Type$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRunEvals42Type$ {
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRunEvals42Type$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRunEvals42Type$inboundSchema;
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRunEvals42Type$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRunEvals42Type$outboundSchema;
}

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRunEvals42$inboundSchema:
  z.ZodType<
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRunEvals42,
    z.ZodTypeDef,
    unknown
  > = z.object({
    type:
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRunEvals42Type$inboundSchema,
    contact_id: z.string(),
  }).transform((v) => {
    return remap$(v, {
      "contact_id": "contactId",
    });
  });

/** @internal */
export type GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRunEvals42$Outbound =
  {
    type: string;
    contact_id: string;
  };

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRunEvals42$outboundSchema:
  z.ZodType<
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRunEvals42$Outbound,
    z.ZodTypeDef,
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRunEvals42
  > = z.object({
    type:
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRunEvals42Type$outboundSchema,
    contactId: z.string(),
  }).transform((v) => {
    return remap$(v, {
      contactId: "contact_id",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRunEvals42$ {
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRunEvals42$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRunEvals42$inboundSchema;
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRunEvals42$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRunEvals42$outboundSchema;
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRunEvals42$Outbound` instead. */
  export type Outbound =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRunEvals42$Outbound;
}

export function getV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRunEvals42ToJSON(
  getV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRunEvals42:
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRunEvals42,
): string {
  return JSON.stringify(
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRunEvals42$outboundSchema
      .parse(
        getV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRunEvals42,
      ),
  );
}

export function getV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRunEvals42FromJSON(
  jsonString: string,
): SafeParseResult<
  GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRunEvals42,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRunEvals42$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRunEvals42' from JSON`,
  );
}

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRunEvals4Type$inboundSchema:
  z.ZodNativeEnum<
    typeof GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRunEvals4Type
  > = z.nativeEnum(
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRunEvals4Type,
  );

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRunEvals4Type$outboundSchema:
  z.ZodNativeEnum<
    typeof GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRunEvals4Type
  > =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRunEvals4Type$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRunEvals4Type$ {
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRunEvals4Type$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRunEvals4Type$inboundSchema;
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRunEvals4Type$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRunEvals4Type$outboundSchema;
}

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRunEvals41$inboundSchema:
  z.ZodType<
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRunEvals41,
    z.ZodTypeDef,
    unknown
  > = z.object({
    type:
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRunEvals4Type$inboundSchema,
    account_id: z.string(),
  }).transform((v) => {
    return remap$(v, {
      "account_id": "accountId",
    });
  });

/** @internal */
export type GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRunEvals41$Outbound =
  {
    type: string;
    account_id: string;
  };

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRunEvals41$outboundSchema:
  z.ZodType<
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRunEvals41$Outbound,
    z.ZodTypeDef,
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRunEvals41
  > = z.object({
    type:
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRunEvals4Type$outboundSchema,
    accountId: z.string(),
  }).transform((v) => {
    return remap$(v, {
      accountId: "account_id",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRunEvals41$ {
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRunEvals41$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRunEvals41$inboundSchema;
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRunEvals41$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRunEvals41$outboundSchema;
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRunEvals41$Outbound` instead. */
  export type Outbound =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRunEvals41$Outbound;
}

export function getV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRunEvals41ToJSON(
  getV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRunEvals41:
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRunEvals41,
): string {
  return JSON.stringify(
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRunEvals41$outboundSchema
      .parse(
        getV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRunEvals41,
      ),
  );
}

export function getV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRunEvals41FromJSON(
  jsonString: string,
): SafeParseResult<
  GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRunEvals41,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRunEvals41$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRunEvals41' from JSON`,
  );
}

/** @internal */
export const GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody4Evals7WorkflowRun4RelatedEntities$inboundSchema:
  z.ZodType<
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody4Evals7WorkflowRun4RelatedEntities,
    z.ZodTypeDef,
    unknown
  > = z.union([
    z.lazy(() =>
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRunEvals41$inboundSchema
    ),
    z.lazy(() =>
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRunEvals42$inboundSchema
    ),
    z.lazy(() =>
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRunEvals43$inboundSchema
    ),
    z.lazy(() =>
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRunEvals44$inboundSchema
    ),
  ]);

/** @internal */
export type GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody4Evals7WorkflowRun4RelatedEntities$Outbound =
  | GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRunEvals41$Outbound
  | GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRunEvals42$Outbound
  | GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRunEvals43$Outbound
  | GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRunEvals44$Outbound;

/** @internal */
export const GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody4Evals7WorkflowRun4RelatedEntities$outboundSchema:
  z.ZodType<
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody4Evals7WorkflowRun4RelatedEntities$Outbound,
    z.ZodTypeDef,
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody4Evals7WorkflowRun4RelatedEntities
  > = z.union([
    z.lazy(() =>
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRunEvals41$outboundSchema
    ),
    z.lazy(() =>
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRunEvals42$outboundSchema
    ),
    z.lazy(() =>
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRunEvals43$outboundSchema
    ),
    z.lazy(() =>
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRunEvals44$outboundSchema
    ),
  ]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody4Evals7WorkflowRun4RelatedEntities$ {
  /** @deprecated use `GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody4Evals7WorkflowRun4RelatedEntities$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody4Evals7WorkflowRun4RelatedEntities$inboundSchema;
  /** @deprecated use `GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody4Evals7WorkflowRun4RelatedEntities$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody4Evals7WorkflowRun4RelatedEntities$outboundSchema;
  /** @deprecated use `GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody4Evals7WorkflowRun4RelatedEntities$Outbound` instead. */
  export type Outbound =
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody4Evals7WorkflowRun4RelatedEntities$Outbound;
}

export function getV2LogsIdEvalsResponse200ApplicationJSONResponseBody4Evals7WorkflowRun4RelatedEntitiesToJSON(
  getV2LogsIdEvalsResponse200ApplicationJSONResponseBody4Evals7WorkflowRun4RelatedEntities:
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody4Evals7WorkflowRun4RelatedEntities,
): string {
  return JSON.stringify(
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody4Evals7WorkflowRun4RelatedEntities$outboundSchema
      .parse(
        getV2LogsIdEvalsResponse200ApplicationJSONResponseBody4Evals7WorkflowRun4RelatedEntities,
      ),
  );
}

export function getV2LogsIdEvalsResponse200ApplicationJSONResponseBody4Evals7WorkflowRun4RelatedEntitiesFromJSON(
  jsonString: string,
): SafeParseResult<
  GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody4Evals7WorkflowRun4RelatedEntities,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody4Evals7WorkflowRun4RelatedEntities$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody4Evals7WorkflowRun4RelatedEntities' from JSON`,
  );
}

/** @internal */
export const GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody44$inboundSchema:
  z.ZodType<
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody44,
    z.ZodTypeDef,
    unknown
  > = z.object({
    type:
      GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody4Evals7WorkflowRun4Type$inboundSchema,
    values: z.array(z.string()),
    id: z.string(),
    status:
      GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody4Evals7WorkflowRun4Status$inboundSchema,
    timestamp: z.string().datetime({ offset: true }).transform(v =>
      new Date(v)
    ),
    related_entities: z.array(
      z.union([
        z.lazy(() =>
          GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRunEvals41$inboundSchema
        ),
        z.lazy(() =>
          GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRunEvals42$inboundSchema
        ),
        z.lazy(() =>
          GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRunEvals43$inboundSchema
        ),
        z.lazy(() =>
          GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRunEvals44$inboundSchema
        ),
      ]),
    ),
  }).transform((v) => {
    return remap$(v, {
      "related_entities": "relatedEntities",
    });
  });

/** @internal */
export type GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody44$Outbound =
  {
    type: string;
    values: Array<string>;
    id: string;
    status: string;
    timestamp: string;
    related_entities: Array<
      | GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRunEvals41$Outbound
      | GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRunEvals42$Outbound
      | GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRunEvals43$Outbound
      | GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRunEvals44$Outbound
    >;
  };

/** @internal */
export const GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody44$outboundSchema:
  z.ZodType<
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody44$Outbound,
    z.ZodTypeDef,
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody44
  > = z.object({
    type:
      GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody4Evals7WorkflowRun4Type$outboundSchema,
    values: z.array(z.string()),
    id: z.string(),
    status:
      GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody4Evals7WorkflowRun4Status$outboundSchema,
    timestamp: z.date().transform(v => v.toISOString()),
    relatedEntities: z.array(
      z.union([
        z.lazy(() =>
          GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRunEvals41$outboundSchema
        ),
        z.lazy(() =>
          GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRunEvals42$outboundSchema
        ),
        z.lazy(() =>
          GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRunEvals43$outboundSchema
        ),
        z.lazy(() =>
          GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRunEvals44$outboundSchema
        ),
      ]),
    ),
  }).transform((v) => {
    return remap$(v, {
      relatedEntities: "related_entities",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody44$ {
  /** @deprecated use `GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody44$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody44$inboundSchema;
  /** @deprecated use `GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody44$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody44$outboundSchema;
  /** @deprecated use `GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody44$Outbound` instead. */
  export type Outbound =
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody44$Outbound;
}

export function getV2LogsIdEvalsResponse200ApplicationJSONResponseBody44ToJSON(
  getV2LogsIdEvalsResponse200ApplicationJSONResponseBody44:
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody44,
): string {
  return JSON.stringify(
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody44$outboundSchema
      .parse(getV2LogsIdEvalsResponse200ApplicationJSONResponseBody44),
  );
}

export function getV2LogsIdEvalsResponse200ApplicationJSONResponseBody44FromJSON(
  jsonString: string,
): SafeParseResult<
  GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody44,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody44$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody44' from JSON`,
  );
}

/** @internal */
export const GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody4Evals7WorkflowRunType$inboundSchema:
  z.ZodNativeEnum<
    typeof GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody4Evals7WorkflowRunType
  > = z.nativeEnum(
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody4Evals7WorkflowRunType,
  );

/** @internal */
export const GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody4Evals7WorkflowRunType$outboundSchema:
  z.ZodNativeEnum<
    typeof GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody4Evals7WorkflowRunType
  > =
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody4Evals7WorkflowRunType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody4Evals7WorkflowRunType$ {
  /** @deprecated use `GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody4Evals7WorkflowRunType$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody4Evals7WorkflowRunType$inboundSchema;
  /** @deprecated use `GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody4Evals7WorkflowRunType$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody4Evals7WorkflowRunType$outboundSchema;
}

/** @internal */
export const GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody4Evals7WorkflowRunStatus$inboundSchema:
  z.ZodNativeEnum<
    typeof GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody4Evals7WorkflowRunStatus
  > = z.nativeEnum(
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody4Evals7WorkflowRunStatus,
  );

/** @internal */
export const GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody4Evals7WorkflowRunStatus$outboundSchema:
  z.ZodNativeEnum<
    typeof GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody4Evals7WorkflowRunStatus
  > =
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody4Evals7WorkflowRunStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody4Evals7WorkflowRunStatus$ {
  /** @deprecated use `GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody4Evals7WorkflowRunStatus$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody4Evals7WorkflowRunStatus$inboundSchema;
  /** @deprecated use `GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody4Evals7WorkflowRunStatus$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody4Evals7WorkflowRunStatus$outboundSchema;
}

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRunEvals34Type$inboundSchema:
  z.ZodNativeEnum<
    typeof GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRunEvals34Type
  > = z.nativeEnum(
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRunEvals34Type,
  );

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRunEvals34Type$outboundSchema:
  z.ZodNativeEnum<
    typeof GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRunEvals34Type
  > =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRunEvals34Type$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRunEvals34Type$ {
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRunEvals34Type$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRunEvals34Type$inboundSchema;
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRunEvals34Type$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRunEvals34Type$outboundSchema;
}

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRunEvals4$inboundSchema:
  z.ZodType<
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRunEvals4,
    z.ZodTypeDef,
    unknown
  > = z.object({
    type:
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRunEvals34Type$inboundSchema,
    evaluator_id: z.string(),
  }).transform((v) => {
    return remap$(v, {
      "evaluator_id": "evaluatorId",
    });
  });

/** @internal */
export type GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRunEvals4$Outbound =
  {
    type: string;
    evaluator_id: string;
  };

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRunEvals4$outboundSchema:
  z.ZodType<
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRunEvals4$Outbound,
    z.ZodTypeDef,
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRunEvals4
  > = z.object({
    type:
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRunEvals34Type$outboundSchema,
    evaluatorId: z.string(),
  }).transform((v) => {
    return remap$(v, {
      evaluatorId: "evaluator_id",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRunEvals4$ {
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRunEvals4$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRunEvals4$inboundSchema;
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRunEvals4$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRunEvals4$outboundSchema;
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRunEvals4$Outbound` instead. */
  export type Outbound =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRunEvals4$Outbound;
}

export function getV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRunEvals4ToJSON(
  getV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRunEvals4:
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRunEvals4,
): string {
  return JSON.stringify(
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRunEvals4$outboundSchema
      .parse(
        getV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRunEvals4,
      ),
  );
}

export function getV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRunEvals4FromJSON(
  jsonString: string,
): SafeParseResult<
  GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRunEvals4,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRunEvals4$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRunEvals4' from JSON`,
  );
}

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRunEvals33Type$inboundSchema:
  z.ZodNativeEnum<
    typeof GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRunEvals33Type
  > = z.nativeEnum(
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRunEvals33Type,
  );

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRunEvals33Type$outboundSchema:
  z.ZodNativeEnum<
    typeof GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRunEvals33Type
  > =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRunEvals33Type$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRunEvals33Type$ {
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRunEvals33Type$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRunEvals33Type$inboundSchema;
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRunEvals33Type$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRunEvals33Type$outboundSchema;
}

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRunEvals3$inboundSchema:
  z.ZodType<
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRunEvals3,
    z.ZodTypeDef,
    unknown
  > = z.object({
    type:
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRunEvals33Type$inboundSchema,
    human_eval_id: z.string(),
  }).transform((v) => {
    return remap$(v, {
      "human_eval_id": "humanEvalId",
    });
  });

/** @internal */
export type GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRunEvals3$Outbound =
  {
    type: string;
    human_eval_id: string;
  };

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRunEvals3$outboundSchema:
  z.ZodType<
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRunEvals3$Outbound,
    z.ZodTypeDef,
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRunEvals3
  > = z.object({
    type:
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRunEvals33Type$outboundSchema,
    humanEvalId: z.string(),
  }).transform((v) => {
    return remap$(v, {
      humanEvalId: "human_eval_id",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRunEvals3$ {
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRunEvals3$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRunEvals3$inboundSchema;
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRunEvals3$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRunEvals3$outboundSchema;
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRunEvals3$Outbound` instead. */
  export type Outbound =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRunEvals3$Outbound;
}

export function getV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRunEvals3ToJSON(
  getV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRunEvals3:
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRunEvals3,
): string {
  return JSON.stringify(
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRunEvals3$outboundSchema
      .parse(
        getV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRunEvals3,
      ),
  );
}

export function getV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRunEvals3FromJSON(
  jsonString: string,
): SafeParseResult<
  GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRunEvals3,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRunEvals3$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRunEvals3' from JSON`,
  );
}

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRunEvals32Type$inboundSchema:
  z.ZodNativeEnum<
    typeof GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRunEvals32Type
  > = z.nativeEnum(
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRunEvals32Type,
  );

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRunEvals32Type$outboundSchema:
  z.ZodNativeEnum<
    typeof GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRunEvals32Type
  > =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRunEvals32Type$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRunEvals32Type$ {
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRunEvals32Type$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRunEvals32Type$inboundSchema;
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRunEvals32Type$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRunEvals32Type$outboundSchema;
}

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRunEvals2$inboundSchema:
  z.ZodType<
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRunEvals2,
    z.ZodTypeDef,
    unknown
  > = z.object({
    type:
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRunEvals32Type$inboundSchema,
    contact_id: z.string(),
  }).transform((v) => {
    return remap$(v, {
      "contact_id": "contactId",
    });
  });

/** @internal */
export type GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRunEvals2$Outbound =
  {
    type: string;
    contact_id: string;
  };

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRunEvals2$outboundSchema:
  z.ZodType<
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRunEvals2$Outbound,
    z.ZodTypeDef,
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRunEvals2
  > = z.object({
    type:
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRunEvals32Type$outboundSchema,
    contactId: z.string(),
  }).transform((v) => {
    return remap$(v, {
      contactId: "contact_id",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRunEvals2$ {
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRunEvals2$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRunEvals2$inboundSchema;
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRunEvals2$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRunEvals2$outboundSchema;
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRunEvals2$Outbound` instead. */
  export type Outbound =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRunEvals2$Outbound;
}

export function getV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRunEvals2ToJSON(
  getV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRunEvals2:
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRunEvals2,
): string {
  return JSON.stringify(
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRunEvals2$outboundSchema
      .parse(
        getV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRunEvals2,
      ),
  );
}

export function getV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRunEvals2FromJSON(
  jsonString: string,
): SafeParseResult<
  GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRunEvals2,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRunEvals2$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRunEvals2' from JSON`,
  );
}

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRunEvals3Type$inboundSchema:
  z.ZodNativeEnum<
    typeof GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRunEvals3Type
  > = z.nativeEnum(
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRunEvals3Type,
  );

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRunEvals3Type$outboundSchema:
  z.ZodNativeEnum<
    typeof GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRunEvals3Type
  > =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRunEvals3Type$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRunEvals3Type$ {
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRunEvals3Type$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRunEvals3Type$inboundSchema;
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRunEvals3Type$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRunEvals3Type$outboundSchema;
}

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRunEvals31$inboundSchema:
  z.ZodType<
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRunEvals31,
    z.ZodTypeDef,
    unknown
  > = z.object({
    type:
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRunEvals3Type$inboundSchema,
    account_id: z.string(),
  }).transform((v) => {
    return remap$(v, {
      "account_id": "accountId",
    });
  });

/** @internal */
export type GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRunEvals31$Outbound =
  {
    type: string;
    account_id: string;
  };

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRunEvals31$outboundSchema:
  z.ZodType<
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRunEvals31$Outbound,
    z.ZodTypeDef,
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRunEvals31
  > = z.object({
    type:
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRunEvals3Type$outboundSchema,
    accountId: z.string(),
  }).transform((v) => {
    return remap$(v, {
      accountId: "account_id",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRunEvals31$ {
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRunEvals31$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRunEvals31$inboundSchema;
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRunEvals31$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRunEvals31$outboundSchema;
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRunEvals31$Outbound` instead. */
  export type Outbound =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRunEvals31$Outbound;
}

export function getV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRunEvals31ToJSON(
  getV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRunEvals31:
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRunEvals31,
): string {
  return JSON.stringify(
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRunEvals31$outboundSchema
      .parse(
        getV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRunEvals31,
      ),
  );
}

export function getV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRunEvals31FromJSON(
  jsonString: string,
): SafeParseResult<
  GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRunEvals31,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRunEvals31$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRunEvals31' from JSON`,
  );
}

/** @internal */
export const GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody4Evals7WorkflowRunRelatedEntities$inboundSchema:
  z.ZodType<
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody4Evals7WorkflowRunRelatedEntities,
    z.ZodTypeDef,
    unknown
  > = z.union([
    z.lazy(() =>
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRunEvals31$inboundSchema
    ),
    z.lazy(() =>
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRunEvals2$inboundSchema
    ),
    z.lazy(() =>
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRunEvals3$inboundSchema
    ),
    z.lazy(() =>
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRunEvals4$inboundSchema
    ),
  ]);

/** @internal */
export type GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody4Evals7WorkflowRunRelatedEntities$Outbound =
  | GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRunEvals31$Outbound
  | GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRunEvals2$Outbound
  | GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRunEvals3$Outbound
  | GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRunEvals4$Outbound;

/** @internal */
export const GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody4Evals7WorkflowRunRelatedEntities$outboundSchema:
  z.ZodType<
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody4Evals7WorkflowRunRelatedEntities$Outbound,
    z.ZodTypeDef,
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody4Evals7WorkflowRunRelatedEntities
  > = z.union([
    z.lazy(() =>
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRunEvals31$outboundSchema
    ),
    z.lazy(() =>
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRunEvals2$outboundSchema
    ),
    z.lazy(() =>
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRunEvals3$outboundSchema
    ),
    z.lazy(() =>
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRunEvals4$outboundSchema
    ),
  ]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody4Evals7WorkflowRunRelatedEntities$ {
  /** @deprecated use `GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody4Evals7WorkflowRunRelatedEntities$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody4Evals7WorkflowRunRelatedEntities$inboundSchema;
  /** @deprecated use `GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody4Evals7WorkflowRunRelatedEntities$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody4Evals7WorkflowRunRelatedEntities$outboundSchema;
  /** @deprecated use `GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody4Evals7WorkflowRunRelatedEntities$Outbound` instead. */
  export type Outbound =
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody4Evals7WorkflowRunRelatedEntities$Outbound;
}

export function getV2LogsIdEvalsResponse200ApplicationJSONResponseBody4Evals7WorkflowRunRelatedEntitiesToJSON(
  getV2LogsIdEvalsResponse200ApplicationJSONResponseBody4Evals7WorkflowRunRelatedEntities:
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody4Evals7WorkflowRunRelatedEntities,
): string {
  return JSON.stringify(
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody4Evals7WorkflowRunRelatedEntities$outboundSchema
      .parse(
        getV2LogsIdEvalsResponse200ApplicationJSONResponseBody4Evals7WorkflowRunRelatedEntities,
      ),
  );
}

export function getV2LogsIdEvalsResponse200ApplicationJSONResponseBody4Evals7WorkflowRunRelatedEntitiesFromJSON(
  jsonString: string,
): SafeParseResult<
  GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody4Evals7WorkflowRunRelatedEntities,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody4Evals7WorkflowRunRelatedEntities$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody4Evals7WorkflowRunRelatedEntities' from JSON`,
  );
}

/** @internal */
export const GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody43$inboundSchema:
  z.ZodType<
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody43,
    z.ZodTypeDef,
    unknown
  > = z.object({
    type:
      GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody4Evals7WorkflowRunType$inboundSchema,
    value: z.boolean(),
    id: z.string(),
    status:
      GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody4Evals7WorkflowRunStatus$inboundSchema,
    timestamp: z.string().datetime({ offset: true }).transform(v =>
      new Date(v)
    ),
    related_entities: z.array(
      z.union([
        z.lazy(() =>
          GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRunEvals31$inboundSchema
        ),
        z.lazy(() =>
          GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRunEvals2$inboundSchema
        ),
        z.lazy(() =>
          GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRunEvals3$inboundSchema
        ),
        z.lazy(() =>
          GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRunEvals4$inboundSchema
        ),
      ]),
    ),
  }).transform((v) => {
    return remap$(v, {
      "related_entities": "relatedEntities",
    });
  });

/** @internal */
export type GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody43$Outbound =
  {
    type: string;
    value: boolean;
    id: string;
    status: string;
    timestamp: string;
    related_entities: Array<
      | GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRunEvals31$Outbound
      | GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRunEvals2$Outbound
      | GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRunEvals3$Outbound
      | GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRunEvals4$Outbound
    >;
  };

/** @internal */
export const GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody43$outboundSchema:
  z.ZodType<
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody43$Outbound,
    z.ZodTypeDef,
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody43
  > = z.object({
    type:
      GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody4Evals7WorkflowRunType$outboundSchema,
    value: z.boolean(),
    id: z.string(),
    status:
      GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody4Evals7WorkflowRunStatus$outboundSchema,
    timestamp: z.date().transform(v => v.toISOString()),
    relatedEntities: z.array(
      z.union([
        z.lazy(() =>
          GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRunEvals31$outboundSchema
        ),
        z.lazy(() =>
          GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRunEvals2$outboundSchema
        ),
        z.lazy(() =>
          GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRunEvals3$outboundSchema
        ),
        z.lazy(() =>
          GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRunEvals4$outboundSchema
        ),
      ]),
    ),
  }).transform((v) => {
    return remap$(v, {
      relatedEntities: "related_entities",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody43$ {
  /** @deprecated use `GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody43$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody43$inboundSchema;
  /** @deprecated use `GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody43$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody43$outboundSchema;
  /** @deprecated use `GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody43$Outbound` instead. */
  export type Outbound =
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody43$Outbound;
}

export function getV2LogsIdEvalsResponse200ApplicationJSONResponseBody43ToJSON(
  getV2LogsIdEvalsResponse200ApplicationJSONResponseBody43:
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody43,
): string {
  return JSON.stringify(
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody43$outboundSchema
      .parse(getV2LogsIdEvalsResponse200ApplicationJSONResponseBody43),
  );
}

export function getV2LogsIdEvalsResponse200ApplicationJSONResponseBody43FromJSON(
  jsonString: string,
): SafeParseResult<
  GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody43,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody43$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody43' from JSON`,
  );
}

/** @internal */
export const GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody4Evals7Type$inboundSchema:
  z.ZodNativeEnum<
    typeof GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody4Evals7Type
  > = z.nativeEnum(
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody4Evals7Type,
  );

/** @internal */
export const GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody4Evals7Type$outboundSchema:
  z.ZodNativeEnum<
    typeof GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody4Evals7Type
  > =
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody4Evals7Type$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody4Evals7Type$ {
  /** @deprecated use `GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody4Evals7Type$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody4Evals7Type$inboundSchema;
  /** @deprecated use `GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody4Evals7Type$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody4Evals7Type$outboundSchema;
}

/** @internal */
export const GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody4Evals7Status$inboundSchema:
  z.ZodNativeEnum<
    typeof GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody4Evals7Status
  > = z.nativeEnum(
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody4Evals7Status,
  );

/** @internal */
export const GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody4Evals7Status$outboundSchema:
  z.ZodNativeEnum<
    typeof GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody4Evals7Status
  > =
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody4Evals7Status$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody4Evals7Status$ {
  /** @deprecated use `GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody4Evals7Status$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody4Evals7Status$inboundSchema;
  /** @deprecated use `GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody4Evals7Status$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody4Evals7Status$outboundSchema;
}

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRunEvals24Type$inboundSchema:
  z.ZodNativeEnum<
    typeof GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRunEvals24Type
  > = z.nativeEnum(
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRunEvals24Type,
  );

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRunEvals24Type$outboundSchema:
  z.ZodNativeEnum<
    typeof GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRunEvals24Type
  > =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRunEvals24Type$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRunEvals24Type$ {
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRunEvals24Type$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRunEvals24Type$inboundSchema;
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRunEvals24Type$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRunEvals24Type$outboundSchema;
}

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRun4$inboundSchema:
  z.ZodType<
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRun4,
    z.ZodTypeDef,
    unknown
  > = z.object({
    type:
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRunEvals24Type$inboundSchema,
    evaluator_id: z.string(),
  }).transform((v) => {
    return remap$(v, {
      "evaluator_id": "evaluatorId",
    });
  });

/** @internal */
export type GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRun4$Outbound =
  {
    type: string;
    evaluator_id: string;
  };

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRun4$outboundSchema:
  z.ZodType<
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRun4$Outbound,
    z.ZodTypeDef,
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRun4
  > = z.object({
    type:
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRunEvals24Type$outboundSchema,
    evaluatorId: z.string(),
  }).transform((v) => {
    return remap$(v, {
      evaluatorId: "evaluator_id",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRun4$ {
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRun4$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRun4$inboundSchema;
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRun4$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRun4$outboundSchema;
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRun4$Outbound` instead. */
  export type Outbound =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRun4$Outbound;
}

export function getV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRun4ToJSON(
  getV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRun4:
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRun4,
): string {
  return JSON.stringify(
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRun4$outboundSchema
      .parse(
        getV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRun4,
      ),
  );
}

export function getV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRun4FromJSON(
  jsonString: string,
): SafeParseResult<
  GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRun4,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRun4$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRun4' from JSON`,
  );
}

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRunEvals23Type$inboundSchema:
  z.ZodNativeEnum<
    typeof GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRunEvals23Type
  > = z.nativeEnum(
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRunEvals23Type,
  );

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRunEvals23Type$outboundSchema:
  z.ZodNativeEnum<
    typeof GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRunEvals23Type
  > =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRunEvals23Type$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRunEvals23Type$ {
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRunEvals23Type$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRunEvals23Type$inboundSchema;
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRunEvals23Type$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRunEvals23Type$outboundSchema;
}

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRun3$inboundSchema:
  z.ZodType<
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRun3,
    z.ZodTypeDef,
    unknown
  > = z.object({
    type:
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRunEvals23Type$inboundSchema,
    human_eval_id: z.string(),
  }).transform((v) => {
    return remap$(v, {
      "human_eval_id": "humanEvalId",
    });
  });

/** @internal */
export type GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRun3$Outbound =
  {
    type: string;
    human_eval_id: string;
  };

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRun3$outboundSchema:
  z.ZodType<
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRun3$Outbound,
    z.ZodTypeDef,
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRun3
  > = z.object({
    type:
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRunEvals23Type$outboundSchema,
    humanEvalId: z.string(),
  }).transform((v) => {
    return remap$(v, {
      humanEvalId: "human_eval_id",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRun3$ {
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRun3$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRun3$inboundSchema;
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRun3$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRun3$outboundSchema;
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRun3$Outbound` instead. */
  export type Outbound =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRun3$Outbound;
}

export function getV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRun3ToJSON(
  getV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRun3:
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRun3,
): string {
  return JSON.stringify(
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRun3$outboundSchema
      .parse(
        getV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRun3,
      ),
  );
}

export function getV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRun3FromJSON(
  jsonString: string,
): SafeParseResult<
  GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRun3,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRun3$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRun3' from JSON`,
  );
}

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRunEvals22Type$inboundSchema:
  z.ZodNativeEnum<
    typeof GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRunEvals22Type
  > = z.nativeEnum(
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRunEvals22Type,
  );

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRunEvals22Type$outboundSchema:
  z.ZodNativeEnum<
    typeof GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRunEvals22Type
  > =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRunEvals22Type$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRunEvals22Type$ {
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRunEvals22Type$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRunEvals22Type$inboundSchema;
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRunEvals22Type$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRunEvals22Type$outboundSchema;
}

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRun2$inboundSchema:
  z.ZodType<
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRun2,
    z.ZodTypeDef,
    unknown
  > = z.object({
    type:
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRunEvals22Type$inboundSchema,
    contact_id: z.string(),
  }).transform((v) => {
    return remap$(v, {
      "contact_id": "contactId",
    });
  });

/** @internal */
export type GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRun2$Outbound =
  {
    type: string;
    contact_id: string;
  };

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRun2$outboundSchema:
  z.ZodType<
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRun2$Outbound,
    z.ZodTypeDef,
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRun2
  > = z.object({
    type:
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRunEvals22Type$outboundSchema,
    contactId: z.string(),
  }).transform((v) => {
    return remap$(v, {
      contactId: "contact_id",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRun2$ {
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRun2$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRun2$inboundSchema;
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRun2$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRun2$outboundSchema;
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRun2$Outbound` instead. */
  export type Outbound =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRun2$Outbound;
}

export function getV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRun2ToJSON(
  getV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRun2:
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRun2,
): string {
  return JSON.stringify(
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRun2$outboundSchema
      .parse(
        getV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRun2,
      ),
  );
}

export function getV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRun2FromJSON(
  jsonString: string,
): SafeParseResult<
  GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRun2,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRun2$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRun2' from JSON`,
  );
}

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRunEvals2Type$inboundSchema:
  z.ZodNativeEnum<
    typeof GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRunEvals2Type
  > = z.nativeEnum(
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRunEvals2Type,
  );

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRunEvals2Type$outboundSchema:
  z.ZodNativeEnum<
    typeof GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRunEvals2Type
  > =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRunEvals2Type$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRunEvals2Type$ {
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRunEvals2Type$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRunEvals2Type$inboundSchema;
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRunEvals2Type$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRunEvals2Type$outboundSchema;
}

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRunEvals1$inboundSchema:
  z.ZodType<
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRunEvals1,
    z.ZodTypeDef,
    unknown
  > = z.object({
    type:
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRunEvals2Type$inboundSchema,
    account_id: z.string(),
  }).transform((v) => {
    return remap$(v, {
      "account_id": "accountId",
    });
  });

/** @internal */
export type GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRunEvals1$Outbound =
  {
    type: string;
    account_id: string;
  };

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRunEvals1$outboundSchema:
  z.ZodType<
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRunEvals1$Outbound,
    z.ZodTypeDef,
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRunEvals1
  > = z.object({
    type:
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRunEvals2Type$outboundSchema,
    accountId: z.string(),
  }).transform((v) => {
    return remap$(v, {
      accountId: "account_id",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRunEvals1$ {
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRunEvals1$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRunEvals1$inboundSchema;
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRunEvals1$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRunEvals1$outboundSchema;
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRunEvals1$Outbound` instead. */
  export type Outbound =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRunEvals1$Outbound;
}

export function getV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRunEvals1ToJSON(
  getV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRunEvals1:
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRunEvals1,
): string {
  return JSON.stringify(
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRunEvals1$outboundSchema
      .parse(
        getV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRunEvals1,
      ),
  );
}

export function getV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRunEvals1FromJSON(
  jsonString: string,
): SafeParseResult<
  GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRunEvals1,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRunEvals1$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRunEvals1' from JSON`,
  );
}

/** @internal */
export const GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody4Evals7RelatedEntities$inboundSchema:
  z.ZodType<
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody4Evals7RelatedEntities,
    z.ZodTypeDef,
    unknown
  > = z.union([
    z.lazy(() =>
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRunEvals1$inboundSchema
    ),
    z.lazy(() =>
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRun2$inboundSchema
    ),
    z.lazy(() =>
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRun3$inboundSchema
    ),
    z.lazy(() =>
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRun4$inboundSchema
    ),
  ]);

/** @internal */
export type GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody4Evals7RelatedEntities$Outbound =
  | GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRunEvals1$Outbound
  | GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRun2$Outbound
  | GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRun3$Outbound
  | GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRun4$Outbound;

/** @internal */
export const GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody4Evals7RelatedEntities$outboundSchema:
  z.ZodType<
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody4Evals7RelatedEntities$Outbound,
    z.ZodTypeDef,
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody4Evals7RelatedEntities
  > = z.union([
    z.lazy(() =>
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRunEvals1$outboundSchema
    ),
    z.lazy(() =>
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRun2$outboundSchema
    ),
    z.lazy(() =>
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRun3$outboundSchema
    ),
    z.lazy(() =>
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRun4$outboundSchema
    ),
  ]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody4Evals7RelatedEntities$ {
  /** @deprecated use `GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody4Evals7RelatedEntities$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody4Evals7RelatedEntities$inboundSchema;
  /** @deprecated use `GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody4Evals7RelatedEntities$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody4Evals7RelatedEntities$outboundSchema;
  /** @deprecated use `GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody4Evals7RelatedEntities$Outbound` instead. */
  export type Outbound =
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody4Evals7RelatedEntities$Outbound;
}

export function getV2LogsIdEvalsResponse200ApplicationJSONResponseBody4Evals7RelatedEntitiesToJSON(
  getV2LogsIdEvalsResponse200ApplicationJSONResponseBody4Evals7RelatedEntities:
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody4Evals7RelatedEntities,
): string {
  return JSON.stringify(
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody4Evals7RelatedEntities$outboundSchema
      .parse(
        getV2LogsIdEvalsResponse200ApplicationJSONResponseBody4Evals7RelatedEntities,
      ),
  );
}

export function getV2LogsIdEvalsResponse200ApplicationJSONResponseBody4Evals7RelatedEntitiesFromJSON(
  jsonString: string,
): SafeParseResult<
  GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody4Evals7RelatedEntities,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody4Evals7RelatedEntities$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody4Evals7RelatedEntities' from JSON`,
  );
}

/** @internal */
export const GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody42$inboundSchema:
  z.ZodType<
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody42,
    z.ZodTypeDef,
    unknown
  > = z.object({
    type:
      GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody4Evals7Type$inboundSchema,
    value: z.number(),
    id: z.string(),
    status:
      GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody4Evals7Status$inboundSchema,
    timestamp: z.string().datetime({ offset: true }).transform(v =>
      new Date(v)
    ),
    related_entities: z.array(
      z.union([
        z.lazy(() =>
          GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRunEvals1$inboundSchema
        ),
        z.lazy(() =>
          GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRun2$inboundSchema
        ),
        z.lazy(() =>
          GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRun3$inboundSchema
        ),
        z.lazy(() =>
          GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRun4$inboundSchema
        ),
      ]),
    ),
  }).transform((v) => {
    return remap$(v, {
      "related_entities": "relatedEntities",
    });
  });

/** @internal */
export type GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody42$Outbound =
  {
    type: string;
    value: number;
    id: string;
    status: string;
    timestamp: string;
    related_entities: Array<
      | GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRunEvals1$Outbound
      | GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRun2$Outbound
      | GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRun3$Outbound
      | GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRun4$Outbound
    >;
  };

/** @internal */
export const GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody42$outboundSchema:
  z.ZodType<
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody42$Outbound,
    z.ZodTypeDef,
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody42
  > = z.object({
    type:
      GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody4Evals7Type$outboundSchema,
    value: z.number(),
    id: z.string(),
    status:
      GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody4Evals7Status$outboundSchema,
    timestamp: z.date().transform(v => v.toISOString()),
    relatedEntities: z.array(
      z.union([
        z.lazy(() =>
          GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRunEvals1$outboundSchema
        ),
        z.lazy(() =>
          GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRun2$outboundSchema
        ),
        z.lazy(() =>
          GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRun3$outboundSchema
        ),
        z.lazy(() =>
          GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRun4$outboundSchema
        ),
      ]),
    ),
  }).transform((v) => {
    return remap$(v, {
      relatedEntities: "related_entities",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody42$ {
  /** @deprecated use `GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody42$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody42$inboundSchema;
  /** @deprecated use `GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody42$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody42$outboundSchema;
  /** @deprecated use `GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody42$Outbound` instead. */
  export type Outbound =
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody42$Outbound;
}

export function getV2LogsIdEvalsResponse200ApplicationJSONResponseBody42ToJSON(
  getV2LogsIdEvalsResponse200ApplicationJSONResponseBody42:
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody42,
): string {
  return JSON.stringify(
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody42$outboundSchema
      .parse(getV2LogsIdEvalsResponse200ApplicationJSONResponseBody42),
  );
}

export function getV2LogsIdEvalsResponse200ApplicationJSONResponseBody42FromJSON(
  jsonString: string,
): SafeParseResult<
  GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody42,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody42$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody42' from JSON`,
  );
}

/** @internal */
export const GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody4EvalsType$inboundSchema:
  z.ZodNativeEnum<
    typeof GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody4EvalsType
  > = z.nativeEnum(
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody4EvalsType,
  );

/** @internal */
export const GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody4EvalsType$outboundSchema:
  z.ZodNativeEnum<
    typeof GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody4EvalsType
  > =
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody4EvalsType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody4EvalsType$ {
  /** @deprecated use `GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody4EvalsType$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody4EvalsType$inboundSchema;
  /** @deprecated use `GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody4EvalsType$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody4EvalsType$outboundSchema;
}

/** @internal */
export const GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody4EvalsStatus$inboundSchema:
  z.ZodNativeEnum<
    typeof GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody4EvalsStatus
  > = z.nativeEnum(
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody4EvalsStatus,
  );

/** @internal */
export const GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody4EvalsStatus$outboundSchema:
  z.ZodNativeEnum<
    typeof GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody4EvalsStatus
  > =
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody4EvalsStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody4EvalsStatus$ {
  /** @deprecated use `GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody4EvalsStatus$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody4EvalsStatus$inboundSchema;
  /** @deprecated use `GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody4EvalsStatus$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody4EvalsStatus$outboundSchema;
}

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRunEvals14Type$inboundSchema:
  z.ZodNativeEnum<
    typeof GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRunEvals14Type
  > = z.nativeEnum(
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRunEvals14Type,
  );

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRunEvals14Type$outboundSchema:
  z.ZodNativeEnum<
    typeof GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRunEvals14Type
  > =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRunEvals14Type$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRunEvals14Type$ {
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRunEvals14Type$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRunEvals14Type$inboundSchema;
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRunEvals14Type$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRunEvals14Type$outboundSchema;
}

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRunEvals14$inboundSchema:
  z.ZodType<
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRunEvals14,
    z.ZodTypeDef,
    unknown
  > = z.object({
    type:
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRunEvals14Type$inboundSchema,
    evaluator_id: z.string(),
  }).transform((v) => {
    return remap$(v, {
      "evaluator_id": "evaluatorId",
    });
  });

/** @internal */
export type GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRunEvals14$Outbound =
  {
    type: string;
    evaluator_id: string;
  };

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRunEvals14$outboundSchema:
  z.ZodType<
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRunEvals14$Outbound,
    z.ZodTypeDef,
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRunEvals14
  > = z.object({
    type:
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRunEvals14Type$outboundSchema,
    evaluatorId: z.string(),
  }).transform((v) => {
    return remap$(v, {
      evaluatorId: "evaluator_id",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRunEvals14$ {
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRunEvals14$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRunEvals14$inboundSchema;
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRunEvals14$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRunEvals14$outboundSchema;
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRunEvals14$Outbound` instead. */
  export type Outbound =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRunEvals14$Outbound;
}

export function getV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRunEvals14ToJSON(
  getV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRunEvals14:
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRunEvals14,
): string {
  return JSON.stringify(
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRunEvals14$outboundSchema
      .parse(
        getV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRunEvals14,
      ),
  );
}

export function getV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRunEvals14FromJSON(
  jsonString: string,
): SafeParseResult<
  GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRunEvals14,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRunEvals14$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRunEvals14' from JSON`,
  );
}

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRunEvals1Type$inboundSchema:
  z.ZodNativeEnum<
    typeof GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRunEvals1Type
  > = z.nativeEnum(
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRunEvals1Type,
  );

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRunEvals1Type$outboundSchema:
  z.ZodNativeEnum<
    typeof GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRunEvals1Type
  > =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRunEvals1Type$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRunEvals1Type$ {
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRunEvals1Type$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRunEvals1Type$inboundSchema;
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRunEvals1Type$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRunEvals1Type$outboundSchema;
}

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRunEvals13$inboundSchema:
  z.ZodType<
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRunEvals13,
    z.ZodTypeDef,
    unknown
  > = z.object({
    type:
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRunEvals1Type$inboundSchema,
    human_eval_id: z.string(),
  }).transform((v) => {
    return remap$(v, {
      "human_eval_id": "humanEvalId",
    });
  });

/** @internal */
export type GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRunEvals13$Outbound =
  {
    type: string;
    human_eval_id: string;
  };

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRunEvals13$outboundSchema:
  z.ZodType<
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRunEvals13$Outbound,
    z.ZodTypeDef,
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRunEvals13
  > = z.object({
    type:
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRunEvals1Type$outboundSchema,
    humanEvalId: z.string(),
  }).transform((v) => {
    return remap$(v, {
      humanEvalId: "human_eval_id",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRunEvals13$ {
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRunEvals13$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRunEvals13$inboundSchema;
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRunEvals13$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRunEvals13$outboundSchema;
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRunEvals13$Outbound` instead. */
  export type Outbound =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRunEvals13$Outbound;
}

export function getV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRunEvals13ToJSON(
  getV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRunEvals13:
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRunEvals13,
): string {
  return JSON.stringify(
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRunEvals13$outboundSchema
      .parse(
        getV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRunEvals13,
      ),
  );
}

export function getV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRunEvals13FromJSON(
  jsonString: string,
): SafeParseResult<
  GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRunEvals13,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRunEvals13$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRunEvals13' from JSON`,
  );
}

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRunEvalsType$inboundSchema:
  z.ZodNativeEnum<
    typeof GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRunEvalsType
  > = z.nativeEnum(
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRunEvalsType,
  );

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRunEvalsType$outboundSchema:
  z.ZodNativeEnum<
    typeof GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRunEvalsType
  > =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRunEvalsType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRunEvalsType$ {
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRunEvalsType$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRunEvalsType$inboundSchema;
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRunEvalsType$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRunEvalsType$outboundSchema;
}

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRunEvals12$inboundSchema:
  z.ZodType<
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRunEvals12,
    z.ZodTypeDef,
    unknown
  > = z.object({
    type:
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRunEvalsType$inboundSchema,
    contact_id: z.string(),
  }).transform((v) => {
    return remap$(v, {
      "contact_id": "contactId",
    });
  });

/** @internal */
export type GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRunEvals12$Outbound =
  {
    type: string;
    contact_id: string;
  };

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRunEvals12$outboundSchema:
  z.ZodType<
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRunEvals12$Outbound,
    z.ZodTypeDef,
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRunEvals12
  > = z.object({
    type:
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRunEvalsType$outboundSchema,
    contactId: z.string(),
  }).transform((v) => {
    return remap$(v, {
      contactId: "contact_id",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRunEvals12$ {
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRunEvals12$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRunEvals12$inboundSchema;
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRunEvals12$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRunEvals12$outboundSchema;
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRunEvals12$Outbound` instead. */
  export type Outbound =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRunEvals12$Outbound;
}

export function getV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRunEvals12ToJSON(
  getV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRunEvals12:
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRunEvals12,
): string {
  return JSON.stringify(
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRunEvals12$outboundSchema
      .parse(
        getV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRunEvals12,
      ),
  );
}

export function getV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRunEvals12FromJSON(
  jsonString: string,
): SafeParseResult<
  GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRunEvals12,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRunEvals12$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRunEvals12' from JSON`,
  );
}

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRunEvals11Type$inboundSchema:
  z.ZodNativeEnum<
    typeof GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRunEvals11Type
  > = z.nativeEnum(
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRunEvals11Type,
  );

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRunEvals11Type$outboundSchema:
  z.ZodNativeEnum<
    typeof GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRunEvals11Type
  > =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRunEvals11Type$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRunEvals11Type$ {
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRunEvals11Type$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRunEvals11Type$inboundSchema;
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRunEvals11Type$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRunEvals11Type$outboundSchema;
}

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRunEvals11$inboundSchema:
  z.ZodType<
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRunEvals11,
    z.ZodTypeDef,
    unknown
  > = z.object({
    type:
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRunEvals11Type$inboundSchema,
    account_id: z.string(),
  }).transform((v) => {
    return remap$(v, {
      "account_id": "accountId",
    });
  });

/** @internal */
export type GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRunEvals11$Outbound =
  {
    type: string;
    account_id: string;
  };

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRunEvals11$outboundSchema:
  z.ZodType<
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRunEvals11$Outbound,
    z.ZodTypeDef,
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRunEvals11
  > = z.object({
    type:
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRunEvals11Type$outboundSchema,
    accountId: z.string(),
  }).transform((v) => {
    return remap$(v, {
      accountId: "account_id",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRunEvals11$ {
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRunEvals11$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRunEvals11$inboundSchema;
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRunEvals11$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRunEvals11$outboundSchema;
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRunEvals11$Outbound` instead. */
  export type Outbound =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRunEvals11$Outbound;
}

export function getV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRunEvals11ToJSON(
  getV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRunEvals11:
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRunEvals11,
): string {
  return JSON.stringify(
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRunEvals11$outboundSchema
      .parse(
        getV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRunEvals11,
      ),
  );
}

export function getV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRunEvals11FromJSON(
  jsonString: string,
): SafeParseResult<
  GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRunEvals11,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRunEvals11$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRunEvals11' from JSON`,
  );
}

/** @internal */
export const GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody4EvalsRelatedEntities$inboundSchema:
  z.ZodType<
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody4EvalsRelatedEntities,
    z.ZodTypeDef,
    unknown
  > = z.union([
    z.lazy(() =>
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRunEvals11$inboundSchema
    ),
    z.lazy(() =>
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRunEvals12$inboundSchema
    ),
    z.lazy(() =>
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRunEvals13$inboundSchema
    ),
    z.lazy(() =>
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRunEvals14$inboundSchema
    ),
  ]);

/** @internal */
export type GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody4EvalsRelatedEntities$Outbound =
  | GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRunEvals11$Outbound
  | GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRunEvals12$Outbound
  | GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRunEvals13$Outbound
  | GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRunEvals14$Outbound;

/** @internal */
export const GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody4EvalsRelatedEntities$outboundSchema:
  z.ZodType<
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody4EvalsRelatedEntities$Outbound,
    z.ZodTypeDef,
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody4EvalsRelatedEntities
  > = z.union([
    z.lazy(() =>
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRunEvals11$outboundSchema
    ),
    z.lazy(() =>
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRunEvals12$outboundSchema
    ),
    z.lazy(() =>
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRunEvals13$outboundSchema
    ),
    z.lazy(() =>
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRunEvals14$outboundSchema
    ),
  ]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody4EvalsRelatedEntities$ {
  /** @deprecated use `GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody4EvalsRelatedEntities$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody4EvalsRelatedEntities$inboundSchema;
  /** @deprecated use `GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody4EvalsRelatedEntities$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody4EvalsRelatedEntities$outboundSchema;
  /** @deprecated use `GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody4EvalsRelatedEntities$Outbound` instead. */
  export type Outbound =
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody4EvalsRelatedEntities$Outbound;
}

export function getV2LogsIdEvalsResponse200ApplicationJSONResponseBody4EvalsRelatedEntitiesToJSON(
  getV2LogsIdEvalsResponse200ApplicationJSONResponseBody4EvalsRelatedEntities:
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody4EvalsRelatedEntities,
): string {
  return JSON.stringify(
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody4EvalsRelatedEntities$outboundSchema
      .parse(
        getV2LogsIdEvalsResponse200ApplicationJSONResponseBody4EvalsRelatedEntities,
      ),
  );
}

export function getV2LogsIdEvalsResponse200ApplicationJSONResponseBody4EvalsRelatedEntitiesFromJSON(
  jsonString: string,
): SafeParseResult<
  GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody4EvalsRelatedEntities,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody4EvalsRelatedEntities$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody4EvalsRelatedEntities' from JSON`,
  );
}

/** @internal */
export const GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody41$inboundSchema:
  z.ZodType<
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody41,
    z.ZodTypeDef,
    unknown
  > = z.object({
    type:
      GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody4EvalsType$inboundSchema,
    value: z.string(),
    id: z.string(),
    status:
      GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody4EvalsStatus$inboundSchema,
    timestamp: z.string().datetime({ offset: true }).transform(v =>
      new Date(v)
    ),
    related_entities: z.array(
      z.union([
        z.lazy(() =>
          GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRunEvals11$inboundSchema
        ),
        z.lazy(() =>
          GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRunEvals12$inboundSchema
        ),
        z.lazy(() =>
          GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRunEvals13$inboundSchema
        ),
        z.lazy(() =>
          GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRunEvals14$inboundSchema
        ),
      ]),
    ),
  }).transform((v) => {
    return remap$(v, {
      "related_entities": "relatedEntities",
    });
  });

/** @internal */
export type GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody41$Outbound =
  {
    type: string;
    value: string;
    id: string;
    status: string;
    timestamp: string;
    related_entities: Array<
      | GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRunEvals11$Outbound
      | GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRunEvals12$Outbound
      | GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRunEvals13$Outbound
      | GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRunEvals14$Outbound
    >;
  };

/** @internal */
export const GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody41$outboundSchema:
  z.ZodType<
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody41$Outbound,
    z.ZodTypeDef,
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody41
  > = z.object({
    type:
      GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody4EvalsType$outboundSchema,
    value: z.string(),
    id: z.string(),
    status:
      GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody4EvalsStatus$outboundSchema,
    timestamp: z.date().transform(v => v.toISOString()),
    relatedEntities: z.array(
      z.union([
        z.lazy(() =>
          GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRunEvals11$outboundSchema
        ),
        z.lazy(() =>
          GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRunEvals12$outboundSchema
        ),
        z.lazy(() =>
          GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRunEvals13$outboundSchema
        ),
        z.lazy(() =>
          GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRunEvals14$outboundSchema
        ),
      ]),
    ),
  }).transform((v) => {
    return remap$(v, {
      relatedEntities: "related_entities",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody41$ {
  /** @deprecated use `GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody41$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody41$inboundSchema;
  /** @deprecated use `GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody41$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody41$outboundSchema;
  /** @deprecated use `GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody41$Outbound` instead. */
  export type Outbound =
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody41$Outbound;
}

export function getV2LogsIdEvalsResponse200ApplicationJSONResponseBody41ToJSON(
  getV2LogsIdEvalsResponse200ApplicationJSONResponseBody41:
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody41,
): string {
  return JSON.stringify(
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody41$outboundSchema
      .parse(getV2LogsIdEvalsResponse200ApplicationJSONResponseBody41),
  );
}

export function getV2LogsIdEvalsResponse200ApplicationJSONResponseBody41FromJSON(
  jsonString: string,
): SafeParseResult<
  GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody41,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody41$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody41' from JSON`,
  );
}

/** @internal */
export const GetV2LogsIdEvalsResponse200Evals$inboundSchema: z.ZodType<
  GetV2LogsIdEvalsResponse200Evals,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() =>
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody41$inboundSchema
  ),
  z.lazy(() =>
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody42$inboundSchema
  ),
  z.lazy(() =>
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody43$inboundSchema
  ),
  z.lazy(() =>
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody44$inboundSchema
  ),
]);

/** @internal */
export type GetV2LogsIdEvalsResponse200Evals$Outbound =
  | GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody41$Outbound
  | GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody42$Outbound
  | GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody43$Outbound
  | GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody44$Outbound;

/** @internal */
export const GetV2LogsIdEvalsResponse200Evals$outboundSchema: z.ZodType<
  GetV2LogsIdEvalsResponse200Evals$Outbound,
  z.ZodTypeDef,
  GetV2LogsIdEvalsResponse200Evals
> = z.union([
  z.lazy(() =>
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody41$outboundSchema
  ),
  z.lazy(() =>
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody42$outboundSchema
  ),
  z.lazy(() =>
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody43$outboundSchema
  ),
  z.lazy(() =>
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody44$outboundSchema
  ),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdEvalsResponse200Evals$ {
  /** @deprecated use `GetV2LogsIdEvalsResponse200Evals$inboundSchema` instead. */
  export const inboundSchema = GetV2LogsIdEvalsResponse200Evals$inboundSchema;
  /** @deprecated use `GetV2LogsIdEvalsResponse200Evals$outboundSchema` instead. */
  export const outboundSchema = GetV2LogsIdEvalsResponse200Evals$outboundSchema;
  /** @deprecated use `GetV2LogsIdEvalsResponse200Evals$Outbound` instead. */
  export type Outbound = GetV2LogsIdEvalsResponse200Evals$Outbound;
}

export function getV2LogsIdEvalsResponse200EvalsToJSON(
  getV2LogsIdEvalsResponse200Evals: GetV2LogsIdEvalsResponse200Evals,
): string {
  return JSON.stringify(
    GetV2LogsIdEvalsResponse200Evals$outboundSchema.parse(
      getV2LogsIdEvalsResponse200Evals,
    ),
  );
}

export function getV2LogsIdEvalsResponse200EvalsFromJSON(
  jsonString: string,
): SafeParseResult<GetV2LogsIdEvalsResponse200Evals, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetV2LogsIdEvalsResponse200Evals$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetV2LogsIdEvalsResponse200Evals' from JSON`,
  );
}

/** @internal */
export const GetV2LogsIdMessageResponse200ApplicationJSONResponseBody4Evals7Role$inboundSchema:
  z.ZodNativeEnum<
    typeof GetV2LogsIdMessageResponse200ApplicationJSONResponseBody4Evals7Role
  > = z.nativeEnum(
    GetV2LogsIdMessageResponse200ApplicationJSONResponseBody4Evals7Role,
  );

/** @internal */
export const GetV2LogsIdMessageResponse200ApplicationJSONResponseBody4Evals7Role$outboundSchema:
  z.ZodNativeEnum<
    typeof GetV2LogsIdMessageResponse200ApplicationJSONResponseBody4Evals7Role
  > =
    GetV2LogsIdMessageResponse200ApplicationJSONResponseBody4Evals7Role$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdMessageResponse200ApplicationJSONResponseBody4Evals7Role$ {
  /** @deprecated use `GetV2LogsIdMessageResponse200ApplicationJSONResponseBody4Evals7Role$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsIdMessageResponse200ApplicationJSONResponseBody4Evals7Role$inboundSchema;
  /** @deprecated use `GetV2LogsIdMessageResponse200ApplicationJSONResponseBody4Evals7Role$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdMessageResponse200ApplicationJSONResponseBody4Evals7Role$outboundSchema;
}

/** @internal */
export const GetV2LogsIdMessageResponse200ApplicationJSONResponseBody43$inboundSchema:
  z.ZodType<
    GetV2LogsIdMessageResponse200ApplicationJSONResponseBody43,
    z.ZodTypeDef,
    unknown
  > = z.object({
    role:
      GetV2LogsIdMessageResponse200ApplicationJSONResponseBody4Evals7Role$inboundSchema,
    url: z.string(),
  });

/** @internal */
export type GetV2LogsIdMessageResponse200ApplicationJSONResponseBody43$Outbound =
  {
    role: string;
    url: string;
  };

/** @internal */
export const GetV2LogsIdMessageResponse200ApplicationJSONResponseBody43$outboundSchema:
  z.ZodType<
    GetV2LogsIdMessageResponse200ApplicationJSONResponseBody43$Outbound,
    z.ZodTypeDef,
    GetV2LogsIdMessageResponse200ApplicationJSONResponseBody43
  > = z.object({
    role:
      GetV2LogsIdMessageResponse200ApplicationJSONResponseBody4Evals7Role$outboundSchema,
    url: z.string(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdMessageResponse200ApplicationJSONResponseBody43$ {
  /** @deprecated use `GetV2LogsIdMessageResponse200ApplicationJSONResponseBody43$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsIdMessageResponse200ApplicationJSONResponseBody43$inboundSchema;
  /** @deprecated use `GetV2LogsIdMessageResponse200ApplicationJSONResponseBody43$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdMessageResponse200ApplicationJSONResponseBody43$outboundSchema;
  /** @deprecated use `GetV2LogsIdMessageResponse200ApplicationJSONResponseBody43$Outbound` instead. */
  export type Outbound =
    GetV2LogsIdMessageResponse200ApplicationJSONResponseBody43$Outbound;
}

export function getV2LogsIdMessageResponse200ApplicationJSONResponseBody43ToJSON(
  getV2LogsIdMessageResponse200ApplicationJSONResponseBody43:
    GetV2LogsIdMessageResponse200ApplicationJSONResponseBody43,
): string {
  return JSON.stringify(
    GetV2LogsIdMessageResponse200ApplicationJSONResponseBody43$outboundSchema
      .parse(getV2LogsIdMessageResponse200ApplicationJSONResponseBody43),
  );
}

export function getV2LogsIdMessageResponse200ApplicationJSONResponseBody43FromJSON(
  jsonString: string,
): SafeParseResult<
  GetV2LogsIdMessageResponse200ApplicationJSONResponseBody43,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetV2LogsIdMessageResponse200ApplicationJSONResponseBody43$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'GetV2LogsIdMessageResponse200ApplicationJSONResponseBody43' from JSON`,
  );
}

/** @internal */
export const GetV2LogsIdMessageResponse200ApplicationJSONResponseBody4EvalsRole$inboundSchema:
  z.ZodNativeEnum<
    typeof GetV2LogsIdMessageResponse200ApplicationJSONResponseBody4EvalsRole
  > = z.nativeEnum(
    GetV2LogsIdMessageResponse200ApplicationJSONResponseBody4EvalsRole,
  );

/** @internal */
export const GetV2LogsIdMessageResponse200ApplicationJSONResponseBody4EvalsRole$outboundSchema:
  z.ZodNativeEnum<
    typeof GetV2LogsIdMessageResponse200ApplicationJSONResponseBody4EvalsRole
  > =
    GetV2LogsIdMessageResponse200ApplicationJSONResponseBody4EvalsRole$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdMessageResponse200ApplicationJSONResponseBody4EvalsRole$ {
  /** @deprecated use `GetV2LogsIdMessageResponse200ApplicationJSONResponseBody4EvalsRole$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsIdMessageResponse200ApplicationJSONResponseBody4EvalsRole$inboundSchema;
  /** @deprecated use `GetV2LogsIdMessageResponse200ApplicationJSONResponseBody4EvalsRole$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdMessageResponse200ApplicationJSONResponseBody4EvalsRole$outboundSchema;
}

/** @internal */
export const GetV2LogsIdMessageResponse200ApplicationJSONResponseBody42$inboundSchema:
  z.ZodType<
    GetV2LogsIdMessageResponse200ApplicationJSONResponseBody42,
    z.ZodTypeDef,
    unknown
  > = z.object({
    role:
      GetV2LogsIdMessageResponse200ApplicationJSONResponseBody4EvalsRole$inboundSchema,
    content: z.nullable(z.string()),
  });

/** @internal */
export type GetV2LogsIdMessageResponse200ApplicationJSONResponseBody42$Outbound =
  {
    role: string;
    content: string | null;
  };

/** @internal */
export const GetV2LogsIdMessageResponse200ApplicationJSONResponseBody42$outboundSchema:
  z.ZodType<
    GetV2LogsIdMessageResponse200ApplicationJSONResponseBody42$Outbound,
    z.ZodTypeDef,
    GetV2LogsIdMessageResponse200ApplicationJSONResponseBody42
  > = z.object({
    role:
      GetV2LogsIdMessageResponse200ApplicationJSONResponseBody4EvalsRole$outboundSchema,
    content: z.nullable(z.string()),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdMessageResponse200ApplicationJSONResponseBody42$ {
  /** @deprecated use `GetV2LogsIdMessageResponse200ApplicationJSONResponseBody42$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsIdMessageResponse200ApplicationJSONResponseBody42$inboundSchema;
  /** @deprecated use `GetV2LogsIdMessageResponse200ApplicationJSONResponseBody42$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdMessageResponse200ApplicationJSONResponseBody42$outboundSchema;
  /** @deprecated use `GetV2LogsIdMessageResponse200ApplicationJSONResponseBody42$Outbound` instead. */
  export type Outbound =
    GetV2LogsIdMessageResponse200ApplicationJSONResponseBody42$Outbound;
}

export function getV2LogsIdMessageResponse200ApplicationJSONResponseBody42ToJSON(
  getV2LogsIdMessageResponse200ApplicationJSONResponseBody42:
    GetV2LogsIdMessageResponse200ApplicationJSONResponseBody42,
): string {
  return JSON.stringify(
    GetV2LogsIdMessageResponse200ApplicationJSONResponseBody42$outboundSchema
      .parse(getV2LogsIdMessageResponse200ApplicationJSONResponseBody42),
  );
}

export function getV2LogsIdMessageResponse200ApplicationJSONResponseBody42FromJSON(
  jsonString: string,
): SafeParseResult<
  GetV2LogsIdMessageResponse200ApplicationJSONResponseBody42,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetV2LogsIdMessageResponse200ApplicationJSONResponseBody42$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'GetV2LogsIdMessageResponse200ApplicationJSONResponseBody42' from JSON`,
  );
}

/** @internal */
export const GetV2LogsIdMessageResponse200ApplicationJSONResponseBody4Evals7WorkflowRunRole$inboundSchema:
  z.ZodNativeEnum<
    typeof GetV2LogsIdMessageResponse200ApplicationJSONResponseBody4Evals7WorkflowRunRole
  > = z.nativeEnum(
    GetV2LogsIdMessageResponse200ApplicationJSONResponseBody4Evals7WorkflowRunRole,
  );

/** @internal */
export const GetV2LogsIdMessageResponse200ApplicationJSONResponseBody4Evals7WorkflowRunRole$outboundSchema:
  z.ZodNativeEnum<
    typeof GetV2LogsIdMessageResponse200ApplicationJSONResponseBody4Evals7WorkflowRunRole
  > =
    GetV2LogsIdMessageResponse200ApplicationJSONResponseBody4Evals7WorkflowRunRole$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdMessageResponse200ApplicationJSONResponseBody4Evals7WorkflowRunRole$ {
  /** @deprecated use `GetV2LogsIdMessageResponse200ApplicationJSONResponseBody4Evals7WorkflowRunRole$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsIdMessageResponse200ApplicationJSONResponseBody4Evals7WorkflowRunRole$inboundSchema;
  /** @deprecated use `GetV2LogsIdMessageResponse200ApplicationJSONResponseBody4Evals7WorkflowRunRole$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdMessageResponse200ApplicationJSONResponseBody4Evals7WorkflowRunRole$outboundSchema;
}

/** @internal */
export const GetV2LogsIdMessageResponse200ApplicationJSONResponseBody4Type$inboundSchema:
  z.ZodNativeEnum<
    typeof GetV2LogsIdMessageResponse200ApplicationJSONResponseBody4Type
  > = z.nativeEnum(
    GetV2LogsIdMessageResponse200ApplicationJSONResponseBody4Type,
  );

/** @internal */
export const GetV2LogsIdMessageResponse200ApplicationJSONResponseBody4Type$outboundSchema:
  z.ZodNativeEnum<
    typeof GetV2LogsIdMessageResponse200ApplicationJSONResponseBody4Type
  > =
    GetV2LogsIdMessageResponse200ApplicationJSONResponseBody4Type$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdMessageResponse200ApplicationJSONResponseBody4Type$ {
  /** @deprecated use `GetV2LogsIdMessageResponse200ApplicationJSONResponseBody4Type$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsIdMessageResponse200ApplicationJSONResponseBody4Type$inboundSchema;
  /** @deprecated use `GetV2LogsIdMessageResponse200ApplicationJSONResponseBody4Type$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdMessageResponse200ApplicationJSONResponseBody4Type$outboundSchema;
}

/** @internal */
export const GetV2LogsIdMessageResponse200ApplicationJSONResponseBody4Function$inboundSchema:
  z.ZodType<
    GetV2LogsIdMessageResponse200ApplicationJSONResponseBody4Function,
    z.ZodTypeDef,
    unknown
  > = z.object({
    name: z.string(),
    arguments: z.string(),
  });

/** @internal */
export type GetV2LogsIdMessageResponse200ApplicationJSONResponseBody4Function$Outbound =
  {
    name: string;
    arguments: string;
  };

/** @internal */
export const GetV2LogsIdMessageResponse200ApplicationJSONResponseBody4Function$outboundSchema:
  z.ZodType<
    GetV2LogsIdMessageResponse200ApplicationJSONResponseBody4Function$Outbound,
    z.ZodTypeDef,
    GetV2LogsIdMessageResponse200ApplicationJSONResponseBody4Function
  > = z.object({
    name: z.string(),
    arguments: z.string(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdMessageResponse200ApplicationJSONResponseBody4Function$ {
  /** @deprecated use `GetV2LogsIdMessageResponse200ApplicationJSONResponseBody4Function$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsIdMessageResponse200ApplicationJSONResponseBody4Function$inboundSchema;
  /** @deprecated use `GetV2LogsIdMessageResponse200ApplicationJSONResponseBody4Function$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdMessageResponse200ApplicationJSONResponseBody4Function$outboundSchema;
  /** @deprecated use `GetV2LogsIdMessageResponse200ApplicationJSONResponseBody4Function$Outbound` instead. */
  export type Outbound =
    GetV2LogsIdMessageResponse200ApplicationJSONResponseBody4Function$Outbound;
}

export function getV2LogsIdMessageResponse200ApplicationJSONResponseBody4FunctionToJSON(
  getV2LogsIdMessageResponse200ApplicationJSONResponseBody4Function:
    GetV2LogsIdMessageResponse200ApplicationJSONResponseBody4Function,
): string {
  return JSON.stringify(
    GetV2LogsIdMessageResponse200ApplicationJSONResponseBody4Function$outboundSchema
      .parse(getV2LogsIdMessageResponse200ApplicationJSONResponseBody4Function),
  );
}

export function getV2LogsIdMessageResponse200ApplicationJSONResponseBody4FunctionFromJSON(
  jsonString: string,
): SafeParseResult<
  GetV2LogsIdMessageResponse200ApplicationJSONResponseBody4Function,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetV2LogsIdMessageResponse200ApplicationJSONResponseBody4Function$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'GetV2LogsIdMessageResponse200ApplicationJSONResponseBody4Function' from JSON`,
  );
}

/** @internal */
export const GetV2LogsIdMessageResponse200ApplicationJSONResponseBody4ToolCalls$inboundSchema:
  z.ZodType<
    GetV2LogsIdMessageResponse200ApplicationJSONResponseBody4ToolCalls,
    z.ZodTypeDef,
    unknown
  > = z.object({
    id: z.string().optional(),
    index: z.number().optional(),
    type:
      GetV2LogsIdMessageResponse200ApplicationJSONResponseBody4Type$inboundSchema,
    function: z.lazy(() =>
      GetV2LogsIdMessageResponse200ApplicationJSONResponseBody4Function$inboundSchema
    ),
  });

/** @internal */
export type GetV2LogsIdMessageResponse200ApplicationJSONResponseBody4ToolCalls$Outbound =
  {
    id?: string | undefined;
    index?: number | undefined;
    type: string;
    function:
      GetV2LogsIdMessageResponse200ApplicationJSONResponseBody4Function$Outbound;
  };

/** @internal */
export const GetV2LogsIdMessageResponse200ApplicationJSONResponseBody4ToolCalls$outboundSchema:
  z.ZodType<
    GetV2LogsIdMessageResponse200ApplicationJSONResponseBody4ToolCalls$Outbound,
    z.ZodTypeDef,
    GetV2LogsIdMessageResponse200ApplicationJSONResponseBody4ToolCalls
  > = z.object({
    id: z.string().optional(),
    index: z.number().optional(),
    type:
      GetV2LogsIdMessageResponse200ApplicationJSONResponseBody4Type$outboundSchema,
    function: z.lazy(() =>
      GetV2LogsIdMessageResponse200ApplicationJSONResponseBody4Function$outboundSchema
    ),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdMessageResponse200ApplicationJSONResponseBody4ToolCalls$ {
  /** @deprecated use `GetV2LogsIdMessageResponse200ApplicationJSONResponseBody4ToolCalls$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsIdMessageResponse200ApplicationJSONResponseBody4ToolCalls$inboundSchema;
  /** @deprecated use `GetV2LogsIdMessageResponse200ApplicationJSONResponseBody4ToolCalls$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdMessageResponse200ApplicationJSONResponseBody4ToolCalls$outboundSchema;
  /** @deprecated use `GetV2LogsIdMessageResponse200ApplicationJSONResponseBody4ToolCalls$Outbound` instead. */
  export type Outbound =
    GetV2LogsIdMessageResponse200ApplicationJSONResponseBody4ToolCalls$Outbound;
}

export function getV2LogsIdMessageResponse200ApplicationJSONResponseBody4ToolCallsToJSON(
  getV2LogsIdMessageResponse200ApplicationJSONResponseBody4ToolCalls:
    GetV2LogsIdMessageResponse200ApplicationJSONResponseBody4ToolCalls,
): string {
  return JSON.stringify(
    GetV2LogsIdMessageResponse200ApplicationJSONResponseBody4ToolCalls$outboundSchema
      .parse(
        getV2LogsIdMessageResponse200ApplicationJSONResponseBody4ToolCalls,
      ),
  );
}

export function getV2LogsIdMessageResponse200ApplicationJSONResponseBody4ToolCallsFromJSON(
  jsonString: string,
): SafeParseResult<
  GetV2LogsIdMessageResponse200ApplicationJSONResponseBody4ToolCalls,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetV2LogsIdMessageResponse200ApplicationJSONResponseBody4ToolCalls$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'GetV2LogsIdMessageResponse200ApplicationJSONResponseBody4ToolCalls' from JSON`,
  );
}

/** @internal */
export const GetV2LogsIdMessageResponse200ApplicationJSONResponseBody41$inboundSchema:
  z.ZodType<
    GetV2LogsIdMessageResponse200ApplicationJSONResponseBody41,
    z.ZodTypeDef,
    unknown
  > = z.object({
    role:
      GetV2LogsIdMessageResponse200ApplicationJSONResponseBody4Evals7WorkflowRunRole$inboundSchema,
    content: z.nullable(z.string()).optional(),
    tool_calls: z.array(
      z.lazy(() =>
        GetV2LogsIdMessageResponse200ApplicationJSONResponseBody4ToolCalls$inboundSchema
      ),
    ),
  }).transform((v) => {
    return remap$(v, {
      "tool_calls": "toolCalls",
    });
  });

/** @internal */
export type GetV2LogsIdMessageResponse200ApplicationJSONResponseBody41$Outbound =
  {
    role: string;
    content?: string | null | undefined;
    tool_calls: Array<
      GetV2LogsIdMessageResponse200ApplicationJSONResponseBody4ToolCalls$Outbound
    >;
  };

/** @internal */
export const GetV2LogsIdMessageResponse200ApplicationJSONResponseBody41$outboundSchema:
  z.ZodType<
    GetV2LogsIdMessageResponse200ApplicationJSONResponseBody41$Outbound,
    z.ZodTypeDef,
    GetV2LogsIdMessageResponse200ApplicationJSONResponseBody41
  > = z.object({
    role:
      GetV2LogsIdMessageResponse200ApplicationJSONResponseBody4Evals7WorkflowRunRole$outboundSchema,
    content: z.nullable(z.string()).optional(),
    toolCalls: z.array(
      z.lazy(() =>
        GetV2LogsIdMessageResponse200ApplicationJSONResponseBody4ToolCalls$outboundSchema
      ),
    ),
  }).transform((v) => {
    return remap$(v, {
      toolCalls: "tool_calls",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdMessageResponse200ApplicationJSONResponseBody41$ {
  /** @deprecated use `GetV2LogsIdMessageResponse200ApplicationJSONResponseBody41$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsIdMessageResponse200ApplicationJSONResponseBody41$inboundSchema;
  /** @deprecated use `GetV2LogsIdMessageResponse200ApplicationJSONResponseBody41$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdMessageResponse200ApplicationJSONResponseBody41$outboundSchema;
  /** @deprecated use `GetV2LogsIdMessageResponse200ApplicationJSONResponseBody41$Outbound` instead. */
  export type Outbound =
    GetV2LogsIdMessageResponse200ApplicationJSONResponseBody41$Outbound;
}

export function getV2LogsIdMessageResponse200ApplicationJSONResponseBody41ToJSON(
  getV2LogsIdMessageResponse200ApplicationJSONResponseBody41:
    GetV2LogsIdMessageResponse200ApplicationJSONResponseBody41,
): string {
  return JSON.stringify(
    GetV2LogsIdMessageResponse200ApplicationJSONResponseBody41$outboundSchema
      .parse(getV2LogsIdMessageResponse200ApplicationJSONResponseBody41),
  );
}

export function getV2LogsIdMessageResponse200ApplicationJSONResponseBody41FromJSON(
  jsonString: string,
): SafeParseResult<
  GetV2LogsIdMessageResponse200ApplicationJSONResponseBody41,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetV2LogsIdMessageResponse200ApplicationJSONResponseBody41$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'GetV2LogsIdMessageResponse200ApplicationJSONResponseBody41' from JSON`,
  );
}

/** @internal */
export const GetV2LogsIdEvalsResponse200Message$inboundSchema: z.ZodType<
  GetV2LogsIdEvalsResponse200Message,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() =>
    GetV2LogsIdMessageResponse200ApplicationJSONResponseBody42$inboundSchema
  ),
  z.lazy(() =>
    GetV2LogsIdMessageResponse200ApplicationJSONResponseBody43$inboundSchema
  ),
  z.lazy(() =>
    GetV2LogsIdMessageResponse200ApplicationJSONResponseBody41$inboundSchema
  ),
]);

/** @internal */
export type GetV2LogsIdEvalsResponse200Message$Outbound =
  | GetV2LogsIdMessageResponse200ApplicationJSONResponseBody42$Outbound
  | GetV2LogsIdMessageResponse200ApplicationJSONResponseBody43$Outbound
  | GetV2LogsIdMessageResponse200ApplicationJSONResponseBody41$Outbound;

/** @internal */
export const GetV2LogsIdEvalsResponse200Message$outboundSchema: z.ZodType<
  GetV2LogsIdEvalsResponse200Message$Outbound,
  z.ZodTypeDef,
  GetV2LogsIdEvalsResponse200Message
> = z.union([
  z.lazy(() =>
    GetV2LogsIdMessageResponse200ApplicationJSONResponseBody42$outboundSchema
  ),
  z.lazy(() =>
    GetV2LogsIdMessageResponse200ApplicationJSONResponseBody43$outboundSchema
  ),
  z.lazy(() =>
    GetV2LogsIdMessageResponse200ApplicationJSONResponseBody41$outboundSchema
  ),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdEvalsResponse200Message$ {
  /** @deprecated use `GetV2LogsIdEvalsResponse200Message$inboundSchema` instead. */
  export const inboundSchema = GetV2LogsIdEvalsResponse200Message$inboundSchema;
  /** @deprecated use `GetV2LogsIdEvalsResponse200Message$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdEvalsResponse200Message$outboundSchema;
  /** @deprecated use `GetV2LogsIdEvalsResponse200Message$Outbound` instead. */
  export type Outbound = GetV2LogsIdEvalsResponse200Message$Outbound;
}

export function getV2LogsIdEvalsResponse200MessageToJSON(
  getV2LogsIdEvalsResponse200Message: GetV2LogsIdEvalsResponse200Message,
): string {
  return JSON.stringify(
    GetV2LogsIdEvalsResponse200Message$outboundSchema.parse(
      getV2LogsIdEvalsResponse200Message,
    ),
  );
}

export function getV2LogsIdEvalsResponse200MessageFromJSON(
  jsonString: string,
): SafeParseResult<GetV2LogsIdEvalsResponse200Message, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      GetV2LogsIdEvalsResponse200Message$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetV2LogsIdEvalsResponse200Message' from JSON`,
  );
}

/** @internal */
export const GetV2LogsIdEvalsResponse200Choices$inboundSchema: z.ZodType<
  GetV2LogsIdEvalsResponse200Choices,
  z.ZodTypeDef,
  unknown
> = z.object({
  index: z.number(),
  message: z.union([
    z.lazy(() =>
      GetV2LogsIdMessageResponse200ApplicationJSONResponseBody42$inboundSchema
    ),
    z.lazy(() =>
      GetV2LogsIdMessageResponse200ApplicationJSONResponseBody43$inboundSchema
    ),
    z.lazy(() =>
      GetV2LogsIdMessageResponse200ApplicationJSONResponseBody41$inboundSchema
    ),
  ]).optional(),
  finish_reason: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    "finish_reason": "finishReason",
  });
});

/** @internal */
export type GetV2LogsIdEvalsResponse200Choices$Outbound = {
  index: number;
  message?:
    | GetV2LogsIdMessageResponse200ApplicationJSONResponseBody42$Outbound
    | GetV2LogsIdMessageResponse200ApplicationJSONResponseBody43$Outbound
    | GetV2LogsIdMessageResponse200ApplicationJSONResponseBody41$Outbound
    | undefined;
  finish_reason?: string | null | undefined;
};

/** @internal */
export const GetV2LogsIdEvalsResponse200Choices$outboundSchema: z.ZodType<
  GetV2LogsIdEvalsResponse200Choices$Outbound,
  z.ZodTypeDef,
  GetV2LogsIdEvalsResponse200Choices
> = z.object({
  index: z.number(),
  message: z.union([
    z.lazy(() =>
      GetV2LogsIdMessageResponse200ApplicationJSONResponseBody42$outboundSchema
    ),
    z.lazy(() =>
      GetV2LogsIdMessageResponse200ApplicationJSONResponseBody43$outboundSchema
    ),
    z.lazy(() =>
      GetV2LogsIdMessageResponse200ApplicationJSONResponseBody41$outboundSchema
    ),
  ]).optional(),
  finishReason: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    finishReason: "finish_reason",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdEvalsResponse200Choices$ {
  /** @deprecated use `GetV2LogsIdEvalsResponse200Choices$inboundSchema` instead. */
  export const inboundSchema = GetV2LogsIdEvalsResponse200Choices$inboundSchema;
  /** @deprecated use `GetV2LogsIdEvalsResponse200Choices$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdEvalsResponse200Choices$outboundSchema;
  /** @deprecated use `GetV2LogsIdEvalsResponse200Choices$Outbound` instead. */
  export type Outbound = GetV2LogsIdEvalsResponse200Choices$Outbound;
}

export function getV2LogsIdEvalsResponse200ChoicesToJSON(
  getV2LogsIdEvalsResponse200Choices: GetV2LogsIdEvalsResponse200Choices,
): string {
  return JSON.stringify(
    GetV2LogsIdEvalsResponse200Choices$outboundSchema.parse(
      getV2LogsIdEvalsResponse200Choices,
    ),
  );
}

export function getV2LogsIdEvalsResponse200ChoicesFromJSON(
  jsonString: string,
): SafeParseResult<GetV2LogsIdEvalsResponse200Choices, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      GetV2LogsIdEvalsResponse200Choices$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetV2LogsIdEvalsResponse200Choices' from JSON`,
  );
}

/** @internal */
export const GetV2LogsIdEvalsResponse200Action$inboundSchema: z.ZodNativeEnum<
  typeof GetV2LogsIdEvalsResponse200Action
> = z.nativeEnum(GetV2LogsIdEvalsResponse200Action);

/** @internal */
export const GetV2LogsIdEvalsResponse200Action$outboundSchema: z.ZodNativeEnum<
  typeof GetV2LogsIdEvalsResponse200Action
> = GetV2LogsIdEvalsResponse200Action$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdEvalsResponse200Action$ {
  /** @deprecated use `GetV2LogsIdEvalsResponse200Action$inboundSchema` instead. */
  export const inboundSchema = GetV2LogsIdEvalsResponse200Action$inboundSchema;
  /** @deprecated use `GetV2LogsIdEvalsResponse200Action$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdEvalsResponse200Action$outboundSchema;
}

/** @internal */
export const GetV2LogsIdEvalsResponse200ModelType$inboundSchema:
  z.ZodNativeEnum<typeof GetV2LogsIdEvalsResponse200ModelType> = z.nativeEnum(
    GetV2LogsIdEvalsResponse200ModelType,
  );

/** @internal */
export const GetV2LogsIdEvalsResponse200ModelType$outboundSchema:
  z.ZodNativeEnum<typeof GetV2LogsIdEvalsResponse200ModelType> =
    GetV2LogsIdEvalsResponse200ModelType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdEvalsResponse200ModelType$ {
  /** @deprecated use `GetV2LogsIdEvalsResponse200ModelType$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsIdEvalsResponse200ModelType$inboundSchema;
  /** @deprecated use `GetV2LogsIdEvalsResponse200ModelType$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdEvalsResponse200ModelType$outboundSchema;
}

/** @internal */
export const GetV2LogsIdEvalsResponse200ApplicationJSONFormat$inboundSchema:
  z.ZodNativeEnum<typeof GetV2LogsIdEvalsResponse200ApplicationJSONFormat> = z
    .nativeEnum(GetV2LogsIdEvalsResponse200ApplicationJSONFormat);

/** @internal */
export const GetV2LogsIdEvalsResponse200ApplicationJSONFormat$outboundSchema:
  z.ZodNativeEnum<typeof GetV2LogsIdEvalsResponse200ApplicationJSONFormat> =
    GetV2LogsIdEvalsResponse200ApplicationJSONFormat$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdEvalsResponse200ApplicationJSONFormat$ {
  /** @deprecated use `GetV2LogsIdEvalsResponse200ApplicationJSONFormat$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsIdEvalsResponse200ApplicationJSONFormat$inboundSchema;
  /** @deprecated use `GetV2LogsIdEvalsResponse200ApplicationJSONFormat$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdEvalsResponse200ApplicationJSONFormat$outboundSchema;
}

/** @internal */
export const GetV2LogsIdEvalsResponse200Quality$inboundSchema: z.ZodNativeEnum<
  typeof GetV2LogsIdEvalsResponse200Quality
> = z.nativeEnum(GetV2LogsIdEvalsResponse200Quality);

/** @internal */
export const GetV2LogsIdEvalsResponse200Quality$outboundSchema: z.ZodNativeEnum<
  typeof GetV2LogsIdEvalsResponse200Quality
> = GetV2LogsIdEvalsResponse200Quality$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdEvalsResponse200Quality$ {
  /** @deprecated use `GetV2LogsIdEvalsResponse200Quality$inboundSchema` instead. */
  export const inboundSchema = GetV2LogsIdEvalsResponse200Quality$inboundSchema;
  /** @deprecated use `GetV2LogsIdEvalsResponse200Quality$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdEvalsResponse200Quality$outboundSchema;
}

/** @internal */
export const GetV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody4EvalsType$inboundSchema:
  z.ZodNativeEnum<
    typeof GetV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody4EvalsType
  > = z.nativeEnum(
    GetV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody4EvalsType,
  );

/** @internal */
export const GetV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody4EvalsType$outboundSchema:
  z.ZodNativeEnum<
    typeof GetV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody4EvalsType
  > =
    GetV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody4EvalsType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody4EvalsType$ {
  /** @deprecated use `GetV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody4EvalsType$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody4EvalsType$inboundSchema;
  /** @deprecated use `GetV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody4EvalsType$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody4EvalsType$outboundSchema;
}

/** @internal */
export const GetV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody42$inboundSchema:
  z.ZodType<
    GetV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody42,
    z.ZodTypeDef,
    unknown
  > = z.object({
    type:
      GetV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody4EvalsType$inboundSchema,
  });

/** @internal */
export type GetV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody42$Outbound =
  {
    type: string;
  };

/** @internal */
export const GetV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody42$outboundSchema:
  z.ZodType<
    GetV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody42$Outbound,
    z.ZodTypeDef,
    GetV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody42
  > = z.object({
    type:
      GetV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody4EvalsType$outboundSchema,
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody42$ {
  /** @deprecated use `GetV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody42$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody42$inboundSchema;
  /** @deprecated use `GetV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody42$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody42$outboundSchema;
  /** @deprecated use `GetV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody42$Outbound` instead. */
  export type Outbound =
    GetV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody42$Outbound;
}

export function getV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody42ToJSON(
  getV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody42:
    GetV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody42,
): string {
  return JSON.stringify(
    GetV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody42$outboundSchema
      .parse(getV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody42),
  );
}

export function getV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody42FromJSON(
  jsonString: string,
): SafeParseResult<
  GetV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody42,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody42$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'GetV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody42' from JSON`,
  );
}

/** @internal */
export const GetV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody4Evals7Type$inboundSchema:
  z.ZodNativeEnum<
    typeof GetV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody4Evals7Type
  > = z.nativeEnum(
    GetV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody4Evals7Type,
  );

/** @internal */
export const GetV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody4Evals7Type$outboundSchema:
  z.ZodNativeEnum<
    typeof GetV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody4Evals7Type
  > =
    GetV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody4Evals7Type$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody4Evals7Type$ {
  /** @deprecated use `GetV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody4Evals7Type$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody4Evals7Type$inboundSchema;
  /** @deprecated use `GetV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody4Evals7Type$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody4Evals7Type$outboundSchema;
}

/** @internal */
export const GetV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody4JSONSchema$inboundSchema:
  z.ZodType<
    GetV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody4JSONSchema,
    z.ZodTypeDef,
    unknown
  > = z.object({
    name: z.string(),
    strict: z.boolean(),
    schema: z.record(z.any()),
  });

/** @internal */
export type GetV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody4JSONSchema$Outbound =
  {
    name: string;
    strict: boolean;
    schema: { [k: string]: any };
  };

/** @internal */
export const GetV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody4JSONSchema$outboundSchema:
  z.ZodType<
    GetV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody4JSONSchema$Outbound,
    z.ZodTypeDef,
    GetV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody4JSONSchema
  > = z.object({
    name: z.string(),
    strict: z.boolean(),
    schema: z.record(z.any()),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody4JSONSchema$ {
  /** @deprecated use `GetV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody4JSONSchema$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody4JSONSchema$inboundSchema;
  /** @deprecated use `GetV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody4JSONSchema$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody4JSONSchema$outboundSchema;
  /** @deprecated use `GetV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody4JSONSchema$Outbound` instead. */
  export type Outbound =
    GetV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody4JSONSchema$Outbound;
}

export function getV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody4JSONSchemaToJSON(
  getV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody4JSONSchema:
    GetV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody4JSONSchema,
): string {
  return JSON.stringify(
    GetV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody4JSONSchema$outboundSchema
      .parse(
        getV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody4JSONSchema,
      ),
  );
}

export function getV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody4JSONSchemaFromJSON(
  jsonString: string,
): SafeParseResult<
  GetV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody4JSONSchema,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody4JSONSchema$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'GetV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody4JSONSchema' from JSON`,
  );
}

/** @internal */
export const GetV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody41$inboundSchema:
  z.ZodType<
    GetV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody41,
    z.ZodTypeDef,
    unknown
  > = z.object({
    type:
      GetV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody4Evals7Type$inboundSchema,
    json_schema: z.lazy(() =>
      GetV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody4JSONSchema$inboundSchema
    ),
  }).transform((v) => {
    return remap$(v, {
      "json_schema": "jsonSchema",
    });
  });

/** @internal */
export type GetV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody41$Outbound =
  {
    type: string;
    json_schema:
      GetV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody4JSONSchema$Outbound;
  };

/** @internal */
export const GetV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody41$outboundSchema:
  z.ZodType<
    GetV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody41$Outbound,
    z.ZodTypeDef,
    GetV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody41
  > = z.object({
    type:
      GetV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody4Evals7Type$outboundSchema,
    jsonSchema: z.lazy(() =>
      GetV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody4JSONSchema$outboundSchema
    ),
  }).transform((v) => {
    return remap$(v, {
      jsonSchema: "json_schema",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody41$ {
  /** @deprecated use `GetV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody41$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody41$inboundSchema;
  /** @deprecated use `GetV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody41$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody41$outboundSchema;
  /** @deprecated use `GetV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody41$Outbound` instead. */
  export type Outbound =
    GetV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody41$Outbound;
}

export function getV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody41ToJSON(
  getV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody41:
    GetV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody41,
): string {
  return JSON.stringify(
    GetV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody41$outboundSchema
      .parse(getV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody41),
  );
}

export function getV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody41FromJSON(
  jsonString: string,
): SafeParseResult<
  GetV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody41,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody41$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'GetV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody41' from JSON`,
  );
}

/** @internal */
export const GetV2LogsIdEvalsResponse200ResponseFormat$inboundSchema: z.ZodType<
  GetV2LogsIdEvalsResponse200ResponseFormat,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() =>
    GetV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody42$inboundSchema
  ),
  z.lazy(() =>
    GetV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody41$inboundSchema
  ),
]);

/** @internal */
export type GetV2LogsIdEvalsResponse200ResponseFormat$Outbound =
  | GetV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody42$Outbound
  | GetV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody41$Outbound;

/** @internal */
export const GetV2LogsIdEvalsResponse200ResponseFormat$outboundSchema:
  z.ZodType<
    GetV2LogsIdEvalsResponse200ResponseFormat$Outbound,
    z.ZodTypeDef,
    GetV2LogsIdEvalsResponse200ResponseFormat
  > = z.union([
    z.lazy(() =>
      GetV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody42$outboundSchema
    ),
    z.lazy(() =>
      GetV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody41$outboundSchema
    ),
  ]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdEvalsResponse200ResponseFormat$ {
  /** @deprecated use `GetV2LogsIdEvalsResponse200ResponseFormat$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsIdEvalsResponse200ResponseFormat$inboundSchema;
  /** @deprecated use `GetV2LogsIdEvalsResponse200ResponseFormat$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdEvalsResponse200ResponseFormat$outboundSchema;
  /** @deprecated use `GetV2LogsIdEvalsResponse200ResponseFormat$Outbound` instead. */
  export type Outbound = GetV2LogsIdEvalsResponse200ResponseFormat$Outbound;
}

export function getV2LogsIdEvalsResponse200ResponseFormatToJSON(
  getV2LogsIdEvalsResponse200ResponseFormat:
    GetV2LogsIdEvalsResponse200ResponseFormat,
): string {
  return JSON.stringify(
    GetV2LogsIdEvalsResponse200ResponseFormat$outboundSchema.parse(
      getV2LogsIdEvalsResponse200ResponseFormat,
    ),
  );
}

export function getV2LogsIdEvalsResponse200ResponseFormatFromJSON(
  jsonString: string,
): SafeParseResult<
  GetV2LogsIdEvalsResponse200ResponseFormat,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetV2LogsIdEvalsResponse200ResponseFormat$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'GetV2LogsIdEvalsResponse200ResponseFormat' from JSON`,
  );
}

/** @internal */
export const GetV2LogsIdEvalsResponse200PhotoRealVersion$inboundSchema:
  z.ZodNativeEnum<typeof GetV2LogsIdEvalsResponse200PhotoRealVersion> = z
    .nativeEnum(GetV2LogsIdEvalsResponse200PhotoRealVersion);

/** @internal */
export const GetV2LogsIdEvalsResponse200PhotoRealVersion$outboundSchema:
  z.ZodNativeEnum<typeof GetV2LogsIdEvalsResponse200PhotoRealVersion> =
    GetV2LogsIdEvalsResponse200PhotoRealVersion$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdEvalsResponse200PhotoRealVersion$ {
  /** @deprecated use `GetV2LogsIdEvalsResponse200PhotoRealVersion$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsIdEvalsResponse200PhotoRealVersion$inboundSchema;
  /** @deprecated use `GetV2LogsIdEvalsResponse200PhotoRealVersion$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdEvalsResponse200PhotoRealVersion$outboundSchema;
}

/** @internal */
export const GetV2LogsIdEvalsResponse200EncodingFormat$inboundSchema:
  z.ZodNativeEnum<typeof GetV2LogsIdEvalsResponse200EncodingFormat> = z
    .nativeEnum(GetV2LogsIdEvalsResponse200EncodingFormat);

/** @internal */
export const GetV2LogsIdEvalsResponse200EncodingFormat$outboundSchema:
  z.ZodNativeEnum<typeof GetV2LogsIdEvalsResponse200EncodingFormat> =
    GetV2LogsIdEvalsResponse200EncodingFormat$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdEvalsResponse200EncodingFormat$ {
  /** @deprecated use `GetV2LogsIdEvalsResponse200EncodingFormat$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsIdEvalsResponse200EncodingFormat$inboundSchema;
  /** @deprecated use `GetV2LogsIdEvalsResponse200EncodingFormat$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdEvalsResponse200EncodingFormat$outboundSchema;
}

/** @internal */
export const GetV2LogsIdEvalsResponse200ModelParameters$inboundSchema:
  z.ZodType<GetV2LogsIdEvalsResponse200ModelParameters, z.ZodTypeDef, unknown> =
    z.object({
      temperature: z.number().optional(),
      maxTokens: z.number().optional(),
      topK: z.number().optional(),
      topP: z.number().optional(),
      frequencyPenalty: z.number().optional(),
      presencePenalty: z.number().optional(),
      numImages: z.number().optional(),
      seed: z.number().optional(),
      format: GetV2LogsIdEvalsResponse200ApplicationJSONFormat$inboundSchema
        .optional(),
      dimensions: z.string().optional(),
      quality: GetV2LogsIdEvalsResponse200Quality$inboundSchema.optional(),
      style: z.string().optional(),
      responseFormat: z.nullable(
        z.union([
          z.lazy(() =>
            GetV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody42$inboundSchema
          ),
          z.lazy(() =>
            GetV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody41$inboundSchema
          ),
        ]),
      ).optional(),
      photoRealVersion:
        GetV2LogsIdEvalsResponse200PhotoRealVersion$inboundSchema.optional(),
      encoding_format: GetV2LogsIdEvalsResponse200EncodingFormat$inboundSchema
        .optional(),
    }).transform((v) => {
      return remap$(v, {
        "encoding_format": "encodingFormat",
      });
    });

/** @internal */
export type GetV2LogsIdEvalsResponse200ModelParameters$Outbound = {
  temperature?: number | undefined;
  maxTokens?: number | undefined;
  topK?: number | undefined;
  topP?: number | undefined;
  frequencyPenalty?: number | undefined;
  presencePenalty?: number | undefined;
  numImages?: number | undefined;
  seed?: number | undefined;
  format?: string | undefined;
  dimensions?: string | undefined;
  quality?: string | undefined;
  style?: string | undefined;
  responseFormat?:
    | GetV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody42$Outbound
    | GetV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody41$Outbound
    | null
    | undefined;
  photoRealVersion?: string | undefined;
  encoding_format?: string | undefined;
};

/** @internal */
export const GetV2LogsIdEvalsResponse200ModelParameters$outboundSchema:
  z.ZodType<
    GetV2LogsIdEvalsResponse200ModelParameters$Outbound,
    z.ZodTypeDef,
    GetV2LogsIdEvalsResponse200ModelParameters
  > = z.object({
    temperature: z.number().optional(),
    maxTokens: z.number().optional(),
    topK: z.number().optional(),
    topP: z.number().optional(),
    frequencyPenalty: z.number().optional(),
    presencePenalty: z.number().optional(),
    numImages: z.number().optional(),
    seed: z.number().optional(),
    format: GetV2LogsIdEvalsResponse200ApplicationJSONFormat$outboundSchema
      .optional(),
    dimensions: z.string().optional(),
    quality: GetV2LogsIdEvalsResponse200Quality$outboundSchema.optional(),
    style: z.string().optional(),
    responseFormat: z.nullable(
      z.union([
        z.lazy(() =>
          GetV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody42$outboundSchema
        ),
        z.lazy(() =>
          GetV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody41$outboundSchema
        ),
      ]),
    ).optional(),
    photoRealVersion: GetV2LogsIdEvalsResponse200PhotoRealVersion$outboundSchema
      .optional(),
    encodingFormat: GetV2LogsIdEvalsResponse200EncodingFormat$outboundSchema
      .optional(),
  }).transform((v) => {
    return remap$(v, {
      encodingFormat: "encoding_format",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdEvalsResponse200ModelParameters$ {
  /** @deprecated use `GetV2LogsIdEvalsResponse200ModelParameters$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsIdEvalsResponse200ModelParameters$inboundSchema;
  /** @deprecated use `GetV2LogsIdEvalsResponse200ModelParameters$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdEvalsResponse200ModelParameters$outboundSchema;
  /** @deprecated use `GetV2LogsIdEvalsResponse200ModelParameters$Outbound` instead. */
  export type Outbound = GetV2LogsIdEvalsResponse200ModelParameters$Outbound;
}

export function getV2LogsIdEvalsResponse200ModelParametersToJSON(
  getV2LogsIdEvalsResponse200ModelParameters:
    GetV2LogsIdEvalsResponse200ModelParameters,
): string {
  return JSON.stringify(
    GetV2LogsIdEvalsResponse200ModelParameters$outboundSchema.parse(
      getV2LogsIdEvalsResponse200ModelParameters,
    ),
  );
}

export function getV2LogsIdEvalsResponse200ModelParametersFromJSON(
  jsonString: string,
): SafeParseResult<
  GetV2LogsIdEvalsResponse200ModelParameters,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetV2LogsIdEvalsResponse200ModelParameters$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'GetV2LogsIdEvalsResponse200ModelParameters' from JSON`,
  );
}

/** @internal */
export const GetV2LogsIdEvalsResponse200Provider$inboundSchema: z.ZodNativeEnum<
  typeof GetV2LogsIdEvalsResponse200Provider
> = z.nativeEnum(GetV2LogsIdEvalsResponse200Provider);

/** @internal */
export const GetV2LogsIdEvalsResponse200Provider$outboundSchema:
  z.ZodNativeEnum<typeof GetV2LogsIdEvalsResponse200Provider> =
    GetV2LogsIdEvalsResponse200Provider$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdEvalsResponse200Provider$ {
  /** @deprecated use `GetV2LogsIdEvalsResponse200Provider$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsIdEvalsResponse200Provider$inboundSchema;
  /** @deprecated use `GetV2LogsIdEvalsResponse200Provider$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdEvalsResponse200Provider$outboundSchema;
}

/** @internal */
export const GetV2LogsIdEvalsResponse200Role$inboundSchema: z.ZodNativeEnum<
  typeof GetV2LogsIdEvalsResponse200Role
> = z.nativeEnum(GetV2LogsIdEvalsResponse200Role);

/** @internal */
export const GetV2LogsIdEvalsResponse200Role$outboundSchema: z.ZodNativeEnum<
  typeof GetV2LogsIdEvalsResponse200Role
> = GetV2LogsIdEvalsResponse200Role$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdEvalsResponse200Role$ {
  /** @deprecated use `GetV2LogsIdEvalsResponse200Role$inboundSchema` instead. */
  export const inboundSchema = GetV2LogsIdEvalsResponse200Role$inboundSchema;
  /** @deprecated use `GetV2LogsIdEvalsResponse200Role$outboundSchema` instead. */
  export const outboundSchema = GetV2LogsIdEvalsResponse200Role$outboundSchema;
}

/** @internal */
export const GetV2LogsId2Response200ApplicationJSONResponseBody4EvalsType$inboundSchema:
  z.ZodNativeEnum<
    typeof GetV2LogsId2Response200ApplicationJSONResponseBody4EvalsType
  > = z.nativeEnum(
    GetV2LogsId2Response200ApplicationJSONResponseBody4EvalsType,
  );

/** @internal */
export const GetV2LogsId2Response200ApplicationJSONResponseBody4EvalsType$outboundSchema:
  z.ZodNativeEnum<
    typeof GetV2LogsId2Response200ApplicationJSONResponseBody4EvalsType
  > =
    GetV2LogsId2Response200ApplicationJSONResponseBody4EvalsType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsId2Response200ApplicationJSONResponseBody4EvalsType$ {
  /** @deprecated use `GetV2LogsId2Response200ApplicationJSONResponseBody4EvalsType$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsId2Response200ApplicationJSONResponseBody4EvalsType$inboundSchema;
  /** @deprecated use `GetV2LogsId2Response200ApplicationJSONResponseBody4EvalsType$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsId2Response200ApplicationJSONResponseBody4EvalsType$outboundSchema;
}

/** @internal */
export const GetV2LogsId2Response200ApplicationJSONResponseBody4ImageUrl$inboundSchema:
  z.ZodType<
    GetV2LogsId2Response200ApplicationJSONResponseBody4ImageUrl,
    z.ZodTypeDef,
    unknown
  > = z.object({
    id: z.string().optional(),
    url: z.string(),
    detail: z.string().optional(),
  });

/** @internal */
export type GetV2LogsId2Response200ApplicationJSONResponseBody4ImageUrl$Outbound =
  {
    id?: string | undefined;
    url: string;
    detail?: string | undefined;
  };

/** @internal */
export const GetV2LogsId2Response200ApplicationJSONResponseBody4ImageUrl$outboundSchema:
  z.ZodType<
    GetV2LogsId2Response200ApplicationJSONResponseBody4ImageUrl$Outbound,
    z.ZodTypeDef,
    GetV2LogsId2Response200ApplicationJSONResponseBody4ImageUrl
  > = z.object({
    id: z.string().optional(),
    url: z.string(),
    detail: z.string().optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsId2Response200ApplicationJSONResponseBody4ImageUrl$ {
  /** @deprecated use `GetV2LogsId2Response200ApplicationJSONResponseBody4ImageUrl$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsId2Response200ApplicationJSONResponseBody4ImageUrl$inboundSchema;
  /** @deprecated use `GetV2LogsId2Response200ApplicationJSONResponseBody4ImageUrl$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsId2Response200ApplicationJSONResponseBody4ImageUrl$outboundSchema;
  /** @deprecated use `GetV2LogsId2Response200ApplicationJSONResponseBody4ImageUrl$Outbound` instead. */
  export type Outbound =
    GetV2LogsId2Response200ApplicationJSONResponseBody4ImageUrl$Outbound;
}

export function getV2LogsId2Response200ApplicationJSONResponseBody4ImageUrlToJSON(
  getV2LogsId2Response200ApplicationJSONResponseBody4ImageUrl:
    GetV2LogsId2Response200ApplicationJSONResponseBody4ImageUrl,
): string {
  return JSON.stringify(
    GetV2LogsId2Response200ApplicationJSONResponseBody4ImageUrl$outboundSchema
      .parse(getV2LogsId2Response200ApplicationJSONResponseBody4ImageUrl),
  );
}

export function getV2LogsId2Response200ApplicationJSONResponseBody4ImageUrlFromJSON(
  jsonString: string,
): SafeParseResult<
  GetV2LogsId2Response200ApplicationJSONResponseBody4ImageUrl,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetV2LogsId2Response200ApplicationJSONResponseBody4ImageUrl$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'GetV2LogsId2Response200ApplicationJSONResponseBody4ImageUrl' from JSON`,
  );
}

/** @internal */
export const GetV2LogsId2Response200ApplicationJSONResponseBody42$inboundSchema:
  z.ZodType<
    GetV2LogsId2Response200ApplicationJSONResponseBody42,
    z.ZodTypeDef,
    unknown
  > = z.object({
    type:
      GetV2LogsId2Response200ApplicationJSONResponseBody4EvalsType$inboundSchema,
    image_url: z.lazy(() =>
      GetV2LogsId2Response200ApplicationJSONResponseBody4ImageUrl$inboundSchema
    ),
  }).transform((v) => {
    return remap$(v, {
      "image_url": "imageUrl",
    });
  });

/** @internal */
export type GetV2LogsId2Response200ApplicationJSONResponseBody42$Outbound = {
  type: string;
  image_url:
    GetV2LogsId2Response200ApplicationJSONResponseBody4ImageUrl$Outbound;
};

/** @internal */
export const GetV2LogsId2Response200ApplicationJSONResponseBody42$outboundSchema:
  z.ZodType<
    GetV2LogsId2Response200ApplicationJSONResponseBody42$Outbound,
    z.ZodTypeDef,
    GetV2LogsId2Response200ApplicationJSONResponseBody42
  > = z.object({
    type:
      GetV2LogsId2Response200ApplicationJSONResponseBody4EvalsType$outboundSchema,
    imageUrl: z.lazy(() =>
      GetV2LogsId2Response200ApplicationJSONResponseBody4ImageUrl$outboundSchema
    ),
  }).transform((v) => {
    return remap$(v, {
      imageUrl: "image_url",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsId2Response200ApplicationJSONResponseBody42$ {
  /** @deprecated use `GetV2LogsId2Response200ApplicationJSONResponseBody42$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsId2Response200ApplicationJSONResponseBody42$inboundSchema;
  /** @deprecated use `GetV2LogsId2Response200ApplicationJSONResponseBody42$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsId2Response200ApplicationJSONResponseBody42$outboundSchema;
  /** @deprecated use `GetV2LogsId2Response200ApplicationJSONResponseBody42$Outbound` instead. */
  export type Outbound =
    GetV2LogsId2Response200ApplicationJSONResponseBody42$Outbound;
}

export function getV2LogsId2Response200ApplicationJSONResponseBody42ToJSON(
  getV2LogsId2Response200ApplicationJSONResponseBody42:
    GetV2LogsId2Response200ApplicationJSONResponseBody42,
): string {
  return JSON.stringify(
    GetV2LogsId2Response200ApplicationJSONResponseBody42$outboundSchema.parse(
      getV2LogsId2Response200ApplicationJSONResponseBody42,
    ),
  );
}

export function getV2LogsId2Response200ApplicationJSONResponseBody42FromJSON(
  jsonString: string,
): SafeParseResult<
  GetV2LogsId2Response200ApplicationJSONResponseBody42,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetV2LogsId2Response200ApplicationJSONResponseBody42$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'GetV2LogsId2Response200ApplicationJSONResponseBody42' from JSON`,
  );
}

/** @internal */
export const GetV2LogsId2Response200ApplicationJSONResponseBody4Evals7Type$inboundSchema:
  z.ZodNativeEnum<
    typeof GetV2LogsId2Response200ApplicationJSONResponseBody4Evals7Type
  > = z.nativeEnum(
    GetV2LogsId2Response200ApplicationJSONResponseBody4Evals7Type,
  );

/** @internal */
export const GetV2LogsId2Response200ApplicationJSONResponseBody4Evals7Type$outboundSchema:
  z.ZodNativeEnum<
    typeof GetV2LogsId2Response200ApplicationJSONResponseBody4Evals7Type
  > =
    GetV2LogsId2Response200ApplicationJSONResponseBody4Evals7Type$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsId2Response200ApplicationJSONResponseBody4Evals7Type$ {
  /** @deprecated use `GetV2LogsId2Response200ApplicationJSONResponseBody4Evals7Type$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsId2Response200ApplicationJSONResponseBody4Evals7Type$inboundSchema;
  /** @deprecated use `GetV2LogsId2Response200ApplicationJSONResponseBody4Evals7Type$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsId2Response200ApplicationJSONResponseBody4Evals7Type$outboundSchema;
}

/** @internal */
export const GetV2LogsId2Response200ApplicationJSONResponseBody41$inboundSchema:
  z.ZodType<
    GetV2LogsId2Response200ApplicationJSONResponseBody41,
    z.ZodTypeDef,
    unknown
  > = z.object({
    type:
      GetV2LogsId2Response200ApplicationJSONResponseBody4Evals7Type$inboundSchema,
    text: z.string(),
  });

/** @internal */
export type GetV2LogsId2Response200ApplicationJSONResponseBody41$Outbound = {
  type: string;
  text: string;
};

/** @internal */
export const GetV2LogsId2Response200ApplicationJSONResponseBody41$outboundSchema:
  z.ZodType<
    GetV2LogsId2Response200ApplicationJSONResponseBody41$Outbound,
    z.ZodTypeDef,
    GetV2LogsId2Response200ApplicationJSONResponseBody41
  > = z.object({
    type:
      GetV2LogsId2Response200ApplicationJSONResponseBody4Evals7Type$outboundSchema,
    text: z.string(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsId2Response200ApplicationJSONResponseBody41$ {
  /** @deprecated use `GetV2LogsId2Response200ApplicationJSONResponseBody41$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsId2Response200ApplicationJSONResponseBody41$inboundSchema;
  /** @deprecated use `GetV2LogsId2Response200ApplicationJSONResponseBody41$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsId2Response200ApplicationJSONResponseBody41$outboundSchema;
  /** @deprecated use `GetV2LogsId2Response200ApplicationJSONResponseBody41$Outbound` instead. */
  export type Outbound =
    GetV2LogsId2Response200ApplicationJSONResponseBody41$Outbound;
}

export function getV2LogsId2Response200ApplicationJSONResponseBody41ToJSON(
  getV2LogsId2Response200ApplicationJSONResponseBody41:
    GetV2LogsId2Response200ApplicationJSONResponseBody41,
): string {
  return JSON.stringify(
    GetV2LogsId2Response200ApplicationJSONResponseBody41$outboundSchema.parse(
      getV2LogsId2Response200ApplicationJSONResponseBody41,
    ),
  );
}

export function getV2LogsId2Response200ApplicationJSONResponseBody41FromJSON(
  jsonString: string,
): SafeParseResult<
  GetV2LogsId2Response200ApplicationJSONResponseBody41,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetV2LogsId2Response200ApplicationJSONResponseBody41$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'GetV2LogsId2Response200ApplicationJSONResponseBody41' from JSON`,
  );
}

/** @internal */
export const GetV2LogsIdContentResponse200ApplicationJSONResponseBody42$inboundSchema:
  z.ZodType<
    GetV2LogsIdContentResponse200ApplicationJSONResponseBody42,
    z.ZodTypeDef,
    unknown
  > = z.union([
    z.lazy(() =>
      GetV2LogsId2Response200ApplicationJSONResponseBody41$inboundSchema
    ),
    z.lazy(() =>
      GetV2LogsId2Response200ApplicationJSONResponseBody42$inboundSchema
    ),
  ]);

/** @internal */
export type GetV2LogsIdContentResponse200ApplicationJSONResponseBody42$Outbound =
  | GetV2LogsId2Response200ApplicationJSONResponseBody41$Outbound
  | GetV2LogsId2Response200ApplicationJSONResponseBody42$Outbound;

/** @internal */
export const GetV2LogsIdContentResponse200ApplicationJSONResponseBody42$outboundSchema:
  z.ZodType<
    GetV2LogsIdContentResponse200ApplicationJSONResponseBody42$Outbound,
    z.ZodTypeDef,
    GetV2LogsIdContentResponse200ApplicationJSONResponseBody42
  > = z.union([
    z.lazy(() =>
      GetV2LogsId2Response200ApplicationJSONResponseBody41$outboundSchema
    ),
    z.lazy(() =>
      GetV2LogsId2Response200ApplicationJSONResponseBody42$outboundSchema
    ),
  ]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdContentResponse200ApplicationJSONResponseBody42$ {
  /** @deprecated use `GetV2LogsIdContentResponse200ApplicationJSONResponseBody42$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsIdContentResponse200ApplicationJSONResponseBody42$inboundSchema;
  /** @deprecated use `GetV2LogsIdContentResponse200ApplicationJSONResponseBody42$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdContentResponse200ApplicationJSONResponseBody42$outboundSchema;
  /** @deprecated use `GetV2LogsIdContentResponse200ApplicationJSONResponseBody42$Outbound` instead. */
  export type Outbound =
    GetV2LogsIdContentResponse200ApplicationJSONResponseBody42$Outbound;
}

export function getV2LogsIdContentResponse200ApplicationJSONResponseBody42ToJSON(
  getV2LogsIdContentResponse200ApplicationJSONResponseBody42:
    GetV2LogsIdContentResponse200ApplicationJSONResponseBody42,
): string {
  return JSON.stringify(
    GetV2LogsIdContentResponse200ApplicationJSONResponseBody42$outboundSchema
      .parse(getV2LogsIdContentResponse200ApplicationJSONResponseBody42),
  );
}

export function getV2LogsIdContentResponse200ApplicationJSONResponseBody42FromJSON(
  jsonString: string,
): SafeParseResult<
  GetV2LogsIdContentResponse200ApplicationJSONResponseBody42,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetV2LogsIdContentResponse200ApplicationJSONResponseBody42$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'GetV2LogsIdContentResponse200ApplicationJSONResponseBody42' from JSON`,
  );
}

/** @internal */
export const GetV2LogsIdEvalsResponse200Content$inboundSchema: z.ZodType<
  GetV2LogsIdEvalsResponse200Content,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.string(),
  z.array(z.union([
    z.lazy(() =>
      GetV2LogsId2Response200ApplicationJSONResponseBody41$inboundSchema
    ),
    z.lazy(() =>
      GetV2LogsId2Response200ApplicationJSONResponseBody42$inboundSchema
    ),
  ])),
]);

/** @internal */
export type GetV2LogsIdEvalsResponse200Content$Outbound =
  | string
  | Array<
    | GetV2LogsId2Response200ApplicationJSONResponseBody41$Outbound
    | GetV2LogsId2Response200ApplicationJSONResponseBody42$Outbound
  >;

/** @internal */
export const GetV2LogsIdEvalsResponse200Content$outboundSchema: z.ZodType<
  GetV2LogsIdEvalsResponse200Content$Outbound,
  z.ZodTypeDef,
  GetV2LogsIdEvalsResponse200Content
> = z.union([
  z.string(),
  z.array(z.union([
    z.lazy(() =>
      GetV2LogsId2Response200ApplicationJSONResponseBody41$outboundSchema
    ),
    z.lazy(() =>
      GetV2LogsId2Response200ApplicationJSONResponseBody42$outboundSchema
    ),
  ])),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdEvalsResponse200Content$ {
  /** @deprecated use `GetV2LogsIdEvalsResponse200Content$inboundSchema` instead. */
  export const inboundSchema = GetV2LogsIdEvalsResponse200Content$inboundSchema;
  /** @deprecated use `GetV2LogsIdEvalsResponse200Content$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdEvalsResponse200Content$outboundSchema;
  /** @deprecated use `GetV2LogsIdEvalsResponse200Content$Outbound` instead. */
  export type Outbound = GetV2LogsIdEvalsResponse200Content$Outbound;
}

export function getV2LogsIdEvalsResponse200ContentToJSON(
  getV2LogsIdEvalsResponse200Content: GetV2LogsIdEvalsResponse200Content,
): string {
  return JSON.stringify(
    GetV2LogsIdEvalsResponse200Content$outboundSchema.parse(
      getV2LogsIdEvalsResponse200Content,
    ),
  );
}

export function getV2LogsIdEvalsResponse200ContentFromJSON(
  jsonString: string,
): SafeParseResult<GetV2LogsIdEvalsResponse200Content, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      GetV2LogsIdEvalsResponse200Content$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetV2LogsIdEvalsResponse200Content' from JSON`,
  );
}

/** @internal */
export const GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody47WorkflowRunDataType$inboundSchema:
  z.ZodNativeEnum<
    typeof GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody47WorkflowRunDataType
  > = z.nativeEnum(
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody47WorkflowRunDataType,
  );

/** @internal */
export const GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody47WorkflowRunDataType$outboundSchema:
  z.ZodNativeEnum<
    typeof GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody47WorkflowRunDataType
  > =
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody47WorkflowRunDataType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody47WorkflowRunDataType$ {
  /** @deprecated use `GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody47WorkflowRunDataType$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody47WorkflowRunDataType$inboundSchema;
  /** @deprecated use `GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody47WorkflowRunDataType$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody47WorkflowRunDataType$outboundSchema;
}

/** @internal */
export const GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody4Function$inboundSchema:
  z.ZodType<
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody4Function,
    z.ZodTypeDef,
    unknown
  > = z.object({
    name: z.string(),
    arguments: z.string(),
  });

/** @internal */
export type GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody4Function$Outbound =
  {
    name: string;
    arguments: string;
  };

/** @internal */
export const GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody4Function$outboundSchema:
  z.ZodType<
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody4Function$Outbound,
    z.ZodTypeDef,
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody4Function
  > = z.object({
    name: z.string(),
    arguments: z.string(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody4Function$ {
  /** @deprecated use `GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody4Function$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody4Function$inboundSchema;
  /** @deprecated use `GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody4Function$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody4Function$outboundSchema;
  /** @deprecated use `GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody4Function$Outbound` instead. */
  export type Outbound =
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody4Function$Outbound;
}

export function getV2LogsIdEvalsResponse200ApplicationJSONResponseBody4FunctionToJSON(
  getV2LogsIdEvalsResponse200ApplicationJSONResponseBody4Function:
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody4Function,
): string {
  return JSON.stringify(
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody4Function$outboundSchema
      .parse(getV2LogsIdEvalsResponse200ApplicationJSONResponseBody4Function),
  );
}

export function getV2LogsIdEvalsResponse200ApplicationJSONResponseBody4FunctionFromJSON(
  jsonString: string,
): SafeParseResult<
  GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody4Function,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody4Function$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody4Function' from JSON`,
  );
}

/** @internal */
export const GetV2LogsIdEvalsResponse200ToolCalls$inboundSchema: z.ZodType<
  GetV2LogsIdEvalsResponse200ToolCalls,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string().optional(),
  index: z.number().optional(),
  type:
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody47WorkflowRunDataType$inboundSchema,
  function: z.lazy(() =>
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody4Function$inboundSchema
  ),
});

/** @internal */
export type GetV2LogsIdEvalsResponse200ToolCalls$Outbound = {
  id?: string | undefined;
  index?: number | undefined;
  type: string;
  function:
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody4Function$Outbound;
};

/** @internal */
export const GetV2LogsIdEvalsResponse200ToolCalls$outboundSchema: z.ZodType<
  GetV2LogsIdEvalsResponse200ToolCalls$Outbound,
  z.ZodTypeDef,
  GetV2LogsIdEvalsResponse200ToolCalls
> = z.object({
  id: z.string().optional(),
  index: z.number().optional(),
  type:
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody47WorkflowRunDataType$outboundSchema,
  function: z.lazy(() =>
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody4Function$outboundSchema
  ),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdEvalsResponse200ToolCalls$ {
  /** @deprecated use `GetV2LogsIdEvalsResponse200ToolCalls$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsIdEvalsResponse200ToolCalls$inboundSchema;
  /** @deprecated use `GetV2LogsIdEvalsResponse200ToolCalls$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdEvalsResponse200ToolCalls$outboundSchema;
  /** @deprecated use `GetV2LogsIdEvalsResponse200ToolCalls$Outbound` instead. */
  export type Outbound = GetV2LogsIdEvalsResponse200ToolCalls$Outbound;
}

export function getV2LogsIdEvalsResponse200ToolCallsToJSON(
  getV2LogsIdEvalsResponse200ToolCalls: GetV2LogsIdEvalsResponse200ToolCalls,
): string {
  return JSON.stringify(
    GetV2LogsIdEvalsResponse200ToolCalls$outboundSchema.parse(
      getV2LogsIdEvalsResponse200ToolCalls,
    ),
  );
}

export function getV2LogsIdEvalsResponse200ToolCallsFromJSON(
  jsonString: string,
): SafeParseResult<GetV2LogsIdEvalsResponse200ToolCalls, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      GetV2LogsIdEvalsResponse200ToolCalls$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetV2LogsIdEvalsResponse200ToolCalls' from JSON`,
  );
}

/** @internal */
export const GetV2LogsIdEvalsResponse200Messages$inboundSchema: z.ZodType<
  GetV2LogsIdEvalsResponse200Messages,
  z.ZodTypeDef,
  unknown
> = z.object({
  role: GetV2LogsIdEvalsResponse200Role$inboundSchema,
  content: z.union([
    z.string(),
    z.array(z.union([
      z.lazy(() =>
        GetV2LogsId2Response200ApplicationJSONResponseBody41$inboundSchema
      ),
      z.lazy(() =>
        GetV2LogsId2Response200ApplicationJSONResponseBody42$inboundSchema
      ),
    ])),
  ]),
  tool_calls: z.array(
    z.lazy(() => GetV2LogsIdEvalsResponse200ToolCalls$inboundSchema),
  ).optional(),
  id: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "tool_calls": "toolCalls",
  });
});

/** @internal */
export type GetV2LogsIdEvalsResponse200Messages$Outbound = {
  role: string;
  content:
    | string
    | Array<
      | GetV2LogsId2Response200ApplicationJSONResponseBody41$Outbound
      | GetV2LogsId2Response200ApplicationJSONResponseBody42$Outbound
    >;
  tool_calls?: Array<GetV2LogsIdEvalsResponse200ToolCalls$Outbound> | undefined;
  id?: string | undefined;
};

/** @internal */
export const GetV2LogsIdEvalsResponse200Messages$outboundSchema: z.ZodType<
  GetV2LogsIdEvalsResponse200Messages$Outbound,
  z.ZodTypeDef,
  GetV2LogsIdEvalsResponse200Messages
> = z.object({
  role: GetV2LogsIdEvalsResponse200Role$outboundSchema,
  content: z.union([
    z.string(),
    z.array(z.union([
      z.lazy(() =>
        GetV2LogsId2Response200ApplicationJSONResponseBody41$outboundSchema
      ),
      z.lazy(() =>
        GetV2LogsId2Response200ApplicationJSONResponseBody42$outboundSchema
      ),
    ])),
  ]),
  toolCalls: z.array(
    z.lazy(() => GetV2LogsIdEvalsResponse200ToolCalls$outboundSchema),
  ).optional(),
  id: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    toolCalls: "tool_calls",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdEvalsResponse200Messages$ {
  /** @deprecated use `GetV2LogsIdEvalsResponse200Messages$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsIdEvalsResponse200Messages$inboundSchema;
  /** @deprecated use `GetV2LogsIdEvalsResponse200Messages$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdEvalsResponse200Messages$outboundSchema;
  /** @deprecated use `GetV2LogsIdEvalsResponse200Messages$Outbound` instead. */
  export type Outbound = GetV2LogsIdEvalsResponse200Messages$Outbound;
}

export function getV2LogsIdEvalsResponse200MessagesToJSON(
  getV2LogsIdEvalsResponse200Messages: GetV2LogsIdEvalsResponse200Messages,
): string {
  return JSON.stringify(
    GetV2LogsIdEvalsResponse200Messages$outboundSchema.parse(
      getV2LogsIdEvalsResponse200Messages,
    ),
  );
}

export function getV2LogsIdEvalsResponse200MessagesFromJSON(
  jsonString: string,
): SafeParseResult<GetV2LogsIdEvalsResponse200Messages, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      GetV2LogsIdEvalsResponse200Messages$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetV2LogsIdEvalsResponse200Messages' from JSON`,
  );
}

/** @internal */
export const GetV2LogsIdEvalsResponse200PromptConfig$inboundSchema: z.ZodType<
  GetV2LogsIdEvalsResponse200PromptConfig,
  z.ZodTypeDef,
  unknown
> = z.object({
  stream: z.boolean(),
  model: z.string(),
  model_db_id: z.string(),
  model_type: GetV2LogsIdEvalsResponse200ModelType$inboundSchema,
  model_parameters: z.lazy(() =>
    GetV2LogsIdEvalsResponse200ModelParameters$inboundSchema
  ),
  provider: GetV2LogsIdEvalsResponse200Provider$inboundSchema,
  messages: z.array(
    z.lazy(() => GetV2LogsIdEvalsResponse200Messages$inboundSchema),
  ),
  integration_id: z.nullable(z.string()).optional(),
  version: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "model_db_id": "modelDbId",
    "model_type": "modelType",
    "model_parameters": "modelParameters",
    "integration_id": "integrationId",
  });
});

/** @internal */
export type GetV2LogsIdEvalsResponse200PromptConfig$Outbound = {
  stream: boolean;
  model: string;
  model_db_id: string;
  model_type: string;
  model_parameters: GetV2LogsIdEvalsResponse200ModelParameters$Outbound;
  provider: string;
  messages: Array<GetV2LogsIdEvalsResponse200Messages$Outbound>;
  integration_id?: string | null | undefined;
  version?: string | undefined;
};

/** @internal */
export const GetV2LogsIdEvalsResponse200PromptConfig$outboundSchema: z.ZodType<
  GetV2LogsIdEvalsResponse200PromptConfig$Outbound,
  z.ZodTypeDef,
  GetV2LogsIdEvalsResponse200PromptConfig
> = z.object({
  stream: z.boolean(),
  model: z.string(),
  modelDbId: z.string(),
  modelType: GetV2LogsIdEvalsResponse200ModelType$outboundSchema,
  modelParameters: z.lazy(() =>
    GetV2LogsIdEvalsResponse200ModelParameters$outboundSchema
  ),
  provider: GetV2LogsIdEvalsResponse200Provider$outboundSchema,
  messages: z.array(
    z.lazy(() => GetV2LogsIdEvalsResponse200Messages$outboundSchema),
  ),
  integrationId: z.nullable(z.string()).optional(),
  version: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    modelDbId: "model_db_id",
    modelType: "model_type",
    modelParameters: "model_parameters",
    integrationId: "integration_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdEvalsResponse200PromptConfig$ {
  /** @deprecated use `GetV2LogsIdEvalsResponse200PromptConfig$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsIdEvalsResponse200PromptConfig$inboundSchema;
  /** @deprecated use `GetV2LogsIdEvalsResponse200PromptConfig$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdEvalsResponse200PromptConfig$outboundSchema;
  /** @deprecated use `GetV2LogsIdEvalsResponse200PromptConfig$Outbound` instead. */
  export type Outbound = GetV2LogsIdEvalsResponse200PromptConfig$Outbound;
}

export function getV2LogsIdEvalsResponse200PromptConfigToJSON(
  getV2LogsIdEvalsResponse200PromptConfig:
    GetV2LogsIdEvalsResponse200PromptConfig,
): string {
  return JSON.stringify(
    GetV2LogsIdEvalsResponse200PromptConfig$outboundSchema.parse(
      getV2LogsIdEvalsResponse200PromptConfig,
    ),
  );
}

export function getV2LogsIdEvalsResponse200PromptConfigFromJSON(
  jsonString: string,
): SafeParseResult<
  GetV2LogsIdEvalsResponse200PromptConfig,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetV2LogsIdEvalsResponse200PromptConfig$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'GetV2LogsIdEvalsResponse200PromptConfig' from JSON`,
  );
}

/** @internal */
export const GetV2LogsIdEvalsResponse200Variables$inboundSchema: z.ZodType<
  GetV2LogsIdEvalsResponse200Variables,
  z.ZodTypeDef,
  unknown
> = z.object({
  key: z.string(),
  value: z.any().optional(),
  is_pii: z.boolean().default(false),
}).transform((v) => {
  return remap$(v, {
    "is_pii": "isPii",
  });
});

/** @internal */
export type GetV2LogsIdEvalsResponse200Variables$Outbound = {
  key: string;
  value?: any | undefined;
  is_pii: boolean;
};

/** @internal */
export const GetV2LogsIdEvalsResponse200Variables$outboundSchema: z.ZodType<
  GetV2LogsIdEvalsResponse200Variables$Outbound,
  z.ZodTypeDef,
  GetV2LogsIdEvalsResponse200Variables
> = z.object({
  key: z.string(),
  value: z.any().optional(),
  isPii: z.boolean().default(false),
}).transform((v) => {
  return remap$(v, {
    isPii: "is_pii",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdEvalsResponse200Variables$ {
  /** @deprecated use `GetV2LogsIdEvalsResponse200Variables$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsIdEvalsResponse200Variables$inboundSchema;
  /** @deprecated use `GetV2LogsIdEvalsResponse200Variables$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdEvalsResponse200Variables$outboundSchema;
  /** @deprecated use `GetV2LogsIdEvalsResponse200Variables$Outbound` instead. */
  export type Outbound = GetV2LogsIdEvalsResponse200Variables$Outbound;
}

export function getV2LogsIdEvalsResponse200VariablesToJSON(
  getV2LogsIdEvalsResponse200Variables: GetV2LogsIdEvalsResponse200Variables,
): string {
  return JSON.stringify(
    GetV2LogsIdEvalsResponse200Variables$outboundSchema.parse(
      getV2LogsIdEvalsResponse200Variables,
    ),
  );
}

export function getV2LogsIdEvalsResponse200VariablesFromJSON(
  jsonString: string,
): SafeParseResult<GetV2LogsIdEvalsResponse200Variables, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      GetV2LogsIdEvalsResponse200Variables$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetV2LogsIdEvalsResponse200Variables' from JSON`,
  );
}

/** @internal */
export const GetV2LogsIdEvalsResponse200Performance$inboundSchema: z.ZodType<
  GetV2LogsIdEvalsResponse200Performance,
  z.ZodTypeDef,
  unknown
> = z.object({
  latency: z.number(),
  first_time_to_token: z.nullable(z.number()).optional(),
  tokens_per_second: z.nullable(z.number()).optional(),
}).transform((v) => {
  return remap$(v, {
    "first_time_to_token": "firstTimeToToken",
    "tokens_per_second": "tokensPerSecond",
  });
});

/** @internal */
export type GetV2LogsIdEvalsResponse200Performance$Outbound = {
  latency: number;
  first_time_to_token?: number | null | undefined;
  tokens_per_second?: number | null | undefined;
};

/** @internal */
export const GetV2LogsIdEvalsResponse200Performance$outboundSchema: z.ZodType<
  GetV2LogsIdEvalsResponse200Performance$Outbound,
  z.ZodTypeDef,
  GetV2LogsIdEvalsResponse200Performance
> = z.object({
  latency: z.number(),
  firstTimeToToken: z.nullable(z.number()).optional(),
  tokensPerSecond: z.nullable(z.number()).optional(),
}).transform((v) => {
  return remap$(v, {
    firstTimeToToken: "first_time_to_token",
    tokensPerSecond: "tokens_per_second",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdEvalsResponse200Performance$ {
  /** @deprecated use `GetV2LogsIdEvalsResponse200Performance$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsIdEvalsResponse200Performance$inboundSchema;
  /** @deprecated use `GetV2LogsIdEvalsResponse200Performance$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdEvalsResponse200Performance$outboundSchema;
  /** @deprecated use `GetV2LogsIdEvalsResponse200Performance$Outbound` instead. */
  export type Outbound = GetV2LogsIdEvalsResponse200Performance$Outbound;
}

export function getV2LogsIdEvalsResponse200PerformanceToJSON(
  getV2LogsIdEvalsResponse200Performance:
    GetV2LogsIdEvalsResponse200Performance,
): string {
  return JSON.stringify(
    GetV2LogsIdEvalsResponse200Performance$outboundSchema.parse(
      getV2LogsIdEvalsResponse200Performance,
    ),
  );
}

export function getV2LogsIdEvalsResponse200PerformanceFromJSON(
  jsonString: string,
): SafeParseResult<GetV2LogsIdEvalsResponse200Performance, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      GetV2LogsIdEvalsResponse200Performance$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetV2LogsIdEvalsResponse200Performance' from JSON`,
  );
}

/** @internal */
export const GetV2LogsIdEvalsResponse200PromptTokensDetails$inboundSchema:
  z.ZodType<
    GetV2LogsIdEvalsResponse200PromptTokensDetails,
    z.ZodTypeDef,
    unknown
  > = z.object({
    cached_tokens: z.number().optional(),
  }).transform((v) => {
    return remap$(v, {
      "cached_tokens": "cachedTokens",
    });
  });

/** @internal */
export type GetV2LogsIdEvalsResponse200PromptTokensDetails$Outbound = {
  cached_tokens?: number | undefined;
};

/** @internal */
export const GetV2LogsIdEvalsResponse200PromptTokensDetails$outboundSchema:
  z.ZodType<
    GetV2LogsIdEvalsResponse200PromptTokensDetails$Outbound,
    z.ZodTypeDef,
    GetV2LogsIdEvalsResponse200PromptTokensDetails
  > = z.object({
    cachedTokens: z.number().optional(),
  }).transform((v) => {
    return remap$(v, {
      cachedTokens: "cached_tokens",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdEvalsResponse200PromptTokensDetails$ {
  /** @deprecated use `GetV2LogsIdEvalsResponse200PromptTokensDetails$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsIdEvalsResponse200PromptTokensDetails$inboundSchema;
  /** @deprecated use `GetV2LogsIdEvalsResponse200PromptTokensDetails$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdEvalsResponse200PromptTokensDetails$outboundSchema;
  /** @deprecated use `GetV2LogsIdEvalsResponse200PromptTokensDetails$Outbound` instead. */
  export type Outbound =
    GetV2LogsIdEvalsResponse200PromptTokensDetails$Outbound;
}

export function getV2LogsIdEvalsResponse200PromptTokensDetailsToJSON(
  getV2LogsIdEvalsResponse200PromptTokensDetails:
    GetV2LogsIdEvalsResponse200PromptTokensDetails,
): string {
  return JSON.stringify(
    GetV2LogsIdEvalsResponse200PromptTokensDetails$outboundSchema.parse(
      getV2LogsIdEvalsResponse200PromptTokensDetails,
    ),
  );
}

export function getV2LogsIdEvalsResponse200PromptTokensDetailsFromJSON(
  jsonString: string,
): SafeParseResult<
  GetV2LogsIdEvalsResponse200PromptTokensDetails,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetV2LogsIdEvalsResponse200PromptTokensDetails$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'GetV2LogsIdEvalsResponse200PromptTokensDetails' from JSON`,
  );
}

/** @internal */
export const GetV2LogsIdEvalsResponse200CompletionTokensDetails$inboundSchema:
  z.ZodType<
    GetV2LogsIdEvalsResponse200CompletionTokensDetails,
    z.ZodTypeDef,
    unknown
  > = z.object({
    reasoning_tokens: z.number().optional(),
  }).transform((v) => {
    return remap$(v, {
      "reasoning_tokens": "reasoningTokens",
    });
  });

/** @internal */
export type GetV2LogsIdEvalsResponse200CompletionTokensDetails$Outbound = {
  reasoning_tokens?: number | undefined;
};

/** @internal */
export const GetV2LogsIdEvalsResponse200CompletionTokensDetails$outboundSchema:
  z.ZodType<
    GetV2LogsIdEvalsResponse200CompletionTokensDetails$Outbound,
    z.ZodTypeDef,
    GetV2LogsIdEvalsResponse200CompletionTokensDetails
  > = z.object({
    reasoningTokens: z.number().optional(),
  }).transform((v) => {
    return remap$(v, {
      reasoningTokens: "reasoning_tokens",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdEvalsResponse200CompletionTokensDetails$ {
  /** @deprecated use `GetV2LogsIdEvalsResponse200CompletionTokensDetails$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsIdEvalsResponse200CompletionTokensDetails$inboundSchema;
  /** @deprecated use `GetV2LogsIdEvalsResponse200CompletionTokensDetails$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdEvalsResponse200CompletionTokensDetails$outboundSchema;
  /** @deprecated use `GetV2LogsIdEvalsResponse200CompletionTokensDetails$Outbound` instead. */
  export type Outbound =
    GetV2LogsIdEvalsResponse200CompletionTokensDetails$Outbound;
}

export function getV2LogsIdEvalsResponse200CompletionTokensDetailsToJSON(
  getV2LogsIdEvalsResponse200CompletionTokensDetails:
    GetV2LogsIdEvalsResponse200CompletionTokensDetails,
): string {
  return JSON.stringify(
    GetV2LogsIdEvalsResponse200CompletionTokensDetails$outboundSchema.parse(
      getV2LogsIdEvalsResponse200CompletionTokensDetails,
    ),
  );
}

export function getV2LogsIdEvalsResponse200CompletionTokensDetailsFromJSON(
  jsonString: string,
): SafeParseResult<
  GetV2LogsIdEvalsResponse200CompletionTokensDetails,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetV2LogsIdEvalsResponse200CompletionTokensDetails$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'GetV2LogsIdEvalsResponse200CompletionTokensDetails' from JSON`,
  );
}

/** @internal */
export const GetV2LogsIdEvalsResponse200Usage$inboundSchema: z.ZodType<
  GetV2LogsIdEvalsResponse200Usage,
  z.ZodTypeDef,
  unknown
> = z.object({
  total_tokens: z.number().optional(),
  prompt_tokens: z.number().optional(),
  completion_tokens: z.number().optional(),
  prompt_tokens_details: z.lazy(() =>
    GetV2LogsIdEvalsResponse200PromptTokensDetails$inboundSchema
  ).optional(),
  completion_tokens_details: z.lazy(() =>
    GetV2LogsIdEvalsResponse200CompletionTokensDetails$inboundSchema
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    "total_tokens": "totalTokens",
    "prompt_tokens": "promptTokens",
    "completion_tokens": "completionTokens",
    "prompt_tokens_details": "promptTokensDetails",
    "completion_tokens_details": "completionTokensDetails",
  });
});

/** @internal */
export type GetV2LogsIdEvalsResponse200Usage$Outbound = {
  total_tokens?: number | undefined;
  prompt_tokens?: number | undefined;
  completion_tokens?: number | undefined;
  prompt_tokens_details?:
    | GetV2LogsIdEvalsResponse200PromptTokensDetails$Outbound
    | undefined;
  completion_tokens_details?:
    | GetV2LogsIdEvalsResponse200CompletionTokensDetails$Outbound
    | undefined;
};

/** @internal */
export const GetV2LogsIdEvalsResponse200Usage$outboundSchema: z.ZodType<
  GetV2LogsIdEvalsResponse200Usage$Outbound,
  z.ZodTypeDef,
  GetV2LogsIdEvalsResponse200Usage
> = z.object({
  totalTokens: z.number().optional(),
  promptTokens: z.number().optional(),
  completionTokens: z.number().optional(),
  promptTokensDetails: z.lazy(() =>
    GetV2LogsIdEvalsResponse200PromptTokensDetails$outboundSchema
  ).optional(),
  completionTokensDetails: z.lazy(() =>
    GetV2LogsIdEvalsResponse200CompletionTokensDetails$outboundSchema
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    totalTokens: "total_tokens",
    promptTokens: "prompt_tokens",
    completionTokens: "completion_tokens",
    promptTokensDetails: "prompt_tokens_details",
    completionTokensDetails: "completion_tokens_details",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdEvalsResponse200Usage$ {
  /** @deprecated use `GetV2LogsIdEvalsResponse200Usage$inboundSchema` instead. */
  export const inboundSchema = GetV2LogsIdEvalsResponse200Usage$inboundSchema;
  /** @deprecated use `GetV2LogsIdEvalsResponse200Usage$outboundSchema` instead. */
  export const outboundSchema = GetV2LogsIdEvalsResponse200Usage$outboundSchema;
  /** @deprecated use `GetV2LogsIdEvalsResponse200Usage$Outbound` instead. */
  export type Outbound = GetV2LogsIdEvalsResponse200Usage$Outbound;
}

export function getV2LogsIdEvalsResponse200UsageToJSON(
  getV2LogsIdEvalsResponse200Usage: GetV2LogsIdEvalsResponse200Usage,
): string {
  return JSON.stringify(
    GetV2LogsIdEvalsResponse200Usage$outboundSchema.parse(
      getV2LogsIdEvalsResponse200Usage,
    ),
  );
}

export function getV2LogsIdEvalsResponse200UsageFromJSON(
  jsonString: string,
): SafeParseResult<GetV2LogsIdEvalsResponse200Usage, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetV2LogsIdEvalsResponse200Usage$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetV2LogsIdEvalsResponse200Usage' from JSON`,
  );
}

/** @internal */
export const GetV2LogsIdEvalsResponse200Billing$inboundSchema: z.ZodType<
  GetV2LogsIdEvalsResponse200Billing,
  z.ZodTypeDef,
  unknown
> = z.object({
  total_cost: z.nullable(z.number()).optional(),
  input_cost: z.nullable(z.number()).optional(),
  output_cost: z.nullable(z.number()).optional(),
  billable: z.boolean(),
}).transform((v) => {
  return remap$(v, {
    "total_cost": "totalCost",
    "input_cost": "inputCost",
    "output_cost": "outputCost",
  });
});

/** @internal */
export type GetV2LogsIdEvalsResponse200Billing$Outbound = {
  total_cost?: number | null | undefined;
  input_cost?: number | null | undefined;
  output_cost?: number | null | undefined;
  billable: boolean;
};

/** @internal */
export const GetV2LogsIdEvalsResponse200Billing$outboundSchema: z.ZodType<
  GetV2LogsIdEvalsResponse200Billing$Outbound,
  z.ZodTypeDef,
  GetV2LogsIdEvalsResponse200Billing
> = z.object({
  totalCost: z.nullable(z.number()).optional(),
  inputCost: z.nullable(z.number()).optional(),
  outputCost: z.nullable(z.number()).optional(),
  billable: z.boolean(),
}).transform((v) => {
  return remap$(v, {
    totalCost: "total_cost",
    inputCost: "input_cost",
    outputCost: "output_cost",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdEvalsResponse200Billing$ {
  /** @deprecated use `GetV2LogsIdEvalsResponse200Billing$inboundSchema` instead. */
  export const inboundSchema = GetV2LogsIdEvalsResponse200Billing$inboundSchema;
  /** @deprecated use `GetV2LogsIdEvalsResponse200Billing$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdEvalsResponse200Billing$outboundSchema;
  /** @deprecated use `GetV2LogsIdEvalsResponse200Billing$Outbound` instead. */
  export type Outbound = GetV2LogsIdEvalsResponse200Billing$Outbound;
}

export function getV2LogsIdEvalsResponse200BillingToJSON(
  getV2LogsIdEvalsResponse200Billing: GetV2LogsIdEvalsResponse200Billing,
): string {
  return JSON.stringify(
    GetV2LogsIdEvalsResponse200Billing$outboundSchema.parse(
      getV2LogsIdEvalsResponse200Billing,
    ),
  );
}

export function getV2LogsIdEvalsResponse200BillingFromJSON(
  jsonString: string,
): SafeParseResult<GetV2LogsIdEvalsResponse200Billing, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      GetV2LogsIdEvalsResponse200Billing$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetV2LogsIdEvalsResponse200Billing' from JSON`,
  );
}

/** @internal */
export const GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody47WorkflowRunType$inboundSchema:
  z.ZodNativeEnum<
    typeof GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody47WorkflowRunType
  > = z.nativeEnum(
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody47WorkflowRunType,
  );

/** @internal */
export const GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody47WorkflowRunType$outboundSchema:
  z.ZodNativeEnum<
    typeof GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody47WorkflowRunType
  > =
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody47WorkflowRunType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody47WorkflowRunType$ {
  /** @deprecated use `GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody47WorkflowRunType$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody47WorkflowRunType$inboundSchema;
  /** @deprecated use `GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody47WorkflowRunType$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody47WorkflowRunType$outboundSchema;
}

/** @internal */
export const GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody47WorkflowRunDataToolsType$inboundSchema:
  z.ZodNativeEnum<
    typeof GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody47WorkflowRunDataToolsType
  > = z.nativeEnum(
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody47WorkflowRunDataToolsType,
  );

/** @internal */
export const GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody47WorkflowRunDataToolsType$outboundSchema:
  z.ZodNativeEnum<
    typeof GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody47WorkflowRunDataToolsType
  > =
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody47WorkflowRunDataToolsType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody47WorkflowRunDataToolsType$ {
  /** @deprecated use `GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody47WorkflowRunDataToolsType$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody47WorkflowRunDataToolsType$inboundSchema;
  /** @deprecated use `GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody47WorkflowRunDataToolsType$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody47WorkflowRunDataToolsType$outboundSchema;
}

/** @internal */
export const GetV2LogsIdEvalsResponse200Parameters$inboundSchema: z.ZodType<
  GetV2LogsIdEvalsResponse200Parameters,
  z.ZodTypeDef,
  unknown
> = z.object({
  type:
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody47WorkflowRunDataToolsType$inboundSchema,
  properties: z.record(z.any()),
  required: z.array(z.string()).optional(),
  additionalProperties: z.boolean().optional(),
});

/** @internal */
export type GetV2LogsIdEvalsResponse200Parameters$Outbound = {
  type: string;
  properties: { [k: string]: any };
  required?: Array<string> | undefined;
  additionalProperties?: boolean | undefined;
};

/** @internal */
export const GetV2LogsIdEvalsResponse200Parameters$outboundSchema: z.ZodType<
  GetV2LogsIdEvalsResponse200Parameters$Outbound,
  z.ZodTypeDef,
  GetV2LogsIdEvalsResponse200Parameters
> = z.object({
  type:
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody47WorkflowRunDataToolsType$outboundSchema,
  properties: z.record(z.any()),
  required: z.array(z.string()).optional(),
  additionalProperties: z.boolean().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdEvalsResponse200Parameters$ {
  /** @deprecated use `GetV2LogsIdEvalsResponse200Parameters$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsIdEvalsResponse200Parameters$inboundSchema;
  /** @deprecated use `GetV2LogsIdEvalsResponse200Parameters$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdEvalsResponse200Parameters$outboundSchema;
  /** @deprecated use `GetV2LogsIdEvalsResponse200Parameters$Outbound` instead. */
  export type Outbound = GetV2LogsIdEvalsResponse200Parameters$Outbound;
}

export function getV2LogsIdEvalsResponse200ParametersToJSON(
  getV2LogsIdEvalsResponse200Parameters: GetV2LogsIdEvalsResponse200Parameters,
): string {
  return JSON.stringify(
    GetV2LogsIdEvalsResponse200Parameters$outboundSchema.parse(
      getV2LogsIdEvalsResponse200Parameters,
    ),
  );
}

export function getV2LogsIdEvalsResponse200ParametersFromJSON(
  jsonString: string,
): SafeParseResult<GetV2LogsIdEvalsResponse200Parameters, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      GetV2LogsIdEvalsResponse200Parameters$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetV2LogsIdEvalsResponse200Parameters' from JSON`,
  );
}

/** @internal */
export const GetV2LogsIdEvalsResponse200Function$inboundSchema: z.ZodType<
  GetV2LogsIdEvalsResponse200Function,
  z.ZodTypeDef,
  unknown
> = z.object({
  name: z.string(),
  description: z.string().optional(),
  strict: z.boolean().optional(),
  parameters: z.lazy(() => GetV2LogsIdEvalsResponse200Parameters$inboundSchema),
});

/** @internal */
export type GetV2LogsIdEvalsResponse200Function$Outbound = {
  name: string;
  description?: string | undefined;
  strict?: boolean | undefined;
  parameters: GetV2LogsIdEvalsResponse200Parameters$Outbound;
};

/** @internal */
export const GetV2LogsIdEvalsResponse200Function$outboundSchema: z.ZodType<
  GetV2LogsIdEvalsResponse200Function$Outbound,
  z.ZodTypeDef,
  GetV2LogsIdEvalsResponse200Function
> = z.object({
  name: z.string(),
  description: z.string().optional(),
  strict: z.boolean().optional(),
  parameters: z.lazy(() =>
    GetV2LogsIdEvalsResponse200Parameters$outboundSchema
  ),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdEvalsResponse200Function$ {
  /** @deprecated use `GetV2LogsIdEvalsResponse200Function$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsIdEvalsResponse200Function$inboundSchema;
  /** @deprecated use `GetV2LogsIdEvalsResponse200Function$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdEvalsResponse200Function$outboundSchema;
  /** @deprecated use `GetV2LogsIdEvalsResponse200Function$Outbound` instead. */
  export type Outbound = GetV2LogsIdEvalsResponse200Function$Outbound;
}

export function getV2LogsIdEvalsResponse200FunctionToJSON(
  getV2LogsIdEvalsResponse200Function: GetV2LogsIdEvalsResponse200Function,
): string {
  return JSON.stringify(
    GetV2LogsIdEvalsResponse200Function$outboundSchema.parse(
      getV2LogsIdEvalsResponse200Function,
    ),
  );
}

export function getV2LogsIdEvalsResponse200FunctionFromJSON(
  jsonString: string,
): SafeParseResult<GetV2LogsIdEvalsResponse200Function, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      GetV2LogsIdEvalsResponse200Function$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetV2LogsIdEvalsResponse200Function' from JSON`,
  );
}

/** @internal */
export const GetV2LogsIdEvalsResponse200Tools$inboundSchema: z.ZodType<
  GetV2LogsIdEvalsResponse200Tools,
  z.ZodTypeDef,
  unknown
> = z.object({
  type:
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody47WorkflowRunType$inboundSchema,
  function: z.lazy(() => GetV2LogsIdEvalsResponse200Function$inboundSchema),
});

/** @internal */
export type GetV2LogsIdEvalsResponse200Tools$Outbound = {
  type: string;
  function: GetV2LogsIdEvalsResponse200Function$Outbound;
};

/** @internal */
export const GetV2LogsIdEvalsResponse200Tools$outboundSchema: z.ZodType<
  GetV2LogsIdEvalsResponse200Tools$Outbound,
  z.ZodTypeDef,
  GetV2LogsIdEvalsResponse200Tools
> = z.object({
  type:
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody47WorkflowRunType$outboundSchema,
  function: z.lazy(() => GetV2LogsIdEvalsResponse200Function$outboundSchema),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdEvalsResponse200Tools$ {
  /** @deprecated use `GetV2LogsIdEvalsResponse200Tools$inboundSchema` instead. */
  export const inboundSchema = GetV2LogsIdEvalsResponse200Tools$inboundSchema;
  /** @deprecated use `GetV2LogsIdEvalsResponse200Tools$outboundSchema` instead. */
  export const outboundSchema = GetV2LogsIdEvalsResponse200Tools$outboundSchema;
  /** @deprecated use `GetV2LogsIdEvalsResponse200Tools$Outbound` instead. */
  export type Outbound = GetV2LogsIdEvalsResponse200Tools$Outbound;
}

export function getV2LogsIdEvalsResponse200ToolsToJSON(
  getV2LogsIdEvalsResponse200Tools: GetV2LogsIdEvalsResponse200Tools,
): string {
  return JSON.stringify(
    GetV2LogsIdEvalsResponse200Tools$outboundSchema.parse(
      getV2LogsIdEvalsResponse200Tools,
    ),
  );
}

export function getV2LogsIdEvalsResponse200ToolsFromJSON(
  jsonString: string,
): SafeParseResult<GetV2LogsIdEvalsResponse200Tools, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetV2LogsIdEvalsResponse200Tools$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetV2LogsIdEvalsResponse200Tools' from JSON`,
  );
}

/** @internal */
export const GetV2LogsIdEvalsResponse200PromptSnippets$inboundSchema: z.ZodType<
  GetV2LogsIdEvalsResponse200PromptSnippets,
  z.ZodTypeDef,
  unknown
> = z.object({
  _id: z.string(),
  key: z.string(),
  value: z.string(),
}).transform((v) => {
  return remap$(v, {
    "_id": "id",
  });
});

/** @internal */
export type GetV2LogsIdEvalsResponse200PromptSnippets$Outbound = {
  _id: string;
  key: string;
  value: string;
};

/** @internal */
export const GetV2LogsIdEvalsResponse200PromptSnippets$outboundSchema:
  z.ZodType<
    GetV2LogsIdEvalsResponse200PromptSnippets$Outbound,
    z.ZodTypeDef,
    GetV2LogsIdEvalsResponse200PromptSnippets
  > = z.object({
    id: z.string(),
    key: z.string(),
    value: z.string(),
  }).transform((v) => {
    return remap$(v, {
      id: "_id",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdEvalsResponse200PromptSnippets$ {
  /** @deprecated use `GetV2LogsIdEvalsResponse200PromptSnippets$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsIdEvalsResponse200PromptSnippets$inboundSchema;
  /** @deprecated use `GetV2LogsIdEvalsResponse200PromptSnippets$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdEvalsResponse200PromptSnippets$outboundSchema;
  /** @deprecated use `GetV2LogsIdEvalsResponse200PromptSnippets$Outbound` instead. */
  export type Outbound = GetV2LogsIdEvalsResponse200PromptSnippets$Outbound;
}

export function getV2LogsIdEvalsResponse200PromptSnippetsToJSON(
  getV2LogsIdEvalsResponse200PromptSnippets:
    GetV2LogsIdEvalsResponse200PromptSnippets,
): string {
  return JSON.stringify(
    GetV2LogsIdEvalsResponse200PromptSnippets$outboundSchema.parse(
      getV2LogsIdEvalsResponse200PromptSnippets,
    ),
  );
}

export function getV2LogsIdEvalsResponse200PromptSnippetsFromJSON(
  jsonString: string,
): SafeParseResult<
  GetV2LogsIdEvalsResponse200PromptSnippets,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetV2LogsIdEvalsResponse200PromptSnippets$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'GetV2LogsIdEvalsResponse200PromptSnippets' from JSON`,
  );
}

/** @internal */
export const GetV2LogsIdEvalsResponse200Data$inboundSchema: z.ZodType<
  GetV2LogsIdEvalsResponse200Data,
  z.ZodTypeDef,
  unknown
> = z.object({
  choices: z.array(
    z.lazy(() => GetV2LogsIdEvalsResponse200Choices$inboundSchema),
  ).optional(),
  action: GetV2LogsIdEvalsResponse200Action$inboundSchema,
  prompt_config: z.lazy(() =>
    GetV2LogsIdEvalsResponse200PromptConfig$inboundSchema
  ),
  variables: z.array(
    z.lazy(() => GetV2LogsIdEvalsResponse200Variables$inboundSchema),
  ),
  performance: z.lazy(() =>
    GetV2LogsIdEvalsResponse200Performance$inboundSchema
  ).optional(),
  usage: z.lazy(() => GetV2LogsIdEvalsResponse200Usage$inboundSchema)
    .optional(),
  billing: z.lazy(() => GetV2LogsIdEvalsResponse200Billing$inboundSchema)
    .optional(),
  tools: z.array(z.lazy(() => GetV2LogsIdEvalsResponse200Tools$inboundSchema))
    .optional(),
  prompt_snippets: z.array(
    z.lazy(() => GetV2LogsIdEvalsResponse200PromptSnippets$inboundSchema),
  ),
}).transform((v) => {
  return remap$(v, {
    "prompt_config": "promptConfig",
    "prompt_snippets": "promptSnippets",
  });
});

/** @internal */
export type GetV2LogsIdEvalsResponse200Data$Outbound = {
  choices?: Array<GetV2LogsIdEvalsResponse200Choices$Outbound> | undefined;
  action: string;
  prompt_config: GetV2LogsIdEvalsResponse200PromptConfig$Outbound;
  variables: Array<GetV2LogsIdEvalsResponse200Variables$Outbound>;
  performance?: GetV2LogsIdEvalsResponse200Performance$Outbound | undefined;
  usage?: GetV2LogsIdEvalsResponse200Usage$Outbound | undefined;
  billing?: GetV2LogsIdEvalsResponse200Billing$Outbound | undefined;
  tools?: Array<GetV2LogsIdEvalsResponse200Tools$Outbound> | undefined;
  prompt_snippets: Array<GetV2LogsIdEvalsResponse200PromptSnippets$Outbound>;
};

/** @internal */
export const GetV2LogsIdEvalsResponse200Data$outboundSchema: z.ZodType<
  GetV2LogsIdEvalsResponse200Data$Outbound,
  z.ZodTypeDef,
  GetV2LogsIdEvalsResponse200Data
> = z.object({
  choices: z.array(
    z.lazy(() => GetV2LogsIdEvalsResponse200Choices$outboundSchema),
  ).optional(),
  action: GetV2LogsIdEvalsResponse200Action$outboundSchema,
  promptConfig: z.lazy(() =>
    GetV2LogsIdEvalsResponse200PromptConfig$outboundSchema
  ),
  variables: z.array(
    z.lazy(() => GetV2LogsIdEvalsResponse200Variables$outboundSchema),
  ),
  performance: z.lazy(() =>
    GetV2LogsIdEvalsResponse200Performance$outboundSchema
  ).optional(),
  usage: z.lazy(() => GetV2LogsIdEvalsResponse200Usage$outboundSchema)
    .optional(),
  billing: z.lazy(() => GetV2LogsIdEvalsResponse200Billing$outboundSchema)
    .optional(),
  tools: z.array(z.lazy(() => GetV2LogsIdEvalsResponse200Tools$outboundSchema))
    .optional(),
  promptSnippets: z.array(
    z.lazy(() => GetV2LogsIdEvalsResponse200PromptSnippets$outboundSchema),
  ),
}).transform((v) => {
  return remap$(v, {
    promptConfig: "prompt_config",
    promptSnippets: "prompt_snippets",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdEvalsResponse200Data$ {
  /** @deprecated use `GetV2LogsIdEvalsResponse200Data$inboundSchema` instead. */
  export const inboundSchema = GetV2LogsIdEvalsResponse200Data$inboundSchema;
  /** @deprecated use `GetV2LogsIdEvalsResponse200Data$outboundSchema` instead. */
  export const outboundSchema = GetV2LogsIdEvalsResponse200Data$outboundSchema;
  /** @deprecated use `GetV2LogsIdEvalsResponse200Data$Outbound` instead. */
  export type Outbound = GetV2LogsIdEvalsResponse200Data$Outbound;
}

export function getV2LogsIdEvalsResponse200DataToJSON(
  getV2LogsIdEvalsResponse200Data: GetV2LogsIdEvalsResponse200Data,
): string {
  return JSON.stringify(
    GetV2LogsIdEvalsResponse200Data$outboundSchema.parse(
      getV2LogsIdEvalsResponse200Data,
    ),
  );
}

export function getV2LogsIdEvalsResponse200DataFromJSON(
  jsonString: string,
): SafeParseResult<GetV2LogsIdEvalsResponse200Data, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetV2LogsIdEvalsResponse200Data$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetV2LogsIdEvalsResponse200Data' from JSON`,
  );
}

/** @internal */
export const GetV2LogsIdEvalsResponseWorkflowRun$inboundSchema: z.ZodType<
  GetV2LogsIdEvalsResponseWorkflowRun,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  workflow_metadata: z.record(z.any()).optional(),
  workflow_input: z.record(z.any()).optional(),
  workflow_output: z.record(z.any()).optional(),
  request_properties: z.lazy(() =>
    GetV2LogsIdEvalsResponse200RequestProperties$inboundSchema
  ).optional(),
  started_at: z.string().datetime({ offset: true }).transform(v => new Date(v)),
  finished_at: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
  product_type: GetV2LogsIdEvalsResponse200ProductType$inboundSchema,
  related_entities: z.array(
    z.lazy(() =>
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRun1$inboundSchema
    ),
  ),
  evals: z.array(
    z.union([
      z.lazy(() =>
        GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody41$inboundSchema
      ),
      z.lazy(() =>
        GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody42$inboundSchema
      ),
      z.lazy(() =>
        GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody43$inboundSchema
      ),
      z.lazy(() =>
        GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody44$inboundSchema
      ),
    ]),
  ),
  data: z.lazy(() => GetV2LogsIdEvalsResponse200Data$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "workflow_metadata": "workflowMetadata",
    "workflow_input": "workflowInput",
    "workflow_output": "workflowOutput",
    "request_properties": "requestProperties",
    "started_at": "startedAt",
    "finished_at": "finishedAt",
    "product_type": "productType",
    "related_entities": "relatedEntities",
  });
});

/** @internal */
export type GetV2LogsIdEvalsResponseWorkflowRun$Outbound = {
  id: string;
  workflow_metadata?: { [k: string]: any } | undefined;
  workflow_input?: { [k: string]: any } | undefined;
  workflow_output?: { [k: string]: any } | undefined;
  request_properties?:
    | GetV2LogsIdEvalsResponse200RequestProperties$Outbound
    | undefined;
  started_at: string;
  finished_at?: string | undefined;
  product_type: string;
  related_entities: Array<
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRun1$Outbound
  >;
  evals: Array<
    | GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody41$Outbound
    | GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody42$Outbound
    | GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody43$Outbound
    | GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody44$Outbound
  >;
  data: GetV2LogsIdEvalsResponse200Data$Outbound;
};

/** @internal */
export const GetV2LogsIdEvalsResponseWorkflowRun$outboundSchema: z.ZodType<
  GetV2LogsIdEvalsResponseWorkflowRun$Outbound,
  z.ZodTypeDef,
  GetV2LogsIdEvalsResponseWorkflowRun
> = z.object({
  id: z.string(),
  workflowMetadata: z.record(z.any()).optional(),
  workflowInput: z.record(z.any()).optional(),
  workflowOutput: z.record(z.any()).optional(),
  requestProperties: z.lazy(() =>
    GetV2LogsIdEvalsResponse200RequestProperties$outboundSchema
  ).optional(),
  startedAt: z.date().transform(v => v.toISOString()),
  finishedAt: z.date().transform(v => v.toISOString()).optional(),
  productType: GetV2LogsIdEvalsResponse200ProductType$outboundSchema,
  relatedEntities: z.array(
    z.lazy(() =>
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7WorkflowRun1$outboundSchema
    ),
  ),
  evals: z.array(
    z.union([
      z.lazy(() =>
        GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody41$outboundSchema
      ),
      z.lazy(() =>
        GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody42$outboundSchema
      ),
      z.lazy(() =>
        GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody43$outboundSchema
      ),
      z.lazy(() =>
        GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody44$outboundSchema
      ),
    ]),
  ),
  data: z.lazy(() => GetV2LogsIdEvalsResponse200Data$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    workflowMetadata: "workflow_metadata",
    workflowInput: "workflow_input",
    workflowOutput: "workflow_output",
    requestProperties: "request_properties",
    startedAt: "started_at",
    finishedAt: "finished_at",
    productType: "product_type",
    relatedEntities: "related_entities",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdEvalsResponseWorkflowRun$ {
  /** @deprecated use `GetV2LogsIdEvalsResponseWorkflowRun$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsIdEvalsResponseWorkflowRun$inboundSchema;
  /** @deprecated use `GetV2LogsIdEvalsResponseWorkflowRun$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdEvalsResponseWorkflowRun$outboundSchema;
  /** @deprecated use `GetV2LogsIdEvalsResponseWorkflowRun$Outbound` instead. */
  export type Outbound = GetV2LogsIdEvalsResponseWorkflowRun$Outbound;
}

export function getV2LogsIdEvalsResponseWorkflowRunToJSON(
  getV2LogsIdEvalsResponseWorkflowRun: GetV2LogsIdEvalsResponseWorkflowRun,
): string {
  return JSON.stringify(
    GetV2LogsIdEvalsResponseWorkflowRun$outboundSchema.parse(
      getV2LogsIdEvalsResponseWorkflowRun,
    ),
  );
}

export function getV2LogsIdEvalsResponseWorkflowRunFromJSON(
  jsonString: string,
): SafeParseResult<GetV2LogsIdEvalsResponseWorkflowRun, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      GetV2LogsIdEvalsResponseWorkflowRun$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetV2LogsIdEvalsResponseWorkflowRun' from JSON`,
  );
}

/** @internal */
export const GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody47Status$inboundSchema:
  z.ZodNativeEnum<
    typeof GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody47Status
  > = z.nativeEnum(
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody47Status,
  );

/** @internal */
export const GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody47Status$outboundSchema:
  z.ZodNativeEnum<
    typeof GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody47Status
  > =
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody47Status$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody47Status$ {
  /** @deprecated use `GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody47Status$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody47Status$inboundSchema;
  /** @deprecated use `GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody47Status$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody47Status$outboundSchema;
}

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals74Type$inboundSchema:
  z.ZodNativeEnum<
    typeof GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals74Type
  > = z.nativeEnum(
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals74Type,
  );

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals74Type$outboundSchema:
  z.ZodNativeEnum<
    typeof GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals74Type
  > =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals74Type$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals74Type$ {
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals74Type$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals74Type$inboundSchema;
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals74Type$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals74Type$outboundSchema;
}

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals74$inboundSchema:
  z.ZodType<
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals74,
    z.ZodTypeDef,
    unknown
  > = z.object({
    type:
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals74Type$inboundSchema,
    evaluator_id: z.string(),
  }).transform((v) => {
    return remap$(v, {
      "evaluator_id": "evaluatorId",
    });
  });

/** @internal */
export type GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals74$Outbound =
  {
    type: string;
    evaluator_id: string;
  };

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals74$outboundSchema:
  z.ZodType<
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals74$Outbound,
    z.ZodTypeDef,
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals74
  > = z.object({
    type:
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals74Type$outboundSchema,
    evaluatorId: z.string(),
  }).transform((v) => {
    return remap$(v, {
      evaluatorId: "evaluator_id",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals74$ {
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals74$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals74$inboundSchema;
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals74$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals74$outboundSchema;
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals74$Outbound` instead. */
  export type Outbound =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals74$Outbound;
}

export function getV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals74ToJSON(
  getV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals74:
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals74,
): string {
  return JSON.stringify(
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals74$outboundSchema
      .parse(
        getV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals74,
      ),
  );
}

export function getV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals74FromJSON(
  jsonString: string,
): SafeParseResult<
  GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals74,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals74$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals74' from JSON`,
  );
}

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals73Type$inboundSchema:
  z.ZodNativeEnum<
    typeof GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals73Type
  > = z.nativeEnum(
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals73Type,
  );

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals73Type$outboundSchema:
  z.ZodNativeEnum<
    typeof GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals73Type
  > =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals73Type$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals73Type$ {
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals73Type$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals73Type$inboundSchema;
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals73Type$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals73Type$outboundSchema;
}

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals73$inboundSchema:
  z.ZodType<
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals73,
    z.ZodTypeDef,
    unknown
  > = z.object({
    type:
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals73Type$inboundSchema,
    human_eval_id: z.string(),
  }).transform((v) => {
    return remap$(v, {
      "human_eval_id": "humanEvalId",
    });
  });

/** @internal */
export type GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals73$Outbound =
  {
    type: string;
    human_eval_id: string;
  };

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals73$outboundSchema:
  z.ZodType<
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals73$Outbound,
    z.ZodTypeDef,
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals73
  > = z.object({
    type:
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals73Type$outboundSchema,
    humanEvalId: z.string(),
  }).transform((v) => {
    return remap$(v, {
      humanEvalId: "human_eval_id",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals73$ {
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals73$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals73$inboundSchema;
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals73$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals73$outboundSchema;
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals73$Outbound` instead. */
  export type Outbound =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals73$Outbound;
}

export function getV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals73ToJSON(
  getV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals73:
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals73,
): string {
  return JSON.stringify(
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals73$outboundSchema
      .parse(
        getV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals73,
      ),
  );
}

export function getV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals73FromJSON(
  jsonString: string,
): SafeParseResult<
  GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals73,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals73$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals73' from JSON`,
  );
}

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals72Type$inboundSchema:
  z.ZodNativeEnum<
    typeof GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals72Type
  > = z.nativeEnum(
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals72Type,
  );

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals72Type$outboundSchema:
  z.ZodNativeEnum<
    typeof GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals72Type
  > =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals72Type$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals72Type$ {
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals72Type$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals72Type$inboundSchema;
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals72Type$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals72Type$outboundSchema;
}

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals72$inboundSchema:
  z.ZodType<
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals72,
    z.ZodTypeDef,
    unknown
  > = z.object({
    type:
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals72Type$inboundSchema,
    contact_id: z.string(),
  }).transform((v) => {
    return remap$(v, {
      "contact_id": "contactId",
    });
  });

/** @internal */
export type GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals72$Outbound =
  {
    type: string;
    contact_id: string;
  };

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals72$outboundSchema:
  z.ZodType<
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals72$Outbound,
    z.ZodTypeDef,
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals72
  > = z.object({
    type:
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals72Type$outboundSchema,
    contactId: z.string(),
  }).transform((v) => {
    return remap$(v, {
      contactId: "contact_id",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals72$ {
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals72$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals72$inboundSchema;
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals72$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals72$outboundSchema;
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals72$Outbound` instead. */
  export type Outbound =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals72$Outbound;
}

export function getV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals72ToJSON(
  getV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals72:
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals72,
): string {
  return JSON.stringify(
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals72$outboundSchema
      .parse(
        getV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals72,
      ),
  );
}

export function getV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals72FromJSON(
  jsonString: string,
): SafeParseResult<
  GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals72,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals72$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals72' from JSON`,
  );
}

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7Type$inboundSchema:
  z.ZodNativeEnum<
    typeof GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7Type
  > = z.nativeEnum(
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7Type,
  );

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7Type$outboundSchema:
  z.ZodNativeEnum<
    typeof GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7Type
  > =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7Type$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7Type$ {
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7Type$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7Type$inboundSchema;
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7Type$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7Type$outboundSchema;
}

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals71$inboundSchema:
  z.ZodType<
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals71,
    z.ZodTypeDef,
    unknown
  > = z.object({
    type:
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7Type$inboundSchema,
    account_id: z.string(),
  }).transform((v) => {
    return remap$(v, {
      "account_id": "accountId",
    });
  });

/** @internal */
export type GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals71$Outbound =
  {
    type: string;
    account_id: string;
  };

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals71$outboundSchema:
  z.ZodType<
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals71$Outbound,
    z.ZodTypeDef,
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals71
  > = z.object({
    type:
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals7Type$outboundSchema,
    accountId: z.string(),
  }).transform((v) => {
    return remap$(v, {
      accountId: "account_id",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals71$ {
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals71$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals71$inboundSchema;
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals71$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals71$outboundSchema;
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals71$Outbound` instead. */
  export type Outbound =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals71$Outbound;
}

export function getV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals71ToJSON(
  getV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals71:
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals71,
): string {
  return JSON.stringify(
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals71$outboundSchema
      .parse(
        getV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals71,
      ),
  );
}

export function getV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals71FromJSON(
  jsonString: string,
): SafeParseResult<
  GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals71,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals71$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals71' from JSON`,
  );
}

/** @internal */
export const GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody47RelatedEntities$inboundSchema:
  z.ZodType<
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody47RelatedEntities,
    z.ZodTypeDef,
    unknown
  > = z.union([
    z.lazy(() =>
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals71$inboundSchema
    ),
    z.lazy(() =>
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals72$inboundSchema
    ),
    z.lazy(() =>
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals73$inboundSchema
    ),
    z.lazy(() =>
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals74$inboundSchema
    ),
  ]);

/** @internal */
export type GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody47RelatedEntities$Outbound =
  | GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals71$Outbound
  | GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals72$Outbound
  | GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals73$Outbound
  | GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals74$Outbound;

/** @internal */
export const GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody47RelatedEntities$outboundSchema:
  z.ZodType<
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody47RelatedEntities$Outbound,
    z.ZodTypeDef,
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody47RelatedEntities
  > = z.union([
    z.lazy(() =>
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals71$outboundSchema
    ),
    z.lazy(() =>
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals72$outboundSchema
    ),
    z.lazy(() =>
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals73$outboundSchema
    ),
    z.lazy(() =>
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals74$outboundSchema
    ),
  ]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody47RelatedEntities$ {
  /** @deprecated use `GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody47RelatedEntities$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody47RelatedEntities$inboundSchema;
  /** @deprecated use `GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody47RelatedEntities$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody47RelatedEntities$outboundSchema;
  /** @deprecated use `GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody47RelatedEntities$Outbound` instead. */
  export type Outbound =
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody47RelatedEntities$Outbound;
}

export function getV2LogsIdEvalsResponse200ApplicationJSONResponseBody47RelatedEntitiesToJSON(
  getV2LogsIdEvalsResponse200ApplicationJSONResponseBody47RelatedEntities:
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody47RelatedEntities,
): string {
  return JSON.stringify(
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody47RelatedEntities$outboundSchema
      .parse(
        getV2LogsIdEvalsResponse200ApplicationJSONResponseBody47RelatedEntities,
      ),
  );
}

export function getV2LogsIdEvalsResponse200ApplicationJSONResponseBody47RelatedEntitiesFromJSON(
  jsonString: string,
): SafeParseResult<
  GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody47RelatedEntities,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody47RelatedEntities$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody47RelatedEntities' from JSON`,
  );
}

/** @internal */
export const GetV2LogsIdEvalsResponse2007$inboundSchema: z.ZodType<
  GetV2LogsIdEvalsResponse2007,
  z.ZodTypeDef,
  unknown
> = z.object({
  type:
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody47Type$inboundSchema,
  workflow_run: z.lazy(() => GetV2LogsIdEvalsResponseWorkflowRun$inboundSchema),
  id: z.string(),
  status:
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody47Status$inboundSchema,
  timestamp: z.string().datetime({ offset: true }).transform(v => new Date(v)),
  related_entities: z.array(
    z.union([
      z.lazy(() =>
        GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals71$inboundSchema
      ),
      z.lazy(() =>
        GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals72$inboundSchema
      ),
      z.lazy(() =>
        GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals73$inboundSchema
      ),
      z.lazy(() =>
        GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals74$inboundSchema
      ),
    ]),
  ),
}).transform((v) => {
  return remap$(v, {
    "workflow_run": "workflowRun",
    "related_entities": "relatedEntities",
  });
});

/** @internal */
export type GetV2LogsIdEvalsResponse2007$Outbound = {
  type: string;
  workflow_run: GetV2LogsIdEvalsResponseWorkflowRun$Outbound;
  id: string;
  status: string;
  timestamp: string;
  related_entities: Array<
    | GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals71$Outbound
    | GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals72$Outbound
    | GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals73$Outbound
    | GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals74$Outbound
  >;
};

/** @internal */
export const GetV2LogsIdEvalsResponse2007$outboundSchema: z.ZodType<
  GetV2LogsIdEvalsResponse2007$Outbound,
  z.ZodTypeDef,
  GetV2LogsIdEvalsResponse2007
> = z.object({
  type:
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody47Type$outboundSchema,
  workflowRun: z.lazy(() => GetV2LogsIdEvalsResponseWorkflowRun$outboundSchema),
  id: z.string(),
  status:
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody47Status$outboundSchema,
  timestamp: z.date().transform(v => v.toISOString()),
  relatedEntities: z.array(
    z.union([
      z.lazy(() =>
        GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals71$outboundSchema
      ),
      z.lazy(() =>
        GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals72$outboundSchema
      ),
      z.lazy(() =>
        GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals73$outboundSchema
      ),
      z.lazy(() =>
        GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals74$outboundSchema
      ),
    ]),
  ),
}).transform((v) => {
  return remap$(v, {
    workflowRun: "workflow_run",
    relatedEntities: "related_entities",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdEvalsResponse2007$ {
  /** @deprecated use `GetV2LogsIdEvalsResponse2007$inboundSchema` instead. */
  export const inboundSchema = GetV2LogsIdEvalsResponse2007$inboundSchema;
  /** @deprecated use `GetV2LogsIdEvalsResponse2007$outboundSchema` instead. */
  export const outboundSchema = GetV2LogsIdEvalsResponse2007$outboundSchema;
  /** @deprecated use `GetV2LogsIdEvalsResponse2007$Outbound` instead. */
  export type Outbound = GetV2LogsIdEvalsResponse2007$Outbound;
}

export function getV2LogsIdEvalsResponse2007ToJSON(
  getV2LogsIdEvalsResponse2007: GetV2LogsIdEvalsResponse2007,
): string {
  return JSON.stringify(
    GetV2LogsIdEvalsResponse2007$outboundSchema.parse(
      getV2LogsIdEvalsResponse2007,
    ),
  );
}

export function getV2LogsIdEvalsResponse2007FromJSON(
  jsonString: string,
): SafeParseResult<GetV2LogsIdEvalsResponse2007, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetV2LogsIdEvalsResponse2007$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetV2LogsIdEvalsResponse2007' from JSON`,
  );
}

/** @internal */
export const GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody46Type$inboundSchema:
  z.ZodNativeEnum<
    typeof GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody46Type
  > = z.nativeEnum(
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody46Type,
  );

/** @internal */
export const GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody46Type$outboundSchema:
  z.ZodNativeEnum<
    typeof GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody46Type
  > =
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody46Type$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody46Type$ {
  /** @deprecated use `GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody46Type$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody46Type$inboundSchema;
  /** @deprecated use `GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody46Type$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody46Type$outboundSchema;
}

/** @internal */
export const GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody46Value$inboundSchema:
  z.ZodType<
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody46Value,
    z.ZodTypeDef,
    unknown
  > = z.object({
    f1: z.number(),
    precision: z.number(),
    recall: z.number(),
  });

/** @internal */
export type GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody46Value$Outbound =
  {
    f1: number;
    precision: number;
    recall: number;
  };

/** @internal */
export const GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody46Value$outboundSchema:
  z.ZodType<
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody46Value$Outbound,
    z.ZodTypeDef,
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody46Value
  > = z.object({
    f1: z.number(),
    precision: z.number(),
    recall: z.number(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody46Value$ {
  /** @deprecated use `GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody46Value$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody46Value$inboundSchema;
  /** @deprecated use `GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody46Value$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody46Value$outboundSchema;
  /** @deprecated use `GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody46Value$Outbound` instead. */
  export type Outbound =
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody46Value$Outbound;
}

export function getV2LogsIdEvalsResponse200ApplicationJSONResponseBody46ValueToJSON(
  getV2LogsIdEvalsResponse200ApplicationJSONResponseBody46Value:
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody46Value,
): string {
  return JSON.stringify(
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody46Value$outboundSchema
      .parse(getV2LogsIdEvalsResponse200ApplicationJSONResponseBody46Value),
  );
}

export function getV2LogsIdEvalsResponse200ApplicationJSONResponseBody46ValueFromJSON(
  jsonString: string,
): SafeParseResult<
  GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody46Value,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody46Value$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody46Value' from JSON`,
  );
}

/** @internal */
export const GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody46Status$inboundSchema:
  z.ZodNativeEnum<
    typeof GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody46Status
  > = z.nativeEnum(
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody46Status,
  );

/** @internal */
export const GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody46Status$outboundSchema:
  z.ZodNativeEnum<
    typeof GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody46Status
  > =
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody46Status$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody46Status$ {
  /** @deprecated use `GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody46Status$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody46Status$inboundSchema;
  /** @deprecated use `GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody46Status$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody46Status$outboundSchema;
}

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals64Type$inboundSchema:
  z.ZodNativeEnum<
    typeof GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals64Type
  > = z.nativeEnum(
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals64Type,
  );

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals64Type$outboundSchema:
  z.ZodNativeEnum<
    typeof GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals64Type
  > =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals64Type$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals64Type$ {
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals64Type$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals64Type$inboundSchema;
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals64Type$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals64Type$outboundSchema;
}

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals64$inboundSchema:
  z.ZodType<
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals64,
    z.ZodTypeDef,
    unknown
  > = z.object({
    type:
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals64Type$inboundSchema,
    evaluator_id: z.string(),
  }).transform((v) => {
    return remap$(v, {
      "evaluator_id": "evaluatorId",
    });
  });

/** @internal */
export type GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals64$Outbound =
  {
    type: string;
    evaluator_id: string;
  };

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals64$outboundSchema:
  z.ZodType<
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals64$Outbound,
    z.ZodTypeDef,
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals64
  > = z.object({
    type:
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals64Type$outboundSchema,
    evaluatorId: z.string(),
  }).transform((v) => {
    return remap$(v, {
      evaluatorId: "evaluator_id",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals64$ {
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals64$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals64$inboundSchema;
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals64$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals64$outboundSchema;
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals64$Outbound` instead. */
  export type Outbound =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals64$Outbound;
}

export function getV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals64ToJSON(
  getV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals64:
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals64,
): string {
  return JSON.stringify(
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals64$outboundSchema
      .parse(
        getV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals64,
      ),
  );
}

export function getV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals64FromJSON(
  jsonString: string,
): SafeParseResult<
  GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals64,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals64$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals64' from JSON`,
  );
}

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals63Type$inboundSchema:
  z.ZodNativeEnum<
    typeof GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals63Type
  > = z.nativeEnum(
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals63Type,
  );

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals63Type$outboundSchema:
  z.ZodNativeEnum<
    typeof GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals63Type
  > =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals63Type$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals63Type$ {
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals63Type$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals63Type$inboundSchema;
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals63Type$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals63Type$outboundSchema;
}

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals63$inboundSchema:
  z.ZodType<
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals63,
    z.ZodTypeDef,
    unknown
  > = z.object({
    type:
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals63Type$inboundSchema,
    human_eval_id: z.string(),
  }).transform((v) => {
    return remap$(v, {
      "human_eval_id": "humanEvalId",
    });
  });

/** @internal */
export type GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals63$Outbound =
  {
    type: string;
    human_eval_id: string;
  };

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals63$outboundSchema:
  z.ZodType<
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals63$Outbound,
    z.ZodTypeDef,
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals63
  > = z.object({
    type:
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals63Type$outboundSchema,
    humanEvalId: z.string(),
  }).transform((v) => {
    return remap$(v, {
      humanEvalId: "human_eval_id",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals63$ {
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals63$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals63$inboundSchema;
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals63$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals63$outboundSchema;
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals63$Outbound` instead. */
  export type Outbound =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals63$Outbound;
}

export function getV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals63ToJSON(
  getV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals63:
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals63,
): string {
  return JSON.stringify(
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals63$outboundSchema
      .parse(
        getV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals63,
      ),
  );
}

export function getV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals63FromJSON(
  jsonString: string,
): SafeParseResult<
  GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals63,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals63$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals63' from JSON`,
  );
}

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals62Type$inboundSchema:
  z.ZodNativeEnum<
    typeof GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals62Type
  > = z.nativeEnum(
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals62Type,
  );

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals62Type$outboundSchema:
  z.ZodNativeEnum<
    typeof GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals62Type
  > =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals62Type$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals62Type$ {
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals62Type$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals62Type$inboundSchema;
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals62Type$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals62Type$outboundSchema;
}

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals62$inboundSchema:
  z.ZodType<
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals62,
    z.ZodTypeDef,
    unknown
  > = z.object({
    type:
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals62Type$inboundSchema,
    contact_id: z.string(),
  }).transform((v) => {
    return remap$(v, {
      "contact_id": "contactId",
    });
  });

/** @internal */
export type GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals62$Outbound =
  {
    type: string;
    contact_id: string;
  };

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals62$outboundSchema:
  z.ZodType<
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals62$Outbound,
    z.ZodTypeDef,
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals62
  > = z.object({
    type:
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals62Type$outboundSchema,
    contactId: z.string(),
  }).transform((v) => {
    return remap$(v, {
      contactId: "contact_id",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals62$ {
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals62$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals62$inboundSchema;
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals62$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals62$outboundSchema;
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals62$Outbound` instead. */
  export type Outbound =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals62$Outbound;
}

export function getV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals62ToJSON(
  getV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals62:
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals62,
): string {
  return JSON.stringify(
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals62$outboundSchema
      .parse(
        getV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals62,
      ),
  );
}

export function getV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals62FromJSON(
  jsonString: string,
): SafeParseResult<
  GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals62,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals62$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals62' from JSON`,
  );
}

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals6Type$inboundSchema:
  z.ZodNativeEnum<
    typeof GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals6Type
  > = z.nativeEnum(
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals6Type,
  );

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals6Type$outboundSchema:
  z.ZodNativeEnum<
    typeof GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals6Type
  > =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals6Type$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals6Type$ {
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals6Type$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals6Type$inboundSchema;
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals6Type$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals6Type$outboundSchema;
}

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals61$inboundSchema:
  z.ZodType<
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals61,
    z.ZodTypeDef,
    unknown
  > = z.object({
    type:
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals6Type$inboundSchema,
    account_id: z.string(),
  }).transform((v) => {
    return remap$(v, {
      "account_id": "accountId",
    });
  });

/** @internal */
export type GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals61$Outbound =
  {
    type: string;
    account_id: string;
  };

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals61$outboundSchema:
  z.ZodType<
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals61$Outbound,
    z.ZodTypeDef,
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals61
  > = z.object({
    type:
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals6Type$outboundSchema,
    accountId: z.string(),
  }).transform((v) => {
    return remap$(v, {
      accountId: "account_id",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals61$ {
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals61$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals61$inboundSchema;
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals61$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals61$outboundSchema;
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals61$Outbound` instead. */
  export type Outbound =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals61$Outbound;
}

export function getV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals61ToJSON(
  getV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals61:
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals61,
): string {
  return JSON.stringify(
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals61$outboundSchema
      .parse(
        getV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals61,
      ),
  );
}

export function getV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals61FromJSON(
  jsonString: string,
): SafeParseResult<
  GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals61,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals61$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals61' from JSON`,
  );
}

/** @internal */
export const GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody46RelatedEntities$inboundSchema:
  z.ZodType<
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody46RelatedEntities,
    z.ZodTypeDef,
    unknown
  > = z.union([
    z.lazy(() =>
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals61$inboundSchema
    ),
    z.lazy(() =>
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals62$inboundSchema
    ),
    z.lazy(() =>
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals63$inboundSchema
    ),
    z.lazy(() =>
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals64$inboundSchema
    ),
  ]);

/** @internal */
export type GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody46RelatedEntities$Outbound =
  | GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals61$Outbound
  | GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals62$Outbound
  | GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals63$Outbound
  | GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals64$Outbound;

/** @internal */
export const GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody46RelatedEntities$outboundSchema:
  z.ZodType<
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody46RelatedEntities$Outbound,
    z.ZodTypeDef,
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody46RelatedEntities
  > = z.union([
    z.lazy(() =>
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals61$outboundSchema
    ),
    z.lazy(() =>
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals62$outboundSchema
    ),
    z.lazy(() =>
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals63$outboundSchema
    ),
    z.lazy(() =>
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals64$outboundSchema
    ),
  ]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody46RelatedEntities$ {
  /** @deprecated use `GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody46RelatedEntities$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody46RelatedEntities$inboundSchema;
  /** @deprecated use `GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody46RelatedEntities$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody46RelatedEntities$outboundSchema;
  /** @deprecated use `GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody46RelatedEntities$Outbound` instead. */
  export type Outbound =
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody46RelatedEntities$Outbound;
}

export function getV2LogsIdEvalsResponse200ApplicationJSONResponseBody46RelatedEntitiesToJSON(
  getV2LogsIdEvalsResponse200ApplicationJSONResponseBody46RelatedEntities:
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody46RelatedEntities,
): string {
  return JSON.stringify(
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody46RelatedEntities$outboundSchema
      .parse(
        getV2LogsIdEvalsResponse200ApplicationJSONResponseBody46RelatedEntities,
      ),
  );
}

export function getV2LogsIdEvalsResponse200ApplicationJSONResponseBody46RelatedEntitiesFromJSON(
  jsonString: string,
): SafeParseResult<
  GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody46RelatedEntities,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody46RelatedEntities$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody46RelatedEntities' from JSON`,
  );
}

/** @internal */
export const GetV2LogsIdEvalsResponse2006$inboundSchema: z.ZodType<
  GetV2LogsIdEvalsResponse2006,
  z.ZodTypeDef,
  unknown
> = z.object({
  type:
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody46Type$inboundSchema,
  value: z.lazy(() =>
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody46Value$inboundSchema
  ),
  id: z.string(),
  status:
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody46Status$inboundSchema,
  timestamp: z.string().datetime({ offset: true }).transform(v => new Date(v)),
  related_entities: z.array(
    z.union([
      z.lazy(() =>
        GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals61$inboundSchema
      ),
      z.lazy(() =>
        GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals62$inboundSchema
      ),
      z.lazy(() =>
        GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals63$inboundSchema
      ),
      z.lazy(() =>
        GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals64$inboundSchema
      ),
    ]),
  ),
}).transform((v) => {
  return remap$(v, {
    "related_entities": "relatedEntities",
  });
});

/** @internal */
export type GetV2LogsIdEvalsResponse2006$Outbound = {
  type: string;
  value: GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody46Value$Outbound;
  id: string;
  status: string;
  timestamp: string;
  related_entities: Array<
    | GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals61$Outbound
    | GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals62$Outbound
    | GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals63$Outbound
    | GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals64$Outbound
  >;
};

/** @internal */
export const GetV2LogsIdEvalsResponse2006$outboundSchema: z.ZodType<
  GetV2LogsIdEvalsResponse2006$Outbound,
  z.ZodTypeDef,
  GetV2LogsIdEvalsResponse2006
> = z.object({
  type:
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody46Type$outboundSchema,
  value: z.lazy(() =>
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody46Value$outboundSchema
  ),
  id: z.string(),
  status:
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody46Status$outboundSchema,
  timestamp: z.date().transform(v => v.toISOString()),
  relatedEntities: z.array(
    z.union([
      z.lazy(() =>
        GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals61$outboundSchema
      ),
      z.lazy(() =>
        GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals62$outboundSchema
      ),
      z.lazy(() =>
        GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals63$outboundSchema
      ),
      z.lazy(() =>
        GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals64$outboundSchema
      ),
    ]),
  ),
}).transform((v) => {
  return remap$(v, {
    relatedEntities: "related_entities",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdEvalsResponse2006$ {
  /** @deprecated use `GetV2LogsIdEvalsResponse2006$inboundSchema` instead. */
  export const inboundSchema = GetV2LogsIdEvalsResponse2006$inboundSchema;
  /** @deprecated use `GetV2LogsIdEvalsResponse2006$outboundSchema` instead. */
  export const outboundSchema = GetV2LogsIdEvalsResponse2006$outboundSchema;
  /** @deprecated use `GetV2LogsIdEvalsResponse2006$Outbound` instead. */
  export type Outbound = GetV2LogsIdEvalsResponse2006$Outbound;
}

export function getV2LogsIdEvalsResponse2006ToJSON(
  getV2LogsIdEvalsResponse2006: GetV2LogsIdEvalsResponse2006,
): string {
  return JSON.stringify(
    GetV2LogsIdEvalsResponse2006$outboundSchema.parse(
      getV2LogsIdEvalsResponse2006,
    ),
  );
}

export function getV2LogsIdEvalsResponse2006FromJSON(
  jsonString: string,
): SafeParseResult<GetV2LogsIdEvalsResponse2006, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetV2LogsIdEvalsResponse2006$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetV2LogsIdEvalsResponse2006' from JSON`,
  );
}

/** @internal */
export const GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody45Type$inboundSchema:
  z.ZodNativeEnum<
    typeof GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody45Type
  > = z.nativeEnum(
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody45Type,
  );

/** @internal */
export const GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody45Type$outboundSchema:
  z.ZodNativeEnum<
    typeof GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody45Type
  > =
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody45Type$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody45Type$ {
  /** @deprecated use `GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody45Type$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody45Type$inboundSchema;
  /** @deprecated use `GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody45Type$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody45Type$outboundSchema;
}

/** @internal */
export const GetV2LogsIdEvalsResponseRouge1$inboundSchema: z.ZodType<
  GetV2LogsIdEvalsResponseRouge1,
  z.ZodTypeDef,
  unknown
> = z.object({
  f1: z.number(),
  precision: z.number(),
  recall: z.number(),
});

/** @internal */
export type GetV2LogsIdEvalsResponseRouge1$Outbound = {
  f1: number;
  precision: number;
  recall: number;
};

/** @internal */
export const GetV2LogsIdEvalsResponseRouge1$outboundSchema: z.ZodType<
  GetV2LogsIdEvalsResponseRouge1$Outbound,
  z.ZodTypeDef,
  GetV2LogsIdEvalsResponseRouge1
> = z.object({
  f1: z.number(),
  precision: z.number(),
  recall: z.number(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdEvalsResponseRouge1$ {
  /** @deprecated use `GetV2LogsIdEvalsResponseRouge1$inboundSchema` instead. */
  export const inboundSchema = GetV2LogsIdEvalsResponseRouge1$inboundSchema;
  /** @deprecated use `GetV2LogsIdEvalsResponseRouge1$outboundSchema` instead. */
  export const outboundSchema = GetV2LogsIdEvalsResponseRouge1$outboundSchema;
  /** @deprecated use `GetV2LogsIdEvalsResponseRouge1$Outbound` instead. */
  export type Outbound = GetV2LogsIdEvalsResponseRouge1$Outbound;
}

export function getV2LogsIdEvalsResponseRouge1ToJSON(
  getV2LogsIdEvalsResponseRouge1: GetV2LogsIdEvalsResponseRouge1,
): string {
  return JSON.stringify(
    GetV2LogsIdEvalsResponseRouge1$outboundSchema.parse(
      getV2LogsIdEvalsResponseRouge1,
    ),
  );
}

export function getV2LogsIdEvalsResponseRouge1FromJSON(
  jsonString: string,
): SafeParseResult<GetV2LogsIdEvalsResponseRouge1, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetV2LogsIdEvalsResponseRouge1$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetV2LogsIdEvalsResponseRouge1' from JSON`,
  );
}

/** @internal */
export const GetV2LogsIdEvalsResponseRouge2$inboundSchema: z.ZodType<
  GetV2LogsIdEvalsResponseRouge2,
  z.ZodTypeDef,
  unknown
> = z.object({
  f1: z.number(),
  precision: z.number(),
  recall: z.number(),
});

/** @internal */
export type GetV2LogsIdEvalsResponseRouge2$Outbound = {
  f1: number;
  precision: number;
  recall: number;
};

/** @internal */
export const GetV2LogsIdEvalsResponseRouge2$outboundSchema: z.ZodType<
  GetV2LogsIdEvalsResponseRouge2$Outbound,
  z.ZodTypeDef,
  GetV2LogsIdEvalsResponseRouge2
> = z.object({
  f1: z.number(),
  precision: z.number(),
  recall: z.number(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdEvalsResponseRouge2$ {
  /** @deprecated use `GetV2LogsIdEvalsResponseRouge2$inboundSchema` instead. */
  export const inboundSchema = GetV2LogsIdEvalsResponseRouge2$inboundSchema;
  /** @deprecated use `GetV2LogsIdEvalsResponseRouge2$outboundSchema` instead. */
  export const outboundSchema = GetV2LogsIdEvalsResponseRouge2$outboundSchema;
  /** @deprecated use `GetV2LogsIdEvalsResponseRouge2$Outbound` instead. */
  export type Outbound = GetV2LogsIdEvalsResponseRouge2$Outbound;
}

export function getV2LogsIdEvalsResponseRouge2ToJSON(
  getV2LogsIdEvalsResponseRouge2: GetV2LogsIdEvalsResponseRouge2,
): string {
  return JSON.stringify(
    GetV2LogsIdEvalsResponseRouge2$outboundSchema.parse(
      getV2LogsIdEvalsResponseRouge2,
    ),
  );
}

export function getV2LogsIdEvalsResponseRouge2FromJSON(
  jsonString: string,
): SafeParseResult<GetV2LogsIdEvalsResponseRouge2, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetV2LogsIdEvalsResponseRouge2$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetV2LogsIdEvalsResponseRouge2' from JSON`,
  );
}

/** @internal */
export const GetV2LogsIdEvalsResponseRougeL$inboundSchema: z.ZodType<
  GetV2LogsIdEvalsResponseRougeL,
  z.ZodTypeDef,
  unknown
> = z.object({
  f1: z.number(),
  precision: z.number(),
  recall: z.number(),
});

/** @internal */
export type GetV2LogsIdEvalsResponseRougeL$Outbound = {
  f1: number;
  precision: number;
  recall: number;
};

/** @internal */
export const GetV2LogsIdEvalsResponseRougeL$outboundSchema: z.ZodType<
  GetV2LogsIdEvalsResponseRougeL$Outbound,
  z.ZodTypeDef,
  GetV2LogsIdEvalsResponseRougeL
> = z.object({
  f1: z.number(),
  precision: z.number(),
  recall: z.number(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdEvalsResponseRougeL$ {
  /** @deprecated use `GetV2LogsIdEvalsResponseRougeL$inboundSchema` instead. */
  export const inboundSchema = GetV2LogsIdEvalsResponseRougeL$inboundSchema;
  /** @deprecated use `GetV2LogsIdEvalsResponseRougeL$outboundSchema` instead. */
  export const outboundSchema = GetV2LogsIdEvalsResponseRougeL$outboundSchema;
  /** @deprecated use `GetV2LogsIdEvalsResponseRougeL$Outbound` instead. */
  export type Outbound = GetV2LogsIdEvalsResponseRougeL$Outbound;
}

export function getV2LogsIdEvalsResponseRougeLToJSON(
  getV2LogsIdEvalsResponseRougeL: GetV2LogsIdEvalsResponseRougeL,
): string {
  return JSON.stringify(
    GetV2LogsIdEvalsResponseRougeL$outboundSchema.parse(
      getV2LogsIdEvalsResponseRougeL,
    ),
  );
}

export function getV2LogsIdEvalsResponseRougeLFromJSON(
  jsonString: string,
): SafeParseResult<GetV2LogsIdEvalsResponseRougeL, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetV2LogsIdEvalsResponseRougeL$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetV2LogsIdEvalsResponseRougeL' from JSON`,
  );
}

/** @internal */
export const GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody4Value$inboundSchema:
  z.ZodType<
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody4Value,
    z.ZodTypeDef,
    unknown
  > = z.object({
    rouge_1: z.lazy(() => GetV2LogsIdEvalsResponseRouge1$inboundSchema),
    rouge_2: z.lazy(() => GetV2LogsIdEvalsResponseRouge2$inboundSchema),
    rouge_l: z.lazy(() => GetV2LogsIdEvalsResponseRougeL$inboundSchema),
  }).transform((v) => {
    return remap$(v, {
      "rouge_1": "rouge1",
      "rouge_2": "rouge2",
      "rouge_l": "rougeL",
    });
  });

/** @internal */
export type GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody4Value$Outbound =
  {
    rouge_1: GetV2LogsIdEvalsResponseRouge1$Outbound;
    rouge_2: GetV2LogsIdEvalsResponseRouge2$Outbound;
    rouge_l: GetV2LogsIdEvalsResponseRougeL$Outbound;
  };

/** @internal */
export const GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody4Value$outboundSchema:
  z.ZodType<
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody4Value$Outbound,
    z.ZodTypeDef,
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody4Value
  > = z.object({
    rouge1: z.lazy(() => GetV2LogsIdEvalsResponseRouge1$outboundSchema),
    rouge2: z.lazy(() => GetV2LogsIdEvalsResponseRouge2$outboundSchema),
    rougeL: z.lazy(() => GetV2LogsIdEvalsResponseRougeL$outboundSchema),
  }).transform((v) => {
    return remap$(v, {
      rouge1: "rouge_1",
      rouge2: "rouge_2",
      rougeL: "rouge_l",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody4Value$ {
  /** @deprecated use `GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody4Value$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody4Value$inboundSchema;
  /** @deprecated use `GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody4Value$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody4Value$outboundSchema;
  /** @deprecated use `GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody4Value$Outbound` instead. */
  export type Outbound =
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody4Value$Outbound;
}

export function getV2LogsIdEvalsResponse200ApplicationJSONResponseBody4ValueToJSON(
  getV2LogsIdEvalsResponse200ApplicationJSONResponseBody4Value:
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody4Value,
): string {
  return JSON.stringify(
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody4Value$outboundSchema
      .parse(getV2LogsIdEvalsResponse200ApplicationJSONResponseBody4Value),
  );
}

export function getV2LogsIdEvalsResponse200ApplicationJSONResponseBody4ValueFromJSON(
  jsonString: string,
): SafeParseResult<
  GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody4Value,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody4Value$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody4Value' from JSON`,
  );
}

/** @internal */
export const GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody45Status$inboundSchema:
  z.ZodNativeEnum<
    typeof GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody45Status
  > = z.nativeEnum(
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody45Status,
  );

/** @internal */
export const GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody45Status$outboundSchema:
  z.ZodNativeEnum<
    typeof GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody45Status
  > =
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody45Status$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody45Status$ {
  /** @deprecated use `GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody45Status$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody45Status$inboundSchema;
  /** @deprecated use `GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody45Status$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody45Status$outboundSchema;
}

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals54Type$inboundSchema:
  z.ZodNativeEnum<
    typeof GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals54Type
  > = z.nativeEnum(
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals54Type,
  );

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals54Type$outboundSchema:
  z.ZodNativeEnum<
    typeof GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals54Type
  > =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals54Type$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals54Type$ {
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals54Type$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals54Type$inboundSchema;
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals54Type$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals54Type$outboundSchema;
}

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals54$inboundSchema:
  z.ZodType<
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals54,
    z.ZodTypeDef,
    unknown
  > = z.object({
    type:
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals54Type$inboundSchema,
    evaluator_id: z.string(),
  }).transform((v) => {
    return remap$(v, {
      "evaluator_id": "evaluatorId",
    });
  });

/** @internal */
export type GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals54$Outbound =
  {
    type: string;
    evaluator_id: string;
  };

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals54$outboundSchema:
  z.ZodType<
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals54$Outbound,
    z.ZodTypeDef,
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals54
  > = z.object({
    type:
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals54Type$outboundSchema,
    evaluatorId: z.string(),
  }).transform((v) => {
    return remap$(v, {
      evaluatorId: "evaluator_id",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals54$ {
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals54$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals54$inboundSchema;
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals54$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals54$outboundSchema;
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals54$Outbound` instead. */
  export type Outbound =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals54$Outbound;
}

export function getV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals54ToJSON(
  getV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals54:
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals54,
): string {
  return JSON.stringify(
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals54$outboundSchema
      .parse(
        getV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals54,
      ),
  );
}

export function getV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals54FromJSON(
  jsonString: string,
): SafeParseResult<
  GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals54,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals54$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals54' from JSON`,
  );
}

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals53Type$inboundSchema:
  z.ZodNativeEnum<
    typeof GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals53Type
  > = z.nativeEnum(
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals53Type,
  );

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals53Type$outboundSchema:
  z.ZodNativeEnum<
    typeof GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals53Type
  > =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals53Type$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals53Type$ {
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals53Type$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals53Type$inboundSchema;
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals53Type$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals53Type$outboundSchema;
}

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals53$inboundSchema:
  z.ZodType<
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals53,
    z.ZodTypeDef,
    unknown
  > = z.object({
    type:
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals53Type$inboundSchema,
    human_eval_id: z.string(),
  }).transform((v) => {
    return remap$(v, {
      "human_eval_id": "humanEvalId",
    });
  });

/** @internal */
export type GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals53$Outbound =
  {
    type: string;
    human_eval_id: string;
  };

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals53$outboundSchema:
  z.ZodType<
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals53$Outbound,
    z.ZodTypeDef,
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals53
  > = z.object({
    type:
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals53Type$outboundSchema,
    humanEvalId: z.string(),
  }).transform((v) => {
    return remap$(v, {
      humanEvalId: "human_eval_id",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals53$ {
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals53$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals53$inboundSchema;
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals53$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals53$outboundSchema;
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals53$Outbound` instead. */
  export type Outbound =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals53$Outbound;
}

export function getV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals53ToJSON(
  getV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals53:
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals53,
): string {
  return JSON.stringify(
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals53$outboundSchema
      .parse(
        getV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals53,
      ),
  );
}

export function getV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals53FromJSON(
  jsonString: string,
): SafeParseResult<
  GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals53,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals53$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals53' from JSON`,
  );
}

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals52Type$inboundSchema:
  z.ZodNativeEnum<
    typeof GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals52Type
  > = z.nativeEnum(
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals52Type,
  );

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals52Type$outboundSchema:
  z.ZodNativeEnum<
    typeof GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals52Type
  > =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals52Type$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals52Type$ {
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals52Type$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals52Type$inboundSchema;
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals52Type$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals52Type$outboundSchema;
}

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals52$inboundSchema:
  z.ZodType<
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals52,
    z.ZodTypeDef,
    unknown
  > = z.object({
    type:
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals52Type$inboundSchema,
    contact_id: z.string(),
  }).transform((v) => {
    return remap$(v, {
      "contact_id": "contactId",
    });
  });

/** @internal */
export type GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals52$Outbound =
  {
    type: string;
    contact_id: string;
  };

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals52$outboundSchema:
  z.ZodType<
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals52$Outbound,
    z.ZodTypeDef,
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals52
  > = z.object({
    type:
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals52Type$outboundSchema,
    contactId: z.string(),
  }).transform((v) => {
    return remap$(v, {
      contactId: "contact_id",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals52$ {
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals52$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals52$inboundSchema;
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals52$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals52$outboundSchema;
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals52$Outbound` instead. */
  export type Outbound =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals52$Outbound;
}

export function getV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals52ToJSON(
  getV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals52:
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals52,
): string {
  return JSON.stringify(
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals52$outboundSchema
      .parse(
        getV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals52,
      ),
  );
}

export function getV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals52FromJSON(
  jsonString: string,
): SafeParseResult<
  GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals52,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals52$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals52' from JSON`,
  );
}

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals5Type$inboundSchema:
  z.ZodNativeEnum<
    typeof GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals5Type
  > = z.nativeEnum(
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals5Type,
  );

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals5Type$outboundSchema:
  z.ZodNativeEnum<
    typeof GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals5Type
  > =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals5Type$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals5Type$ {
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals5Type$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals5Type$inboundSchema;
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals5Type$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals5Type$outboundSchema;
}

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals51$inboundSchema:
  z.ZodType<
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals51,
    z.ZodTypeDef,
    unknown
  > = z.object({
    type:
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals5Type$inboundSchema,
    account_id: z.string(),
  }).transform((v) => {
    return remap$(v, {
      "account_id": "accountId",
    });
  });

/** @internal */
export type GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals51$Outbound =
  {
    type: string;
    account_id: string;
  };

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals51$outboundSchema:
  z.ZodType<
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals51$Outbound,
    z.ZodTypeDef,
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals51
  > = z.object({
    type:
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals5Type$outboundSchema,
    accountId: z.string(),
  }).transform((v) => {
    return remap$(v, {
      accountId: "account_id",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals51$ {
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals51$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals51$inboundSchema;
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals51$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals51$outboundSchema;
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals51$Outbound` instead. */
  export type Outbound =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals51$Outbound;
}

export function getV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals51ToJSON(
  getV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals51:
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals51,
): string {
  return JSON.stringify(
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals51$outboundSchema
      .parse(
        getV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals51,
      ),
  );
}

export function getV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals51FromJSON(
  jsonString: string,
): SafeParseResult<
  GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals51,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals51$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals51' from JSON`,
  );
}

/** @internal */
export const GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody45RelatedEntities$inboundSchema:
  z.ZodType<
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody45RelatedEntities,
    z.ZodTypeDef,
    unknown
  > = z.union([
    z.lazy(() =>
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals51$inboundSchema
    ),
    z.lazy(() =>
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals52$inboundSchema
    ),
    z.lazy(() =>
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals53$inboundSchema
    ),
    z.lazy(() =>
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals54$inboundSchema
    ),
  ]);

/** @internal */
export type GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody45RelatedEntities$Outbound =
  | GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals51$Outbound
  | GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals52$Outbound
  | GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals53$Outbound
  | GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals54$Outbound;

/** @internal */
export const GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody45RelatedEntities$outboundSchema:
  z.ZodType<
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody45RelatedEntities$Outbound,
    z.ZodTypeDef,
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody45RelatedEntities
  > = z.union([
    z.lazy(() =>
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals51$outboundSchema
    ),
    z.lazy(() =>
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals52$outboundSchema
    ),
    z.lazy(() =>
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals53$outboundSchema
    ),
    z.lazy(() =>
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals54$outboundSchema
    ),
  ]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody45RelatedEntities$ {
  /** @deprecated use `GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody45RelatedEntities$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody45RelatedEntities$inboundSchema;
  /** @deprecated use `GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody45RelatedEntities$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody45RelatedEntities$outboundSchema;
  /** @deprecated use `GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody45RelatedEntities$Outbound` instead. */
  export type Outbound =
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody45RelatedEntities$Outbound;
}

export function getV2LogsIdEvalsResponse200ApplicationJSONResponseBody45RelatedEntitiesToJSON(
  getV2LogsIdEvalsResponse200ApplicationJSONResponseBody45RelatedEntities:
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody45RelatedEntities,
): string {
  return JSON.stringify(
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody45RelatedEntities$outboundSchema
      .parse(
        getV2LogsIdEvalsResponse200ApplicationJSONResponseBody45RelatedEntities,
      ),
  );
}

export function getV2LogsIdEvalsResponse200ApplicationJSONResponseBody45RelatedEntitiesFromJSON(
  jsonString: string,
): SafeParseResult<
  GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody45RelatedEntities,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody45RelatedEntities$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody45RelatedEntities' from JSON`,
  );
}

/** @internal */
export const GetV2LogsIdEvalsResponse2005$inboundSchema: z.ZodType<
  GetV2LogsIdEvalsResponse2005,
  z.ZodTypeDef,
  unknown
> = z.object({
  type:
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody45Type$inboundSchema,
  value: z.lazy(() =>
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody4Value$inboundSchema
  ),
  id: z.string(),
  status:
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody45Status$inboundSchema,
  timestamp: z.string().datetime({ offset: true }).transform(v => new Date(v)),
  related_entities: z.array(
    z.union([
      z.lazy(() =>
        GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals51$inboundSchema
      ),
      z.lazy(() =>
        GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals52$inboundSchema
      ),
      z.lazy(() =>
        GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals53$inboundSchema
      ),
      z.lazy(() =>
        GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals54$inboundSchema
      ),
    ]),
  ),
}).transform((v) => {
  return remap$(v, {
    "related_entities": "relatedEntities",
  });
});

/** @internal */
export type GetV2LogsIdEvalsResponse2005$Outbound = {
  type: string;
  value: GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody4Value$Outbound;
  id: string;
  status: string;
  timestamp: string;
  related_entities: Array<
    | GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals51$Outbound
    | GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals52$Outbound
    | GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals53$Outbound
    | GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals54$Outbound
  >;
};

/** @internal */
export const GetV2LogsIdEvalsResponse2005$outboundSchema: z.ZodType<
  GetV2LogsIdEvalsResponse2005$Outbound,
  z.ZodTypeDef,
  GetV2LogsIdEvalsResponse2005
> = z.object({
  type:
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody45Type$outboundSchema,
  value: z.lazy(() =>
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody4Value$outboundSchema
  ),
  id: z.string(),
  status:
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody45Status$outboundSchema,
  timestamp: z.date().transform(v => v.toISOString()),
  relatedEntities: z.array(
    z.union([
      z.lazy(() =>
        GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals51$outboundSchema
      ),
      z.lazy(() =>
        GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals52$outboundSchema
      ),
      z.lazy(() =>
        GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals53$outboundSchema
      ),
      z.lazy(() =>
        GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals54$outboundSchema
      ),
    ]),
  ),
}).transform((v) => {
  return remap$(v, {
    relatedEntities: "related_entities",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdEvalsResponse2005$ {
  /** @deprecated use `GetV2LogsIdEvalsResponse2005$inboundSchema` instead. */
  export const inboundSchema = GetV2LogsIdEvalsResponse2005$inboundSchema;
  /** @deprecated use `GetV2LogsIdEvalsResponse2005$outboundSchema` instead. */
  export const outboundSchema = GetV2LogsIdEvalsResponse2005$outboundSchema;
  /** @deprecated use `GetV2LogsIdEvalsResponse2005$Outbound` instead. */
  export type Outbound = GetV2LogsIdEvalsResponse2005$Outbound;
}

export function getV2LogsIdEvalsResponse2005ToJSON(
  getV2LogsIdEvalsResponse2005: GetV2LogsIdEvalsResponse2005,
): string {
  return JSON.stringify(
    GetV2LogsIdEvalsResponse2005$outboundSchema.parse(
      getV2LogsIdEvalsResponse2005,
    ),
  );
}

export function getV2LogsIdEvalsResponse2005FromJSON(
  jsonString: string,
): SafeParseResult<GetV2LogsIdEvalsResponse2005, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetV2LogsIdEvalsResponse2005$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetV2LogsIdEvalsResponse2005' from JSON`,
  );
}

/** @internal */
export const GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody44Type$inboundSchema:
  z.ZodNativeEnum<
    typeof GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody44Type
  > = z.nativeEnum(
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody44Type,
  );

/** @internal */
export const GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody44Type$outboundSchema:
  z.ZodNativeEnum<
    typeof GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody44Type
  > =
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody44Type$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody44Type$ {
  /** @deprecated use `GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody44Type$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody44Type$inboundSchema;
  /** @deprecated use `GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody44Type$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody44Type$outboundSchema;
}

/** @internal */
export const GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody44Status$inboundSchema:
  z.ZodNativeEnum<
    typeof GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody44Status
  > = z.nativeEnum(
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody44Status,
  );

/** @internal */
export const GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody44Status$outboundSchema:
  z.ZodNativeEnum<
    typeof GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody44Status
  > =
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody44Status$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody44Status$ {
  /** @deprecated use `GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody44Status$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody44Status$inboundSchema;
  /** @deprecated use `GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody44Status$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody44Status$outboundSchema;
}

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals44Type$inboundSchema:
  z.ZodNativeEnum<
    typeof GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals44Type
  > = z.nativeEnum(
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals44Type,
  );

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals44Type$outboundSchema:
  z.ZodNativeEnum<
    typeof GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals44Type
  > =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals44Type$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals44Type$ {
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals44Type$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals44Type$inboundSchema;
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals44Type$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals44Type$outboundSchema;
}

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals44$inboundSchema:
  z.ZodType<
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals44,
    z.ZodTypeDef,
    unknown
  > = z.object({
    type:
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals44Type$inboundSchema,
    evaluator_id: z.string(),
  }).transform((v) => {
    return remap$(v, {
      "evaluator_id": "evaluatorId",
    });
  });

/** @internal */
export type GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals44$Outbound =
  {
    type: string;
    evaluator_id: string;
  };

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals44$outboundSchema:
  z.ZodType<
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals44$Outbound,
    z.ZodTypeDef,
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals44
  > = z.object({
    type:
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals44Type$outboundSchema,
    evaluatorId: z.string(),
  }).transform((v) => {
    return remap$(v, {
      evaluatorId: "evaluator_id",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals44$ {
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals44$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals44$inboundSchema;
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals44$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals44$outboundSchema;
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals44$Outbound` instead. */
  export type Outbound =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals44$Outbound;
}

export function getV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals44ToJSON(
  getV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals44:
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals44,
): string {
  return JSON.stringify(
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals44$outboundSchema
      .parse(
        getV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals44,
      ),
  );
}

export function getV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals44FromJSON(
  jsonString: string,
): SafeParseResult<
  GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals44,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals44$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals44' from JSON`,
  );
}

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals43Type$inboundSchema:
  z.ZodNativeEnum<
    typeof GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals43Type
  > = z.nativeEnum(
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals43Type,
  );

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals43Type$outboundSchema:
  z.ZodNativeEnum<
    typeof GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals43Type
  > =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals43Type$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals43Type$ {
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals43Type$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals43Type$inboundSchema;
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals43Type$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals43Type$outboundSchema;
}

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals43$inboundSchema:
  z.ZodType<
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals43,
    z.ZodTypeDef,
    unknown
  > = z.object({
    type:
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals43Type$inboundSchema,
    human_eval_id: z.string(),
  }).transform((v) => {
    return remap$(v, {
      "human_eval_id": "humanEvalId",
    });
  });

/** @internal */
export type GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals43$Outbound =
  {
    type: string;
    human_eval_id: string;
  };

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals43$outboundSchema:
  z.ZodType<
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals43$Outbound,
    z.ZodTypeDef,
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals43
  > = z.object({
    type:
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals43Type$outboundSchema,
    humanEvalId: z.string(),
  }).transform((v) => {
    return remap$(v, {
      humanEvalId: "human_eval_id",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals43$ {
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals43$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals43$inboundSchema;
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals43$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals43$outboundSchema;
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals43$Outbound` instead. */
  export type Outbound =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals43$Outbound;
}

export function getV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals43ToJSON(
  getV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals43:
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals43,
): string {
  return JSON.stringify(
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals43$outboundSchema
      .parse(
        getV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals43,
      ),
  );
}

export function getV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals43FromJSON(
  jsonString: string,
): SafeParseResult<
  GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals43,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals43$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals43' from JSON`,
  );
}

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals42Type$inboundSchema:
  z.ZodNativeEnum<
    typeof GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals42Type
  > = z.nativeEnum(
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals42Type,
  );

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals42Type$outboundSchema:
  z.ZodNativeEnum<
    typeof GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals42Type
  > =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals42Type$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals42Type$ {
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals42Type$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals42Type$inboundSchema;
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals42Type$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals42Type$outboundSchema;
}

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals42$inboundSchema:
  z.ZodType<
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals42,
    z.ZodTypeDef,
    unknown
  > = z.object({
    type:
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals42Type$inboundSchema,
    contact_id: z.string(),
  }).transform((v) => {
    return remap$(v, {
      "contact_id": "contactId",
    });
  });

/** @internal */
export type GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals42$Outbound =
  {
    type: string;
    contact_id: string;
  };

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals42$outboundSchema:
  z.ZodType<
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals42$Outbound,
    z.ZodTypeDef,
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals42
  > = z.object({
    type:
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals42Type$outboundSchema,
    contactId: z.string(),
  }).transform((v) => {
    return remap$(v, {
      contactId: "contact_id",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals42$ {
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals42$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals42$inboundSchema;
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals42$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals42$outboundSchema;
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals42$Outbound` instead. */
  export type Outbound =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals42$Outbound;
}

export function getV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals42ToJSON(
  getV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals42:
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals42,
): string {
  return JSON.stringify(
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals42$outboundSchema
      .parse(
        getV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals42,
      ),
  );
}

export function getV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals42FromJSON(
  jsonString: string,
): SafeParseResult<
  GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals42,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals42$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals42' from JSON`,
  );
}

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals4Type$inboundSchema:
  z.ZodNativeEnum<
    typeof GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals4Type
  > = z.nativeEnum(
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals4Type,
  );

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals4Type$outboundSchema:
  z.ZodNativeEnum<
    typeof GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals4Type
  > =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals4Type$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals4Type$ {
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals4Type$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals4Type$inboundSchema;
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals4Type$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals4Type$outboundSchema;
}

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals41$inboundSchema:
  z.ZodType<
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals41,
    z.ZodTypeDef,
    unknown
  > = z.object({
    type:
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals4Type$inboundSchema,
    account_id: z.string(),
  }).transform((v) => {
    return remap$(v, {
      "account_id": "accountId",
    });
  });

/** @internal */
export type GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals41$Outbound =
  {
    type: string;
    account_id: string;
  };

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals41$outboundSchema:
  z.ZodType<
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals41$Outbound,
    z.ZodTypeDef,
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals41
  > = z.object({
    type:
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals4Type$outboundSchema,
    accountId: z.string(),
  }).transform((v) => {
    return remap$(v, {
      accountId: "account_id",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals41$ {
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals41$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals41$inboundSchema;
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals41$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals41$outboundSchema;
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals41$Outbound` instead. */
  export type Outbound =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals41$Outbound;
}

export function getV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals41ToJSON(
  getV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals41:
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals41,
): string {
  return JSON.stringify(
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals41$outboundSchema
      .parse(
        getV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals41,
      ),
  );
}

export function getV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals41FromJSON(
  jsonString: string,
): SafeParseResult<
  GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals41,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals41$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals41' from JSON`,
  );
}

/** @internal */
export const GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody44RelatedEntities$inboundSchema:
  z.ZodType<
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody44RelatedEntities,
    z.ZodTypeDef,
    unknown
  > = z.union([
    z.lazy(() =>
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals41$inboundSchema
    ),
    z.lazy(() =>
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals42$inboundSchema
    ),
    z.lazy(() =>
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals43$inboundSchema
    ),
    z.lazy(() =>
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals44$inboundSchema
    ),
  ]);

/** @internal */
export type GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody44RelatedEntities$Outbound =
  | GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals41$Outbound
  | GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals42$Outbound
  | GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals43$Outbound
  | GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals44$Outbound;

/** @internal */
export const GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody44RelatedEntities$outboundSchema:
  z.ZodType<
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody44RelatedEntities$Outbound,
    z.ZodTypeDef,
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody44RelatedEntities
  > = z.union([
    z.lazy(() =>
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals41$outboundSchema
    ),
    z.lazy(() =>
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals42$outboundSchema
    ),
    z.lazy(() =>
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals43$outboundSchema
    ),
    z.lazy(() =>
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals44$outboundSchema
    ),
  ]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody44RelatedEntities$ {
  /** @deprecated use `GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody44RelatedEntities$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody44RelatedEntities$inboundSchema;
  /** @deprecated use `GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody44RelatedEntities$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody44RelatedEntities$outboundSchema;
  /** @deprecated use `GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody44RelatedEntities$Outbound` instead. */
  export type Outbound =
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody44RelatedEntities$Outbound;
}

export function getV2LogsIdEvalsResponse200ApplicationJSONResponseBody44RelatedEntitiesToJSON(
  getV2LogsIdEvalsResponse200ApplicationJSONResponseBody44RelatedEntities:
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody44RelatedEntities,
): string {
  return JSON.stringify(
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody44RelatedEntities$outboundSchema
      .parse(
        getV2LogsIdEvalsResponse200ApplicationJSONResponseBody44RelatedEntities,
      ),
  );
}

export function getV2LogsIdEvalsResponse200ApplicationJSONResponseBody44RelatedEntitiesFromJSON(
  jsonString: string,
): SafeParseResult<
  GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody44RelatedEntities,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody44RelatedEntities$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody44RelatedEntities' from JSON`,
  );
}

/** @internal */
export const GetV2LogsIdEvalsResponse2004$inboundSchema: z.ZodType<
  GetV2LogsIdEvalsResponse2004,
  z.ZodTypeDef,
  unknown
> = z.object({
  type:
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody44Type$inboundSchema,
  values: z.array(z.string()),
  id: z.string(),
  status:
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody44Status$inboundSchema,
  timestamp: z.string().datetime({ offset: true }).transform(v => new Date(v)),
  related_entities: z.array(
    z.union([
      z.lazy(() =>
        GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals41$inboundSchema
      ),
      z.lazy(() =>
        GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals42$inboundSchema
      ),
      z.lazy(() =>
        GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals43$inboundSchema
      ),
      z.lazy(() =>
        GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals44$inboundSchema
      ),
    ]),
  ),
}).transform((v) => {
  return remap$(v, {
    "related_entities": "relatedEntities",
  });
});

/** @internal */
export type GetV2LogsIdEvalsResponse2004$Outbound = {
  type: string;
  values: Array<string>;
  id: string;
  status: string;
  timestamp: string;
  related_entities: Array<
    | GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals41$Outbound
    | GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals42$Outbound
    | GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals43$Outbound
    | GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals44$Outbound
  >;
};

/** @internal */
export const GetV2LogsIdEvalsResponse2004$outboundSchema: z.ZodType<
  GetV2LogsIdEvalsResponse2004$Outbound,
  z.ZodTypeDef,
  GetV2LogsIdEvalsResponse2004
> = z.object({
  type:
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody44Type$outboundSchema,
  values: z.array(z.string()),
  id: z.string(),
  status:
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody44Status$outboundSchema,
  timestamp: z.date().transform(v => v.toISOString()),
  relatedEntities: z.array(
    z.union([
      z.lazy(() =>
        GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals41$outboundSchema
      ),
      z.lazy(() =>
        GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals42$outboundSchema
      ),
      z.lazy(() =>
        GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals43$outboundSchema
      ),
      z.lazy(() =>
        GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals44$outboundSchema
      ),
    ]),
  ),
}).transform((v) => {
  return remap$(v, {
    relatedEntities: "related_entities",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdEvalsResponse2004$ {
  /** @deprecated use `GetV2LogsIdEvalsResponse2004$inboundSchema` instead. */
  export const inboundSchema = GetV2LogsIdEvalsResponse2004$inboundSchema;
  /** @deprecated use `GetV2LogsIdEvalsResponse2004$outboundSchema` instead. */
  export const outboundSchema = GetV2LogsIdEvalsResponse2004$outboundSchema;
  /** @deprecated use `GetV2LogsIdEvalsResponse2004$Outbound` instead. */
  export type Outbound = GetV2LogsIdEvalsResponse2004$Outbound;
}

export function getV2LogsIdEvalsResponse2004ToJSON(
  getV2LogsIdEvalsResponse2004: GetV2LogsIdEvalsResponse2004,
): string {
  return JSON.stringify(
    GetV2LogsIdEvalsResponse2004$outboundSchema.parse(
      getV2LogsIdEvalsResponse2004,
    ),
  );
}

export function getV2LogsIdEvalsResponse2004FromJSON(
  jsonString: string,
): SafeParseResult<GetV2LogsIdEvalsResponse2004, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetV2LogsIdEvalsResponse2004$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetV2LogsIdEvalsResponse2004' from JSON`,
  );
}

/** @internal */
export const GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody43Type$inboundSchema:
  z.ZodNativeEnum<
    typeof GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody43Type
  > = z.nativeEnum(
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody43Type,
  );

/** @internal */
export const GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody43Type$outboundSchema:
  z.ZodNativeEnum<
    typeof GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody43Type
  > =
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody43Type$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody43Type$ {
  /** @deprecated use `GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody43Type$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody43Type$inboundSchema;
  /** @deprecated use `GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody43Type$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody43Type$outboundSchema;
}

/** @internal */
export const GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody43Status$inboundSchema:
  z.ZodNativeEnum<
    typeof GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody43Status
  > = z.nativeEnum(
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody43Status,
  );

/** @internal */
export const GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody43Status$outboundSchema:
  z.ZodNativeEnum<
    typeof GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody43Status
  > =
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody43Status$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody43Status$ {
  /** @deprecated use `GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody43Status$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody43Status$inboundSchema;
  /** @deprecated use `GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody43Status$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody43Status$outboundSchema;
}

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals34Type$inboundSchema:
  z.ZodNativeEnum<
    typeof GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals34Type
  > = z.nativeEnum(
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals34Type,
  );

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals34Type$outboundSchema:
  z.ZodNativeEnum<
    typeof GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals34Type
  > =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals34Type$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals34Type$ {
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals34Type$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals34Type$inboundSchema;
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals34Type$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals34Type$outboundSchema;
}

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals34$inboundSchema:
  z.ZodType<
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals34,
    z.ZodTypeDef,
    unknown
  > = z.object({
    type:
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals34Type$inboundSchema,
    evaluator_id: z.string(),
  }).transform((v) => {
    return remap$(v, {
      "evaluator_id": "evaluatorId",
    });
  });

/** @internal */
export type GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals34$Outbound =
  {
    type: string;
    evaluator_id: string;
  };

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals34$outboundSchema:
  z.ZodType<
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals34$Outbound,
    z.ZodTypeDef,
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals34
  > = z.object({
    type:
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals34Type$outboundSchema,
    evaluatorId: z.string(),
  }).transform((v) => {
    return remap$(v, {
      evaluatorId: "evaluator_id",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals34$ {
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals34$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals34$inboundSchema;
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals34$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals34$outboundSchema;
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals34$Outbound` instead. */
  export type Outbound =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals34$Outbound;
}

export function getV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals34ToJSON(
  getV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals34:
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals34,
): string {
  return JSON.stringify(
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals34$outboundSchema
      .parse(
        getV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals34,
      ),
  );
}

export function getV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals34FromJSON(
  jsonString: string,
): SafeParseResult<
  GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals34,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals34$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals34' from JSON`,
  );
}

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals33Type$inboundSchema:
  z.ZodNativeEnum<
    typeof GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals33Type
  > = z.nativeEnum(
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals33Type,
  );

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals33Type$outboundSchema:
  z.ZodNativeEnum<
    typeof GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals33Type
  > =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals33Type$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals33Type$ {
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals33Type$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals33Type$inboundSchema;
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals33Type$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals33Type$outboundSchema;
}

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals33$inboundSchema:
  z.ZodType<
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals33,
    z.ZodTypeDef,
    unknown
  > = z.object({
    type:
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals33Type$inboundSchema,
    human_eval_id: z.string(),
  }).transform((v) => {
    return remap$(v, {
      "human_eval_id": "humanEvalId",
    });
  });

/** @internal */
export type GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals33$Outbound =
  {
    type: string;
    human_eval_id: string;
  };

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals33$outboundSchema:
  z.ZodType<
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals33$Outbound,
    z.ZodTypeDef,
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals33
  > = z.object({
    type:
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals33Type$outboundSchema,
    humanEvalId: z.string(),
  }).transform((v) => {
    return remap$(v, {
      humanEvalId: "human_eval_id",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals33$ {
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals33$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals33$inboundSchema;
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals33$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals33$outboundSchema;
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals33$Outbound` instead. */
  export type Outbound =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals33$Outbound;
}

export function getV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals33ToJSON(
  getV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals33:
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals33,
): string {
  return JSON.stringify(
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals33$outboundSchema
      .parse(
        getV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals33,
      ),
  );
}

export function getV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals33FromJSON(
  jsonString: string,
): SafeParseResult<
  GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals33,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals33$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals33' from JSON`,
  );
}

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals32Type$inboundSchema:
  z.ZodNativeEnum<
    typeof GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals32Type
  > = z.nativeEnum(
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals32Type,
  );

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals32Type$outboundSchema:
  z.ZodNativeEnum<
    typeof GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals32Type
  > =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals32Type$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals32Type$ {
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals32Type$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals32Type$inboundSchema;
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals32Type$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals32Type$outboundSchema;
}

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals32$inboundSchema:
  z.ZodType<
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals32,
    z.ZodTypeDef,
    unknown
  > = z.object({
    type:
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals32Type$inboundSchema,
    contact_id: z.string(),
  }).transform((v) => {
    return remap$(v, {
      "contact_id": "contactId",
    });
  });

/** @internal */
export type GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals32$Outbound =
  {
    type: string;
    contact_id: string;
  };

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals32$outboundSchema:
  z.ZodType<
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals32$Outbound,
    z.ZodTypeDef,
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals32
  > = z.object({
    type:
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals32Type$outboundSchema,
    contactId: z.string(),
  }).transform((v) => {
    return remap$(v, {
      contactId: "contact_id",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals32$ {
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals32$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals32$inboundSchema;
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals32$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals32$outboundSchema;
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals32$Outbound` instead. */
  export type Outbound =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals32$Outbound;
}

export function getV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals32ToJSON(
  getV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals32:
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals32,
): string {
  return JSON.stringify(
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals32$outboundSchema
      .parse(
        getV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals32,
      ),
  );
}

export function getV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals32FromJSON(
  jsonString: string,
): SafeParseResult<
  GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals32,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals32$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals32' from JSON`,
  );
}

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals3Type$inboundSchema:
  z.ZodNativeEnum<
    typeof GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals3Type
  > = z.nativeEnum(
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals3Type,
  );

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals3Type$outboundSchema:
  z.ZodNativeEnum<
    typeof GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals3Type
  > =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals3Type$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals3Type$ {
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals3Type$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals3Type$inboundSchema;
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals3Type$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals3Type$outboundSchema;
}

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals31$inboundSchema:
  z.ZodType<
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals31,
    z.ZodTypeDef,
    unknown
  > = z.object({
    type:
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals3Type$inboundSchema,
    account_id: z.string(),
  }).transform((v) => {
    return remap$(v, {
      "account_id": "accountId",
    });
  });

/** @internal */
export type GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals31$Outbound =
  {
    type: string;
    account_id: string;
  };

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals31$outboundSchema:
  z.ZodType<
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals31$Outbound,
    z.ZodTypeDef,
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals31
  > = z.object({
    type:
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals3Type$outboundSchema,
    accountId: z.string(),
  }).transform((v) => {
    return remap$(v, {
      accountId: "account_id",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals31$ {
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals31$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals31$inboundSchema;
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals31$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals31$outboundSchema;
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals31$Outbound` instead. */
  export type Outbound =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals31$Outbound;
}

export function getV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals31ToJSON(
  getV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals31:
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals31,
): string {
  return JSON.stringify(
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals31$outboundSchema
      .parse(
        getV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals31,
      ),
  );
}

export function getV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals31FromJSON(
  jsonString: string,
): SafeParseResult<
  GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals31,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals31$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals31' from JSON`,
  );
}

/** @internal */
export const GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody43RelatedEntities$inboundSchema:
  z.ZodType<
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody43RelatedEntities,
    z.ZodTypeDef,
    unknown
  > = z.union([
    z.lazy(() =>
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals31$inboundSchema
    ),
    z.lazy(() =>
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals32$inboundSchema
    ),
    z.lazy(() =>
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals33$inboundSchema
    ),
    z.lazy(() =>
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals34$inboundSchema
    ),
  ]);

/** @internal */
export type GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody43RelatedEntities$Outbound =
  | GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals31$Outbound
  | GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals32$Outbound
  | GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals33$Outbound
  | GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals34$Outbound;

/** @internal */
export const GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody43RelatedEntities$outboundSchema:
  z.ZodType<
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody43RelatedEntities$Outbound,
    z.ZodTypeDef,
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody43RelatedEntities
  > = z.union([
    z.lazy(() =>
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals31$outboundSchema
    ),
    z.lazy(() =>
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals32$outboundSchema
    ),
    z.lazy(() =>
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals33$outboundSchema
    ),
    z.lazy(() =>
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals34$outboundSchema
    ),
  ]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody43RelatedEntities$ {
  /** @deprecated use `GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody43RelatedEntities$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody43RelatedEntities$inboundSchema;
  /** @deprecated use `GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody43RelatedEntities$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody43RelatedEntities$outboundSchema;
  /** @deprecated use `GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody43RelatedEntities$Outbound` instead. */
  export type Outbound =
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody43RelatedEntities$Outbound;
}

export function getV2LogsIdEvalsResponse200ApplicationJSONResponseBody43RelatedEntitiesToJSON(
  getV2LogsIdEvalsResponse200ApplicationJSONResponseBody43RelatedEntities:
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody43RelatedEntities,
): string {
  return JSON.stringify(
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody43RelatedEntities$outboundSchema
      .parse(
        getV2LogsIdEvalsResponse200ApplicationJSONResponseBody43RelatedEntities,
      ),
  );
}

export function getV2LogsIdEvalsResponse200ApplicationJSONResponseBody43RelatedEntitiesFromJSON(
  jsonString: string,
): SafeParseResult<
  GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody43RelatedEntities,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody43RelatedEntities$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody43RelatedEntities' from JSON`,
  );
}

/** @internal */
export const GetV2LogsIdEvalsResponse2003$inboundSchema: z.ZodType<
  GetV2LogsIdEvalsResponse2003,
  z.ZodTypeDef,
  unknown
> = z.object({
  type:
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody43Type$inboundSchema,
  value: z.boolean(),
  id: z.string(),
  status:
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody43Status$inboundSchema,
  timestamp: z.string().datetime({ offset: true }).transform(v => new Date(v)),
  related_entities: z.array(
    z.union([
      z.lazy(() =>
        GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals31$inboundSchema
      ),
      z.lazy(() =>
        GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals32$inboundSchema
      ),
      z.lazy(() =>
        GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals33$inboundSchema
      ),
      z.lazy(() =>
        GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals34$inboundSchema
      ),
    ]),
  ),
}).transform((v) => {
  return remap$(v, {
    "related_entities": "relatedEntities",
  });
});

/** @internal */
export type GetV2LogsIdEvalsResponse2003$Outbound = {
  type: string;
  value: boolean;
  id: string;
  status: string;
  timestamp: string;
  related_entities: Array<
    | GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals31$Outbound
    | GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals32$Outbound
    | GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals33$Outbound
    | GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals34$Outbound
  >;
};

/** @internal */
export const GetV2LogsIdEvalsResponse2003$outboundSchema: z.ZodType<
  GetV2LogsIdEvalsResponse2003$Outbound,
  z.ZodTypeDef,
  GetV2LogsIdEvalsResponse2003
> = z.object({
  type:
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody43Type$outboundSchema,
  value: z.boolean(),
  id: z.string(),
  status:
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody43Status$outboundSchema,
  timestamp: z.date().transform(v => v.toISOString()),
  relatedEntities: z.array(
    z.union([
      z.lazy(() =>
        GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals31$outboundSchema
      ),
      z.lazy(() =>
        GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals32$outboundSchema
      ),
      z.lazy(() =>
        GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals33$outboundSchema
      ),
      z.lazy(() =>
        GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals34$outboundSchema
      ),
    ]),
  ),
}).transform((v) => {
  return remap$(v, {
    relatedEntities: "related_entities",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdEvalsResponse2003$ {
  /** @deprecated use `GetV2LogsIdEvalsResponse2003$inboundSchema` instead. */
  export const inboundSchema = GetV2LogsIdEvalsResponse2003$inboundSchema;
  /** @deprecated use `GetV2LogsIdEvalsResponse2003$outboundSchema` instead. */
  export const outboundSchema = GetV2LogsIdEvalsResponse2003$outboundSchema;
  /** @deprecated use `GetV2LogsIdEvalsResponse2003$Outbound` instead. */
  export type Outbound = GetV2LogsIdEvalsResponse2003$Outbound;
}

export function getV2LogsIdEvalsResponse2003ToJSON(
  getV2LogsIdEvalsResponse2003: GetV2LogsIdEvalsResponse2003,
): string {
  return JSON.stringify(
    GetV2LogsIdEvalsResponse2003$outboundSchema.parse(
      getV2LogsIdEvalsResponse2003,
    ),
  );
}

export function getV2LogsIdEvalsResponse2003FromJSON(
  jsonString: string,
): SafeParseResult<GetV2LogsIdEvalsResponse2003, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetV2LogsIdEvalsResponse2003$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetV2LogsIdEvalsResponse2003' from JSON`,
  );
}

/** @internal */
export const GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody42Type$inboundSchema:
  z.ZodNativeEnum<
    typeof GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody42Type
  > = z.nativeEnum(
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody42Type,
  );

/** @internal */
export const GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody42Type$outboundSchema:
  z.ZodNativeEnum<
    typeof GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody42Type
  > =
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody42Type$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody42Type$ {
  /** @deprecated use `GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody42Type$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody42Type$inboundSchema;
  /** @deprecated use `GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody42Type$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody42Type$outboundSchema;
}

/** @internal */
export const GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody42Status$inboundSchema:
  z.ZodNativeEnum<
    typeof GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody42Status
  > = z.nativeEnum(
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody42Status,
  );

/** @internal */
export const GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody42Status$outboundSchema:
  z.ZodNativeEnum<
    typeof GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody42Status
  > =
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody42Status$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody42Status$ {
  /** @deprecated use `GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody42Status$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody42Status$inboundSchema;
  /** @deprecated use `GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody42Status$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody42Status$outboundSchema;
}

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals24Type$inboundSchema:
  z.ZodNativeEnum<
    typeof GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals24Type
  > = z.nativeEnum(
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals24Type,
  );

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals24Type$outboundSchema:
  z.ZodNativeEnum<
    typeof GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals24Type
  > =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals24Type$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals24Type$ {
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals24Type$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals24Type$inboundSchema;
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals24Type$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals24Type$outboundSchema;
}

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals4$inboundSchema:
  z.ZodType<
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals4,
    z.ZodTypeDef,
    unknown
  > = z.object({
    type:
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals24Type$inboundSchema,
    evaluator_id: z.string(),
  }).transform((v) => {
    return remap$(v, {
      "evaluator_id": "evaluatorId",
    });
  });

/** @internal */
export type GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals4$Outbound =
  {
    type: string;
    evaluator_id: string;
  };

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals4$outboundSchema:
  z.ZodType<
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals4$Outbound,
    z.ZodTypeDef,
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals4
  > = z.object({
    type:
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals24Type$outboundSchema,
    evaluatorId: z.string(),
  }).transform((v) => {
    return remap$(v, {
      evaluatorId: "evaluator_id",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals4$ {
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals4$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals4$inboundSchema;
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals4$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals4$outboundSchema;
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals4$Outbound` instead. */
  export type Outbound =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals4$Outbound;
}

export function getV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals4ToJSON(
  getV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals4:
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals4,
): string {
  return JSON.stringify(
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals4$outboundSchema
      .parse(
        getV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals4,
      ),
  );
}

export function getV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals4FromJSON(
  jsonString: string,
): SafeParseResult<
  GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals4,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals4$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals4' from JSON`,
  );
}

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals23Type$inboundSchema:
  z.ZodNativeEnum<
    typeof GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals23Type
  > = z.nativeEnum(
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals23Type,
  );

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals23Type$outboundSchema:
  z.ZodNativeEnum<
    typeof GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals23Type
  > =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals23Type$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals23Type$ {
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals23Type$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals23Type$inboundSchema;
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals23Type$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals23Type$outboundSchema;
}

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals3$inboundSchema:
  z.ZodType<
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals3,
    z.ZodTypeDef,
    unknown
  > = z.object({
    type:
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals23Type$inboundSchema,
    human_eval_id: z.string(),
  }).transform((v) => {
    return remap$(v, {
      "human_eval_id": "humanEvalId",
    });
  });

/** @internal */
export type GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals3$Outbound =
  {
    type: string;
    human_eval_id: string;
  };

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals3$outboundSchema:
  z.ZodType<
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals3$Outbound,
    z.ZodTypeDef,
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals3
  > = z.object({
    type:
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals23Type$outboundSchema,
    humanEvalId: z.string(),
  }).transform((v) => {
    return remap$(v, {
      humanEvalId: "human_eval_id",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals3$ {
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals3$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals3$inboundSchema;
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals3$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals3$outboundSchema;
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals3$Outbound` instead. */
  export type Outbound =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals3$Outbound;
}

export function getV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals3ToJSON(
  getV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals3:
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals3,
): string {
  return JSON.stringify(
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals3$outboundSchema
      .parse(
        getV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals3,
      ),
  );
}

export function getV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals3FromJSON(
  jsonString: string,
): SafeParseResult<
  GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals3,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals3$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals3' from JSON`,
  );
}

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals22Type$inboundSchema:
  z.ZodNativeEnum<
    typeof GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals22Type
  > = z.nativeEnum(
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals22Type,
  );

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals22Type$outboundSchema:
  z.ZodNativeEnum<
    typeof GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals22Type
  > =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals22Type$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals22Type$ {
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals22Type$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals22Type$inboundSchema;
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals22Type$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals22Type$outboundSchema;
}

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals2$inboundSchema:
  z.ZodType<
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals2,
    z.ZodTypeDef,
    unknown
  > = z.object({
    type:
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals22Type$inboundSchema,
    contact_id: z.string(),
  }).transform((v) => {
    return remap$(v, {
      "contact_id": "contactId",
    });
  });

/** @internal */
export type GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals2$Outbound =
  {
    type: string;
    contact_id: string;
  };

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals2$outboundSchema:
  z.ZodType<
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals2$Outbound,
    z.ZodTypeDef,
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals2
  > = z.object({
    type:
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals22Type$outboundSchema,
    contactId: z.string(),
  }).transform((v) => {
    return remap$(v, {
      contactId: "contact_id",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals2$ {
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals2$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals2$inboundSchema;
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals2$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals2$outboundSchema;
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals2$Outbound` instead. */
  export type Outbound =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals2$Outbound;
}

export function getV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals2ToJSON(
  getV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals2:
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals2,
): string {
  return JSON.stringify(
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals2$outboundSchema
      .parse(
        getV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals2,
      ),
  );
}

export function getV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals2FromJSON(
  jsonString: string,
): SafeParseResult<
  GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals2,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals2$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals2' from JSON`,
  );
}

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals2Type$inboundSchema:
  z.ZodNativeEnum<
    typeof GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals2Type
  > = z.nativeEnum(
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals2Type,
  );

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals2Type$outboundSchema:
  z.ZodNativeEnum<
    typeof GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals2Type
  > =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals2Type$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals2Type$ {
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals2Type$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals2Type$inboundSchema;
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals2Type$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals2Type$outboundSchema;
}

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals1$inboundSchema:
  z.ZodType<
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals1,
    z.ZodTypeDef,
    unknown
  > = z.object({
    type:
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals2Type$inboundSchema,
    account_id: z.string(),
  }).transform((v) => {
    return remap$(v, {
      "account_id": "accountId",
    });
  });

/** @internal */
export type GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals1$Outbound =
  {
    type: string;
    account_id: string;
  };

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals1$outboundSchema:
  z.ZodType<
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals1$Outbound,
    z.ZodTypeDef,
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals1
  > = z.object({
    type:
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals2Type$outboundSchema,
    accountId: z.string(),
  }).transform((v) => {
    return remap$(v, {
      accountId: "account_id",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals1$ {
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals1$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals1$inboundSchema;
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals1$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals1$outboundSchema;
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals1$Outbound` instead. */
  export type Outbound =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals1$Outbound;
}

export function getV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals1ToJSON(
  getV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals1:
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals1,
): string {
  return JSON.stringify(
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals1$outboundSchema
      .parse(
        getV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals1,
      ),
  );
}

export function getV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals1FromJSON(
  jsonString: string,
): SafeParseResult<
  GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals1,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals1$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals1' from JSON`,
  );
}

/** @internal */
export const GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody42RelatedEntities$inboundSchema:
  z.ZodType<
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody42RelatedEntities,
    z.ZodTypeDef,
    unknown
  > = z.union([
    z.lazy(() =>
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals1$inboundSchema
    ),
    z.lazy(() =>
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals2$inboundSchema
    ),
    z.lazy(() =>
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals3$inboundSchema
    ),
    z.lazy(() =>
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals4$inboundSchema
    ),
  ]);

/** @internal */
export type GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody42RelatedEntities$Outbound =
  | GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals1$Outbound
  | GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals2$Outbound
  | GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals3$Outbound
  | GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals4$Outbound;

/** @internal */
export const GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody42RelatedEntities$outboundSchema:
  z.ZodType<
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody42RelatedEntities$Outbound,
    z.ZodTypeDef,
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody42RelatedEntities
  > = z.union([
    z.lazy(() =>
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals1$outboundSchema
    ),
    z.lazy(() =>
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals2$outboundSchema
    ),
    z.lazy(() =>
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals3$outboundSchema
    ),
    z.lazy(() =>
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals4$outboundSchema
    ),
  ]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody42RelatedEntities$ {
  /** @deprecated use `GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody42RelatedEntities$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody42RelatedEntities$inboundSchema;
  /** @deprecated use `GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody42RelatedEntities$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody42RelatedEntities$outboundSchema;
  /** @deprecated use `GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody42RelatedEntities$Outbound` instead. */
  export type Outbound =
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody42RelatedEntities$Outbound;
}

export function getV2LogsIdEvalsResponse200ApplicationJSONResponseBody42RelatedEntitiesToJSON(
  getV2LogsIdEvalsResponse200ApplicationJSONResponseBody42RelatedEntities:
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody42RelatedEntities,
): string {
  return JSON.stringify(
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody42RelatedEntities$outboundSchema
      .parse(
        getV2LogsIdEvalsResponse200ApplicationJSONResponseBody42RelatedEntities,
      ),
  );
}

export function getV2LogsIdEvalsResponse200ApplicationJSONResponseBody42RelatedEntitiesFromJSON(
  jsonString: string,
): SafeParseResult<
  GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody42RelatedEntities,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody42RelatedEntities$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody42RelatedEntities' from JSON`,
  );
}

/** @internal */
export const GetV2LogsIdEvalsResponse2002$inboundSchema: z.ZodType<
  GetV2LogsIdEvalsResponse2002,
  z.ZodTypeDef,
  unknown
> = z.object({
  type:
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody42Type$inboundSchema,
  value: z.number(),
  id: z.string(),
  status:
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody42Status$inboundSchema,
  timestamp: z.string().datetime({ offset: true }).transform(v => new Date(v)),
  related_entities: z.array(
    z.union([
      z.lazy(() =>
        GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals1$inboundSchema
      ),
      z.lazy(() =>
        GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals2$inboundSchema
      ),
      z.lazy(() =>
        GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals3$inboundSchema
      ),
      z.lazy(() =>
        GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals4$inboundSchema
      ),
    ]),
  ),
}).transform((v) => {
  return remap$(v, {
    "related_entities": "relatedEntities",
  });
});

/** @internal */
export type GetV2LogsIdEvalsResponse2002$Outbound = {
  type: string;
  value: number;
  id: string;
  status: string;
  timestamp: string;
  related_entities: Array<
    | GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals1$Outbound
    | GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals2$Outbound
    | GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals3$Outbound
    | GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals4$Outbound
  >;
};

/** @internal */
export const GetV2LogsIdEvalsResponse2002$outboundSchema: z.ZodType<
  GetV2LogsIdEvalsResponse2002$Outbound,
  z.ZodTypeDef,
  GetV2LogsIdEvalsResponse2002
> = z.object({
  type:
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody42Type$outboundSchema,
  value: z.number(),
  id: z.string(),
  status:
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody42Status$outboundSchema,
  timestamp: z.date().transform(v => v.toISOString()),
  relatedEntities: z.array(
    z.union([
      z.lazy(() =>
        GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals1$outboundSchema
      ),
      z.lazy(() =>
        GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals2$outboundSchema
      ),
      z.lazy(() =>
        GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals3$outboundSchema
      ),
      z.lazy(() =>
        GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals4$outboundSchema
      ),
    ]),
  ),
}).transform((v) => {
  return remap$(v, {
    relatedEntities: "related_entities",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdEvalsResponse2002$ {
  /** @deprecated use `GetV2LogsIdEvalsResponse2002$inboundSchema` instead. */
  export const inboundSchema = GetV2LogsIdEvalsResponse2002$inboundSchema;
  /** @deprecated use `GetV2LogsIdEvalsResponse2002$outboundSchema` instead. */
  export const outboundSchema = GetV2LogsIdEvalsResponse2002$outboundSchema;
  /** @deprecated use `GetV2LogsIdEvalsResponse2002$Outbound` instead. */
  export type Outbound = GetV2LogsIdEvalsResponse2002$Outbound;
}

export function getV2LogsIdEvalsResponse2002ToJSON(
  getV2LogsIdEvalsResponse2002: GetV2LogsIdEvalsResponse2002,
): string {
  return JSON.stringify(
    GetV2LogsIdEvalsResponse2002$outboundSchema.parse(
      getV2LogsIdEvalsResponse2002,
    ),
  );
}

export function getV2LogsIdEvalsResponse2002FromJSON(
  jsonString: string,
): SafeParseResult<GetV2LogsIdEvalsResponse2002, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetV2LogsIdEvalsResponse2002$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetV2LogsIdEvalsResponse2002' from JSON`,
  );
}

/** @internal */
export const GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody4Type$inboundSchema:
  z.ZodNativeEnum<
    typeof GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody4Type
  > = z.nativeEnum(GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody4Type);

/** @internal */
export const GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody4Type$outboundSchema:
  z.ZodNativeEnum<
    typeof GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody4Type
  > = GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody4Type$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody4Type$ {
  /** @deprecated use `GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody4Type$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody4Type$inboundSchema;
  /** @deprecated use `GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody4Type$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody4Type$outboundSchema;
}

/** @internal */
export const GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody4Status$inboundSchema:
  z.ZodNativeEnum<
    typeof GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody4Status
  > = z.nativeEnum(
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody4Status,
  );

/** @internal */
export const GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody4Status$outboundSchema:
  z.ZodNativeEnum<
    typeof GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody4Status
  > =
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody4Status$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody4Status$ {
  /** @deprecated use `GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody4Status$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody4Status$inboundSchema;
  /** @deprecated use `GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody4Status$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody4Status$outboundSchema;
}

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals14Type$inboundSchema:
  z.ZodNativeEnum<
    typeof GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals14Type
  > = z.nativeEnum(
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals14Type,
  );

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals14Type$outboundSchema:
  z.ZodNativeEnum<
    typeof GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals14Type
  > =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals14Type$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals14Type$ {
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals14Type$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals14Type$inboundSchema;
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals14Type$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals14Type$outboundSchema;
}

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody44$inboundSchema:
  z.ZodType<
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody44,
    z.ZodTypeDef,
    unknown
  > = z.object({
    type:
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals14Type$inboundSchema,
    evaluator_id: z.string(),
  }).transform((v) => {
    return remap$(v, {
      "evaluator_id": "evaluatorId",
    });
  });

/** @internal */
export type GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody44$Outbound =
  {
    type: string;
    evaluator_id: string;
  };

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody44$outboundSchema:
  z.ZodType<
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody44$Outbound,
    z.ZodTypeDef,
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody44
  > = z.object({
    type:
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals14Type$outboundSchema,
    evaluatorId: z.string(),
  }).transform((v) => {
    return remap$(v, {
      evaluatorId: "evaluator_id",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody44$ {
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody44$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody44$inboundSchema;
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody44$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody44$outboundSchema;
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody44$Outbound` instead. */
  export type Outbound =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody44$Outbound;
}

export function getV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody44ToJSON(
  getV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody44:
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody44,
): string {
  return JSON.stringify(
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody44$outboundSchema
      .parse(
        getV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody44,
      ),
  );
}

export function getV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody44FromJSON(
  jsonString: string,
): SafeParseResult<
  GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody44,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody44$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody44' from JSON`,
  );
}

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals1Type$inboundSchema:
  z.ZodNativeEnum<
    typeof GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals1Type
  > = z.nativeEnum(
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals1Type,
  );

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals1Type$outboundSchema:
  z.ZodNativeEnum<
    typeof GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals1Type
  > =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals1Type$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals1Type$ {
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals1Type$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals1Type$inboundSchema;
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals1Type$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals1Type$outboundSchema;
}

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody43$inboundSchema:
  z.ZodType<
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody43,
    z.ZodTypeDef,
    unknown
  > = z.object({
    type:
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals1Type$inboundSchema,
    human_eval_id: z.string(),
  }).transform((v) => {
    return remap$(v, {
      "human_eval_id": "humanEvalId",
    });
  });

/** @internal */
export type GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody43$Outbound =
  {
    type: string;
    human_eval_id: string;
  };

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody43$outboundSchema:
  z.ZodType<
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody43$Outbound,
    z.ZodTypeDef,
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody43
  > = z.object({
    type:
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals1Type$outboundSchema,
    humanEvalId: z.string(),
  }).transform((v) => {
    return remap$(v, {
      humanEvalId: "human_eval_id",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody43$ {
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody43$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody43$inboundSchema;
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody43$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody43$outboundSchema;
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody43$Outbound` instead. */
  export type Outbound =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody43$Outbound;
}

export function getV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody43ToJSON(
  getV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody43:
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody43,
): string {
  return JSON.stringify(
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody43$outboundSchema
      .parse(
        getV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody43,
      ),
  );
}

export function getV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody43FromJSON(
  jsonString: string,
): SafeParseResult<
  GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody43,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody43$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody43' from JSON`,
  );
}

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4EvalsType$inboundSchema:
  z.ZodNativeEnum<
    typeof GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4EvalsType
  > = z.nativeEnum(
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4EvalsType,
  );

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4EvalsType$outboundSchema:
  z.ZodNativeEnum<
    typeof GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4EvalsType
  > =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4EvalsType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4EvalsType$ {
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4EvalsType$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4EvalsType$inboundSchema;
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4EvalsType$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4EvalsType$outboundSchema;
}

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody42$inboundSchema:
  z.ZodType<
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody42,
    z.ZodTypeDef,
    unknown
  > = z.object({
    type:
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4EvalsType$inboundSchema,
    contact_id: z.string(),
  }).transform((v) => {
    return remap$(v, {
      "contact_id": "contactId",
    });
  });

/** @internal */
export type GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody42$Outbound =
  {
    type: string;
    contact_id: string;
  };

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody42$outboundSchema:
  z.ZodType<
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody42$Outbound,
    z.ZodTypeDef,
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody42
  > = z.object({
    type:
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4EvalsType$outboundSchema,
    contactId: z.string(),
  }).transform((v) => {
    return remap$(v, {
      contactId: "contact_id",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody42$ {
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody42$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody42$inboundSchema;
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody42$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody42$outboundSchema;
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody42$Outbound` instead. */
  export type Outbound =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody42$Outbound;
}

export function getV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody42ToJSON(
  getV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody42:
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody42,
): string {
  return JSON.stringify(
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody42$outboundSchema
      .parse(
        getV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody42,
      ),
  );
}

export function getV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody42FromJSON(
  jsonString: string,
): SafeParseResult<
  GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody42,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody42$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody42' from JSON`,
  );
}

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals11Type$inboundSchema:
  z.ZodNativeEnum<
    typeof GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals11Type
  > = z.nativeEnum(
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals11Type,
  );

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals11Type$outboundSchema:
  z.ZodNativeEnum<
    typeof GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals11Type
  > =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals11Type$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals11Type$ {
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals11Type$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals11Type$inboundSchema;
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals11Type$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals11Type$outboundSchema;
}

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody41$inboundSchema:
  z.ZodType<
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody41,
    z.ZodTypeDef,
    unknown
  > = z.object({
    type:
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals11Type$inboundSchema,
    account_id: z.string(),
  }).transform((v) => {
    return remap$(v, {
      "account_id": "accountId",
    });
  });

/** @internal */
export type GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody41$Outbound =
  {
    type: string;
    account_id: string;
  };

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody41$outboundSchema:
  z.ZodType<
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody41$Outbound,
    z.ZodTypeDef,
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody41
  > = z.object({
    type:
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Evals11Type$outboundSchema,
    accountId: z.string(),
  }).transform((v) => {
    return remap$(v, {
      accountId: "account_id",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody41$ {
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody41$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody41$inboundSchema;
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody41$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody41$outboundSchema;
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody41$Outbound` instead. */
  export type Outbound =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody41$Outbound;
}

export function getV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody41ToJSON(
  getV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody41:
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody41,
): string {
  return JSON.stringify(
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody41$outboundSchema
      .parse(
        getV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody41,
      ),
  );
}

export function getV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody41FromJSON(
  jsonString: string,
): SafeParseResult<
  GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody41,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody41$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody41' from JSON`,
  );
}

/** @internal */
export const GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody4RelatedEntities$inboundSchema:
  z.ZodType<
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody4RelatedEntities,
    z.ZodTypeDef,
    unknown
  > = z.union([
    z.lazy(() =>
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody41$inboundSchema
    ),
    z.lazy(() =>
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody42$inboundSchema
    ),
    z.lazy(() =>
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody43$inboundSchema
    ),
    z.lazy(() =>
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody44$inboundSchema
    ),
  ]);

/** @internal */
export type GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody4RelatedEntities$Outbound =
  | GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody41$Outbound
  | GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody42$Outbound
  | GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody43$Outbound
  | GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody44$Outbound;

/** @internal */
export const GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody4RelatedEntities$outboundSchema:
  z.ZodType<
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody4RelatedEntities$Outbound,
    z.ZodTypeDef,
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody4RelatedEntities
  > = z.union([
    z.lazy(() =>
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody41$outboundSchema
    ),
    z.lazy(() =>
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody42$outboundSchema
    ),
    z.lazy(() =>
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody43$outboundSchema
    ),
    z.lazy(() =>
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody44$outboundSchema
    ),
  ]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody4RelatedEntities$ {
  /** @deprecated use `GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody4RelatedEntities$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody4RelatedEntities$inboundSchema;
  /** @deprecated use `GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody4RelatedEntities$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody4RelatedEntities$outboundSchema;
  /** @deprecated use `GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody4RelatedEntities$Outbound` instead. */
  export type Outbound =
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody4RelatedEntities$Outbound;
}

export function getV2LogsIdEvalsResponse200ApplicationJSONResponseBody4RelatedEntitiesToJSON(
  getV2LogsIdEvalsResponse200ApplicationJSONResponseBody4RelatedEntities:
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody4RelatedEntities,
): string {
  return JSON.stringify(
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody4RelatedEntities$outboundSchema
      .parse(
        getV2LogsIdEvalsResponse200ApplicationJSONResponseBody4RelatedEntities,
      ),
  );
}

export function getV2LogsIdEvalsResponse200ApplicationJSONResponseBody4RelatedEntitiesFromJSON(
  jsonString: string,
): SafeParseResult<
  GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody4RelatedEntities,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody4RelatedEntities$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody4RelatedEntities' from JSON`,
  );
}

/** @internal */
export const GetV2LogsIdEvalsResponse2001$inboundSchema: z.ZodType<
  GetV2LogsIdEvalsResponse2001,
  z.ZodTypeDef,
  unknown
> = z.object({
  type:
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody4Type$inboundSchema,
  value: z.string(),
  id: z.string(),
  status:
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody4Status$inboundSchema,
  timestamp: z.string().datetime({ offset: true }).transform(v => new Date(v)),
  related_entities: z.array(
    z.union([
      z.lazy(() =>
        GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody41$inboundSchema
      ),
      z.lazy(() =>
        GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody42$inboundSchema
      ),
      z.lazy(() =>
        GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody43$inboundSchema
      ),
      z.lazy(() =>
        GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody44$inboundSchema
      ),
    ]),
  ),
}).transform((v) => {
  return remap$(v, {
    "related_entities": "relatedEntities",
  });
});

/** @internal */
export type GetV2LogsIdEvalsResponse2001$Outbound = {
  type: string;
  value: string;
  id: string;
  status: string;
  timestamp: string;
  related_entities: Array<
    | GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody41$Outbound
    | GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody42$Outbound
    | GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody43$Outbound
    | GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody44$Outbound
  >;
};

/** @internal */
export const GetV2LogsIdEvalsResponse2001$outboundSchema: z.ZodType<
  GetV2LogsIdEvalsResponse2001$Outbound,
  z.ZodTypeDef,
  GetV2LogsIdEvalsResponse2001
> = z.object({
  type:
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody4Type$outboundSchema,
  value: z.string(),
  id: z.string(),
  status:
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody4Status$outboundSchema,
  timestamp: z.date().transform(v => v.toISOString()),
  relatedEntities: z.array(
    z.union([
      z.lazy(() =>
        GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody41$outboundSchema
      ),
      z.lazy(() =>
        GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody42$outboundSchema
      ),
      z.lazy(() =>
        GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody43$outboundSchema
      ),
      z.lazy(() =>
        GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody44$outboundSchema
      ),
    ]),
  ),
}).transform((v) => {
  return remap$(v, {
    relatedEntities: "related_entities",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdEvalsResponse2001$ {
  /** @deprecated use `GetV2LogsIdEvalsResponse2001$inboundSchema` instead. */
  export const inboundSchema = GetV2LogsIdEvalsResponse2001$inboundSchema;
  /** @deprecated use `GetV2LogsIdEvalsResponse2001$outboundSchema` instead. */
  export const outboundSchema = GetV2LogsIdEvalsResponse2001$outboundSchema;
  /** @deprecated use `GetV2LogsIdEvalsResponse2001$Outbound` instead. */
  export type Outbound = GetV2LogsIdEvalsResponse2001$Outbound;
}

export function getV2LogsIdEvalsResponse2001ToJSON(
  getV2LogsIdEvalsResponse2001: GetV2LogsIdEvalsResponse2001,
): string {
  return JSON.stringify(
    GetV2LogsIdEvalsResponse2001$outboundSchema.parse(
      getV2LogsIdEvalsResponse2001,
    ),
  );
}

export function getV2LogsIdEvalsResponse2001FromJSON(
  jsonString: string,
): SafeParseResult<GetV2LogsIdEvalsResponse2001, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetV2LogsIdEvalsResponse2001$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetV2LogsIdEvalsResponse2001' from JSON`,
  );
}

/** @internal */
export const GetV2LogsIdResponseBodyResponseEvals$inboundSchema: z.ZodType<
  GetV2LogsIdResponseBodyResponseEvals,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => GetV2LogsIdEvalsResponse2001$inboundSchema),
  z.lazy(() => GetV2LogsIdEvalsResponse2002$inboundSchema),
  z.lazy(() => GetV2LogsIdEvalsResponse2003$inboundSchema),
  z.lazy(() => GetV2LogsIdEvalsResponse2004$inboundSchema),
  z.lazy(() => GetV2LogsIdEvalsResponse2005$inboundSchema),
  z.lazy(() => GetV2LogsIdEvalsResponse2006$inboundSchema),
  z.lazy(() => GetV2LogsIdEvalsResponse2007$inboundSchema),
]);

/** @internal */
export type GetV2LogsIdResponseBodyResponseEvals$Outbound =
  | GetV2LogsIdEvalsResponse2001$Outbound
  | GetV2LogsIdEvalsResponse2002$Outbound
  | GetV2LogsIdEvalsResponse2003$Outbound
  | GetV2LogsIdEvalsResponse2004$Outbound
  | GetV2LogsIdEvalsResponse2005$Outbound
  | GetV2LogsIdEvalsResponse2006$Outbound
  | GetV2LogsIdEvalsResponse2007$Outbound;

/** @internal */
export const GetV2LogsIdResponseBodyResponseEvals$outboundSchema: z.ZodType<
  GetV2LogsIdResponseBodyResponseEvals$Outbound,
  z.ZodTypeDef,
  GetV2LogsIdResponseBodyResponseEvals
> = z.union([
  z.lazy(() => GetV2LogsIdEvalsResponse2001$outboundSchema),
  z.lazy(() => GetV2LogsIdEvalsResponse2002$outboundSchema),
  z.lazy(() => GetV2LogsIdEvalsResponse2003$outboundSchema),
  z.lazy(() => GetV2LogsIdEvalsResponse2004$outboundSchema),
  z.lazy(() => GetV2LogsIdEvalsResponse2005$outboundSchema),
  z.lazy(() => GetV2LogsIdEvalsResponse2006$outboundSchema),
  z.lazy(() => GetV2LogsIdEvalsResponse2007$outboundSchema),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdResponseBodyResponseEvals$ {
  /** @deprecated use `GetV2LogsIdResponseBodyResponseEvals$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsIdResponseBodyResponseEvals$inboundSchema;
  /** @deprecated use `GetV2LogsIdResponseBodyResponseEvals$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdResponseBodyResponseEvals$outboundSchema;
  /** @deprecated use `GetV2LogsIdResponseBodyResponseEvals$Outbound` instead. */
  export type Outbound = GetV2LogsIdResponseBodyResponseEvals$Outbound;
}

export function getV2LogsIdResponseBodyResponseEvalsToJSON(
  getV2LogsIdResponseBodyResponseEvals: GetV2LogsIdResponseBodyResponseEvals,
): string {
  return JSON.stringify(
    GetV2LogsIdResponseBodyResponseEvals$outboundSchema.parse(
      getV2LogsIdResponseBodyResponseEvals,
    ),
  );
}

export function getV2LogsIdResponseBodyResponseEvalsFromJSON(
  jsonString: string,
): SafeParseResult<GetV2LogsIdResponseBodyResponseEvals, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      GetV2LogsIdResponseBodyResponseEvals$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetV2LogsIdResponseBodyResponseEvals' from JSON`,
  );
}

/** @internal */
export const GetV2LogsIdResponseBodyResponseProductType$inboundSchema:
  z.ZodNativeEnum<typeof GetV2LogsIdResponseBodyResponseProductType> = z
    .nativeEnum(GetV2LogsIdResponseBodyResponseProductType);

/** @internal */
export const GetV2LogsIdResponseBodyResponseProductType$outboundSchema:
  z.ZodNativeEnum<typeof GetV2LogsIdResponseBodyResponseProductType> =
    GetV2LogsIdResponseBodyResponseProductType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdResponseBodyResponseProductType$ {
  /** @deprecated use `GetV2LogsIdResponseBodyResponseProductType$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsIdResponseBodyResponseProductType$inboundSchema;
  /** @deprecated use `GetV2LogsIdResponseBodyResponseProductType$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdResponseBodyResponseProductType$outboundSchema;
}

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody45Type$inboundSchema:
  z.ZodNativeEnum<
    typeof GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody45Type
  > = z.nativeEnum(
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody45Type,
  );

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody45Type$outboundSchema:
  z.ZodNativeEnum<
    typeof GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody45Type
  > =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody45Type$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody45Type$ {
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody45Type$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody45Type$inboundSchema;
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody45Type$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody45Type$outboundSchema;
}

/** @internal */
export const GetV2LogsIdRelatedEntities5$inboundSchema: z.ZodType<
  GetV2LogsIdRelatedEntities5,
  z.ZodTypeDef,
  unknown
> = z.object({
  type:
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody45Type$inboundSchema,
  account_id: z.string(),
}).transform((v) => {
  return remap$(v, {
    "account_id": "accountId",
  });
});

/** @internal */
export type GetV2LogsIdRelatedEntities5$Outbound = {
  type: string;
  account_id: string;
};

/** @internal */
export const GetV2LogsIdRelatedEntities5$outboundSchema: z.ZodType<
  GetV2LogsIdRelatedEntities5$Outbound,
  z.ZodTypeDef,
  GetV2LogsIdRelatedEntities5
> = z.object({
  type:
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody45Type$outboundSchema,
  accountId: z.string(),
}).transform((v) => {
  return remap$(v, {
    accountId: "account_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdRelatedEntities5$ {
  /** @deprecated use `GetV2LogsIdRelatedEntities5$inboundSchema` instead. */
  export const inboundSchema = GetV2LogsIdRelatedEntities5$inboundSchema;
  /** @deprecated use `GetV2LogsIdRelatedEntities5$outboundSchema` instead. */
  export const outboundSchema = GetV2LogsIdRelatedEntities5$outboundSchema;
  /** @deprecated use `GetV2LogsIdRelatedEntities5$Outbound` instead. */
  export type Outbound = GetV2LogsIdRelatedEntities5$Outbound;
}

export function getV2LogsIdRelatedEntities5ToJSON(
  getV2LogsIdRelatedEntities5: GetV2LogsIdRelatedEntities5,
): string {
  return JSON.stringify(
    GetV2LogsIdRelatedEntities5$outboundSchema.parse(
      getV2LogsIdRelatedEntities5,
    ),
  );
}

export function getV2LogsIdRelatedEntities5FromJSON(
  jsonString: string,
): SafeParseResult<GetV2LogsIdRelatedEntities5, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetV2LogsIdRelatedEntities5$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetV2LogsIdRelatedEntities5' from JSON`,
  );
}

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody44Type$inboundSchema:
  z.ZodNativeEnum<
    typeof GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody44Type
  > = z.nativeEnum(
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody44Type,
  );

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody44Type$outboundSchema:
  z.ZodNativeEnum<
    typeof GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody44Type
  > =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody44Type$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody44Type$ {
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody44Type$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody44Type$inboundSchema;
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody44Type$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody44Type$outboundSchema;
}

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse4$inboundSchema: z.ZodType<
  GetV2LogsIdRelatedEntitiesResponse4,
  z.ZodTypeDef,
  unknown
> = z.object({
  type:
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody44Type$inboundSchema,
  test_case_id: z.string(),
}).transform((v) => {
  return remap$(v, {
    "test_case_id": "testCaseId",
  });
});

/** @internal */
export type GetV2LogsIdRelatedEntitiesResponse4$Outbound = {
  type: string;
  test_case_id: string;
};

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse4$outboundSchema: z.ZodType<
  GetV2LogsIdRelatedEntitiesResponse4$Outbound,
  z.ZodTypeDef,
  GetV2LogsIdRelatedEntitiesResponse4
> = z.object({
  type:
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody44Type$outboundSchema,
  testCaseId: z.string(),
}).transform((v) => {
  return remap$(v, {
    testCaseId: "test_case_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdRelatedEntitiesResponse4$ {
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse4$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsIdRelatedEntitiesResponse4$inboundSchema;
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse4$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdRelatedEntitiesResponse4$outboundSchema;
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse4$Outbound` instead. */
  export type Outbound = GetV2LogsIdRelatedEntitiesResponse4$Outbound;
}

export function getV2LogsIdRelatedEntitiesResponse4ToJSON(
  getV2LogsIdRelatedEntitiesResponse4: GetV2LogsIdRelatedEntitiesResponse4,
): string {
  return JSON.stringify(
    GetV2LogsIdRelatedEntitiesResponse4$outboundSchema.parse(
      getV2LogsIdRelatedEntitiesResponse4,
    ),
  );
}

export function getV2LogsIdRelatedEntitiesResponse4FromJSON(
  jsonString: string,
): SafeParseResult<GetV2LogsIdRelatedEntitiesResponse4, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      GetV2LogsIdRelatedEntitiesResponse4$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetV2LogsIdRelatedEntitiesResponse4' from JSON`,
  );
}

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody43Type$inboundSchema:
  z.ZodNativeEnum<
    typeof GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody43Type
  > = z.nativeEnum(
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody43Type,
  );

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody43Type$outboundSchema:
  z.ZodNativeEnum<
    typeof GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody43Type
  > =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody43Type$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody43Type$ {
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody43Type$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody43Type$inboundSchema;
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody43Type$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody43Type$outboundSchema;
}

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse2003$inboundSchema: z.ZodType<
  GetV2LogsIdRelatedEntitiesResponse2003,
  z.ZodTypeDef,
  unknown
> = z.object({
  type:
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody43Type$inboundSchema,
  test_case_run_id: z.string(),
}).transform((v) => {
  return remap$(v, {
    "test_case_run_id": "testCaseRunId",
  });
});

/** @internal */
export type GetV2LogsIdRelatedEntitiesResponse2003$Outbound = {
  type: string;
  test_case_run_id: string;
};

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse2003$outboundSchema: z.ZodType<
  GetV2LogsIdRelatedEntitiesResponse2003$Outbound,
  z.ZodTypeDef,
  GetV2LogsIdRelatedEntitiesResponse2003
> = z.object({
  type:
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody43Type$outboundSchema,
  testCaseRunId: z.string(),
}).transform((v) => {
  return remap$(v, {
    testCaseRunId: "test_case_run_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdRelatedEntitiesResponse2003$ {
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse2003$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsIdRelatedEntitiesResponse2003$inboundSchema;
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse2003$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdRelatedEntitiesResponse2003$outboundSchema;
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse2003$Outbound` instead. */
  export type Outbound = GetV2LogsIdRelatedEntitiesResponse2003$Outbound;
}

export function getV2LogsIdRelatedEntitiesResponse2003ToJSON(
  getV2LogsIdRelatedEntitiesResponse2003:
    GetV2LogsIdRelatedEntitiesResponse2003,
): string {
  return JSON.stringify(
    GetV2LogsIdRelatedEntitiesResponse2003$outboundSchema.parse(
      getV2LogsIdRelatedEntitiesResponse2003,
    ),
  );
}

export function getV2LogsIdRelatedEntitiesResponse2003FromJSON(
  jsonString: string,
): SafeParseResult<GetV2LogsIdRelatedEntitiesResponse2003, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      GetV2LogsIdRelatedEntitiesResponse2003$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetV2LogsIdRelatedEntitiesResponse2003' from JSON`,
  );
}

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody42Type$inboundSchema:
  z.ZodNativeEnum<
    typeof GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody42Type
  > = z.nativeEnum(
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody42Type,
  );

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody42Type$outboundSchema:
  z.ZodNativeEnum<
    typeof GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody42Type
  > =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody42Type$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody42Type$ {
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody42Type$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody42Type$inboundSchema;
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody42Type$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody42Type$outboundSchema;
}

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse2002$inboundSchema: z.ZodType<
  GetV2LogsIdRelatedEntitiesResponse2002,
  z.ZodTypeDef,
  unknown
> = z.object({
  type:
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody42Type$inboundSchema,
  experiment_run_id: z.string(),
}).transform((v) => {
  return remap$(v, {
    "experiment_run_id": "experimentRunId",
  });
});

/** @internal */
export type GetV2LogsIdRelatedEntitiesResponse2002$Outbound = {
  type: string;
  experiment_run_id: string;
};

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse2002$outboundSchema: z.ZodType<
  GetV2LogsIdRelatedEntitiesResponse2002$Outbound,
  z.ZodTypeDef,
  GetV2LogsIdRelatedEntitiesResponse2002
> = z.object({
  type:
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody42Type$outboundSchema,
  experimentRunId: z.string(),
}).transform((v) => {
  return remap$(v, {
    experimentRunId: "experiment_run_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdRelatedEntitiesResponse2002$ {
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse2002$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsIdRelatedEntitiesResponse2002$inboundSchema;
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse2002$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdRelatedEntitiesResponse2002$outboundSchema;
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse2002$Outbound` instead. */
  export type Outbound = GetV2LogsIdRelatedEntitiesResponse2002$Outbound;
}

export function getV2LogsIdRelatedEntitiesResponse2002ToJSON(
  getV2LogsIdRelatedEntitiesResponse2002:
    GetV2LogsIdRelatedEntitiesResponse2002,
): string {
  return JSON.stringify(
    GetV2LogsIdRelatedEntitiesResponse2002$outboundSchema.parse(
      getV2LogsIdRelatedEntitiesResponse2002,
    ),
  );
}

export function getV2LogsIdRelatedEntitiesResponse2002FromJSON(
  jsonString: string,
): SafeParseResult<GetV2LogsIdRelatedEntitiesResponse2002, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      GetV2LogsIdRelatedEntitiesResponse2002$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetV2LogsIdRelatedEntitiesResponse2002' from JSON`,
  );
}

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Type$inboundSchema:
  z.ZodNativeEnum<
    typeof GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Type
  > = z.nativeEnum(
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Type,
  );

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Type$outboundSchema:
  z.ZodNativeEnum<
    typeof GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Type
  > =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Type$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Type$ {
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Type$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Type$inboundSchema;
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Type$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Type$outboundSchema;
}

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse2001$inboundSchema: z.ZodType<
  GetV2LogsIdRelatedEntitiesResponse2001,
  z.ZodTypeDef,
  unknown
> = z.object({
  type:
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Type$inboundSchema,
  experiment_id: z.string(),
}).transform((v) => {
  return remap$(v, {
    "experiment_id": "experimentId",
  });
});

/** @internal */
export type GetV2LogsIdRelatedEntitiesResponse2001$Outbound = {
  type: string;
  experiment_id: string;
};

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse2001$outboundSchema: z.ZodType<
  GetV2LogsIdRelatedEntitiesResponse2001$Outbound,
  z.ZodTypeDef,
  GetV2LogsIdRelatedEntitiesResponse2001
> = z.object({
  type:
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4Type$outboundSchema,
  experimentId: z.string(),
}).transform((v) => {
  return remap$(v, {
    experimentId: "experiment_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdRelatedEntitiesResponse2001$ {
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse2001$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsIdRelatedEntitiesResponse2001$inboundSchema;
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse2001$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdRelatedEntitiesResponse2001$outboundSchema;
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse2001$Outbound` instead. */
  export type Outbound = GetV2LogsIdRelatedEntitiesResponse2001$Outbound;
}

export function getV2LogsIdRelatedEntitiesResponse2001ToJSON(
  getV2LogsIdRelatedEntitiesResponse2001:
    GetV2LogsIdRelatedEntitiesResponse2001,
): string {
  return JSON.stringify(
    GetV2LogsIdRelatedEntitiesResponse2001$outboundSchema.parse(
      getV2LogsIdRelatedEntitiesResponse2001,
    ),
  );
}

export function getV2LogsIdRelatedEntitiesResponse2001FromJSON(
  jsonString: string,
): SafeParseResult<GetV2LogsIdRelatedEntitiesResponse2001, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      GetV2LogsIdRelatedEntitiesResponse2001$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetV2LogsIdRelatedEntitiesResponse2001' from JSON`,
  );
}

/** @internal */
export const GetV2LogsIdResponseBodyResponseRelatedEntities$inboundSchema:
  z.ZodType<
    GetV2LogsIdResponseBodyResponseRelatedEntities,
    z.ZodTypeDef,
    unknown
  > = z.union([
    z.lazy(() => GetV2LogsIdRelatedEntitiesResponse2001$inboundSchema),
    z.lazy(() => GetV2LogsIdRelatedEntitiesResponse2002$inboundSchema),
    z.lazy(() => GetV2LogsIdRelatedEntitiesResponse2003$inboundSchema),
    z.lazy(() => GetV2LogsIdRelatedEntitiesResponse4$inboundSchema),
    z.lazy(() => GetV2LogsIdRelatedEntities5$inboundSchema),
  ]);

/** @internal */
export type GetV2LogsIdResponseBodyResponseRelatedEntities$Outbound =
  | GetV2LogsIdRelatedEntitiesResponse2001$Outbound
  | GetV2LogsIdRelatedEntitiesResponse2002$Outbound
  | GetV2LogsIdRelatedEntitiesResponse2003$Outbound
  | GetV2LogsIdRelatedEntitiesResponse4$Outbound
  | GetV2LogsIdRelatedEntities5$Outbound;

/** @internal */
export const GetV2LogsIdResponseBodyResponseRelatedEntities$outboundSchema:
  z.ZodType<
    GetV2LogsIdResponseBodyResponseRelatedEntities$Outbound,
    z.ZodTypeDef,
    GetV2LogsIdResponseBodyResponseRelatedEntities
  > = z.union([
    z.lazy(() => GetV2LogsIdRelatedEntitiesResponse2001$outboundSchema),
    z.lazy(() => GetV2LogsIdRelatedEntitiesResponse2002$outboundSchema),
    z.lazy(() => GetV2LogsIdRelatedEntitiesResponse2003$outboundSchema),
    z.lazy(() => GetV2LogsIdRelatedEntitiesResponse4$outboundSchema),
    z.lazy(() => GetV2LogsIdRelatedEntities5$outboundSchema),
  ]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdResponseBodyResponseRelatedEntities$ {
  /** @deprecated use `GetV2LogsIdResponseBodyResponseRelatedEntities$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsIdResponseBodyResponseRelatedEntities$inboundSchema;
  /** @deprecated use `GetV2LogsIdResponseBodyResponseRelatedEntities$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdResponseBodyResponseRelatedEntities$outboundSchema;
  /** @deprecated use `GetV2LogsIdResponseBodyResponseRelatedEntities$Outbound` instead. */
  export type Outbound =
    GetV2LogsIdResponseBodyResponseRelatedEntities$Outbound;
}

export function getV2LogsIdResponseBodyResponseRelatedEntitiesToJSON(
  getV2LogsIdResponseBodyResponseRelatedEntities:
    GetV2LogsIdResponseBodyResponseRelatedEntities,
): string {
  return JSON.stringify(
    GetV2LogsIdResponseBodyResponseRelatedEntities$outboundSchema.parse(
      getV2LogsIdResponseBodyResponseRelatedEntities,
    ),
  );
}

export function getV2LogsIdResponseBodyResponseRelatedEntitiesFromJSON(
  jsonString: string,
): SafeParseResult<
  GetV2LogsIdResponseBodyResponseRelatedEntities,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetV2LogsIdResponseBodyResponseRelatedEntities$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'GetV2LogsIdResponseBodyResponseRelatedEntities' from JSON`,
  );
}

/** @internal */
export const GetV2LogsIdMessageResponse200ApplicationJSONResponseBody4DataChoicesRole$inboundSchema:
  z.ZodNativeEnum<
    typeof GetV2LogsIdMessageResponse200ApplicationJSONResponseBody4DataChoicesRole
  > = z.nativeEnum(
    GetV2LogsIdMessageResponse200ApplicationJSONResponseBody4DataChoicesRole,
  );

/** @internal */
export const GetV2LogsIdMessageResponse200ApplicationJSONResponseBody4DataChoicesRole$outboundSchema:
  z.ZodNativeEnum<
    typeof GetV2LogsIdMessageResponse200ApplicationJSONResponseBody4DataChoicesRole
  > =
    GetV2LogsIdMessageResponse200ApplicationJSONResponseBody4DataChoicesRole$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdMessageResponse200ApplicationJSONResponseBody4DataChoicesRole$ {
  /** @deprecated use `GetV2LogsIdMessageResponse200ApplicationJSONResponseBody4DataChoicesRole$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsIdMessageResponse200ApplicationJSONResponseBody4DataChoicesRole$inboundSchema;
  /** @deprecated use `GetV2LogsIdMessageResponse200ApplicationJSONResponseBody4DataChoicesRole$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdMessageResponse200ApplicationJSONResponseBody4DataChoicesRole$outboundSchema;
}

/** @internal */
export const GetV2LogsIdMessageResponse2003$inboundSchema: z.ZodType<
  GetV2LogsIdMessageResponse2003,
  z.ZodTypeDef,
  unknown
> = z.object({
  role:
    GetV2LogsIdMessageResponse200ApplicationJSONResponseBody4DataChoicesRole$inboundSchema,
  url: z.string(),
});

/** @internal */
export type GetV2LogsIdMessageResponse2003$Outbound = {
  role: string;
  url: string;
};

/** @internal */
export const GetV2LogsIdMessageResponse2003$outboundSchema: z.ZodType<
  GetV2LogsIdMessageResponse2003$Outbound,
  z.ZodTypeDef,
  GetV2LogsIdMessageResponse2003
> = z.object({
  role:
    GetV2LogsIdMessageResponse200ApplicationJSONResponseBody4DataChoicesRole$outboundSchema,
  url: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdMessageResponse2003$ {
  /** @deprecated use `GetV2LogsIdMessageResponse2003$inboundSchema` instead. */
  export const inboundSchema = GetV2LogsIdMessageResponse2003$inboundSchema;
  /** @deprecated use `GetV2LogsIdMessageResponse2003$outboundSchema` instead. */
  export const outboundSchema = GetV2LogsIdMessageResponse2003$outboundSchema;
  /** @deprecated use `GetV2LogsIdMessageResponse2003$Outbound` instead. */
  export type Outbound = GetV2LogsIdMessageResponse2003$Outbound;
}

export function getV2LogsIdMessageResponse2003ToJSON(
  getV2LogsIdMessageResponse2003: GetV2LogsIdMessageResponse2003,
): string {
  return JSON.stringify(
    GetV2LogsIdMessageResponse2003$outboundSchema.parse(
      getV2LogsIdMessageResponse2003,
    ),
  );
}

export function getV2LogsIdMessageResponse2003FromJSON(
  jsonString: string,
): SafeParseResult<GetV2LogsIdMessageResponse2003, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetV2LogsIdMessageResponse2003$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetV2LogsIdMessageResponse2003' from JSON`,
  );
}

/** @internal */
export const GetV2LogsIdMessageResponse200ApplicationJSONResponseBody4DataRole$inboundSchema:
  z.ZodNativeEnum<
    typeof GetV2LogsIdMessageResponse200ApplicationJSONResponseBody4DataRole
  > = z.nativeEnum(
    GetV2LogsIdMessageResponse200ApplicationJSONResponseBody4DataRole,
  );

/** @internal */
export const GetV2LogsIdMessageResponse200ApplicationJSONResponseBody4DataRole$outboundSchema:
  z.ZodNativeEnum<
    typeof GetV2LogsIdMessageResponse200ApplicationJSONResponseBody4DataRole
  > =
    GetV2LogsIdMessageResponse200ApplicationJSONResponseBody4DataRole$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdMessageResponse200ApplicationJSONResponseBody4DataRole$ {
  /** @deprecated use `GetV2LogsIdMessageResponse200ApplicationJSONResponseBody4DataRole$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsIdMessageResponse200ApplicationJSONResponseBody4DataRole$inboundSchema;
  /** @deprecated use `GetV2LogsIdMessageResponse200ApplicationJSONResponseBody4DataRole$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdMessageResponse200ApplicationJSONResponseBody4DataRole$outboundSchema;
}

/** @internal */
export const GetV2LogsIdMessageResponse2002$inboundSchema: z.ZodType<
  GetV2LogsIdMessageResponse2002,
  z.ZodTypeDef,
  unknown
> = z.object({
  role:
    GetV2LogsIdMessageResponse200ApplicationJSONResponseBody4DataRole$inboundSchema,
  content: z.nullable(z.string()),
});

/** @internal */
export type GetV2LogsIdMessageResponse2002$Outbound = {
  role: string;
  content: string | null;
};

/** @internal */
export const GetV2LogsIdMessageResponse2002$outboundSchema: z.ZodType<
  GetV2LogsIdMessageResponse2002$Outbound,
  z.ZodTypeDef,
  GetV2LogsIdMessageResponse2002
> = z.object({
  role:
    GetV2LogsIdMessageResponse200ApplicationJSONResponseBody4DataRole$outboundSchema,
  content: z.nullable(z.string()),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdMessageResponse2002$ {
  /** @deprecated use `GetV2LogsIdMessageResponse2002$inboundSchema` instead. */
  export const inboundSchema = GetV2LogsIdMessageResponse2002$inboundSchema;
  /** @deprecated use `GetV2LogsIdMessageResponse2002$outboundSchema` instead. */
  export const outboundSchema = GetV2LogsIdMessageResponse2002$outboundSchema;
  /** @deprecated use `GetV2LogsIdMessageResponse2002$Outbound` instead. */
  export type Outbound = GetV2LogsIdMessageResponse2002$Outbound;
}

export function getV2LogsIdMessageResponse2002ToJSON(
  getV2LogsIdMessageResponse2002: GetV2LogsIdMessageResponse2002,
): string {
  return JSON.stringify(
    GetV2LogsIdMessageResponse2002$outboundSchema.parse(
      getV2LogsIdMessageResponse2002,
    ),
  );
}

export function getV2LogsIdMessageResponse2002FromJSON(
  jsonString: string,
): SafeParseResult<GetV2LogsIdMessageResponse2002, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetV2LogsIdMessageResponse2002$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetV2LogsIdMessageResponse2002' from JSON`,
  );
}

/** @internal */
export const GetV2LogsIdMessageResponse200ApplicationJSONResponseBody4Role$inboundSchema:
  z.ZodNativeEnum<
    typeof GetV2LogsIdMessageResponse200ApplicationJSONResponseBody4Role
  > = z.nativeEnum(
    GetV2LogsIdMessageResponse200ApplicationJSONResponseBody4Role,
  );

/** @internal */
export const GetV2LogsIdMessageResponse200ApplicationJSONResponseBody4Role$outboundSchema:
  z.ZodNativeEnum<
    typeof GetV2LogsIdMessageResponse200ApplicationJSONResponseBody4Role
  > =
    GetV2LogsIdMessageResponse200ApplicationJSONResponseBody4Role$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdMessageResponse200ApplicationJSONResponseBody4Role$ {
  /** @deprecated use `GetV2LogsIdMessageResponse200ApplicationJSONResponseBody4Role$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsIdMessageResponse200ApplicationJSONResponseBody4Role$inboundSchema;
  /** @deprecated use `GetV2LogsIdMessageResponse200ApplicationJSONResponseBody4Role$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdMessageResponse200ApplicationJSONResponseBody4Role$outboundSchema;
}

/** @internal */
export const GetV2LogsIdMessageResponse200Type$inboundSchema: z.ZodNativeEnum<
  typeof GetV2LogsIdMessageResponse200Type
> = z.nativeEnum(GetV2LogsIdMessageResponse200Type);

/** @internal */
export const GetV2LogsIdMessageResponse200Type$outboundSchema: z.ZodNativeEnum<
  typeof GetV2LogsIdMessageResponse200Type
> = GetV2LogsIdMessageResponse200Type$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdMessageResponse200Type$ {
  /** @deprecated use `GetV2LogsIdMessageResponse200Type$inboundSchema` instead. */
  export const inboundSchema = GetV2LogsIdMessageResponse200Type$inboundSchema;
  /** @deprecated use `GetV2LogsIdMessageResponse200Type$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdMessageResponse200Type$outboundSchema;
}

/** @internal */
export const GetV2LogsIdMessageResponse200Function$inboundSchema: z.ZodType<
  GetV2LogsIdMessageResponse200Function,
  z.ZodTypeDef,
  unknown
> = z.object({
  name: z.string(),
  arguments: z.string(),
});

/** @internal */
export type GetV2LogsIdMessageResponse200Function$Outbound = {
  name: string;
  arguments: string;
};

/** @internal */
export const GetV2LogsIdMessageResponse200Function$outboundSchema: z.ZodType<
  GetV2LogsIdMessageResponse200Function$Outbound,
  z.ZodTypeDef,
  GetV2LogsIdMessageResponse200Function
> = z.object({
  name: z.string(),
  arguments: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdMessageResponse200Function$ {
  /** @deprecated use `GetV2LogsIdMessageResponse200Function$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsIdMessageResponse200Function$inboundSchema;
  /** @deprecated use `GetV2LogsIdMessageResponse200Function$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdMessageResponse200Function$outboundSchema;
  /** @deprecated use `GetV2LogsIdMessageResponse200Function$Outbound` instead. */
  export type Outbound = GetV2LogsIdMessageResponse200Function$Outbound;
}

export function getV2LogsIdMessageResponse200FunctionToJSON(
  getV2LogsIdMessageResponse200Function: GetV2LogsIdMessageResponse200Function,
): string {
  return JSON.stringify(
    GetV2LogsIdMessageResponse200Function$outboundSchema.parse(
      getV2LogsIdMessageResponse200Function,
    ),
  );
}

export function getV2LogsIdMessageResponse200FunctionFromJSON(
  jsonString: string,
): SafeParseResult<GetV2LogsIdMessageResponse200Function, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      GetV2LogsIdMessageResponse200Function$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetV2LogsIdMessageResponse200Function' from JSON`,
  );
}

/** @internal */
export const GetV2LogsIdMessageResponse200ToolCalls$inboundSchema: z.ZodType<
  GetV2LogsIdMessageResponse200ToolCalls,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string().optional(),
  index: z.number().optional(),
  type: GetV2LogsIdMessageResponse200Type$inboundSchema,
  function: z.lazy(() => GetV2LogsIdMessageResponse200Function$inboundSchema),
});

/** @internal */
export type GetV2LogsIdMessageResponse200ToolCalls$Outbound = {
  id?: string | undefined;
  index?: number | undefined;
  type: string;
  function: GetV2LogsIdMessageResponse200Function$Outbound;
};

/** @internal */
export const GetV2LogsIdMessageResponse200ToolCalls$outboundSchema: z.ZodType<
  GetV2LogsIdMessageResponse200ToolCalls$Outbound,
  z.ZodTypeDef,
  GetV2LogsIdMessageResponse200ToolCalls
> = z.object({
  id: z.string().optional(),
  index: z.number().optional(),
  type: GetV2LogsIdMessageResponse200Type$outboundSchema,
  function: z.lazy(() => GetV2LogsIdMessageResponse200Function$outboundSchema),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdMessageResponse200ToolCalls$ {
  /** @deprecated use `GetV2LogsIdMessageResponse200ToolCalls$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsIdMessageResponse200ToolCalls$inboundSchema;
  /** @deprecated use `GetV2LogsIdMessageResponse200ToolCalls$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdMessageResponse200ToolCalls$outboundSchema;
  /** @deprecated use `GetV2LogsIdMessageResponse200ToolCalls$Outbound` instead. */
  export type Outbound = GetV2LogsIdMessageResponse200ToolCalls$Outbound;
}

export function getV2LogsIdMessageResponse200ToolCallsToJSON(
  getV2LogsIdMessageResponse200ToolCalls:
    GetV2LogsIdMessageResponse200ToolCalls,
): string {
  return JSON.stringify(
    GetV2LogsIdMessageResponse200ToolCalls$outboundSchema.parse(
      getV2LogsIdMessageResponse200ToolCalls,
    ),
  );
}

export function getV2LogsIdMessageResponse200ToolCallsFromJSON(
  jsonString: string,
): SafeParseResult<GetV2LogsIdMessageResponse200ToolCalls, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      GetV2LogsIdMessageResponse200ToolCalls$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetV2LogsIdMessageResponse200ToolCalls' from JSON`,
  );
}

/** @internal */
export const GetV2LogsIdMessageResponse2001$inboundSchema: z.ZodType<
  GetV2LogsIdMessageResponse2001,
  z.ZodTypeDef,
  unknown
> = z.object({
  role:
    GetV2LogsIdMessageResponse200ApplicationJSONResponseBody4Role$inboundSchema,
  content: z.nullable(z.string()).optional(),
  tool_calls: z.array(
    z.lazy(() => GetV2LogsIdMessageResponse200ToolCalls$inboundSchema),
  ),
}).transform((v) => {
  return remap$(v, {
    "tool_calls": "toolCalls",
  });
});

/** @internal */
export type GetV2LogsIdMessageResponse2001$Outbound = {
  role: string;
  content?: string | null | undefined;
  tool_calls: Array<GetV2LogsIdMessageResponse200ToolCalls$Outbound>;
};

/** @internal */
export const GetV2LogsIdMessageResponse2001$outboundSchema: z.ZodType<
  GetV2LogsIdMessageResponse2001$Outbound,
  z.ZodTypeDef,
  GetV2LogsIdMessageResponse2001
> = z.object({
  role:
    GetV2LogsIdMessageResponse200ApplicationJSONResponseBody4Role$outboundSchema,
  content: z.nullable(z.string()).optional(),
  toolCalls: z.array(
    z.lazy(() => GetV2LogsIdMessageResponse200ToolCalls$outboundSchema),
  ),
}).transform((v) => {
  return remap$(v, {
    toolCalls: "tool_calls",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdMessageResponse2001$ {
  /** @deprecated use `GetV2LogsIdMessageResponse2001$inboundSchema` instead. */
  export const inboundSchema = GetV2LogsIdMessageResponse2001$inboundSchema;
  /** @deprecated use `GetV2LogsIdMessageResponse2001$outboundSchema` instead. */
  export const outboundSchema = GetV2LogsIdMessageResponse2001$outboundSchema;
  /** @deprecated use `GetV2LogsIdMessageResponse2001$Outbound` instead. */
  export type Outbound = GetV2LogsIdMessageResponse2001$Outbound;
}

export function getV2LogsIdMessageResponse2001ToJSON(
  getV2LogsIdMessageResponse2001: GetV2LogsIdMessageResponse2001,
): string {
  return JSON.stringify(
    GetV2LogsIdMessageResponse2001$outboundSchema.parse(
      getV2LogsIdMessageResponse2001,
    ),
  );
}

export function getV2LogsIdMessageResponse2001FromJSON(
  jsonString: string,
): SafeParseResult<GetV2LogsIdMessageResponse2001, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetV2LogsIdMessageResponse2001$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetV2LogsIdMessageResponse2001' from JSON`,
  );
}

/** @internal */
export const GetV2LogsIdResponseBodyResponseMessage$inboundSchema: z.ZodType<
  GetV2LogsIdResponseBodyResponseMessage,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => GetV2LogsIdMessageResponse2002$inboundSchema),
  z.lazy(() => GetV2LogsIdMessageResponse2003$inboundSchema),
  z.lazy(() => GetV2LogsIdMessageResponse2001$inboundSchema),
]);

/** @internal */
export type GetV2LogsIdResponseBodyResponseMessage$Outbound =
  | GetV2LogsIdMessageResponse2002$Outbound
  | GetV2LogsIdMessageResponse2003$Outbound
  | GetV2LogsIdMessageResponse2001$Outbound;

/** @internal */
export const GetV2LogsIdResponseBodyResponseMessage$outboundSchema: z.ZodType<
  GetV2LogsIdResponseBodyResponseMessage$Outbound,
  z.ZodTypeDef,
  GetV2LogsIdResponseBodyResponseMessage
> = z.union([
  z.lazy(() => GetV2LogsIdMessageResponse2002$outboundSchema),
  z.lazy(() => GetV2LogsIdMessageResponse2003$outboundSchema),
  z.lazy(() => GetV2LogsIdMessageResponse2001$outboundSchema),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdResponseBodyResponseMessage$ {
  /** @deprecated use `GetV2LogsIdResponseBodyResponseMessage$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsIdResponseBodyResponseMessage$inboundSchema;
  /** @deprecated use `GetV2LogsIdResponseBodyResponseMessage$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdResponseBodyResponseMessage$outboundSchema;
  /** @deprecated use `GetV2LogsIdResponseBodyResponseMessage$Outbound` instead. */
  export type Outbound = GetV2LogsIdResponseBodyResponseMessage$Outbound;
}

export function getV2LogsIdResponseBodyResponseMessageToJSON(
  getV2LogsIdResponseBodyResponseMessage:
    GetV2LogsIdResponseBodyResponseMessage,
): string {
  return JSON.stringify(
    GetV2LogsIdResponseBodyResponseMessage$outboundSchema.parse(
      getV2LogsIdResponseBodyResponseMessage,
    ),
  );
}

export function getV2LogsIdResponseBodyResponseMessageFromJSON(
  jsonString: string,
): SafeParseResult<GetV2LogsIdResponseBodyResponseMessage, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      GetV2LogsIdResponseBodyResponseMessage$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetV2LogsIdResponseBodyResponseMessage' from JSON`,
  );
}

/** @internal */
export const GetV2LogsIdResponseBodyResponseChoices$inboundSchema: z.ZodType<
  GetV2LogsIdResponseBodyResponseChoices,
  z.ZodTypeDef,
  unknown
> = z.object({
  index: z.number(),
  message: z.union([
    z.lazy(() => GetV2LogsIdMessageResponse2002$inboundSchema),
    z.lazy(() => GetV2LogsIdMessageResponse2003$inboundSchema),
    z.lazy(() => GetV2LogsIdMessageResponse2001$inboundSchema),
  ]).optional(),
  finish_reason: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    "finish_reason": "finishReason",
  });
});

/** @internal */
export type GetV2LogsIdResponseBodyResponseChoices$Outbound = {
  index: number;
  message?:
    | GetV2LogsIdMessageResponse2002$Outbound
    | GetV2LogsIdMessageResponse2003$Outbound
    | GetV2LogsIdMessageResponse2001$Outbound
    | undefined;
  finish_reason?: string | null | undefined;
};

/** @internal */
export const GetV2LogsIdResponseBodyResponseChoices$outboundSchema: z.ZodType<
  GetV2LogsIdResponseBodyResponseChoices$Outbound,
  z.ZodTypeDef,
  GetV2LogsIdResponseBodyResponseChoices
> = z.object({
  index: z.number(),
  message: z.union([
    z.lazy(() => GetV2LogsIdMessageResponse2002$outboundSchema),
    z.lazy(() => GetV2LogsIdMessageResponse2003$outboundSchema),
    z.lazy(() => GetV2LogsIdMessageResponse2001$outboundSchema),
  ]).optional(),
  finishReason: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    finishReason: "finish_reason",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdResponseBodyResponseChoices$ {
  /** @deprecated use `GetV2LogsIdResponseBodyResponseChoices$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsIdResponseBodyResponseChoices$inboundSchema;
  /** @deprecated use `GetV2LogsIdResponseBodyResponseChoices$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdResponseBodyResponseChoices$outboundSchema;
  /** @deprecated use `GetV2LogsIdResponseBodyResponseChoices$Outbound` instead. */
  export type Outbound = GetV2LogsIdResponseBodyResponseChoices$Outbound;
}

export function getV2LogsIdResponseBodyResponseChoicesToJSON(
  getV2LogsIdResponseBodyResponseChoices:
    GetV2LogsIdResponseBodyResponseChoices,
): string {
  return JSON.stringify(
    GetV2LogsIdResponseBodyResponseChoices$outboundSchema.parse(
      getV2LogsIdResponseBodyResponseChoices,
    ),
  );
}

export function getV2LogsIdResponseBodyResponseChoicesFromJSON(
  jsonString: string,
): SafeParseResult<GetV2LogsIdResponseBodyResponseChoices, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      GetV2LogsIdResponseBodyResponseChoices$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetV2LogsIdResponseBodyResponseChoices' from JSON`,
  );
}

/** @internal */
export const GetV2LogsIdResponseBodyResponseAction$inboundSchema:
  z.ZodNativeEnum<typeof GetV2LogsIdResponseBodyResponseAction> = z.nativeEnum(
    GetV2LogsIdResponseBodyResponseAction,
  );

/** @internal */
export const GetV2LogsIdResponseBodyResponseAction$outboundSchema:
  z.ZodNativeEnum<typeof GetV2LogsIdResponseBodyResponseAction> =
    GetV2LogsIdResponseBodyResponseAction$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdResponseBodyResponseAction$ {
  /** @deprecated use `GetV2LogsIdResponseBodyResponseAction$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsIdResponseBodyResponseAction$inboundSchema;
  /** @deprecated use `GetV2LogsIdResponseBodyResponseAction$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdResponseBodyResponseAction$outboundSchema;
}

/** @internal */
export const GetV2LogsIdResponseBodyResponseModelType$inboundSchema:
  z.ZodNativeEnum<typeof GetV2LogsIdResponseBodyResponseModelType> = z
    .nativeEnum(GetV2LogsIdResponseBodyResponseModelType);

/** @internal */
export const GetV2LogsIdResponseBodyResponseModelType$outboundSchema:
  z.ZodNativeEnum<typeof GetV2LogsIdResponseBodyResponseModelType> =
    GetV2LogsIdResponseBodyResponseModelType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdResponseBodyResponseModelType$ {
  /** @deprecated use `GetV2LogsIdResponseBodyResponseModelType$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsIdResponseBodyResponseModelType$inboundSchema;
  /** @deprecated use `GetV2LogsIdResponseBodyResponseModelType$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdResponseBodyResponseModelType$outboundSchema;
}

/** @internal */
export const GetV2LogsIdResponseBodyResponse200Format$inboundSchema:
  z.ZodNativeEnum<typeof GetV2LogsIdResponseBodyResponse200Format> = z
    .nativeEnum(GetV2LogsIdResponseBodyResponse200Format);

/** @internal */
export const GetV2LogsIdResponseBodyResponse200Format$outboundSchema:
  z.ZodNativeEnum<typeof GetV2LogsIdResponseBodyResponse200Format> =
    GetV2LogsIdResponseBodyResponse200Format$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdResponseBodyResponse200Format$ {
  /** @deprecated use `GetV2LogsIdResponseBodyResponse200Format$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsIdResponseBodyResponse200Format$inboundSchema;
  /** @deprecated use `GetV2LogsIdResponseBodyResponse200Format$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdResponseBodyResponse200Format$outboundSchema;
}

/** @internal */
export const GetV2LogsIdResponseBodyResponseQuality$inboundSchema:
  z.ZodNativeEnum<typeof GetV2LogsIdResponseBodyResponseQuality> = z.nativeEnum(
    GetV2LogsIdResponseBodyResponseQuality,
  );

/** @internal */
export const GetV2LogsIdResponseBodyResponseQuality$outboundSchema:
  z.ZodNativeEnum<typeof GetV2LogsIdResponseBodyResponseQuality> =
    GetV2LogsIdResponseBodyResponseQuality$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdResponseBodyResponseQuality$ {
  /** @deprecated use `GetV2LogsIdResponseBodyResponseQuality$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsIdResponseBodyResponseQuality$inboundSchema;
  /** @deprecated use `GetV2LogsIdResponseBodyResponseQuality$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdResponseBodyResponseQuality$outboundSchema;
}

/** @internal */
export const GetV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody4Type$inboundSchema:
  z.ZodNativeEnum<
    typeof GetV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody4Type
  > = z.nativeEnum(
    GetV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody4Type,
  );

/** @internal */
export const GetV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody4Type$outboundSchema:
  z.ZodNativeEnum<
    typeof GetV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody4Type
  > =
    GetV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody4Type$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody4Type$ {
  /** @deprecated use `GetV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody4Type$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody4Type$inboundSchema;
  /** @deprecated use `GetV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody4Type$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody4Type$outboundSchema;
}

/** @internal */
export const GetV2LogsIdResponseFormatResponse2002$inboundSchema: z.ZodType<
  GetV2LogsIdResponseFormatResponse2002,
  z.ZodTypeDef,
  unknown
> = z.object({
  type:
    GetV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody4Type$inboundSchema,
});

/** @internal */
export type GetV2LogsIdResponseFormatResponse2002$Outbound = {
  type: string;
};

/** @internal */
export const GetV2LogsIdResponseFormatResponse2002$outboundSchema: z.ZodType<
  GetV2LogsIdResponseFormatResponse2002$Outbound,
  z.ZodTypeDef,
  GetV2LogsIdResponseFormatResponse2002
> = z.object({
  type:
    GetV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody4Type$outboundSchema,
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdResponseFormatResponse2002$ {
  /** @deprecated use `GetV2LogsIdResponseFormatResponse2002$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsIdResponseFormatResponse2002$inboundSchema;
  /** @deprecated use `GetV2LogsIdResponseFormatResponse2002$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdResponseFormatResponse2002$outboundSchema;
  /** @deprecated use `GetV2LogsIdResponseFormatResponse2002$Outbound` instead. */
  export type Outbound = GetV2LogsIdResponseFormatResponse2002$Outbound;
}

export function getV2LogsIdResponseFormatResponse2002ToJSON(
  getV2LogsIdResponseFormatResponse2002: GetV2LogsIdResponseFormatResponse2002,
): string {
  return JSON.stringify(
    GetV2LogsIdResponseFormatResponse2002$outboundSchema.parse(
      getV2LogsIdResponseFormatResponse2002,
    ),
  );
}

export function getV2LogsIdResponseFormatResponse2002FromJSON(
  jsonString: string,
): SafeParseResult<GetV2LogsIdResponseFormatResponse2002, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      GetV2LogsIdResponseFormatResponse2002$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetV2LogsIdResponseFormatResponse2002' from JSON`,
  );
}

/** @internal */
export const GetV2LogsIdResponseFormatResponse200ApplicationJSONResponseBodyType$inboundSchema:
  z.ZodNativeEnum<
    typeof GetV2LogsIdResponseFormatResponse200ApplicationJSONResponseBodyType
  > = z.nativeEnum(
    GetV2LogsIdResponseFormatResponse200ApplicationJSONResponseBodyType,
  );

/** @internal */
export const GetV2LogsIdResponseFormatResponse200ApplicationJSONResponseBodyType$outboundSchema:
  z.ZodNativeEnum<
    typeof GetV2LogsIdResponseFormatResponse200ApplicationJSONResponseBodyType
  > =
    GetV2LogsIdResponseFormatResponse200ApplicationJSONResponseBodyType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdResponseFormatResponse200ApplicationJSONResponseBodyType$ {
  /** @deprecated use `GetV2LogsIdResponseFormatResponse200ApplicationJSONResponseBodyType$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsIdResponseFormatResponse200ApplicationJSONResponseBodyType$inboundSchema;
  /** @deprecated use `GetV2LogsIdResponseFormatResponse200ApplicationJSONResponseBodyType$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdResponseFormatResponse200ApplicationJSONResponseBodyType$outboundSchema;
}

/** @internal */
export const GetV2LogsIdResponseFormatResponse200JsonSchema$inboundSchema:
  z.ZodType<
    GetV2LogsIdResponseFormatResponse200JsonSchema,
    z.ZodTypeDef,
    unknown
  > = z.object({
    name: z.string(),
    strict: z.boolean(),
    schema: z.record(z.any()),
  });

/** @internal */
export type GetV2LogsIdResponseFormatResponse200JsonSchema$Outbound = {
  name: string;
  strict: boolean;
  schema: { [k: string]: any };
};

/** @internal */
export const GetV2LogsIdResponseFormatResponse200JsonSchema$outboundSchema:
  z.ZodType<
    GetV2LogsIdResponseFormatResponse200JsonSchema$Outbound,
    z.ZodTypeDef,
    GetV2LogsIdResponseFormatResponse200JsonSchema
  > = z.object({
    name: z.string(),
    strict: z.boolean(),
    schema: z.record(z.any()),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdResponseFormatResponse200JsonSchema$ {
  /** @deprecated use `GetV2LogsIdResponseFormatResponse200JsonSchema$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsIdResponseFormatResponse200JsonSchema$inboundSchema;
  /** @deprecated use `GetV2LogsIdResponseFormatResponse200JsonSchema$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdResponseFormatResponse200JsonSchema$outboundSchema;
  /** @deprecated use `GetV2LogsIdResponseFormatResponse200JsonSchema$Outbound` instead. */
  export type Outbound =
    GetV2LogsIdResponseFormatResponse200JsonSchema$Outbound;
}

export function getV2LogsIdResponseFormatResponse200JsonSchemaToJSON(
  getV2LogsIdResponseFormatResponse200JsonSchema:
    GetV2LogsIdResponseFormatResponse200JsonSchema,
): string {
  return JSON.stringify(
    GetV2LogsIdResponseFormatResponse200JsonSchema$outboundSchema.parse(
      getV2LogsIdResponseFormatResponse200JsonSchema,
    ),
  );
}

export function getV2LogsIdResponseFormatResponse200JsonSchemaFromJSON(
  jsonString: string,
): SafeParseResult<
  GetV2LogsIdResponseFormatResponse200JsonSchema,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetV2LogsIdResponseFormatResponse200JsonSchema$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'GetV2LogsIdResponseFormatResponse200JsonSchema' from JSON`,
  );
}

/** @internal */
export const GetV2LogsIdResponseFormatResponse2001$inboundSchema: z.ZodType<
  GetV2LogsIdResponseFormatResponse2001,
  z.ZodTypeDef,
  unknown
> = z.object({
  type:
    GetV2LogsIdResponseFormatResponse200ApplicationJSONResponseBodyType$inboundSchema,
  json_schema: z.lazy(() =>
    GetV2LogsIdResponseFormatResponse200JsonSchema$inboundSchema
  ),
}).transform((v) => {
  return remap$(v, {
    "json_schema": "jsonSchema",
  });
});

/** @internal */
export type GetV2LogsIdResponseFormatResponse2001$Outbound = {
  type: string;
  json_schema: GetV2LogsIdResponseFormatResponse200JsonSchema$Outbound;
};

/** @internal */
export const GetV2LogsIdResponseFormatResponse2001$outboundSchema: z.ZodType<
  GetV2LogsIdResponseFormatResponse2001$Outbound,
  z.ZodTypeDef,
  GetV2LogsIdResponseFormatResponse2001
> = z.object({
  type:
    GetV2LogsIdResponseFormatResponse200ApplicationJSONResponseBodyType$outboundSchema,
  jsonSchema: z.lazy(() =>
    GetV2LogsIdResponseFormatResponse200JsonSchema$outboundSchema
  ),
}).transform((v) => {
  return remap$(v, {
    jsonSchema: "json_schema",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdResponseFormatResponse2001$ {
  /** @deprecated use `GetV2LogsIdResponseFormatResponse2001$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsIdResponseFormatResponse2001$inboundSchema;
  /** @deprecated use `GetV2LogsIdResponseFormatResponse2001$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdResponseFormatResponse2001$outboundSchema;
  /** @deprecated use `GetV2LogsIdResponseFormatResponse2001$Outbound` instead. */
  export type Outbound = GetV2LogsIdResponseFormatResponse2001$Outbound;
}

export function getV2LogsIdResponseFormatResponse2001ToJSON(
  getV2LogsIdResponseFormatResponse2001: GetV2LogsIdResponseFormatResponse2001,
): string {
  return JSON.stringify(
    GetV2LogsIdResponseFormatResponse2001$outboundSchema.parse(
      getV2LogsIdResponseFormatResponse2001,
    ),
  );
}

export function getV2LogsIdResponseFormatResponse2001FromJSON(
  jsonString: string,
): SafeParseResult<GetV2LogsIdResponseFormatResponse2001, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      GetV2LogsIdResponseFormatResponse2001$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetV2LogsIdResponseFormatResponse2001' from JSON`,
  );
}

/** @internal */
export const GetV2LogsIdResponseBodyResponseResponseFormat$inboundSchema:
  z.ZodType<
    GetV2LogsIdResponseBodyResponseResponseFormat,
    z.ZodTypeDef,
    unknown
  > = z.union([
    z.lazy(() => GetV2LogsIdResponseFormatResponse2002$inboundSchema),
    z.lazy(() => GetV2LogsIdResponseFormatResponse2001$inboundSchema),
  ]);

/** @internal */
export type GetV2LogsIdResponseBodyResponseResponseFormat$Outbound =
  | GetV2LogsIdResponseFormatResponse2002$Outbound
  | GetV2LogsIdResponseFormatResponse2001$Outbound;

/** @internal */
export const GetV2LogsIdResponseBodyResponseResponseFormat$outboundSchema:
  z.ZodType<
    GetV2LogsIdResponseBodyResponseResponseFormat$Outbound,
    z.ZodTypeDef,
    GetV2LogsIdResponseBodyResponseResponseFormat
  > = z.union([
    z.lazy(() => GetV2LogsIdResponseFormatResponse2002$outboundSchema),
    z.lazy(() => GetV2LogsIdResponseFormatResponse2001$outboundSchema),
  ]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdResponseBodyResponseResponseFormat$ {
  /** @deprecated use `GetV2LogsIdResponseBodyResponseResponseFormat$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsIdResponseBodyResponseResponseFormat$inboundSchema;
  /** @deprecated use `GetV2LogsIdResponseBodyResponseResponseFormat$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdResponseBodyResponseResponseFormat$outboundSchema;
  /** @deprecated use `GetV2LogsIdResponseBodyResponseResponseFormat$Outbound` instead. */
  export type Outbound = GetV2LogsIdResponseBodyResponseResponseFormat$Outbound;
}

export function getV2LogsIdResponseBodyResponseResponseFormatToJSON(
  getV2LogsIdResponseBodyResponseResponseFormat:
    GetV2LogsIdResponseBodyResponseResponseFormat,
): string {
  return JSON.stringify(
    GetV2LogsIdResponseBodyResponseResponseFormat$outboundSchema.parse(
      getV2LogsIdResponseBodyResponseResponseFormat,
    ),
  );
}

export function getV2LogsIdResponseBodyResponseResponseFormatFromJSON(
  jsonString: string,
): SafeParseResult<
  GetV2LogsIdResponseBodyResponseResponseFormat,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetV2LogsIdResponseBodyResponseResponseFormat$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'GetV2LogsIdResponseBodyResponseResponseFormat' from JSON`,
  );
}

/** @internal */
export const GetV2LogsIdResponseBodyResponsePhotoRealVersion$inboundSchema:
  z.ZodNativeEnum<typeof GetV2LogsIdResponseBodyResponsePhotoRealVersion> = z
    .nativeEnum(GetV2LogsIdResponseBodyResponsePhotoRealVersion);

/** @internal */
export const GetV2LogsIdResponseBodyResponsePhotoRealVersion$outboundSchema:
  z.ZodNativeEnum<typeof GetV2LogsIdResponseBodyResponsePhotoRealVersion> =
    GetV2LogsIdResponseBodyResponsePhotoRealVersion$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdResponseBodyResponsePhotoRealVersion$ {
  /** @deprecated use `GetV2LogsIdResponseBodyResponsePhotoRealVersion$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsIdResponseBodyResponsePhotoRealVersion$inboundSchema;
  /** @deprecated use `GetV2LogsIdResponseBodyResponsePhotoRealVersion$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdResponseBodyResponsePhotoRealVersion$outboundSchema;
}

/** @internal */
export const GetV2LogsIdResponseBodyResponseEncodingFormat$inboundSchema:
  z.ZodNativeEnum<typeof GetV2LogsIdResponseBodyResponseEncodingFormat> = z
    .nativeEnum(GetV2LogsIdResponseBodyResponseEncodingFormat);

/** @internal */
export const GetV2LogsIdResponseBodyResponseEncodingFormat$outboundSchema:
  z.ZodNativeEnum<typeof GetV2LogsIdResponseBodyResponseEncodingFormat> =
    GetV2LogsIdResponseBodyResponseEncodingFormat$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdResponseBodyResponseEncodingFormat$ {
  /** @deprecated use `GetV2LogsIdResponseBodyResponseEncodingFormat$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsIdResponseBodyResponseEncodingFormat$inboundSchema;
  /** @deprecated use `GetV2LogsIdResponseBodyResponseEncodingFormat$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdResponseBodyResponseEncodingFormat$outboundSchema;
}

/** @internal */
export const GetV2LogsIdResponseBodyResponseModelParameters$inboundSchema:
  z.ZodType<
    GetV2LogsIdResponseBodyResponseModelParameters,
    z.ZodTypeDef,
    unknown
  > = z.object({
    temperature: z.number().optional(),
    maxTokens: z.number().optional(),
    topK: z.number().optional(),
    topP: z.number().optional(),
    frequencyPenalty: z.number().optional(),
    presencePenalty: z.number().optional(),
    numImages: z.number().optional(),
    seed: z.number().optional(),
    format: GetV2LogsIdResponseBodyResponse200Format$inboundSchema.optional(),
    dimensions: z.string().optional(),
    quality: GetV2LogsIdResponseBodyResponseQuality$inboundSchema.optional(),
    style: z.string().optional(),
    responseFormat: z.nullable(
      z.union([
        z.lazy(() => GetV2LogsIdResponseFormatResponse2002$inboundSchema),
        z.lazy(() => GetV2LogsIdResponseFormatResponse2001$inboundSchema),
      ]),
    ).optional(),
    photoRealVersion:
      GetV2LogsIdResponseBodyResponsePhotoRealVersion$inboundSchema.optional(),
    encoding_format: GetV2LogsIdResponseBodyResponseEncodingFormat$inboundSchema
      .optional(),
  }).transform((v) => {
    return remap$(v, {
      "encoding_format": "encodingFormat",
    });
  });

/** @internal */
export type GetV2LogsIdResponseBodyResponseModelParameters$Outbound = {
  temperature?: number | undefined;
  maxTokens?: number | undefined;
  topK?: number | undefined;
  topP?: number | undefined;
  frequencyPenalty?: number | undefined;
  presencePenalty?: number | undefined;
  numImages?: number | undefined;
  seed?: number | undefined;
  format?: string | undefined;
  dimensions?: string | undefined;
  quality?: string | undefined;
  style?: string | undefined;
  responseFormat?:
    | GetV2LogsIdResponseFormatResponse2002$Outbound
    | GetV2LogsIdResponseFormatResponse2001$Outbound
    | null
    | undefined;
  photoRealVersion?: string | undefined;
  encoding_format?: string | undefined;
};

/** @internal */
export const GetV2LogsIdResponseBodyResponseModelParameters$outboundSchema:
  z.ZodType<
    GetV2LogsIdResponseBodyResponseModelParameters$Outbound,
    z.ZodTypeDef,
    GetV2LogsIdResponseBodyResponseModelParameters
  > = z.object({
    temperature: z.number().optional(),
    maxTokens: z.number().optional(),
    topK: z.number().optional(),
    topP: z.number().optional(),
    frequencyPenalty: z.number().optional(),
    presencePenalty: z.number().optional(),
    numImages: z.number().optional(),
    seed: z.number().optional(),
    format: GetV2LogsIdResponseBodyResponse200Format$outboundSchema.optional(),
    dimensions: z.string().optional(),
    quality: GetV2LogsIdResponseBodyResponseQuality$outboundSchema.optional(),
    style: z.string().optional(),
    responseFormat: z.nullable(
      z.union([
        z.lazy(() => GetV2LogsIdResponseFormatResponse2002$outboundSchema),
        z.lazy(() => GetV2LogsIdResponseFormatResponse2001$outboundSchema),
      ]),
    ).optional(),
    photoRealVersion:
      GetV2LogsIdResponseBodyResponsePhotoRealVersion$outboundSchema.optional(),
    encodingFormat: GetV2LogsIdResponseBodyResponseEncodingFormat$outboundSchema
      .optional(),
  }).transform((v) => {
    return remap$(v, {
      encodingFormat: "encoding_format",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdResponseBodyResponseModelParameters$ {
  /** @deprecated use `GetV2LogsIdResponseBodyResponseModelParameters$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsIdResponseBodyResponseModelParameters$inboundSchema;
  /** @deprecated use `GetV2LogsIdResponseBodyResponseModelParameters$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdResponseBodyResponseModelParameters$outboundSchema;
  /** @deprecated use `GetV2LogsIdResponseBodyResponseModelParameters$Outbound` instead. */
  export type Outbound =
    GetV2LogsIdResponseBodyResponseModelParameters$Outbound;
}

export function getV2LogsIdResponseBodyResponseModelParametersToJSON(
  getV2LogsIdResponseBodyResponseModelParameters:
    GetV2LogsIdResponseBodyResponseModelParameters,
): string {
  return JSON.stringify(
    GetV2LogsIdResponseBodyResponseModelParameters$outboundSchema.parse(
      getV2LogsIdResponseBodyResponseModelParameters,
    ),
  );
}

export function getV2LogsIdResponseBodyResponseModelParametersFromJSON(
  jsonString: string,
): SafeParseResult<
  GetV2LogsIdResponseBodyResponseModelParameters,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetV2LogsIdResponseBodyResponseModelParameters$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'GetV2LogsIdResponseBodyResponseModelParameters' from JSON`,
  );
}

/** @internal */
export const GetV2LogsIdResponseBodyResponseProvider$inboundSchema:
  z.ZodNativeEnum<typeof GetV2LogsIdResponseBodyResponseProvider> = z
    .nativeEnum(GetV2LogsIdResponseBodyResponseProvider);

/** @internal */
export const GetV2LogsIdResponseBodyResponseProvider$outboundSchema:
  z.ZodNativeEnum<typeof GetV2LogsIdResponseBodyResponseProvider> =
    GetV2LogsIdResponseBodyResponseProvider$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdResponseBodyResponseProvider$ {
  /** @deprecated use `GetV2LogsIdResponseBodyResponseProvider$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsIdResponseBodyResponseProvider$inboundSchema;
  /** @deprecated use `GetV2LogsIdResponseBodyResponseProvider$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdResponseBodyResponseProvider$outboundSchema;
}

/** @internal */
export const GetV2LogsIdResponseBodyResponseRole$inboundSchema: z.ZodNativeEnum<
  typeof GetV2LogsIdResponseBodyResponseRole
> = z.nativeEnum(GetV2LogsIdResponseBodyResponseRole);

/** @internal */
export const GetV2LogsIdResponseBodyResponseRole$outboundSchema:
  z.ZodNativeEnum<typeof GetV2LogsIdResponseBodyResponseRole> =
    GetV2LogsIdResponseBodyResponseRole$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdResponseBodyResponseRole$ {
  /** @deprecated use `GetV2LogsIdResponseBodyResponseRole$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsIdResponseBodyResponseRole$inboundSchema;
  /** @deprecated use `GetV2LogsIdResponseBodyResponseRole$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdResponseBodyResponseRole$outboundSchema;
}

/** @internal */
export const GetV2LogsId2Response200ApplicationJSONResponseBody4Type$inboundSchema:
  z.ZodNativeEnum<
    typeof GetV2LogsId2Response200ApplicationJSONResponseBody4Type
  > = z.nativeEnum(GetV2LogsId2Response200ApplicationJSONResponseBody4Type);

/** @internal */
export const GetV2LogsId2Response200ApplicationJSONResponseBody4Type$outboundSchema:
  z.ZodNativeEnum<
    typeof GetV2LogsId2Response200ApplicationJSONResponseBody4Type
  > = GetV2LogsId2Response200ApplicationJSONResponseBody4Type$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsId2Response200ApplicationJSONResponseBody4Type$ {
  /** @deprecated use `GetV2LogsId2Response200ApplicationJSONResponseBody4Type$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsId2Response200ApplicationJSONResponseBody4Type$inboundSchema;
  /** @deprecated use `GetV2LogsId2Response200ApplicationJSONResponseBody4Type$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsId2Response200ApplicationJSONResponseBody4Type$outboundSchema;
}

/** @internal */
export const GetV2LogsId2Response200ImageUrl$inboundSchema: z.ZodType<
  GetV2LogsId2Response200ImageUrl,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string().optional(),
  url: z.string(),
  detail: z.string().optional(),
});

/** @internal */
export type GetV2LogsId2Response200ImageUrl$Outbound = {
  id?: string | undefined;
  url: string;
  detail?: string | undefined;
};

/** @internal */
export const GetV2LogsId2Response200ImageUrl$outboundSchema: z.ZodType<
  GetV2LogsId2Response200ImageUrl$Outbound,
  z.ZodTypeDef,
  GetV2LogsId2Response200ImageUrl
> = z.object({
  id: z.string().optional(),
  url: z.string(),
  detail: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsId2Response200ImageUrl$ {
  /** @deprecated use `GetV2LogsId2Response200ImageUrl$inboundSchema` instead. */
  export const inboundSchema = GetV2LogsId2Response200ImageUrl$inboundSchema;
  /** @deprecated use `GetV2LogsId2Response200ImageUrl$outboundSchema` instead. */
  export const outboundSchema = GetV2LogsId2Response200ImageUrl$outboundSchema;
  /** @deprecated use `GetV2LogsId2Response200ImageUrl$Outbound` instead. */
  export type Outbound = GetV2LogsId2Response200ImageUrl$Outbound;
}

export function getV2LogsId2Response200ImageUrlToJSON(
  getV2LogsId2Response200ImageUrl: GetV2LogsId2Response200ImageUrl,
): string {
  return JSON.stringify(
    GetV2LogsId2Response200ImageUrl$outboundSchema.parse(
      getV2LogsId2Response200ImageUrl,
    ),
  );
}

export function getV2LogsId2Response200ImageUrlFromJSON(
  jsonString: string,
): SafeParseResult<GetV2LogsId2Response200ImageUrl, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetV2LogsId2Response200ImageUrl$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetV2LogsId2Response200ImageUrl' from JSON`,
  );
}

/** @internal */
export const GetV2LogsId2Response2002$inboundSchema: z.ZodType<
  GetV2LogsId2Response2002,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: GetV2LogsId2Response200ApplicationJSONResponseBody4Type$inboundSchema,
  image_url: z.lazy(() => GetV2LogsId2Response200ImageUrl$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "image_url": "imageUrl",
  });
});

/** @internal */
export type GetV2LogsId2Response2002$Outbound = {
  type: string;
  image_url: GetV2LogsId2Response200ImageUrl$Outbound;
};

/** @internal */
export const GetV2LogsId2Response2002$outboundSchema: z.ZodType<
  GetV2LogsId2Response2002$Outbound,
  z.ZodTypeDef,
  GetV2LogsId2Response2002
> = z.object({
  type: GetV2LogsId2Response200ApplicationJSONResponseBody4Type$outboundSchema,
  imageUrl: z.lazy(() => GetV2LogsId2Response200ImageUrl$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    imageUrl: "image_url",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsId2Response2002$ {
  /** @deprecated use `GetV2LogsId2Response2002$inboundSchema` instead. */
  export const inboundSchema = GetV2LogsId2Response2002$inboundSchema;
  /** @deprecated use `GetV2LogsId2Response2002$outboundSchema` instead. */
  export const outboundSchema = GetV2LogsId2Response2002$outboundSchema;
  /** @deprecated use `GetV2LogsId2Response2002$Outbound` instead. */
  export type Outbound = GetV2LogsId2Response2002$Outbound;
}

export function getV2LogsId2Response2002ToJSON(
  getV2LogsId2Response2002: GetV2LogsId2Response2002,
): string {
  return JSON.stringify(
    GetV2LogsId2Response2002$outboundSchema.parse(getV2LogsId2Response2002),
  );
}

export function getV2LogsId2Response2002FromJSON(
  jsonString: string,
): SafeParseResult<GetV2LogsId2Response2002, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetV2LogsId2Response2002$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetV2LogsId2Response2002' from JSON`,
  );
}

/** @internal */
export const GetV2LogsId2Response200ApplicationJSONResponseBodyType$inboundSchema:
  z.ZodNativeEnum<
    typeof GetV2LogsId2Response200ApplicationJSONResponseBodyType
  > = z.nativeEnum(GetV2LogsId2Response200ApplicationJSONResponseBodyType);

/** @internal */
export const GetV2LogsId2Response200ApplicationJSONResponseBodyType$outboundSchema:
  z.ZodNativeEnum<
    typeof GetV2LogsId2Response200ApplicationJSONResponseBodyType
  > = GetV2LogsId2Response200ApplicationJSONResponseBodyType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsId2Response200ApplicationJSONResponseBodyType$ {
  /** @deprecated use `GetV2LogsId2Response200ApplicationJSONResponseBodyType$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsId2Response200ApplicationJSONResponseBodyType$inboundSchema;
  /** @deprecated use `GetV2LogsId2Response200ApplicationJSONResponseBodyType$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsId2Response200ApplicationJSONResponseBodyType$outboundSchema;
}

/** @internal */
export const GetV2LogsId2Response2001$inboundSchema: z.ZodType<
  GetV2LogsId2Response2001,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: GetV2LogsId2Response200ApplicationJSONResponseBodyType$inboundSchema,
  text: z.string(),
});

/** @internal */
export type GetV2LogsId2Response2001$Outbound = {
  type: string;
  text: string;
};

/** @internal */
export const GetV2LogsId2Response2001$outboundSchema: z.ZodType<
  GetV2LogsId2Response2001$Outbound,
  z.ZodTypeDef,
  GetV2LogsId2Response2001
> = z.object({
  type: GetV2LogsId2Response200ApplicationJSONResponseBodyType$outboundSchema,
  text: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsId2Response2001$ {
  /** @deprecated use `GetV2LogsId2Response2001$inboundSchema` instead. */
  export const inboundSchema = GetV2LogsId2Response2001$inboundSchema;
  /** @deprecated use `GetV2LogsId2Response2001$outboundSchema` instead. */
  export const outboundSchema = GetV2LogsId2Response2001$outboundSchema;
  /** @deprecated use `GetV2LogsId2Response2001$Outbound` instead. */
  export type Outbound = GetV2LogsId2Response2001$Outbound;
}

export function getV2LogsId2Response2001ToJSON(
  getV2LogsId2Response2001: GetV2LogsId2Response2001,
): string {
  return JSON.stringify(
    GetV2LogsId2Response2001$outboundSchema.parse(getV2LogsId2Response2001),
  );
}

export function getV2LogsId2Response2001FromJSON(
  jsonString: string,
): SafeParseResult<GetV2LogsId2Response2001, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetV2LogsId2Response2001$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetV2LogsId2Response2001' from JSON`,
  );
}

/** @internal */
export const GetV2LogsIdContentResponse2002$inboundSchema: z.ZodType<
  GetV2LogsIdContentResponse2002,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => GetV2LogsId2Response2001$inboundSchema),
  z.lazy(() => GetV2LogsId2Response2002$inboundSchema),
]);

/** @internal */
export type GetV2LogsIdContentResponse2002$Outbound =
  | GetV2LogsId2Response2001$Outbound
  | GetV2LogsId2Response2002$Outbound;

/** @internal */
export const GetV2LogsIdContentResponse2002$outboundSchema: z.ZodType<
  GetV2LogsIdContentResponse2002$Outbound,
  z.ZodTypeDef,
  GetV2LogsIdContentResponse2002
> = z.union([
  z.lazy(() => GetV2LogsId2Response2001$outboundSchema),
  z.lazy(() => GetV2LogsId2Response2002$outboundSchema),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdContentResponse2002$ {
  /** @deprecated use `GetV2LogsIdContentResponse2002$inboundSchema` instead. */
  export const inboundSchema = GetV2LogsIdContentResponse2002$inboundSchema;
  /** @deprecated use `GetV2LogsIdContentResponse2002$outboundSchema` instead. */
  export const outboundSchema = GetV2LogsIdContentResponse2002$outboundSchema;
  /** @deprecated use `GetV2LogsIdContentResponse2002$Outbound` instead. */
  export type Outbound = GetV2LogsIdContentResponse2002$Outbound;
}

export function getV2LogsIdContentResponse2002ToJSON(
  getV2LogsIdContentResponse2002: GetV2LogsIdContentResponse2002,
): string {
  return JSON.stringify(
    GetV2LogsIdContentResponse2002$outboundSchema.parse(
      getV2LogsIdContentResponse2002,
    ),
  );
}

export function getV2LogsIdContentResponse2002FromJSON(
  jsonString: string,
): SafeParseResult<GetV2LogsIdContentResponse2002, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetV2LogsIdContentResponse2002$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetV2LogsIdContentResponse2002' from JSON`,
  );
}

/** @internal */
export const GetV2LogsIdResponseBodyResponseContent$inboundSchema: z.ZodType<
  GetV2LogsIdResponseBodyResponseContent,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.string(),
  z.array(z.union([
    z.lazy(() => GetV2LogsId2Response2001$inboundSchema),
    z.lazy(() => GetV2LogsId2Response2002$inboundSchema),
  ])),
]);

/** @internal */
export type GetV2LogsIdResponseBodyResponseContent$Outbound =
  | string
  | Array<
    GetV2LogsId2Response2001$Outbound | GetV2LogsId2Response2002$Outbound
  >;

/** @internal */
export const GetV2LogsIdResponseBodyResponseContent$outboundSchema: z.ZodType<
  GetV2LogsIdResponseBodyResponseContent$Outbound,
  z.ZodTypeDef,
  GetV2LogsIdResponseBodyResponseContent
> = z.union([
  z.string(),
  z.array(z.union([
    z.lazy(() => GetV2LogsId2Response2001$outboundSchema),
    z.lazy(() => GetV2LogsId2Response2002$outboundSchema),
  ])),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdResponseBodyResponseContent$ {
  /** @deprecated use `GetV2LogsIdResponseBodyResponseContent$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsIdResponseBodyResponseContent$inboundSchema;
  /** @deprecated use `GetV2LogsIdResponseBodyResponseContent$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdResponseBodyResponseContent$outboundSchema;
  /** @deprecated use `GetV2LogsIdResponseBodyResponseContent$Outbound` instead. */
  export type Outbound = GetV2LogsIdResponseBodyResponseContent$Outbound;
}

export function getV2LogsIdResponseBodyResponseContentToJSON(
  getV2LogsIdResponseBodyResponseContent:
    GetV2LogsIdResponseBodyResponseContent,
): string {
  return JSON.stringify(
    GetV2LogsIdResponseBodyResponseContent$outboundSchema.parse(
      getV2LogsIdResponseBodyResponseContent,
    ),
  );
}

export function getV2LogsIdResponseBodyResponseContentFromJSON(
  jsonString: string,
): SafeParseResult<GetV2LogsIdResponseBodyResponseContent, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      GetV2LogsIdResponseBodyResponseContent$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetV2LogsIdResponseBodyResponseContent' from JSON`,
  );
}

/** @internal */
export const GetV2LogsIdResponseBodyResponse200ApplicationJson4Type$inboundSchema:
  z.ZodNativeEnum<
    typeof GetV2LogsIdResponseBodyResponse200ApplicationJson4Type
  > = z.nativeEnum(GetV2LogsIdResponseBodyResponse200ApplicationJson4Type);

/** @internal */
export const GetV2LogsIdResponseBodyResponse200ApplicationJson4Type$outboundSchema:
  z.ZodNativeEnum<
    typeof GetV2LogsIdResponseBodyResponse200ApplicationJson4Type
  > = GetV2LogsIdResponseBodyResponse200ApplicationJson4Type$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdResponseBodyResponse200ApplicationJson4Type$ {
  /** @deprecated use `GetV2LogsIdResponseBodyResponse200ApplicationJson4Type$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsIdResponseBodyResponse200ApplicationJson4Type$inboundSchema;
  /** @deprecated use `GetV2LogsIdResponseBodyResponse200ApplicationJson4Type$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdResponseBodyResponse200ApplicationJson4Type$outboundSchema;
}

/** @internal */
export const GetV2LogsIdResponseBodyResponse200ApplicationJSONFunction$inboundSchema:
  z.ZodType<
    GetV2LogsIdResponseBodyResponse200ApplicationJSONFunction,
    z.ZodTypeDef,
    unknown
  > = z.object({
    name: z.string(),
    arguments: z.string(),
  });

/** @internal */
export type GetV2LogsIdResponseBodyResponse200ApplicationJSONFunction$Outbound =
  {
    name: string;
    arguments: string;
  };

/** @internal */
export const GetV2LogsIdResponseBodyResponse200ApplicationJSONFunction$outboundSchema:
  z.ZodType<
    GetV2LogsIdResponseBodyResponse200ApplicationJSONFunction$Outbound,
    z.ZodTypeDef,
    GetV2LogsIdResponseBodyResponse200ApplicationJSONFunction
  > = z.object({
    name: z.string(),
    arguments: z.string(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdResponseBodyResponse200ApplicationJSONFunction$ {
  /** @deprecated use `GetV2LogsIdResponseBodyResponse200ApplicationJSONFunction$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsIdResponseBodyResponse200ApplicationJSONFunction$inboundSchema;
  /** @deprecated use `GetV2LogsIdResponseBodyResponse200ApplicationJSONFunction$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdResponseBodyResponse200ApplicationJSONFunction$outboundSchema;
  /** @deprecated use `GetV2LogsIdResponseBodyResponse200ApplicationJSONFunction$Outbound` instead. */
  export type Outbound =
    GetV2LogsIdResponseBodyResponse200ApplicationJSONFunction$Outbound;
}

export function getV2LogsIdResponseBodyResponse200ApplicationJSONFunctionToJSON(
  getV2LogsIdResponseBodyResponse200ApplicationJSONFunction:
    GetV2LogsIdResponseBodyResponse200ApplicationJSONFunction,
): string {
  return JSON.stringify(
    GetV2LogsIdResponseBodyResponse200ApplicationJSONFunction$outboundSchema
      .parse(getV2LogsIdResponseBodyResponse200ApplicationJSONFunction),
  );
}

export function getV2LogsIdResponseBodyResponse200ApplicationJSONFunctionFromJSON(
  jsonString: string,
): SafeParseResult<
  GetV2LogsIdResponseBodyResponse200ApplicationJSONFunction,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetV2LogsIdResponseBodyResponse200ApplicationJSONFunction$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'GetV2LogsIdResponseBodyResponse200ApplicationJSONFunction' from JSON`,
  );
}

/** @internal */
export const GetV2LogsIdResponseBodyResponseToolCalls$inboundSchema: z.ZodType<
  GetV2LogsIdResponseBodyResponseToolCalls,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string().optional(),
  index: z.number().optional(),
  type: GetV2LogsIdResponseBodyResponse200ApplicationJson4Type$inboundSchema,
  function: z.lazy(() =>
    GetV2LogsIdResponseBodyResponse200ApplicationJSONFunction$inboundSchema
  ),
});

/** @internal */
export type GetV2LogsIdResponseBodyResponseToolCalls$Outbound = {
  id?: string | undefined;
  index?: number | undefined;
  type: string;
  function: GetV2LogsIdResponseBodyResponse200ApplicationJSONFunction$Outbound;
};

/** @internal */
export const GetV2LogsIdResponseBodyResponseToolCalls$outboundSchema: z.ZodType<
  GetV2LogsIdResponseBodyResponseToolCalls$Outbound,
  z.ZodTypeDef,
  GetV2LogsIdResponseBodyResponseToolCalls
> = z.object({
  id: z.string().optional(),
  index: z.number().optional(),
  type: GetV2LogsIdResponseBodyResponse200ApplicationJson4Type$outboundSchema,
  function: z.lazy(() =>
    GetV2LogsIdResponseBodyResponse200ApplicationJSONFunction$outboundSchema
  ),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdResponseBodyResponseToolCalls$ {
  /** @deprecated use `GetV2LogsIdResponseBodyResponseToolCalls$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsIdResponseBodyResponseToolCalls$inboundSchema;
  /** @deprecated use `GetV2LogsIdResponseBodyResponseToolCalls$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdResponseBodyResponseToolCalls$outboundSchema;
  /** @deprecated use `GetV2LogsIdResponseBodyResponseToolCalls$Outbound` instead. */
  export type Outbound = GetV2LogsIdResponseBodyResponseToolCalls$Outbound;
}

export function getV2LogsIdResponseBodyResponseToolCallsToJSON(
  getV2LogsIdResponseBodyResponseToolCalls:
    GetV2LogsIdResponseBodyResponseToolCalls,
): string {
  return JSON.stringify(
    GetV2LogsIdResponseBodyResponseToolCalls$outboundSchema.parse(
      getV2LogsIdResponseBodyResponseToolCalls,
    ),
  );
}

export function getV2LogsIdResponseBodyResponseToolCallsFromJSON(
  jsonString: string,
): SafeParseResult<
  GetV2LogsIdResponseBodyResponseToolCalls,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetV2LogsIdResponseBodyResponseToolCalls$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'GetV2LogsIdResponseBodyResponseToolCalls' from JSON`,
  );
}

/** @internal */
export const GetV2LogsIdResponseBodyResponseMessages$inboundSchema: z.ZodType<
  GetV2LogsIdResponseBodyResponseMessages,
  z.ZodTypeDef,
  unknown
> = z.object({
  role: GetV2LogsIdResponseBodyResponseRole$inboundSchema,
  content: z.union([
    z.string(),
    z.array(z.union([
      z.lazy(() => GetV2LogsId2Response2001$inboundSchema),
      z.lazy(() => GetV2LogsId2Response2002$inboundSchema),
    ])),
  ]),
  tool_calls: z.array(
    z.lazy(() => GetV2LogsIdResponseBodyResponseToolCalls$inboundSchema),
  ).optional(),
  id: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "tool_calls": "toolCalls",
  });
});

/** @internal */
export type GetV2LogsIdResponseBodyResponseMessages$Outbound = {
  role: string;
  content:
    | string
    | Array<
      GetV2LogsId2Response2001$Outbound | GetV2LogsId2Response2002$Outbound
    >;
  tool_calls?:
    | Array<GetV2LogsIdResponseBodyResponseToolCalls$Outbound>
    | undefined;
  id?: string | undefined;
};

/** @internal */
export const GetV2LogsIdResponseBodyResponseMessages$outboundSchema: z.ZodType<
  GetV2LogsIdResponseBodyResponseMessages$Outbound,
  z.ZodTypeDef,
  GetV2LogsIdResponseBodyResponseMessages
> = z.object({
  role: GetV2LogsIdResponseBodyResponseRole$outboundSchema,
  content: z.union([
    z.string(),
    z.array(z.union([
      z.lazy(() => GetV2LogsId2Response2001$outboundSchema),
      z.lazy(() => GetV2LogsId2Response2002$outboundSchema),
    ])),
  ]),
  toolCalls: z.array(
    z.lazy(() => GetV2LogsIdResponseBodyResponseToolCalls$outboundSchema),
  ).optional(),
  id: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    toolCalls: "tool_calls",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdResponseBodyResponseMessages$ {
  /** @deprecated use `GetV2LogsIdResponseBodyResponseMessages$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsIdResponseBodyResponseMessages$inboundSchema;
  /** @deprecated use `GetV2LogsIdResponseBodyResponseMessages$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdResponseBodyResponseMessages$outboundSchema;
  /** @deprecated use `GetV2LogsIdResponseBodyResponseMessages$Outbound` instead. */
  export type Outbound = GetV2LogsIdResponseBodyResponseMessages$Outbound;
}

export function getV2LogsIdResponseBodyResponseMessagesToJSON(
  getV2LogsIdResponseBodyResponseMessages:
    GetV2LogsIdResponseBodyResponseMessages,
): string {
  return JSON.stringify(
    GetV2LogsIdResponseBodyResponseMessages$outboundSchema.parse(
      getV2LogsIdResponseBodyResponseMessages,
    ),
  );
}

export function getV2LogsIdResponseBodyResponseMessagesFromJSON(
  jsonString: string,
): SafeParseResult<
  GetV2LogsIdResponseBodyResponseMessages,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetV2LogsIdResponseBodyResponseMessages$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'GetV2LogsIdResponseBodyResponseMessages' from JSON`,
  );
}

/** @internal */
export const GetV2LogsIdResponseBodyResponsePromptConfig$inboundSchema:
  z.ZodType<
    GetV2LogsIdResponseBodyResponsePromptConfig,
    z.ZodTypeDef,
    unknown
  > = z.object({
    stream: z.boolean(),
    model: z.string(),
    model_db_id: z.string(),
    model_type: GetV2LogsIdResponseBodyResponseModelType$inboundSchema,
    model_parameters: z.lazy(() =>
      GetV2LogsIdResponseBodyResponseModelParameters$inboundSchema
    ),
    provider: GetV2LogsIdResponseBodyResponseProvider$inboundSchema,
    messages: z.array(
      z.lazy(() => GetV2LogsIdResponseBodyResponseMessages$inboundSchema),
    ),
    integration_id: z.nullable(z.string()).optional(),
    version: z.string().optional(),
  }).transform((v) => {
    return remap$(v, {
      "model_db_id": "modelDbId",
      "model_type": "modelType",
      "model_parameters": "modelParameters",
      "integration_id": "integrationId",
    });
  });

/** @internal */
export type GetV2LogsIdResponseBodyResponsePromptConfig$Outbound = {
  stream: boolean;
  model: string;
  model_db_id: string;
  model_type: string;
  model_parameters: GetV2LogsIdResponseBodyResponseModelParameters$Outbound;
  provider: string;
  messages: Array<GetV2LogsIdResponseBodyResponseMessages$Outbound>;
  integration_id?: string | null | undefined;
  version?: string | undefined;
};

/** @internal */
export const GetV2LogsIdResponseBodyResponsePromptConfig$outboundSchema:
  z.ZodType<
    GetV2LogsIdResponseBodyResponsePromptConfig$Outbound,
    z.ZodTypeDef,
    GetV2LogsIdResponseBodyResponsePromptConfig
  > = z.object({
    stream: z.boolean(),
    model: z.string(),
    modelDbId: z.string(),
    modelType: GetV2LogsIdResponseBodyResponseModelType$outboundSchema,
    modelParameters: z.lazy(() =>
      GetV2LogsIdResponseBodyResponseModelParameters$outboundSchema
    ),
    provider: GetV2LogsIdResponseBodyResponseProvider$outboundSchema,
    messages: z.array(
      z.lazy(() => GetV2LogsIdResponseBodyResponseMessages$outboundSchema),
    ),
    integrationId: z.nullable(z.string()).optional(),
    version: z.string().optional(),
  }).transform((v) => {
    return remap$(v, {
      modelDbId: "model_db_id",
      modelType: "model_type",
      modelParameters: "model_parameters",
      integrationId: "integration_id",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdResponseBodyResponsePromptConfig$ {
  /** @deprecated use `GetV2LogsIdResponseBodyResponsePromptConfig$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsIdResponseBodyResponsePromptConfig$inboundSchema;
  /** @deprecated use `GetV2LogsIdResponseBodyResponsePromptConfig$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdResponseBodyResponsePromptConfig$outboundSchema;
  /** @deprecated use `GetV2LogsIdResponseBodyResponsePromptConfig$Outbound` instead. */
  export type Outbound = GetV2LogsIdResponseBodyResponsePromptConfig$Outbound;
}

export function getV2LogsIdResponseBodyResponsePromptConfigToJSON(
  getV2LogsIdResponseBodyResponsePromptConfig:
    GetV2LogsIdResponseBodyResponsePromptConfig,
): string {
  return JSON.stringify(
    GetV2LogsIdResponseBodyResponsePromptConfig$outboundSchema.parse(
      getV2LogsIdResponseBodyResponsePromptConfig,
    ),
  );
}

export function getV2LogsIdResponseBodyResponsePromptConfigFromJSON(
  jsonString: string,
): SafeParseResult<
  GetV2LogsIdResponseBodyResponsePromptConfig,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetV2LogsIdResponseBodyResponsePromptConfig$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'GetV2LogsIdResponseBodyResponsePromptConfig' from JSON`,
  );
}

/** @internal */
export const GetV2LogsIdResponseBodyVariables$inboundSchema: z.ZodType<
  GetV2LogsIdResponseBodyVariables,
  z.ZodTypeDef,
  unknown
> = z.object({
  key: z.string(),
  value: z.any().optional(),
  is_pii: z.boolean().default(false),
}).transform((v) => {
  return remap$(v, {
    "is_pii": "isPii",
  });
});

/** @internal */
export type GetV2LogsIdResponseBodyVariables$Outbound = {
  key: string;
  value?: any | undefined;
  is_pii: boolean;
};

/** @internal */
export const GetV2LogsIdResponseBodyVariables$outboundSchema: z.ZodType<
  GetV2LogsIdResponseBodyVariables$Outbound,
  z.ZodTypeDef,
  GetV2LogsIdResponseBodyVariables
> = z.object({
  key: z.string(),
  value: z.any().optional(),
  isPii: z.boolean().default(false),
}).transform((v) => {
  return remap$(v, {
    isPii: "is_pii",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdResponseBodyVariables$ {
  /** @deprecated use `GetV2LogsIdResponseBodyVariables$inboundSchema` instead. */
  export const inboundSchema = GetV2LogsIdResponseBodyVariables$inboundSchema;
  /** @deprecated use `GetV2LogsIdResponseBodyVariables$outboundSchema` instead. */
  export const outboundSchema = GetV2LogsIdResponseBodyVariables$outboundSchema;
  /** @deprecated use `GetV2LogsIdResponseBodyVariables$Outbound` instead. */
  export type Outbound = GetV2LogsIdResponseBodyVariables$Outbound;
}

export function getV2LogsIdResponseBodyVariablesToJSON(
  getV2LogsIdResponseBodyVariables: GetV2LogsIdResponseBodyVariables,
): string {
  return JSON.stringify(
    GetV2LogsIdResponseBodyVariables$outboundSchema.parse(
      getV2LogsIdResponseBodyVariables,
    ),
  );
}

export function getV2LogsIdResponseBodyVariablesFromJSON(
  jsonString: string,
): SafeParseResult<GetV2LogsIdResponseBodyVariables, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetV2LogsIdResponseBodyVariables$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetV2LogsIdResponseBodyVariables' from JSON`,
  );
}

/** @internal */
export const GetV2LogsIdResponseBodyResponsePerformance$inboundSchema:
  z.ZodType<GetV2LogsIdResponseBodyResponsePerformance, z.ZodTypeDef, unknown> =
    z.object({
      latency: z.number(),
      first_time_to_token: z.nullable(z.number()).optional(),
      tokens_per_second: z.nullable(z.number()).optional(),
    }).transform((v) => {
      return remap$(v, {
        "first_time_to_token": "firstTimeToToken",
        "tokens_per_second": "tokensPerSecond",
      });
    });

/** @internal */
export type GetV2LogsIdResponseBodyResponsePerformance$Outbound = {
  latency: number;
  first_time_to_token?: number | null | undefined;
  tokens_per_second?: number | null | undefined;
};

/** @internal */
export const GetV2LogsIdResponseBodyResponsePerformance$outboundSchema:
  z.ZodType<
    GetV2LogsIdResponseBodyResponsePerformance$Outbound,
    z.ZodTypeDef,
    GetV2LogsIdResponseBodyResponsePerformance
  > = z.object({
    latency: z.number(),
    firstTimeToToken: z.nullable(z.number()).optional(),
    tokensPerSecond: z.nullable(z.number()).optional(),
  }).transform((v) => {
    return remap$(v, {
      firstTimeToToken: "first_time_to_token",
      tokensPerSecond: "tokens_per_second",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdResponseBodyResponsePerformance$ {
  /** @deprecated use `GetV2LogsIdResponseBodyResponsePerformance$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsIdResponseBodyResponsePerformance$inboundSchema;
  /** @deprecated use `GetV2LogsIdResponseBodyResponsePerformance$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdResponseBodyResponsePerformance$outboundSchema;
  /** @deprecated use `GetV2LogsIdResponseBodyResponsePerformance$Outbound` instead. */
  export type Outbound = GetV2LogsIdResponseBodyResponsePerformance$Outbound;
}

export function getV2LogsIdResponseBodyResponsePerformanceToJSON(
  getV2LogsIdResponseBodyResponsePerformance:
    GetV2LogsIdResponseBodyResponsePerformance,
): string {
  return JSON.stringify(
    GetV2LogsIdResponseBodyResponsePerformance$outboundSchema.parse(
      getV2LogsIdResponseBodyResponsePerformance,
    ),
  );
}

export function getV2LogsIdResponseBodyResponsePerformanceFromJSON(
  jsonString: string,
): SafeParseResult<
  GetV2LogsIdResponseBodyResponsePerformance,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetV2LogsIdResponseBodyResponsePerformance$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'GetV2LogsIdResponseBodyResponsePerformance' from JSON`,
  );
}

/** @internal */
export const GetV2LogsIdResponseBodyPromptTokensDetails$inboundSchema:
  z.ZodType<GetV2LogsIdResponseBodyPromptTokensDetails, z.ZodTypeDef, unknown> =
    z.object({
      cached_tokens: z.number().optional(),
    }).transform((v) => {
      return remap$(v, {
        "cached_tokens": "cachedTokens",
      });
    });

/** @internal */
export type GetV2LogsIdResponseBodyPromptTokensDetails$Outbound = {
  cached_tokens?: number | undefined;
};

/** @internal */
export const GetV2LogsIdResponseBodyPromptTokensDetails$outboundSchema:
  z.ZodType<
    GetV2LogsIdResponseBodyPromptTokensDetails$Outbound,
    z.ZodTypeDef,
    GetV2LogsIdResponseBodyPromptTokensDetails
  > = z.object({
    cachedTokens: z.number().optional(),
  }).transform((v) => {
    return remap$(v, {
      cachedTokens: "cached_tokens",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdResponseBodyPromptTokensDetails$ {
  /** @deprecated use `GetV2LogsIdResponseBodyPromptTokensDetails$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsIdResponseBodyPromptTokensDetails$inboundSchema;
  /** @deprecated use `GetV2LogsIdResponseBodyPromptTokensDetails$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdResponseBodyPromptTokensDetails$outboundSchema;
  /** @deprecated use `GetV2LogsIdResponseBodyPromptTokensDetails$Outbound` instead. */
  export type Outbound = GetV2LogsIdResponseBodyPromptTokensDetails$Outbound;
}

export function getV2LogsIdResponseBodyPromptTokensDetailsToJSON(
  getV2LogsIdResponseBodyPromptTokensDetails:
    GetV2LogsIdResponseBodyPromptTokensDetails,
): string {
  return JSON.stringify(
    GetV2LogsIdResponseBodyPromptTokensDetails$outboundSchema.parse(
      getV2LogsIdResponseBodyPromptTokensDetails,
    ),
  );
}

export function getV2LogsIdResponseBodyPromptTokensDetailsFromJSON(
  jsonString: string,
): SafeParseResult<
  GetV2LogsIdResponseBodyPromptTokensDetails,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetV2LogsIdResponseBodyPromptTokensDetails$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'GetV2LogsIdResponseBodyPromptTokensDetails' from JSON`,
  );
}

/** @internal */
export const GetV2LogsIdResponseBodyCompletionTokensDetails$inboundSchema:
  z.ZodType<
    GetV2LogsIdResponseBodyCompletionTokensDetails,
    z.ZodTypeDef,
    unknown
  > = z.object({
    reasoning_tokens: z.number().optional(),
  }).transform((v) => {
    return remap$(v, {
      "reasoning_tokens": "reasoningTokens",
    });
  });

/** @internal */
export type GetV2LogsIdResponseBodyCompletionTokensDetails$Outbound = {
  reasoning_tokens?: number | undefined;
};

/** @internal */
export const GetV2LogsIdResponseBodyCompletionTokensDetails$outboundSchema:
  z.ZodType<
    GetV2LogsIdResponseBodyCompletionTokensDetails$Outbound,
    z.ZodTypeDef,
    GetV2LogsIdResponseBodyCompletionTokensDetails
  > = z.object({
    reasoningTokens: z.number().optional(),
  }).transform((v) => {
    return remap$(v, {
      reasoningTokens: "reasoning_tokens",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdResponseBodyCompletionTokensDetails$ {
  /** @deprecated use `GetV2LogsIdResponseBodyCompletionTokensDetails$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsIdResponseBodyCompletionTokensDetails$inboundSchema;
  /** @deprecated use `GetV2LogsIdResponseBodyCompletionTokensDetails$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdResponseBodyCompletionTokensDetails$outboundSchema;
  /** @deprecated use `GetV2LogsIdResponseBodyCompletionTokensDetails$Outbound` instead. */
  export type Outbound =
    GetV2LogsIdResponseBodyCompletionTokensDetails$Outbound;
}

export function getV2LogsIdResponseBodyCompletionTokensDetailsToJSON(
  getV2LogsIdResponseBodyCompletionTokensDetails:
    GetV2LogsIdResponseBodyCompletionTokensDetails,
): string {
  return JSON.stringify(
    GetV2LogsIdResponseBodyCompletionTokensDetails$outboundSchema.parse(
      getV2LogsIdResponseBodyCompletionTokensDetails,
    ),
  );
}

export function getV2LogsIdResponseBodyCompletionTokensDetailsFromJSON(
  jsonString: string,
): SafeParseResult<
  GetV2LogsIdResponseBodyCompletionTokensDetails,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetV2LogsIdResponseBodyCompletionTokensDetails$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'GetV2LogsIdResponseBodyCompletionTokensDetails' from JSON`,
  );
}

/** @internal */
export const GetV2LogsIdResponseBodyResponseUsage$inboundSchema: z.ZodType<
  GetV2LogsIdResponseBodyResponseUsage,
  z.ZodTypeDef,
  unknown
> = z.object({
  total_tokens: z.number().optional(),
  prompt_tokens: z.number().optional(),
  completion_tokens: z.number().optional(),
  prompt_tokens_details: z.lazy(() =>
    GetV2LogsIdResponseBodyPromptTokensDetails$inboundSchema
  ).optional(),
  completion_tokens_details: z.lazy(() =>
    GetV2LogsIdResponseBodyCompletionTokensDetails$inboundSchema
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    "total_tokens": "totalTokens",
    "prompt_tokens": "promptTokens",
    "completion_tokens": "completionTokens",
    "prompt_tokens_details": "promptTokensDetails",
    "completion_tokens_details": "completionTokensDetails",
  });
});

/** @internal */
export type GetV2LogsIdResponseBodyResponseUsage$Outbound = {
  total_tokens?: number | undefined;
  prompt_tokens?: number | undefined;
  completion_tokens?: number | undefined;
  prompt_tokens_details?:
    | GetV2LogsIdResponseBodyPromptTokensDetails$Outbound
    | undefined;
  completion_tokens_details?:
    | GetV2LogsIdResponseBodyCompletionTokensDetails$Outbound
    | undefined;
};

/** @internal */
export const GetV2LogsIdResponseBodyResponseUsage$outboundSchema: z.ZodType<
  GetV2LogsIdResponseBodyResponseUsage$Outbound,
  z.ZodTypeDef,
  GetV2LogsIdResponseBodyResponseUsage
> = z.object({
  totalTokens: z.number().optional(),
  promptTokens: z.number().optional(),
  completionTokens: z.number().optional(),
  promptTokensDetails: z.lazy(() =>
    GetV2LogsIdResponseBodyPromptTokensDetails$outboundSchema
  ).optional(),
  completionTokensDetails: z.lazy(() =>
    GetV2LogsIdResponseBodyCompletionTokensDetails$outboundSchema
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    totalTokens: "total_tokens",
    promptTokens: "prompt_tokens",
    completionTokens: "completion_tokens",
    promptTokensDetails: "prompt_tokens_details",
    completionTokensDetails: "completion_tokens_details",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdResponseBodyResponseUsage$ {
  /** @deprecated use `GetV2LogsIdResponseBodyResponseUsage$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsIdResponseBodyResponseUsage$inboundSchema;
  /** @deprecated use `GetV2LogsIdResponseBodyResponseUsage$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdResponseBodyResponseUsage$outboundSchema;
  /** @deprecated use `GetV2LogsIdResponseBodyResponseUsage$Outbound` instead. */
  export type Outbound = GetV2LogsIdResponseBodyResponseUsage$Outbound;
}

export function getV2LogsIdResponseBodyResponseUsageToJSON(
  getV2LogsIdResponseBodyResponseUsage: GetV2LogsIdResponseBodyResponseUsage,
): string {
  return JSON.stringify(
    GetV2LogsIdResponseBodyResponseUsage$outboundSchema.parse(
      getV2LogsIdResponseBodyResponseUsage,
    ),
  );
}

export function getV2LogsIdResponseBodyResponseUsageFromJSON(
  jsonString: string,
): SafeParseResult<GetV2LogsIdResponseBodyResponseUsage, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      GetV2LogsIdResponseBodyResponseUsage$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetV2LogsIdResponseBodyResponseUsage' from JSON`,
  );
}

/** @internal */
export const GetV2LogsIdResponseBodyBilling$inboundSchema: z.ZodType<
  GetV2LogsIdResponseBodyBilling,
  z.ZodTypeDef,
  unknown
> = z.object({
  total_cost: z.nullable(z.number()).optional(),
  input_cost: z.nullable(z.number()).optional(),
  output_cost: z.nullable(z.number()).optional(),
  billable: z.boolean(),
}).transform((v) => {
  return remap$(v, {
    "total_cost": "totalCost",
    "input_cost": "inputCost",
    "output_cost": "outputCost",
  });
});

/** @internal */
export type GetV2LogsIdResponseBodyBilling$Outbound = {
  total_cost?: number | null | undefined;
  input_cost?: number | null | undefined;
  output_cost?: number | null | undefined;
  billable: boolean;
};

/** @internal */
export const GetV2LogsIdResponseBodyBilling$outboundSchema: z.ZodType<
  GetV2LogsIdResponseBodyBilling$Outbound,
  z.ZodTypeDef,
  GetV2LogsIdResponseBodyBilling
> = z.object({
  totalCost: z.nullable(z.number()).optional(),
  inputCost: z.nullable(z.number()).optional(),
  outputCost: z.nullable(z.number()).optional(),
  billable: z.boolean(),
}).transform((v) => {
  return remap$(v, {
    totalCost: "total_cost",
    inputCost: "input_cost",
    outputCost: "output_cost",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdResponseBodyBilling$ {
  /** @deprecated use `GetV2LogsIdResponseBodyBilling$inboundSchema` instead. */
  export const inboundSchema = GetV2LogsIdResponseBodyBilling$inboundSchema;
  /** @deprecated use `GetV2LogsIdResponseBodyBilling$outboundSchema` instead. */
  export const outboundSchema = GetV2LogsIdResponseBodyBilling$outboundSchema;
  /** @deprecated use `GetV2LogsIdResponseBodyBilling$Outbound` instead. */
  export type Outbound = GetV2LogsIdResponseBodyBilling$Outbound;
}

export function getV2LogsIdResponseBodyBillingToJSON(
  getV2LogsIdResponseBodyBilling: GetV2LogsIdResponseBodyBilling,
): string {
  return JSON.stringify(
    GetV2LogsIdResponseBodyBilling$outboundSchema.parse(
      getV2LogsIdResponseBodyBilling,
    ),
  );
}

export function getV2LogsIdResponseBodyBillingFromJSON(
  jsonString: string,
): SafeParseResult<GetV2LogsIdResponseBodyBilling, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetV2LogsIdResponseBodyBilling$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetV2LogsIdResponseBodyBilling' from JSON`,
  );
}

/** @internal */
export const GetV2LogsIdResponseBodyResponse200Metadata$inboundSchema:
  z.ZodType<GetV2LogsIdResponseBodyResponse200Metadata, z.ZodTypeDef, unknown> =
    z.object({
      datasource_id: z.string(),
      chunk_id: z.string(),
      file_name: z.string(),
      page_number: z.nullable(z.number()).optional(),
      file_type: z.string(),
    }).transform((v) => {
      return remap$(v, {
        "datasource_id": "datasourceId",
        "chunk_id": "chunkId",
        "file_name": "fileName",
        "page_number": "pageNumber",
        "file_type": "fileType",
      });
    });

/** @internal */
export type GetV2LogsIdResponseBodyResponse200Metadata$Outbound = {
  datasource_id: string;
  chunk_id: string;
  file_name: string;
  page_number?: number | null | undefined;
  file_type: string;
};

/** @internal */
export const GetV2LogsIdResponseBodyResponse200Metadata$outboundSchema:
  z.ZodType<
    GetV2LogsIdResponseBodyResponse200Metadata$Outbound,
    z.ZodTypeDef,
    GetV2LogsIdResponseBodyResponse200Metadata
  > = z.object({
    datasourceId: z.string(),
    chunkId: z.string(),
    fileName: z.string(),
    pageNumber: z.nullable(z.number()).optional(),
    fileType: z.string(),
  }).transform((v) => {
    return remap$(v, {
      datasourceId: "datasource_id",
      chunkId: "chunk_id",
      fileName: "file_name",
      pageNumber: "page_number",
      fileType: "file_type",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdResponseBodyResponse200Metadata$ {
  /** @deprecated use `GetV2LogsIdResponseBodyResponse200Metadata$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsIdResponseBodyResponse200Metadata$inboundSchema;
  /** @deprecated use `GetV2LogsIdResponseBodyResponse200Metadata$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdResponseBodyResponse200Metadata$outboundSchema;
  /** @deprecated use `GetV2LogsIdResponseBodyResponse200Metadata$Outbound` instead. */
  export type Outbound = GetV2LogsIdResponseBodyResponse200Metadata$Outbound;
}

export function getV2LogsIdResponseBodyResponse200MetadataToJSON(
  getV2LogsIdResponseBodyResponse200Metadata:
    GetV2LogsIdResponseBodyResponse200Metadata,
): string {
  return JSON.stringify(
    GetV2LogsIdResponseBodyResponse200Metadata$outboundSchema.parse(
      getV2LogsIdResponseBodyResponse200Metadata,
    ),
  );
}

export function getV2LogsIdResponseBodyResponse200MetadataFromJSON(
  jsonString: string,
): SafeParseResult<
  GetV2LogsIdResponseBodyResponse200Metadata,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetV2LogsIdResponseBodyResponse200Metadata$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'GetV2LogsIdResponseBodyResponse200Metadata' from JSON`,
  );
}

/** @internal */
export const GetV2LogsIdResponseBodyDocuments$inboundSchema: z.ZodType<
  GetV2LogsIdResponseBodyDocuments,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  text: z.string(),
  metadata: z.lazy(() =>
    GetV2LogsIdResponseBodyResponse200Metadata$inboundSchema
  ),
  score: z.number(),
  rerank_score: z.number().optional(),
}).transform((v) => {
  return remap$(v, {
    "rerank_score": "rerankScore",
  });
});

/** @internal */
export type GetV2LogsIdResponseBodyDocuments$Outbound = {
  id: string;
  text: string;
  metadata: GetV2LogsIdResponseBodyResponse200Metadata$Outbound;
  score: number;
  rerank_score?: number | undefined;
};

/** @internal */
export const GetV2LogsIdResponseBodyDocuments$outboundSchema: z.ZodType<
  GetV2LogsIdResponseBodyDocuments$Outbound,
  z.ZodTypeDef,
  GetV2LogsIdResponseBodyDocuments
> = z.object({
  id: z.string(),
  text: z.string(),
  metadata: z.lazy(() =>
    GetV2LogsIdResponseBodyResponse200Metadata$outboundSchema
  ),
  score: z.number(),
  rerankScore: z.number().optional(),
}).transform((v) => {
  return remap$(v, {
    rerankScore: "rerank_score",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdResponseBodyDocuments$ {
  /** @deprecated use `GetV2LogsIdResponseBodyDocuments$inboundSchema` instead. */
  export const inboundSchema = GetV2LogsIdResponseBodyDocuments$inboundSchema;
  /** @deprecated use `GetV2LogsIdResponseBodyDocuments$outboundSchema` instead. */
  export const outboundSchema = GetV2LogsIdResponseBodyDocuments$outboundSchema;
  /** @deprecated use `GetV2LogsIdResponseBodyDocuments$Outbound` instead. */
  export type Outbound = GetV2LogsIdResponseBodyDocuments$Outbound;
}

export function getV2LogsIdResponseBodyDocumentsToJSON(
  getV2LogsIdResponseBodyDocuments: GetV2LogsIdResponseBodyDocuments,
): string {
  return JSON.stringify(
    GetV2LogsIdResponseBodyDocuments$outboundSchema.parse(
      getV2LogsIdResponseBodyDocuments,
    ),
  );
}

export function getV2LogsIdResponseBodyDocumentsFromJSON(
  jsonString: string,
): SafeParseResult<GetV2LogsIdResponseBodyDocuments, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetV2LogsIdResponseBodyDocuments$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetV2LogsIdResponseBodyDocuments' from JSON`,
  );
}

/** @internal */
export const GetV2LogsIdResponseBodyResponseRetrievals$inboundSchema: z.ZodType<
  GetV2LogsIdResponseBodyResponseRetrievals,
  z.ZodTypeDef,
  unknown
> = z.object({
  knowledge_id: z.string(),
  documents: z.array(
    z.lazy(() => GetV2LogsIdResponseBodyDocuments$inboundSchema),
  ),
  knowledge_key: z.string(),
  query: z.string(),
}).transform((v) => {
  return remap$(v, {
    "knowledge_id": "knowledgeId",
    "knowledge_key": "knowledgeKey",
  });
});

/** @internal */
export type GetV2LogsIdResponseBodyResponseRetrievals$Outbound = {
  knowledge_id: string;
  documents: Array<GetV2LogsIdResponseBodyDocuments$Outbound>;
  knowledge_key: string;
  query: string;
};

/** @internal */
export const GetV2LogsIdResponseBodyResponseRetrievals$outboundSchema:
  z.ZodType<
    GetV2LogsIdResponseBodyResponseRetrievals$Outbound,
    z.ZodTypeDef,
    GetV2LogsIdResponseBodyResponseRetrievals
  > = z.object({
    knowledgeId: z.string(),
    documents: z.array(
      z.lazy(() => GetV2LogsIdResponseBodyDocuments$outboundSchema),
    ),
    knowledgeKey: z.string(),
    query: z.string(),
  }).transform((v) => {
    return remap$(v, {
      knowledgeId: "knowledge_id",
      knowledgeKey: "knowledge_key",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdResponseBodyResponseRetrievals$ {
  /** @deprecated use `GetV2LogsIdResponseBodyResponseRetrievals$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsIdResponseBodyResponseRetrievals$inboundSchema;
  /** @deprecated use `GetV2LogsIdResponseBodyResponseRetrievals$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdResponseBodyResponseRetrievals$outboundSchema;
  /** @deprecated use `GetV2LogsIdResponseBodyResponseRetrievals$Outbound` instead. */
  export type Outbound = GetV2LogsIdResponseBodyResponseRetrievals$Outbound;
}

export function getV2LogsIdResponseBodyResponseRetrievalsToJSON(
  getV2LogsIdResponseBodyResponseRetrievals:
    GetV2LogsIdResponseBodyResponseRetrievals,
): string {
  return JSON.stringify(
    GetV2LogsIdResponseBodyResponseRetrievals$outboundSchema.parse(
      getV2LogsIdResponseBodyResponseRetrievals,
    ),
  );
}

export function getV2LogsIdResponseBodyResponseRetrievalsFromJSON(
  jsonString: string,
): SafeParseResult<
  GetV2LogsIdResponseBodyResponseRetrievals,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetV2LogsIdResponseBodyResponseRetrievals$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'GetV2LogsIdResponseBodyResponseRetrievals' from JSON`,
  );
}

/** @internal */
export const GetV2LogsIdConfigurationResponse200ApplicationJSONResponseBodyType$inboundSchema:
  z.ZodNativeEnum<
    typeof GetV2LogsIdConfigurationResponse200ApplicationJSONResponseBodyType
  > = z.nativeEnum(
    GetV2LogsIdConfigurationResponse200ApplicationJSONResponseBodyType,
  );

/** @internal */
export const GetV2LogsIdConfigurationResponse200ApplicationJSONResponseBodyType$outboundSchema:
  z.ZodNativeEnum<
    typeof GetV2LogsIdConfigurationResponse200ApplicationJSONResponseBodyType
  > =
    GetV2LogsIdConfigurationResponse200ApplicationJSONResponseBodyType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdConfigurationResponse200ApplicationJSONResponseBodyType$ {
  /** @deprecated use `GetV2LogsIdConfigurationResponse200ApplicationJSONResponseBodyType$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsIdConfigurationResponse200ApplicationJSONResponseBodyType$inboundSchema;
  /** @deprecated use `GetV2LogsIdConfigurationResponse200ApplicationJSONResponseBodyType$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdConfigurationResponse200ApplicationJSONResponseBodyType$outboundSchema;
}

/** @internal */
export const GetV2LogsIdConfigurationResponse2$inboundSchema: z.ZodType<
  GetV2LogsIdConfigurationResponse2,
  z.ZodTypeDef,
  unknown
> = z.object({
  type:
    GetV2LogsIdConfigurationResponse200ApplicationJSONResponseBodyType$inboundSchema,
  query: z.string(),
});

/** @internal */
export type GetV2LogsIdConfigurationResponse2$Outbound = {
  type: string;
  query: string;
};

/** @internal */
export const GetV2LogsIdConfigurationResponse2$outboundSchema: z.ZodType<
  GetV2LogsIdConfigurationResponse2$Outbound,
  z.ZodTypeDef,
  GetV2LogsIdConfigurationResponse2
> = z.object({
  type:
    GetV2LogsIdConfigurationResponse200ApplicationJSONResponseBodyType$outboundSchema,
  query: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdConfigurationResponse2$ {
  /** @deprecated use `GetV2LogsIdConfigurationResponse2$inboundSchema` instead. */
  export const inboundSchema = GetV2LogsIdConfigurationResponse2$inboundSchema;
  /** @deprecated use `GetV2LogsIdConfigurationResponse2$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdConfigurationResponse2$outboundSchema;
  /** @deprecated use `GetV2LogsIdConfigurationResponse2$Outbound` instead. */
  export type Outbound = GetV2LogsIdConfigurationResponse2$Outbound;
}

export function getV2LogsIdConfigurationResponse2ToJSON(
  getV2LogsIdConfigurationResponse2: GetV2LogsIdConfigurationResponse2,
): string {
  return JSON.stringify(
    GetV2LogsIdConfigurationResponse2$outboundSchema.parse(
      getV2LogsIdConfigurationResponse2,
    ),
  );
}

export function getV2LogsIdConfigurationResponse2FromJSON(
  jsonString: string,
): SafeParseResult<GetV2LogsIdConfigurationResponse2, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetV2LogsIdConfigurationResponse2$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetV2LogsIdConfigurationResponse2' from JSON`,
  );
}

/** @internal */
export const GetV2LogsIdConfigurationResponse200ApplicationJSONType$inboundSchema:
  z.ZodNativeEnum<
    typeof GetV2LogsIdConfigurationResponse200ApplicationJSONType
  > = z.nativeEnum(GetV2LogsIdConfigurationResponse200ApplicationJSONType);

/** @internal */
export const GetV2LogsIdConfigurationResponse200ApplicationJSONType$outboundSchema:
  z.ZodNativeEnum<
    typeof GetV2LogsIdConfigurationResponse200ApplicationJSONType
  > = GetV2LogsIdConfigurationResponse200ApplicationJSONType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdConfigurationResponse200ApplicationJSONType$ {
  /** @deprecated use `GetV2LogsIdConfigurationResponse200ApplicationJSONType$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsIdConfigurationResponse200ApplicationJSONType$inboundSchema;
  /** @deprecated use `GetV2LogsIdConfigurationResponse200ApplicationJSONType$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdConfigurationResponse200ApplicationJSONType$outboundSchema;
}

/** @internal */
export const GetV2LogsIdConfigurationResponse1$inboundSchema: z.ZodType<
  GetV2LogsIdConfigurationResponse1,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: GetV2LogsIdConfigurationResponse200ApplicationJSONType$inboundSchema,
});

/** @internal */
export type GetV2LogsIdConfigurationResponse1$Outbound = {
  type: string;
};

/** @internal */
export const GetV2LogsIdConfigurationResponse1$outboundSchema: z.ZodType<
  GetV2LogsIdConfigurationResponse1$Outbound,
  z.ZodTypeDef,
  GetV2LogsIdConfigurationResponse1
> = z.object({
  type: GetV2LogsIdConfigurationResponse200ApplicationJSONType$outboundSchema,
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdConfigurationResponse1$ {
  /** @deprecated use `GetV2LogsIdConfigurationResponse1$inboundSchema` instead. */
  export const inboundSchema = GetV2LogsIdConfigurationResponse1$inboundSchema;
  /** @deprecated use `GetV2LogsIdConfigurationResponse1$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdConfigurationResponse1$outboundSchema;
  /** @deprecated use `GetV2LogsIdConfigurationResponse1$Outbound` instead. */
  export type Outbound = GetV2LogsIdConfigurationResponse1$Outbound;
}

export function getV2LogsIdConfigurationResponse1ToJSON(
  getV2LogsIdConfigurationResponse1: GetV2LogsIdConfigurationResponse1,
): string {
  return JSON.stringify(
    GetV2LogsIdConfigurationResponse1$outboundSchema.parse(
      getV2LogsIdConfigurationResponse1,
    ),
  );
}

export function getV2LogsIdConfigurationResponse1FromJSON(
  jsonString: string,
): SafeParseResult<GetV2LogsIdConfigurationResponse1, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetV2LogsIdConfigurationResponse1$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetV2LogsIdConfigurationResponse1' from JSON`,
  );
}

/** @internal */
export const GetV2LogsIdResponseBodyConfiguration$inboundSchema: z.ZodType<
  GetV2LogsIdResponseBodyConfiguration,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => GetV2LogsIdConfigurationResponse1$inboundSchema),
  z.lazy(() => GetV2LogsIdConfigurationResponse2$inboundSchema),
]);

/** @internal */
export type GetV2LogsIdResponseBodyConfiguration$Outbound =
  | GetV2LogsIdConfigurationResponse1$Outbound
  | GetV2LogsIdConfigurationResponse2$Outbound;

/** @internal */
export const GetV2LogsIdResponseBodyConfiguration$outboundSchema: z.ZodType<
  GetV2LogsIdResponseBodyConfiguration$Outbound,
  z.ZodTypeDef,
  GetV2LogsIdResponseBodyConfiguration
> = z.union([
  z.lazy(() => GetV2LogsIdConfigurationResponse1$outboundSchema),
  z.lazy(() => GetV2LogsIdConfigurationResponse2$outboundSchema),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdResponseBodyConfiguration$ {
  /** @deprecated use `GetV2LogsIdResponseBodyConfiguration$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsIdResponseBodyConfiguration$inboundSchema;
  /** @deprecated use `GetV2LogsIdResponseBodyConfiguration$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdResponseBodyConfiguration$outboundSchema;
  /** @deprecated use `GetV2LogsIdResponseBodyConfiguration$Outbound` instead. */
  export type Outbound = GetV2LogsIdResponseBodyConfiguration$Outbound;
}

export function getV2LogsIdResponseBodyConfigurationToJSON(
  getV2LogsIdResponseBodyConfiguration: GetV2LogsIdResponseBodyConfiguration,
): string {
  return JSON.stringify(
    GetV2LogsIdResponseBodyConfiguration$outboundSchema.parse(
      getV2LogsIdResponseBodyConfiguration,
    ),
  );
}

export function getV2LogsIdResponseBodyConfigurationFromJSON(
  jsonString: string,
): SafeParseResult<GetV2LogsIdResponseBodyConfiguration, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      GetV2LogsIdResponseBodyConfiguration$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetV2LogsIdResponseBodyConfiguration' from JSON`,
  );
}

/** @internal */
export const GetV2LogsIdResponseBodyKnowledgeBases$inboundSchema: z.ZodType<
  GetV2LogsIdResponseBodyKnowledgeBases,
  z.ZodTypeDef,
  unknown
> = z.object({
  knowledge_id: z.string(),
  configuration: z.union([
    z.lazy(() => GetV2LogsIdConfigurationResponse1$inboundSchema),
    z.lazy(() => GetV2LogsIdConfigurationResponse2$inboundSchema),
  ]),
}).transform((v) => {
  return remap$(v, {
    "knowledge_id": "knowledgeId",
  });
});

/** @internal */
export type GetV2LogsIdResponseBodyKnowledgeBases$Outbound = {
  knowledge_id: string;
  configuration:
    | GetV2LogsIdConfigurationResponse1$Outbound
    | GetV2LogsIdConfigurationResponse2$Outbound;
};

/** @internal */
export const GetV2LogsIdResponseBodyKnowledgeBases$outboundSchema: z.ZodType<
  GetV2LogsIdResponseBodyKnowledgeBases$Outbound,
  z.ZodTypeDef,
  GetV2LogsIdResponseBodyKnowledgeBases
> = z.object({
  knowledgeId: z.string(),
  configuration: z.union([
    z.lazy(() => GetV2LogsIdConfigurationResponse1$outboundSchema),
    z.lazy(() => GetV2LogsIdConfigurationResponse2$outboundSchema),
  ]),
}).transform((v) => {
  return remap$(v, {
    knowledgeId: "knowledge_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdResponseBodyKnowledgeBases$ {
  /** @deprecated use `GetV2LogsIdResponseBodyKnowledgeBases$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsIdResponseBodyKnowledgeBases$inboundSchema;
  /** @deprecated use `GetV2LogsIdResponseBodyKnowledgeBases$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdResponseBodyKnowledgeBases$outboundSchema;
  /** @deprecated use `GetV2LogsIdResponseBodyKnowledgeBases$Outbound` instead. */
  export type Outbound = GetV2LogsIdResponseBodyKnowledgeBases$Outbound;
}

export function getV2LogsIdResponseBodyKnowledgeBasesToJSON(
  getV2LogsIdResponseBodyKnowledgeBases: GetV2LogsIdResponseBodyKnowledgeBases,
): string {
  return JSON.stringify(
    GetV2LogsIdResponseBodyKnowledgeBases$outboundSchema.parse(
      getV2LogsIdResponseBodyKnowledgeBases,
    ),
  );
}

export function getV2LogsIdResponseBodyKnowledgeBasesFromJSON(
  jsonString: string,
): SafeParseResult<GetV2LogsIdResponseBodyKnowledgeBases, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      GetV2LogsIdResponseBodyKnowledgeBases$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetV2LogsIdResponseBodyKnowledgeBases' from JSON`,
  );
}

/** @internal */
export const GetV2LogsIdResponseBodyResponseType$inboundSchema: z.ZodNativeEnum<
  typeof GetV2LogsIdResponseBodyResponseType
> = z.nativeEnum(GetV2LogsIdResponseBodyResponseType);

/** @internal */
export const GetV2LogsIdResponseBodyResponseType$outboundSchema:
  z.ZodNativeEnum<typeof GetV2LogsIdResponseBodyResponseType> =
    GetV2LogsIdResponseBodyResponseType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdResponseBodyResponseType$ {
  /** @deprecated use `GetV2LogsIdResponseBodyResponseType$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsIdResponseBodyResponseType$inboundSchema;
  /** @deprecated use `GetV2LogsIdResponseBodyResponseType$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdResponseBodyResponseType$outboundSchema;
}

/** @internal */
export const GetV2LogsIdResponseBodyResponse200ApplicationJson4DataType$inboundSchema:
  z.ZodNativeEnum<
    typeof GetV2LogsIdResponseBodyResponse200ApplicationJson4DataType
  > = z.nativeEnum(GetV2LogsIdResponseBodyResponse200ApplicationJson4DataType);

/** @internal */
export const GetV2LogsIdResponseBodyResponse200ApplicationJson4DataType$outboundSchema:
  z.ZodNativeEnum<
    typeof GetV2LogsIdResponseBodyResponse200ApplicationJson4DataType
  > = GetV2LogsIdResponseBodyResponse200ApplicationJson4DataType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdResponseBodyResponse200ApplicationJson4DataType$ {
  /** @deprecated use `GetV2LogsIdResponseBodyResponse200ApplicationJson4DataType$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsIdResponseBodyResponse200ApplicationJson4DataType$inboundSchema;
  /** @deprecated use `GetV2LogsIdResponseBodyResponse200ApplicationJson4DataType$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdResponseBodyResponse200ApplicationJson4DataType$outboundSchema;
}

/** @internal */
export const GetV2LogsIdResponseBodyResponseParameters$inboundSchema: z.ZodType<
  GetV2LogsIdResponseBodyResponseParameters,
  z.ZodTypeDef,
  unknown
> = z.object({
  type:
    GetV2LogsIdResponseBodyResponse200ApplicationJson4DataType$inboundSchema,
  properties: z.record(z.any()),
  required: z.array(z.string()).optional(),
  additionalProperties: z.boolean().optional(),
});

/** @internal */
export type GetV2LogsIdResponseBodyResponseParameters$Outbound = {
  type: string;
  properties: { [k: string]: any };
  required?: Array<string> | undefined;
  additionalProperties?: boolean | undefined;
};

/** @internal */
export const GetV2LogsIdResponseBodyResponseParameters$outboundSchema:
  z.ZodType<
    GetV2LogsIdResponseBodyResponseParameters$Outbound,
    z.ZodTypeDef,
    GetV2LogsIdResponseBodyResponseParameters
  > = z.object({
    type:
      GetV2LogsIdResponseBodyResponse200ApplicationJson4DataType$outboundSchema,
    properties: z.record(z.any()),
    required: z.array(z.string()).optional(),
    additionalProperties: z.boolean().optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdResponseBodyResponseParameters$ {
  /** @deprecated use `GetV2LogsIdResponseBodyResponseParameters$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsIdResponseBodyResponseParameters$inboundSchema;
  /** @deprecated use `GetV2LogsIdResponseBodyResponseParameters$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdResponseBodyResponseParameters$outboundSchema;
  /** @deprecated use `GetV2LogsIdResponseBodyResponseParameters$Outbound` instead. */
  export type Outbound = GetV2LogsIdResponseBodyResponseParameters$Outbound;
}

export function getV2LogsIdResponseBodyResponseParametersToJSON(
  getV2LogsIdResponseBodyResponseParameters:
    GetV2LogsIdResponseBodyResponseParameters,
): string {
  return JSON.stringify(
    GetV2LogsIdResponseBodyResponseParameters$outboundSchema.parse(
      getV2LogsIdResponseBodyResponseParameters,
    ),
  );
}

export function getV2LogsIdResponseBodyResponseParametersFromJSON(
  jsonString: string,
): SafeParseResult<
  GetV2LogsIdResponseBodyResponseParameters,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetV2LogsIdResponseBodyResponseParameters$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'GetV2LogsIdResponseBodyResponseParameters' from JSON`,
  );
}

/** @internal */
export const GetV2LogsIdResponseBodyResponseFunction$inboundSchema: z.ZodType<
  GetV2LogsIdResponseBodyResponseFunction,
  z.ZodTypeDef,
  unknown
> = z.object({
  name: z.string(),
  description: z.string().optional(),
  strict: z.boolean().optional(),
  parameters: z.lazy(() =>
    GetV2LogsIdResponseBodyResponseParameters$inboundSchema
  ),
});

/** @internal */
export type GetV2LogsIdResponseBodyResponseFunction$Outbound = {
  name: string;
  description?: string | undefined;
  strict?: boolean | undefined;
  parameters: GetV2LogsIdResponseBodyResponseParameters$Outbound;
};

/** @internal */
export const GetV2LogsIdResponseBodyResponseFunction$outboundSchema: z.ZodType<
  GetV2LogsIdResponseBodyResponseFunction$Outbound,
  z.ZodTypeDef,
  GetV2LogsIdResponseBodyResponseFunction
> = z.object({
  name: z.string(),
  description: z.string().optional(),
  strict: z.boolean().optional(),
  parameters: z.lazy(() =>
    GetV2LogsIdResponseBodyResponseParameters$outboundSchema
  ),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdResponseBodyResponseFunction$ {
  /** @deprecated use `GetV2LogsIdResponseBodyResponseFunction$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsIdResponseBodyResponseFunction$inboundSchema;
  /** @deprecated use `GetV2LogsIdResponseBodyResponseFunction$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdResponseBodyResponseFunction$outboundSchema;
  /** @deprecated use `GetV2LogsIdResponseBodyResponseFunction$Outbound` instead. */
  export type Outbound = GetV2LogsIdResponseBodyResponseFunction$Outbound;
}

export function getV2LogsIdResponseBodyResponseFunctionToJSON(
  getV2LogsIdResponseBodyResponseFunction:
    GetV2LogsIdResponseBodyResponseFunction,
): string {
  return JSON.stringify(
    GetV2LogsIdResponseBodyResponseFunction$outboundSchema.parse(
      getV2LogsIdResponseBodyResponseFunction,
    ),
  );
}

export function getV2LogsIdResponseBodyResponseFunctionFromJSON(
  jsonString: string,
): SafeParseResult<
  GetV2LogsIdResponseBodyResponseFunction,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetV2LogsIdResponseBodyResponseFunction$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'GetV2LogsIdResponseBodyResponseFunction' from JSON`,
  );
}

/** @internal */
export const GetV2LogsIdResponseBodyResponseTools$inboundSchema: z.ZodType<
  GetV2LogsIdResponseBodyResponseTools,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: GetV2LogsIdResponseBodyResponseType$inboundSchema,
  function: z.lazy(() => GetV2LogsIdResponseBodyResponseFunction$inboundSchema),
});

/** @internal */
export type GetV2LogsIdResponseBodyResponseTools$Outbound = {
  type: string;
  function: GetV2LogsIdResponseBodyResponseFunction$Outbound;
};

/** @internal */
export const GetV2LogsIdResponseBodyResponseTools$outboundSchema: z.ZodType<
  GetV2LogsIdResponseBodyResponseTools$Outbound,
  z.ZodTypeDef,
  GetV2LogsIdResponseBodyResponseTools
> = z.object({
  type: GetV2LogsIdResponseBodyResponseType$outboundSchema,
  function: z.lazy(() =>
    GetV2LogsIdResponseBodyResponseFunction$outboundSchema
  ),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdResponseBodyResponseTools$ {
  /** @deprecated use `GetV2LogsIdResponseBodyResponseTools$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsIdResponseBodyResponseTools$inboundSchema;
  /** @deprecated use `GetV2LogsIdResponseBodyResponseTools$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdResponseBodyResponseTools$outboundSchema;
  /** @deprecated use `GetV2LogsIdResponseBodyResponseTools$Outbound` instead. */
  export type Outbound = GetV2LogsIdResponseBodyResponseTools$Outbound;
}

export function getV2LogsIdResponseBodyResponseToolsToJSON(
  getV2LogsIdResponseBodyResponseTools: GetV2LogsIdResponseBodyResponseTools,
): string {
  return JSON.stringify(
    GetV2LogsIdResponseBodyResponseTools$outboundSchema.parse(
      getV2LogsIdResponseBodyResponseTools,
    ),
  );
}

export function getV2LogsIdResponseBodyResponseToolsFromJSON(
  jsonString: string,
): SafeParseResult<GetV2LogsIdResponseBodyResponseTools, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      GetV2LogsIdResponseBodyResponseTools$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetV2LogsIdResponseBodyResponseTools' from JSON`,
  );
}

/** @internal */
export const GetV2LogsIdResponseBodyPromptSnippets$inboundSchema: z.ZodType<
  GetV2LogsIdResponseBodyPromptSnippets,
  z.ZodTypeDef,
  unknown
> = z.object({
  _id: z.string(),
  key: z.string(),
  value: z.string(),
}).transform((v) => {
  return remap$(v, {
    "_id": "id",
  });
});

/** @internal */
export type GetV2LogsIdResponseBodyPromptSnippets$Outbound = {
  _id: string;
  key: string;
  value: string;
};

/** @internal */
export const GetV2LogsIdResponseBodyPromptSnippets$outboundSchema: z.ZodType<
  GetV2LogsIdResponseBodyPromptSnippets$Outbound,
  z.ZodTypeDef,
  GetV2LogsIdResponseBodyPromptSnippets
> = z.object({
  id: z.string(),
  key: z.string(),
  value: z.string(),
}).transform((v) => {
  return remap$(v, {
    id: "_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdResponseBodyPromptSnippets$ {
  /** @deprecated use `GetV2LogsIdResponseBodyPromptSnippets$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsIdResponseBodyPromptSnippets$inboundSchema;
  /** @deprecated use `GetV2LogsIdResponseBodyPromptSnippets$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdResponseBodyPromptSnippets$outboundSchema;
  /** @deprecated use `GetV2LogsIdResponseBodyPromptSnippets$Outbound` instead. */
  export type Outbound = GetV2LogsIdResponseBodyPromptSnippets$Outbound;
}

export function getV2LogsIdResponseBodyPromptSnippetsToJSON(
  getV2LogsIdResponseBodyPromptSnippets: GetV2LogsIdResponseBodyPromptSnippets,
): string {
  return JSON.stringify(
    GetV2LogsIdResponseBodyPromptSnippets$outboundSchema.parse(
      getV2LogsIdResponseBodyPromptSnippets,
    ),
  );
}

export function getV2LogsIdResponseBodyPromptSnippetsFromJSON(
  jsonString: string,
): SafeParseResult<GetV2LogsIdResponseBodyPromptSnippets, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      GetV2LogsIdResponseBodyPromptSnippets$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetV2LogsIdResponseBodyPromptSnippets' from JSON`,
  );
}

/** @internal */
export const GetV2LogsIdResponseBodyResponse200Data$inboundSchema: z.ZodType<
  GetV2LogsIdResponseBodyResponse200Data,
  z.ZodTypeDef,
  unknown
> = z.object({
  choices: z.array(
    z.lazy(() => GetV2LogsIdResponseBodyResponseChoices$inboundSchema),
  ).optional(),
  action: GetV2LogsIdResponseBodyResponseAction$inboundSchema.default("invoke"),
  integration_ids: z.array(z.string()).optional(),
  prompt_config: z.lazy(() =>
    GetV2LogsIdResponseBodyResponsePromptConfig$inboundSchema
  ),
  variables: z.array(
    z.lazy(() => GetV2LogsIdResponseBodyVariables$inboundSchema),
  ),
  performance: z.lazy(() =>
    GetV2LogsIdResponseBodyResponsePerformance$inboundSchema
  ).optional(),
  usage: z.lazy(() => GetV2LogsIdResponseBodyResponseUsage$inboundSchema)
    .optional(),
  billing: z.lazy(() => GetV2LogsIdResponseBodyBilling$inboundSchema)
    .optional(),
  provider_response: z.any().optional(),
  retrievals: z.array(
    z.lazy(() => GetV2LogsIdResponseBodyResponseRetrievals$inboundSchema),
  ).optional(),
  knowledge_bases: z.array(
    z.lazy(() => GetV2LogsIdResponseBodyKnowledgeBases$inboundSchema),
  ).optional(),
  tools: z.array(
    z.lazy(() => GetV2LogsIdResponseBodyResponseTools$inboundSchema),
  ).optional(),
  prompt_snippets: z.array(
    z.lazy(() => GetV2LogsIdResponseBodyPromptSnippets$inboundSchema),
  ),
}).transform((v) => {
  return remap$(v, {
    "integration_ids": "integrationIds",
    "prompt_config": "promptConfig",
    "provider_response": "providerResponse",
    "knowledge_bases": "knowledgeBases",
    "prompt_snippets": "promptSnippets",
  });
});

/** @internal */
export type GetV2LogsIdResponseBodyResponse200Data$Outbound = {
  choices?: Array<GetV2LogsIdResponseBodyResponseChoices$Outbound> | undefined;
  action: string;
  integration_ids?: Array<string> | undefined;
  prompt_config: GetV2LogsIdResponseBodyResponsePromptConfig$Outbound;
  variables: Array<GetV2LogsIdResponseBodyVariables$Outbound>;
  performance?: GetV2LogsIdResponseBodyResponsePerformance$Outbound | undefined;
  usage?: GetV2LogsIdResponseBodyResponseUsage$Outbound | undefined;
  billing?: GetV2LogsIdResponseBodyBilling$Outbound | undefined;
  provider_response?: any | undefined;
  retrievals?:
    | Array<GetV2LogsIdResponseBodyResponseRetrievals$Outbound>
    | undefined;
  knowledge_bases?:
    | Array<GetV2LogsIdResponseBodyKnowledgeBases$Outbound>
    | undefined;
  tools?: Array<GetV2LogsIdResponseBodyResponseTools$Outbound> | undefined;
  prompt_snippets: Array<GetV2LogsIdResponseBodyPromptSnippets$Outbound>;
};

/** @internal */
export const GetV2LogsIdResponseBodyResponse200Data$outboundSchema: z.ZodType<
  GetV2LogsIdResponseBodyResponse200Data$Outbound,
  z.ZodTypeDef,
  GetV2LogsIdResponseBodyResponse200Data
> = z.object({
  choices: z.array(
    z.lazy(() => GetV2LogsIdResponseBodyResponseChoices$outboundSchema),
  ).optional(),
  action: GetV2LogsIdResponseBodyResponseAction$outboundSchema.default(
    "invoke",
  ),
  integrationIds: z.array(z.string()).optional(),
  promptConfig: z.lazy(() =>
    GetV2LogsIdResponseBodyResponsePromptConfig$outboundSchema
  ),
  variables: z.array(
    z.lazy(() => GetV2LogsIdResponseBodyVariables$outboundSchema),
  ),
  performance: z.lazy(() =>
    GetV2LogsIdResponseBodyResponsePerformance$outboundSchema
  ).optional(),
  usage: z.lazy(() => GetV2LogsIdResponseBodyResponseUsage$outboundSchema)
    .optional(),
  billing: z.lazy(() => GetV2LogsIdResponseBodyBilling$outboundSchema)
    .optional(),
  providerResponse: z.any().optional(),
  retrievals: z.array(
    z.lazy(() => GetV2LogsIdResponseBodyResponseRetrievals$outboundSchema),
  ).optional(),
  knowledgeBases: z.array(
    z.lazy(() => GetV2LogsIdResponseBodyKnowledgeBases$outboundSchema),
  ).optional(),
  tools: z.array(
    z.lazy(() => GetV2LogsIdResponseBodyResponseTools$outboundSchema),
  ).optional(),
  promptSnippets: z.array(
    z.lazy(() => GetV2LogsIdResponseBodyPromptSnippets$outboundSchema),
  ),
}).transform((v) => {
  return remap$(v, {
    integrationIds: "integration_ids",
    promptConfig: "prompt_config",
    providerResponse: "provider_response",
    knowledgeBases: "knowledge_bases",
    promptSnippets: "prompt_snippets",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdResponseBodyResponse200Data$ {
  /** @deprecated use `GetV2LogsIdResponseBodyResponse200Data$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsIdResponseBodyResponse200Data$inboundSchema;
  /** @deprecated use `GetV2LogsIdResponseBodyResponse200Data$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdResponseBodyResponse200Data$outboundSchema;
  /** @deprecated use `GetV2LogsIdResponseBodyResponse200Data$Outbound` instead. */
  export type Outbound = GetV2LogsIdResponseBodyResponse200Data$Outbound;
}

export function getV2LogsIdResponseBodyResponse200DataToJSON(
  getV2LogsIdResponseBodyResponse200Data:
    GetV2LogsIdResponseBodyResponse200Data,
): string {
  return JSON.stringify(
    GetV2LogsIdResponseBodyResponse200Data$outboundSchema.parse(
      getV2LogsIdResponseBodyResponse200Data,
    ),
  );
}

export function getV2LogsIdResponseBodyResponse200DataFromJSON(
  jsonString: string,
): SafeParseResult<GetV2LogsIdResponseBodyResponse200Data, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      GetV2LogsIdResponseBodyResponse200Data$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetV2LogsIdResponseBodyResponse200Data' from JSON`,
  );
}

/** @internal */
export const ResponseBody4$inboundSchema: z.ZodType<
  ResponseBody4,
  z.ZodTypeDef,
  unknown
> = z.object({
  _id: z.string(),
  workspace_id: z.string(),
  workflow_metadata: z.record(z.any()).optional(),
  workflow_input: z.record(z.any()).optional(),
  workflow_output: z.record(z.any()).optional(),
  project_id: z.string().optional(),
  request_properties: z.lazy(() =>
    GetV2LogsIdResponseBodyResponseRequestProperties$inboundSchema
  ).optional(),
  started_at: z.string().datetime({ offset: true }).transform(v => new Date(v)),
  finished_at: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
  evals: z.array(
    z.union([
      z.lazy(() => GetV2LogsIdEvalsResponse2001$inboundSchema),
      z.lazy(() => GetV2LogsIdEvalsResponse2002$inboundSchema),
      z.lazy(() => GetV2LogsIdEvalsResponse2003$inboundSchema),
      z.lazy(() => GetV2LogsIdEvalsResponse2004$inboundSchema),
      z.lazy(() => GetV2LogsIdEvalsResponse2005$inboundSchema),
      z.lazy(() => GetV2LogsIdEvalsResponse2006$inboundSchema),
      z.lazy(() => GetV2LogsIdEvalsResponse2007$inboundSchema),
    ]),
  ),
  product_type: GetV2LogsIdResponseBodyResponseProductType$inboundSchema,
  related_entities: z.array(
    z.union([
      z.lazy(() => GetV2LogsIdRelatedEntitiesResponse2001$inboundSchema),
      z.lazy(() => GetV2LogsIdRelatedEntitiesResponse2002$inboundSchema),
      z.lazy(() => GetV2LogsIdRelatedEntitiesResponse2003$inboundSchema),
      z.lazy(() => GetV2LogsIdRelatedEntitiesResponse4$inboundSchema),
      z.lazy(() => GetV2LogsIdRelatedEntities5$inboundSchema),
    ]),
  ),
  data: z.lazy(() => GetV2LogsIdResponseBodyResponse200Data$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "_id": "id",
    "workspace_id": "workspaceId",
    "workflow_metadata": "workflowMetadata",
    "workflow_input": "workflowInput",
    "workflow_output": "workflowOutput",
    "project_id": "projectId",
    "request_properties": "requestProperties",
    "started_at": "startedAt",
    "finished_at": "finishedAt",
    "product_type": "productType",
    "related_entities": "relatedEntities",
  });
});

/** @internal */
export type ResponseBody4$Outbound = {
  _id: string;
  workspace_id: string;
  workflow_metadata?: { [k: string]: any } | undefined;
  workflow_input?: { [k: string]: any } | undefined;
  workflow_output?: { [k: string]: any } | undefined;
  project_id?: string | undefined;
  request_properties?:
    | GetV2LogsIdResponseBodyResponseRequestProperties$Outbound
    | undefined;
  started_at: string;
  finished_at?: string | undefined;
  evals: Array<
    | GetV2LogsIdEvalsResponse2001$Outbound
    | GetV2LogsIdEvalsResponse2002$Outbound
    | GetV2LogsIdEvalsResponse2003$Outbound
    | GetV2LogsIdEvalsResponse2004$Outbound
    | GetV2LogsIdEvalsResponse2005$Outbound
    | GetV2LogsIdEvalsResponse2006$Outbound
    | GetV2LogsIdEvalsResponse2007$Outbound
  >;
  product_type: string;
  related_entities: Array<
    | GetV2LogsIdRelatedEntitiesResponse2001$Outbound
    | GetV2LogsIdRelatedEntitiesResponse2002$Outbound
    | GetV2LogsIdRelatedEntitiesResponse2003$Outbound
    | GetV2LogsIdRelatedEntitiesResponse4$Outbound
    | GetV2LogsIdRelatedEntities5$Outbound
  >;
  data: GetV2LogsIdResponseBodyResponse200Data$Outbound;
};

/** @internal */
export const ResponseBody4$outboundSchema: z.ZodType<
  ResponseBody4$Outbound,
  z.ZodTypeDef,
  ResponseBody4
> = z.object({
  id: z.string(),
  workspaceId: z.string(),
  workflowMetadata: z.record(z.any()).optional(),
  workflowInput: z.record(z.any()).optional(),
  workflowOutput: z.record(z.any()).optional(),
  projectId: z.string().optional(),
  requestProperties: z.lazy(() =>
    GetV2LogsIdResponseBodyResponseRequestProperties$outboundSchema
  ).optional(),
  startedAt: z.date().transform(v => v.toISOString()),
  finishedAt: z.date().transform(v => v.toISOString()).optional(),
  evals: z.array(
    z.union([
      z.lazy(() => GetV2LogsIdEvalsResponse2001$outboundSchema),
      z.lazy(() => GetV2LogsIdEvalsResponse2002$outboundSchema),
      z.lazy(() => GetV2LogsIdEvalsResponse2003$outboundSchema),
      z.lazy(() => GetV2LogsIdEvalsResponse2004$outboundSchema),
      z.lazy(() => GetV2LogsIdEvalsResponse2005$outboundSchema),
      z.lazy(() => GetV2LogsIdEvalsResponse2006$outboundSchema),
      z.lazy(() => GetV2LogsIdEvalsResponse2007$outboundSchema),
    ]),
  ),
  productType: GetV2LogsIdResponseBodyResponseProductType$outboundSchema,
  relatedEntities: z.array(
    z.union([
      z.lazy(() => GetV2LogsIdRelatedEntitiesResponse2001$outboundSchema),
      z.lazy(() => GetV2LogsIdRelatedEntitiesResponse2002$outboundSchema),
      z.lazy(() => GetV2LogsIdRelatedEntitiesResponse2003$outboundSchema),
      z.lazy(() => GetV2LogsIdRelatedEntitiesResponse4$outboundSchema),
      z.lazy(() => GetV2LogsIdRelatedEntities5$outboundSchema),
    ]),
  ),
  data: z.lazy(() => GetV2LogsIdResponseBodyResponse200Data$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    id: "_id",
    workspaceId: "workspace_id",
    workflowMetadata: "workflow_metadata",
    workflowInput: "workflow_input",
    workflowOutput: "workflow_output",
    projectId: "project_id",
    requestProperties: "request_properties",
    startedAt: "started_at",
    finishedAt: "finished_at",
    productType: "product_type",
    relatedEntities: "related_entities",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ResponseBody4$ {
  /** @deprecated use `ResponseBody4$inboundSchema` instead. */
  export const inboundSchema = ResponseBody4$inboundSchema;
  /** @deprecated use `ResponseBody4$outboundSchema` instead. */
  export const outboundSchema = ResponseBody4$outboundSchema;
  /** @deprecated use `ResponseBody4$Outbound` instead. */
  export type Outbound = ResponseBody4$Outbound;
}

export function responseBody4ToJSON(responseBody4: ResponseBody4): string {
  return JSON.stringify(ResponseBody4$outboundSchema.parse(responseBody4));
}

export function responseBody4FromJSON(
  jsonString: string,
): SafeParseResult<ResponseBody4, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ResponseBody4$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ResponseBody4' from JSON`,
  );
}

/** @internal */
export const GetV2LogsIdResponseBodyRequestProperties$inboundSchema: z.ZodType<
  GetV2LogsIdResponseBodyRequestProperties,
  z.ZodTypeDef,
  unknown
> = z.object({
  source: z.string().optional(),
  location: z.string().optional(),
  latitude: z.string().optional(),
  longitude: z.string().optional(),
  response_time: z.number().optional(),
  metadata: z.record(z.any()).optional(),
  status: z.number().optional(),
  context: z.record(z.any()).optional(),
  extra_params: z.record(z.any()).optional(),
}).transform((v) => {
  return remap$(v, {
    "response_time": "responseTime",
    "extra_params": "extraParams",
  });
});

/** @internal */
export type GetV2LogsIdResponseBodyRequestProperties$Outbound = {
  source?: string | undefined;
  location?: string | undefined;
  latitude?: string | undefined;
  longitude?: string | undefined;
  response_time?: number | undefined;
  metadata?: { [k: string]: any } | undefined;
  status?: number | undefined;
  context?: { [k: string]: any } | undefined;
  extra_params?: { [k: string]: any } | undefined;
};

/** @internal */
export const GetV2LogsIdResponseBodyRequestProperties$outboundSchema: z.ZodType<
  GetV2LogsIdResponseBodyRequestProperties$Outbound,
  z.ZodTypeDef,
  GetV2LogsIdResponseBodyRequestProperties
> = z.object({
  source: z.string().optional(),
  location: z.string().optional(),
  latitude: z.string().optional(),
  longitude: z.string().optional(),
  responseTime: z.number().optional(),
  metadata: z.record(z.any()).optional(),
  status: z.number().optional(),
  context: z.record(z.any()).optional(),
  extraParams: z.record(z.any()).optional(),
}).transform((v) => {
  return remap$(v, {
    responseTime: "response_time",
    extraParams: "extra_params",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdResponseBodyRequestProperties$ {
  /** @deprecated use `GetV2LogsIdResponseBodyRequestProperties$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsIdResponseBodyRequestProperties$inboundSchema;
  /** @deprecated use `GetV2LogsIdResponseBodyRequestProperties$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdResponseBodyRequestProperties$outboundSchema;
  /** @deprecated use `GetV2LogsIdResponseBodyRequestProperties$Outbound` instead. */
  export type Outbound = GetV2LogsIdResponseBodyRequestProperties$Outbound;
}

export function getV2LogsIdResponseBodyRequestPropertiesToJSON(
  getV2LogsIdResponseBodyRequestProperties:
    GetV2LogsIdResponseBodyRequestProperties,
): string {
  return JSON.stringify(
    GetV2LogsIdResponseBodyRequestProperties$outboundSchema.parse(
      getV2LogsIdResponseBodyRequestProperties,
    ),
  );
}

export function getV2LogsIdResponseBodyRequestPropertiesFromJSON(
  jsonString: string,
): SafeParseResult<
  GetV2LogsIdResponseBodyRequestProperties,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetV2LogsIdResponseBodyRequestProperties$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'GetV2LogsIdResponseBodyRequestProperties' from JSON`,
  );
}

/** @internal */
export const GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody37Type$inboundSchema:
  z.ZodNativeEnum<
    typeof GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody37Type
  > = z.nativeEnum(
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody37Type,
  );

/** @internal */
export const GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody37Type$outboundSchema:
  z.ZodNativeEnum<
    typeof GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody37Type
  > =
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody37Type$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody37Type$ {
  /** @deprecated use `GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody37Type$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody37Type$inboundSchema;
  /** @deprecated use `GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody37Type$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody37Type$outboundSchema;
}

/** @internal */
export const GetV2LogsIdEvalsResponseRequestProperties$inboundSchema: z.ZodType<
  GetV2LogsIdEvalsResponseRequestProperties,
  z.ZodTypeDef,
  unknown
> = z.object({
  source: z.string().optional(),
  location: z.string().optional(),
  latitude: z.string().optional(),
  longitude: z.string().optional(),
  response_time: z.number().optional(),
  metadata: z.record(z.any()).optional(),
  status: z.number().optional(),
  context: z.record(z.any()).optional(),
  extra_params: z.record(z.any()).optional(),
}).transform((v) => {
  return remap$(v, {
    "response_time": "responseTime",
    "extra_params": "extraParams",
  });
});

/** @internal */
export type GetV2LogsIdEvalsResponseRequestProperties$Outbound = {
  source?: string | undefined;
  location?: string | undefined;
  latitude?: string | undefined;
  longitude?: string | undefined;
  response_time?: number | undefined;
  metadata?: { [k: string]: any } | undefined;
  status?: number | undefined;
  context?: { [k: string]: any } | undefined;
  extra_params?: { [k: string]: any } | undefined;
};

/** @internal */
export const GetV2LogsIdEvalsResponseRequestProperties$outboundSchema:
  z.ZodType<
    GetV2LogsIdEvalsResponseRequestProperties$Outbound,
    z.ZodTypeDef,
    GetV2LogsIdEvalsResponseRequestProperties
  > = z.object({
    source: z.string().optional(),
    location: z.string().optional(),
    latitude: z.string().optional(),
    longitude: z.string().optional(),
    responseTime: z.number().optional(),
    metadata: z.record(z.any()).optional(),
    status: z.number().optional(),
    context: z.record(z.any()).optional(),
    extraParams: z.record(z.any()).optional(),
  }).transform((v) => {
    return remap$(v, {
      responseTime: "response_time",
      extraParams: "extra_params",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdEvalsResponseRequestProperties$ {
  /** @deprecated use `GetV2LogsIdEvalsResponseRequestProperties$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsIdEvalsResponseRequestProperties$inboundSchema;
  /** @deprecated use `GetV2LogsIdEvalsResponseRequestProperties$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdEvalsResponseRequestProperties$outboundSchema;
  /** @deprecated use `GetV2LogsIdEvalsResponseRequestProperties$Outbound` instead. */
  export type Outbound = GetV2LogsIdEvalsResponseRequestProperties$Outbound;
}

export function getV2LogsIdEvalsResponseRequestPropertiesToJSON(
  getV2LogsIdEvalsResponseRequestProperties:
    GetV2LogsIdEvalsResponseRequestProperties,
): string {
  return JSON.stringify(
    GetV2LogsIdEvalsResponseRequestProperties$outboundSchema.parse(
      getV2LogsIdEvalsResponseRequestProperties,
    ),
  );
}

export function getV2LogsIdEvalsResponseRequestPropertiesFromJSON(
  jsonString: string,
): SafeParseResult<
  GetV2LogsIdEvalsResponseRequestProperties,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetV2LogsIdEvalsResponseRequestProperties$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'GetV2LogsIdEvalsResponseRequestProperties' from JSON`,
  );
}

/** @internal */
export const GetV2LogsIdEvalsResponseProductType$inboundSchema: z.ZodNativeEnum<
  typeof GetV2LogsIdEvalsResponseProductType
> = z.nativeEnum(GetV2LogsIdEvalsResponseProductType);

/** @internal */
export const GetV2LogsIdEvalsResponseProductType$outboundSchema:
  z.ZodNativeEnum<typeof GetV2LogsIdEvalsResponseProductType> =
    GetV2LogsIdEvalsResponseProductType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdEvalsResponseProductType$ {
  /** @deprecated use `GetV2LogsIdEvalsResponseProductType$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsIdEvalsResponseProductType$inboundSchema;
  /** @deprecated use `GetV2LogsIdEvalsResponseProductType$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdEvalsResponseProductType$outboundSchema;
}

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRunType$inboundSchema:
  z.ZodNativeEnum<
    typeof GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRunType
  > = z.nativeEnum(
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRunType,
  );

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRunType$outboundSchema:
  z.ZodNativeEnum<
    typeof GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRunType
  > =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRunType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRunType$ {
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRunType$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRunType$inboundSchema;
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRunType$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRunType$outboundSchema;
}

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRun1$inboundSchema:
  z.ZodType<
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRun1,
    z.ZodTypeDef,
    unknown
  > = z.object({
    type:
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRunType$inboundSchema,
    evaluator_id: z.string(),
  }).transform((v) => {
    return remap$(v, {
      "evaluator_id": "evaluatorId",
    });
  });

/** @internal */
export type GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRun1$Outbound =
  {
    type: string;
    evaluator_id: string;
  };

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRun1$outboundSchema:
  z.ZodType<
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRun1$Outbound,
    z.ZodTypeDef,
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRun1
  > = z.object({
    type:
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRunType$outboundSchema,
    evaluatorId: z.string(),
  }).transform((v) => {
    return remap$(v, {
      evaluatorId: "evaluator_id",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRun1$ {
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRun1$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRun1$inboundSchema;
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRun1$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRun1$outboundSchema;
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRun1$Outbound` instead. */
  export type Outbound =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRun1$Outbound;
}

export function getV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRun1ToJSON(
  getV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRun1:
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRun1,
): string {
  return JSON.stringify(
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRun1$outboundSchema
      .parse(
        getV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRun1,
      ),
  );
}

export function getV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRun1FromJSON(
  jsonString: string,
): SafeParseResult<
  GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRun1,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRun1$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRun1' from JSON`,
  );
}

/** @internal */
export const GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody37WorkflowRunRelatedEntities$inboundSchema:
  z.ZodType<
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody37WorkflowRunRelatedEntities,
    z.ZodTypeDef,
    unknown
  > = z.lazy(() =>
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRun1$inboundSchema
  );

/** @internal */
export type GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody37WorkflowRunRelatedEntities$Outbound =
  GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRun1$Outbound;

/** @internal */
export const GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody37WorkflowRunRelatedEntities$outboundSchema:
  z.ZodType<
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody37WorkflowRunRelatedEntities$Outbound,
    z.ZodTypeDef,
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody37WorkflowRunRelatedEntities
  > = z.lazy(() =>
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRun1$outboundSchema
  );

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody37WorkflowRunRelatedEntities$ {
  /** @deprecated use `GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody37WorkflowRunRelatedEntities$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody37WorkflowRunRelatedEntities$inboundSchema;
  /** @deprecated use `GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody37WorkflowRunRelatedEntities$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody37WorkflowRunRelatedEntities$outboundSchema;
  /** @deprecated use `GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody37WorkflowRunRelatedEntities$Outbound` instead. */
  export type Outbound =
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody37WorkflowRunRelatedEntities$Outbound;
}

export function getV2LogsIdEvalsResponse200ApplicationJSONResponseBody37WorkflowRunRelatedEntitiesToJSON(
  getV2LogsIdEvalsResponse200ApplicationJSONResponseBody37WorkflowRunRelatedEntities:
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody37WorkflowRunRelatedEntities,
): string {
  return JSON.stringify(
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody37WorkflowRunRelatedEntities$outboundSchema
      .parse(
        getV2LogsIdEvalsResponse200ApplicationJSONResponseBody37WorkflowRunRelatedEntities,
      ),
  );
}

export function getV2LogsIdEvalsResponse200ApplicationJSONResponseBody37WorkflowRunRelatedEntitiesFromJSON(
  jsonString: string,
): SafeParseResult<
  GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody37WorkflowRunRelatedEntities,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody37WorkflowRunRelatedEntities$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody37WorkflowRunRelatedEntities' from JSON`,
  );
}

/** @internal */
export const GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody3Evals7WorkflowRun4Type$inboundSchema:
  z.ZodNativeEnum<
    typeof GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody3Evals7WorkflowRun4Type
  > = z.nativeEnum(
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody3Evals7WorkflowRun4Type,
  );

/** @internal */
export const GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody3Evals7WorkflowRun4Type$outboundSchema:
  z.ZodNativeEnum<
    typeof GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody3Evals7WorkflowRun4Type
  > =
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody3Evals7WorkflowRun4Type$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody3Evals7WorkflowRun4Type$ {
  /** @deprecated use `GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody3Evals7WorkflowRun4Type$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody3Evals7WorkflowRun4Type$inboundSchema;
  /** @deprecated use `GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody3Evals7WorkflowRun4Type$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody3Evals7WorkflowRun4Type$outboundSchema;
}

/** @internal */
export const GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody3Evals7WorkflowRun4Status$inboundSchema:
  z.ZodNativeEnum<
    typeof GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody3Evals7WorkflowRun4Status
  > = z.nativeEnum(
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody3Evals7WorkflowRun4Status,
  );

/** @internal */
export const GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody3Evals7WorkflowRun4Status$outboundSchema:
  z.ZodNativeEnum<
    typeof GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody3Evals7WorkflowRun4Status
  > =
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody3Evals7WorkflowRun4Status$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody3Evals7WorkflowRun4Status$ {
  /** @deprecated use `GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody3Evals7WorkflowRun4Status$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody3Evals7WorkflowRun4Status$inboundSchema;
  /** @deprecated use `GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody3Evals7WorkflowRun4Status$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody3Evals7WorkflowRun4Status$outboundSchema;
}

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRunEvals44Type$inboundSchema:
  z.ZodNativeEnum<
    typeof GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRunEvals44Type
  > = z.nativeEnum(
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRunEvals44Type,
  );

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRunEvals44Type$outboundSchema:
  z.ZodNativeEnum<
    typeof GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRunEvals44Type
  > =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRunEvals44Type$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRunEvals44Type$ {
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRunEvals44Type$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRunEvals44Type$inboundSchema;
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRunEvals44Type$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRunEvals44Type$outboundSchema;
}

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRunEvals44$inboundSchema:
  z.ZodType<
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRunEvals44,
    z.ZodTypeDef,
    unknown
  > = z.object({
    type:
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRunEvals44Type$inboundSchema,
    evaluator_id: z.string(),
  }).transform((v) => {
    return remap$(v, {
      "evaluator_id": "evaluatorId",
    });
  });

/** @internal */
export type GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRunEvals44$Outbound =
  {
    type: string;
    evaluator_id: string;
  };

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRunEvals44$outboundSchema:
  z.ZodType<
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRunEvals44$Outbound,
    z.ZodTypeDef,
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRunEvals44
  > = z.object({
    type:
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRunEvals44Type$outboundSchema,
    evaluatorId: z.string(),
  }).transform((v) => {
    return remap$(v, {
      evaluatorId: "evaluator_id",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRunEvals44$ {
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRunEvals44$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRunEvals44$inboundSchema;
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRunEvals44$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRunEvals44$outboundSchema;
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRunEvals44$Outbound` instead. */
  export type Outbound =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRunEvals44$Outbound;
}

export function getV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRunEvals44ToJSON(
  getV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRunEvals44:
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRunEvals44,
): string {
  return JSON.stringify(
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRunEvals44$outboundSchema
      .parse(
        getV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRunEvals44,
      ),
  );
}

export function getV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRunEvals44FromJSON(
  jsonString: string,
): SafeParseResult<
  GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRunEvals44,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRunEvals44$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRunEvals44' from JSON`,
  );
}

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRunEvals43Type$inboundSchema:
  z.ZodNativeEnum<
    typeof GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRunEvals43Type
  > = z.nativeEnum(
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRunEvals43Type,
  );

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRunEvals43Type$outboundSchema:
  z.ZodNativeEnum<
    typeof GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRunEvals43Type
  > =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRunEvals43Type$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRunEvals43Type$ {
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRunEvals43Type$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRunEvals43Type$inboundSchema;
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRunEvals43Type$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRunEvals43Type$outboundSchema;
}

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRunEvals43$inboundSchema:
  z.ZodType<
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRunEvals43,
    z.ZodTypeDef,
    unknown
  > = z.object({
    type:
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRunEvals43Type$inboundSchema,
    human_eval_id: z.string(),
  }).transform((v) => {
    return remap$(v, {
      "human_eval_id": "humanEvalId",
    });
  });

/** @internal */
export type GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRunEvals43$Outbound =
  {
    type: string;
    human_eval_id: string;
  };

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRunEvals43$outboundSchema:
  z.ZodType<
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRunEvals43$Outbound,
    z.ZodTypeDef,
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRunEvals43
  > = z.object({
    type:
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRunEvals43Type$outboundSchema,
    humanEvalId: z.string(),
  }).transform((v) => {
    return remap$(v, {
      humanEvalId: "human_eval_id",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRunEvals43$ {
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRunEvals43$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRunEvals43$inboundSchema;
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRunEvals43$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRunEvals43$outboundSchema;
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRunEvals43$Outbound` instead. */
  export type Outbound =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRunEvals43$Outbound;
}

export function getV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRunEvals43ToJSON(
  getV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRunEvals43:
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRunEvals43,
): string {
  return JSON.stringify(
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRunEvals43$outboundSchema
      .parse(
        getV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRunEvals43,
      ),
  );
}

export function getV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRunEvals43FromJSON(
  jsonString: string,
): SafeParseResult<
  GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRunEvals43,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRunEvals43$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRunEvals43' from JSON`,
  );
}

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRunEvals42Type$inboundSchema:
  z.ZodNativeEnum<
    typeof GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRunEvals42Type
  > = z.nativeEnum(
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRunEvals42Type,
  );

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRunEvals42Type$outboundSchema:
  z.ZodNativeEnum<
    typeof GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRunEvals42Type
  > =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRunEvals42Type$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRunEvals42Type$ {
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRunEvals42Type$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRunEvals42Type$inboundSchema;
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRunEvals42Type$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRunEvals42Type$outboundSchema;
}

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRunEvals42$inboundSchema:
  z.ZodType<
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRunEvals42,
    z.ZodTypeDef,
    unknown
  > = z.object({
    type:
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRunEvals42Type$inboundSchema,
    contact_id: z.string(),
  }).transform((v) => {
    return remap$(v, {
      "contact_id": "contactId",
    });
  });

/** @internal */
export type GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRunEvals42$Outbound =
  {
    type: string;
    contact_id: string;
  };

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRunEvals42$outboundSchema:
  z.ZodType<
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRunEvals42$Outbound,
    z.ZodTypeDef,
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRunEvals42
  > = z.object({
    type:
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRunEvals42Type$outboundSchema,
    contactId: z.string(),
  }).transform((v) => {
    return remap$(v, {
      contactId: "contact_id",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRunEvals42$ {
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRunEvals42$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRunEvals42$inboundSchema;
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRunEvals42$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRunEvals42$outboundSchema;
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRunEvals42$Outbound` instead. */
  export type Outbound =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRunEvals42$Outbound;
}

export function getV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRunEvals42ToJSON(
  getV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRunEvals42:
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRunEvals42,
): string {
  return JSON.stringify(
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRunEvals42$outboundSchema
      .parse(
        getV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRunEvals42,
      ),
  );
}

export function getV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRunEvals42FromJSON(
  jsonString: string,
): SafeParseResult<
  GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRunEvals42,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRunEvals42$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRunEvals42' from JSON`,
  );
}

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRunEvals4Type$inboundSchema:
  z.ZodNativeEnum<
    typeof GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRunEvals4Type
  > = z.nativeEnum(
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRunEvals4Type,
  );

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRunEvals4Type$outboundSchema:
  z.ZodNativeEnum<
    typeof GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRunEvals4Type
  > =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRunEvals4Type$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRunEvals4Type$ {
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRunEvals4Type$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRunEvals4Type$inboundSchema;
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRunEvals4Type$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRunEvals4Type$outboundSchema;
}

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRunEvals41$inboundSchema:
  z.ZodType<
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRunEvals41,
    z.ZodTypeDef,
    unknown
  > = z.object({
    type:
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRunEvals4Type$inboundSchema,
    account_id: z.string(),
  }).transform((v) => {
    return remap$(v, {
      "account_id": "accountId",
    });
  });

/** @internal */
export type GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRunEvals41$Outbound =
  {
    type: string;
    account_id: string;
  };

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRunEvals41$outboundSchema:
  z.ZodType<
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRunEvals41$Outbound,
    z.ZodTypeDef,
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRunEvals41
  > = z.object({
    type:
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRunEvals4Type$outboundSchema,
    accountId: z.string(),
  }).transform((v) => {
    return remap$(v, {
      accountId: "account_id",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRunEvals41$ {
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRunEvals41$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRunEvals41$inboundSchema;
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRunEvals41$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRunEvals41$outboundSchema;
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRunEvals41$Outbound` instead. */
  export type Outbound =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRunEvals41$Outbound;
}

export function getV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRunEvals41ToJSON(
  getV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRunEvals41:
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRunEvals41,
): string {
  return JSON.stringify(
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRunEvals41$outboundSchema
      .parse(
        getV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRunEvals41,
      ),
  );
}

export function getV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRunEvals41FromJSON(
  jsonString: string,
): SafeParseResult<
  GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRunEvals41,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRunEvals41$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRunEvals41' from JSON`,
  );
}

/** @internal */
export const GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody3Evals7WorkflowRun4RelatedEntities$inboundSchema:
  z.ZodType<
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody3Evals7WorkflowRun4RelatedEntities,
    z.ZodTypeDef,
    unknown
  > = z.union([
    z.lazy(() =>
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRunEvals41$inboundSchema
    ),
    z.lazy(() =>
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRunEvals42$inboundSchema
    ),
    z.lazy(() =>
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRunEvals43$inboundSchema
    ),
    z.lazy(() =>
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRunEvals44$inboundSchema
    ),
  ]);

/** @internal */
export type GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody3Evals7WorkflowRun4RelatedEntities$Outbound =
  | GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRunEvals41$Outbound
  | GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRunEvals42$Outbound
  | GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRunEvals43$Outbound
  | GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRunEvals44$Outbound;

/** @internal */
export const GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody3Evals7WorkflowRun4RelatedEntities$outboundSchema:
  z.ZodType<
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody3Evals7WorkflowRun4RelatedEntities$Outbound,
    z.ZodTypeDef,
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody3Evals7WorkflowRun4RelatedEntities
  > = z.union([
    z.lazy(() =>
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRunEvals41$outboundSchema
    ),
    z.lazy(() =>
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRunEvals42$outboundSchema
    ),
    z.lazy(() =>
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRunEvals43$outboundSchema
    ),
    z.lazy(() =>
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRunEvals44$outboundSchema
    ),
  ]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody3Evals7WorkflowRun4RelatedEntities$ {
  /** @deprecated use `GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody3Evals7WorkflowRun4RelatedEntities$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody3Evals7WorkflowRun4RelatedEntities$inboundSchema;
  /** @deprecated use `GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody3Evals7WorkflowRun4RelatedEntities$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody3Evals7WorkflowRun4RelatedEntities$outboundSchema;
  /** @deprecated use `GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody3Evals7WorkflowRun4RelatedEntities$Outbound` instead. */
  export type Outbound =
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody3Evals7WorkflowRun4RelatedEntities$Outbound;
}

export function getV2LogsIdEvalsResponse200ApplicationJSONResponseBody3Evals7WorkflowRun4RelatedEntitiesToJSON(
  getV2LogsIdEvalsResponse200ApplicationJSONResponseBody3Evals7WorkflowRun4RelatedEntities:
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody3Evals7WorkflowRun4RelatedEntities,
): string {
  return JSON.stringify(
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody3Evals7WorkflowRun4RelatedEntities$outboundSchema
      .parse(
        getV2LogsIdEvalsResponse200ApplicationJSONResponseBody3Evals7WorkflowRun4RelatedEntities,
      ),
  );
}

export function getV2LogsIdEvalsResponse200ApplicationJSONResponseBody3Evals7WorkflowRun4RelatedEntitiesFromJSON(
  jsonString: string,
): SafeParseResult<
  GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody3Evals7WorkflowRun4RelatedEntities,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody3Evals7WorkflowRun4RelatedEntities$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody3Evals7WorkflowRun4RelatedEntities' from JSON`,
  );
}

/** @internal */
export const GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody4$inboundSchema:
  z.ZodType<
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody4,
    z.ZodTypeDef,
    unknown
  > = z.object({
    type:
      GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody3Evals7WorkflowRun4Type$inboundSchema,
    values: z.array(z.string()),
    id: z.string(),
    status:
      GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody3Evals7WorkflowRun4Status$inboundSchema,
    timestamp: z.string().datetime({ offset: true }).transform(v =>
      new Date(v)
    ),
    related_entities: z.array(
      z.union([
        z.lazy(() =>
          GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRunEvals41$inboundSchema
        ),
        z.lazy(() =>
          GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRunEvals42$inboundSchema
        ),
        z.lazy(() =>
          GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRunEvals43$inboundSchema
        ),
        z.lazy(() =>
          GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRunEvals44$inboundSchema
        ),
      ]),
    ),
  }).transform((v) => {
    return remap$(v, {
      "related_entities": "relatedEntities",
    });
  });

/** @internal */
export type GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody4$Outbound = {
  type: string;
  values: Array<string>;
  id: string;
  status: string;
  timestamp: string;
  related_entities: Array<
    | GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRunEvals41$Outbound
    | GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRunEvals42$Outbound
    | GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRunEvals43$Outbound
    | GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRunEvals44$Outbound
  >;
};

/** @internal */
export const GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody4$outboundSchema:
  z.ZodType<
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody4$Outbound,
    z.ZodTypeDef,
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody4
  > = z.object({
    type:
      GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody3Evals7WorkflowRun4Type$outboundSchema,
    values: z.array(z.string()),
    id: z.string(),
    status:
      GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody3Evals7WorkflowRun4Status$outboundSchema,
    timestamp: z.date().transform(v => v.toISOString()),
    relatedEntities: z.array(
      z.union([
        z.lazy(() =>
          GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRunEvals41$outboundSchema
        ),
        z.lazy(() =>
          GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRunEvals42$outboundSchema
        ),
        z.lazy(() =>
          GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRunEvals43$outboundSchema
        ),
        z.lazy(() =>
          GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRunEvals44$outboundSchema
        ),
      ]),
    ),
  }).transform((v) => {
    return remap$(v, {
      relatedEntities: "related_entities",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody4$ {
  /** @deprecated use `GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody4$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody4$inboundSchema;
  /** @deprecated use `GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody4$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody4$outboundSchema;
  /** @deprecated use `GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody4$Outbound` instead. */
  export type Outbound =
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody4$Outbound;
}

export function getV2LogsIdEvalsResponse200ApplicationJSONResponseBody4ToJSON(
  getV2LogsIdEvalsResponse200ApplicationJSONResponseBody4:
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody4,
): string {
  return JSON.stringify(
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody4$outboundSchema
      .parse(getV2LogsIdEvalsResponse200ApplicationJSONResponseBody4),
  );
}

export function getV2LogsIdEvalsResponse200ApplicationJSONResponseBody4FromJSON(
  jsonString: string,
): SafeParseResult<
  GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody4,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody4$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody4' from JSON`,
  );
}

/** @internal */
export const GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody3Evals7WorkflowRunType$inboundSchema:
  z.ZodNativeEnum<
    typeof GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody3Evals7WorkflowRunType
  > = z.nativeEnum(
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody3Evals7WorkflowRunType,
  );

/** @internal */
export const GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody3Evals7WorkflowRunType$outboundSchema:
  z.ZodNativeEnum<
    typeof GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody3Evals7WorkflowRunType
  > =
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody3Evals7WorkflowRunType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody3Evals7WorkflowRunType$ {
  /** @deprecated use `GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody3Evals7WorkflowRunType$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody3Evals7WorkflowRunType$inboundSchema;
  /** @deprecated use `GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody3Evals7WorkflowRunType$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody3Evals7WorkflowRunType$outboundSchema;
}

/** @internal */
export const GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody3Evals7WorkflowRunStatus$inboundSchema:
  z.ZodNativeEnum<
    typeof GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody3Evals7WorkflowRunStatus
  > = z.nativeEnum(
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody3Evals7WorkflowRunStatus,
  );

/** @internal */
export const GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody3Evals7WorkflowRunStatus$outboundSchema:
  z.ZodNativeEnum<
    typeof GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody3Evals7WorkflowRunStatus
  > =
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody3Evals7WorkflowRunStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody3Evals7WorkflowRunStatus$ {
  /** @deprecated use `GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody3Evals7WorkflowRunStatus$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody3Evals7WorkflowRunStatus$inboundSchema;
  /** @deprecated use `GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody3Evals7WorkflowRunStatus$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody3Evals7WorkflowRunStatus$outboundSchema;
}

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRunEvals34Type$inboundSchema:
  z.ZodNativeEnum<
    typeof GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRunEvals34Type
  > = z.nativeEnum(
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRunEvals34Type,
  );

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRunEvals34Type$outboundSchema:
  z.ZodNativeEnum<
    typeof GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRunEvals34Type
  > =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRunEvals34Type$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRunEvals34Type$ {
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRunEvals34Type$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRunEvals34Type$inboundSchema;
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRunEvals34Type$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRunEvals34Type$outboundSchema;
}

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRunEvals4$inboundSchema:
  z.ZodType<
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRunEvals4,
    z.ZodTypeDef,
    unknown
  > = z.object({
    type:
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRunEvals34Type$inboundSchema,
    evaluator_id: z.string(),
  }).transform((v) => {
    return remap$(v, {
      "evaluator_id": "evaluatorId",
    });
  });

/** @internal */
export type GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRunEvals4$Outbound =
  {
    type: string;
    evaluator_id: string;
  };

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRunEvals4$outboundSchema:
  z.ZodType<
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRunEvals4$Outbound,
    z.ZodTypeDef,
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRunEvals4
  > = z.object({
    type:
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRunEvals34Type$outboundSchema,
    evaluatorId: z.string(),
  }).transform((v) => {
    return remap$(v, {
      evaluatorId: "evaluator_id",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRunEvals4$ {
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRunEvals4$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRunEvals4$inboundSchema;
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRunEvals4$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRunEvals4$outboundSchema;
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRunEvals4$Outbound` instead. */
  export type Outbound =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRunEvals4$Outbound;
}

export function getV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRunEvals4ToJSON(
  getV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRunEvals4:
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRunEvals4,
): string {
  return JSON.stringify(
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRunEvals4$outboundSchema
      .parse(
        getV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRunEvals4,
      ),
  );
}

export function getV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRunEvals4FromJSON(
  jsonString: string,
): SafeParseResult<
  GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRunEvals4,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRunEvals4$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRunEvals4' from JSON`,
  );
}

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRunEvals33Type$inboundSchema:
  z.ZodNativeEnum<
    typeof GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRunEvals33Type
  > = z.nativeEnum(
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRunEvals33Type,
  );

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRunEvals33Type$outboundSchema:
  z.ZodNativeEnum<
    typeof GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRunEvals33Type
  > =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRunEvals33Type$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRunEvals33Type$ {
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRunEvals33Type$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRunEvals33Type$inboundSchema;
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRunEvals33Type$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRunEvals33Type$outboundSchema;
}

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRunEvals3$inboundSchema:
  z.ZodType<
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRunEvals3,
    z.ZodTypeDef,
    unknown
  > = z.object({
    type:
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRunEvals33Type$inboundSchema,
    human_eval_id: z.string(),
  }).transform((v) => {
    return remap$(v, {
      "human_eval_id": "humanEvalId",
    });
  });

/** @internal */
export type GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRunEvals3$Outbound =
  {
    type: string;
    human_eval_id: string;
  };

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRunEvals3$outboundSchema:
  z.ZodType<
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRunEvals3$Outbound,
    z.ZodTypeDef,
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRunEvals3
  > = z.object({
    type:
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRunEvals33Type$outboundSchema,
    humanEvalId: z.string(),
  }).transform((v) => {
    return remap$(v, {
      humanEvalId: "human_eval_id",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRunEvals3$ {
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRunEvals3$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRunEvals3$inboundSchema;
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRunEvals3$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRunEvals3$outboundSchema;
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRunEvals3$Outbound` instead. */
  export type Outbound =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRunEvals3$Outbound;
}

export function getV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRunEvals3ToJSON(
  getV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRunEvals3:
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRunEvals3,
): string {
  return JSON.stringify(
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRunEvals3$outboundSchema
      .parse(
        getV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRunEvals3,
      ),
  );
}

export function getV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRunEvals3FromJSON(
  jsonString: string,
): SafeParseResult<
  GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRunEvals3,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRunEvals3$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRunEvals3' from JSON`,
  );
}

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRunEvals32Type$inboundSchema:
  z.ZodNativeEnum<
    typeof GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRunEvals32Type
  > = z.nativeEnum(
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRunEvals32Type,
  );

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRunEvals32Type$outboundSchema:
  z.ZodNativeEnum<
    typeof GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRunEvals32Type
  > =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRunEvals32Type$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRunEvals32Type$ {
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRunEvals32Type$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRunEvals32Type$inboundSchema;
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRunEvals32Type$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRunEvals32Type$outboundSchema;
}

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRunEvals2$inboundSchema:
  z.ZodType<
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRunEvals2,
    z.ZodTypeDef,
    unknown
  > = z.object({
    type:
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRunEvals32Type$inboundSchema,
    contact_id: z.string(),
  }).transform((v) => {
    return remap$(v, {
      "contact_id": "contactId",
    });
  });

/** @internal */
export type GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRunEvals2$Outbound =
  {
    type: string;
    contact_id: string;
  };

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRunEvals2$outboundSchema:
  z.ZodType<
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRunEvals2$Outbound,
    z.ZodTypeDef,
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRunEvals2
  > = z.object({
    type:
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRunEvals32Type$outboundSchema,
    contactId: z.string(),
  }).transform((v) => {
    return remap$(v, {
      contactId: "contact_id",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRunEvals2$ {
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRunEvals2$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRunEvals2$inboundSchema;
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRunEvals2$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRunEvals2$outboundSchema;
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRunEvals2$Outbound` instead. */
  export type Outbound =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRunEvals2$Outbound;
}

export function getV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRunEvals2ToJSON(
  getV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRunEvals2:
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRunEvals2,
): string {
  return JSON.stringify(
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRunEvals2$outboundSchema
      .parse(
        getV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRunEvals2,
      ),
  );
}

export function getV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRunEvals2FromJSON(
  jsonString: string,
): SafeParseResult<
  GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRunEvals2,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRunEvals2$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRunEvals2' from JSON`,
  );
}

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRunEvals3Type$inboundSchema:
  z.ZodNativeEnum<
    typeof GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRunEvals3Type
  > = z.nativeEnum(
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRunEvals3Type,
  );

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRunEvals3Type$outboundSchema:
  z.ZodNativeEnum<
    typeof GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRunEvals3Type
  > =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRunEvals3Type$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRunEvals3Type$ {
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRunEvals3Type$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRunEvals3Type$inboundSchema;
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRunEvals3Type$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRunEvals3Type$outboundSchema;
}

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRunEvals31$inboundSchema:
  z.ZodType<
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRunEvals31,
    z.ZodTypeDef,
    unknown
  > = z.object({
    type:
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRunEvals3Type$inboundSchema,
    account_id: z.string(),
  }).transform((v) => {
    return remap$(v, {
      "account_id": "accountId",
    });
  });

/** @internal */
export type GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRunEvals31$Outbound =
  {
    type: string;
    account_id: string;
  };

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRunEvals31$outboundSchema:
  z.ZodType<
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRunEvals31$Outbound,
    z.ZodTypeDef,
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRunEvals31
  > = z.object({
    type:
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRunEvals3Type$outboundSchema,
    accountId: z.string(),
  }).transform((v) => {
    return remap$(v, {
      accountId: "account_id",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRunEvals31$ {
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRunEvals31$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRunEvals31$inboundSchema;
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRunEvals31$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRunEvals31$outboundSchema;
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRunEvals31$Outbound` instead. */
  export type Outbound =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRunEvals31$Outbound;
}

export function getV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRunEvals31ToJSON(
  getV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRunEvals31:
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRunEvals31,
): string {
  return JSON.stringify(
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRunEvals31$outboundSchema
      .parse(
        getV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRunEvals31,
      ),
  );
}

export function getV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRunEvals31FromJSON(
  jsonString: string,
): SafeParseResult<
  GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRunEvals31,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRunEvals31$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRunEvals31' from JSON`,
  );
}

/** @internal */
export const GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody3Evals7WorkflowRunRelatedEntities$inboundSchema:
  z.ZodType<
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody3Evals7WorkflowRunRelatedEntities,
    z.ZodTypeDef,
    unknown
  > = z.union([
    z.lazy(() =>
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRunEvals31$inboundSchema
    ),
    z.lazy(() =>
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRunEvals2$inboundSchema
    ),
    z.lazy(() =>
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRunEvals3$inboundSchema
    ),
    z.lazy(() =>
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRunEvals4$inboundSchema
    ),
  ]);

/** @internal */
export type GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody3Evals7WorkflowRunRelatedEntities$Outbound =
  | GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRunEvals31$Outbound
  | GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRunEvals2$Outbound
  | GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRunEvals3$Outbound
  | GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRunEvals4$Outbound;

/** @internal */
export const GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody3Evals7WorkflowRunRelatedEntities$outboundSchema:
  z.ZodType<
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody3Evals7WorkflowRunRelatedEntities$Outbound,
    z.ZodTypeDef,
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody3Evals7WorkflowRunRelatedEntities
  > = z.union([
    z.lazy(() =>
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRunEvals31$outboundSchema
    ),
    z.lazy(() =>
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRunEvals2$outboundSchema
    ),
    z.lazy(() =>
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRunEvals3$outboundSchema
    ),
    z.lazy(() =>
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRunEvals4$outboundSchema
    ),
  ]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody3Evals7WorkflowRunRelatedEntities$ {
  /** @deprecated use `GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody3Evals7WorkflowRunRelatedEntities$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody3Evals7WorkflowRunRelatedEntities$inboundSchema;
  /** @deprecated use `GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody3Evals7WorkflowRunRelatedEntities$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody3Evals7WorkflowRunRelatedEntities$outboundSchema;
  /** @deprecated use `GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody3Evals7WorkflowRunRelatedEntities$Outbound` instead. */
  export type Outbound =
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody3Evals7WorkflowRunRelatedEntities$Outbound;
}

export function getV2LogsIdEvalsResponse200ApplicationJSONResponseBody3Evals7WorkflowRunRelatedEntitiesToJSON(
  getV2LogsIdEvalsResponse200ApplicationJSONResponseBody3Evals7WorkflowRunRelatedEntities:
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody3Evals7WorkflowRunRelatedEntities,
): string {
  return JSON.stringify(
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody3Evals7WorkflowRunRelatedEntities$outboundSchema
      .parse(
        getV2LogsIdEvalsResponse200ApplicationJSONResponseBody3Evals7WorkflowRunRelatedEntities,
      ),
  );
}

export function getV2LogsIdEvalsResponse200ApplicationJSONResponseBody3Evals7WorkflowRunRelatedEntitiesFromJSON(
  jsonString: string,
): SafeParseResult<
  GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody3Evals7WorkflowRunRelatedEntities,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody3Evals7WorkflowRunRelatedEntities$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody3Evals7WorkflowRunRelatedEntities' from JSON`,
  );
}

/** @internal */
export const GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody3$inboundSchema:
  z.ZodType<
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody3,
    z.ZodTypeDef,
    unknown
  > = z.object({
    type:
      GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody3Evals7WorkflowRunType$inboundSchema,
    value: z.boolean(),
    id: z.string(),
    status:
      GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody3Evals7WorkflowRunStatus$inboundSchema,
    timestamp: z.string().datetime({ offset: true }).transform(v =>
      new Date(v)
    ),
    related_entities: z.array(
      z.union([
        z.lazy(() =>
          GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRunEvals31$inboundSchema
        ),
        z.lazy(() =>
          GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRunEvals2$inboundSchema
        ),
        z.lazy(() =>
          GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRunEvals3$inboundSchema
        ),
        z.lazy(() =>
          GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRunEvals4$inboundSchema
        ),
      ]),
    ),
  }).transform((v) => {
    return remap$(v, {
      "related_entities": "relatedEntities",
    });
  });

/** @internal */
export type GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody3$Outbound = {
  type: string;
  value: boolean;
  id: string;
  status: string;
  timestamp: string;
  related_entities: Array<
    | GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRunEvals31$Outbound
    | GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRunEvals2$Outbound
    | GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRunEvals3$Outbound
    | GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRunEvals4$Outbound
  >;
};

/** @internal */
export const GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody3$outboundSchema:
  z.ZodType<
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody3$Outbound,
    z.ZodTypeDef,
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody3
  > = z.object({
    type:
      GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody3Evals7WorkflowRunType$outboundSchema,
    value: z.boolean(),
    id: z.string(),
    status:
      GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody3Evals7WorkflowRunStatus$outboundSchema,
    timestamp: z.date().transform(v => v.toISOString()),
    relatedEntities: z.array(
      z.union([
        z.lazy(() =>
          GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRunEvals31$outboundSchema
        ),
        z.lazy(() =>
          GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRunEvals2$outboundSchema
        ),
        z.lazy(() =>
          GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRunEvals3$outboundSchema
        ),
        z.lazy(() =>
          GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRunEvals4$outboundSchema
        ),
      ]),
    ),
  }).transform((v) => {
    return remap$(v, {
      relatedEntities: "related_entities",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody3$ {
  /** @deprecated use `GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody3$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody3$inboundSchema;
  /** @deprecated use `GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody3$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody3$outboundSchema;
  /** @deprecated use `GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody3$Outbound` instead. */
  export type Outbound =
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody3$Outbound;
}

export function getV2LogsIdEvalsResponse200ApplicationJSONResponseBody3ToJSON(
  getV2LogsIdEvalsResponse200ApplicationJSONResponseBody3:
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody3,
): string {
  return JSON.stringify(
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody3$outboundSchema
      .parse(getV2LogsIdEvalsResponse200ApplicationJSONResponseBody3),
  );
}

export function getV2LogsIdEvalsResponse200ApplicationJSONResponseBody3FromJSON(
  jsonString: string,
): SafeParseResult<
  GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody3,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody3$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody3' from JSON`,
  );
}

/** @internal */
export const GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody3Evals7Type$inboundSchema:
  z.ZodNativeEnum<
    typeof GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody3Evals7Type
  > = z.nativeEnum(
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody3Evals7Type,
  );

/** @internal */
export const GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody3Evals7Type$outboundSchema:
  z.ZodNativeEnum<
    typeof GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody3Evals7Type
  > =
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody3Evals7Type$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody3Evals7Type$ {
  /** @deprecated use `GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody3Evals7Type$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody3Evals7Type$inboundSchema;
  /** @deprecated use `GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody3Evals7Type$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody3Evals7Type$outboundSchema;
}

/** @internal */
export const GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody3Evals7Status$inboundSchema:
  z.ZodNativeEnum<
    typeof GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody3Evals7Status
  > = z.nativeEnum(
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody3Evals7Status,
  );

/** @internal */
export const GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody3Evals7Status$outboundSchema:
  z.ZodNativeEnum<
    typeof GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody3Evals7Status
  > =
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody3Evals7Status$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody3Evals7Status$ {
  /** @deprecated use `GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody3Evals7Status$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody3Evals7Status$inboundSchema;
  /** @deprecated use `GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody3Evals7Status$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody3Evals7Status$outboundSchema;
}

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRunEvals24Type$inboundSchema:
  z.ZodNativeEnum<
    typeof GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRunEvals24Type
  > = z.nativeEnum(
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRunEvals24Type,
  );

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRunEvals24Type$outboundSchema:
  z.ZodNativeEnum<
    typeof GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRunEvals24Type
  > =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRunEvals24Type$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRunEvals24Type$ {
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRunEvals24Type$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRunEvals24Type$inboundSchema;
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRunEvals24Type$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRunEvals24Type$outboundSchema;
}

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRun4$inboundSchema:
  z.ZodType<
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRun4,
    z.ZodTypeDef,
    unknown
  > = z.object({
    type:
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRunEvals24Type$inboundSchema,
    evaluator_id: z.string(),
  }).transform((v) => {
    return remap$(v, {
      "evaluator_id": "evaluatorId",
    });
  });

/** @internal */
export type GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRun4$Outbound =
  {
    type: string;
    evaluator_id: string;
  };

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRun4$outboundSchema:
  z.ZodType<
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRun4$Outbound,
    z.ZodTypeDef,
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRun4
  > = z.object({
    type:
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRunEvals24Type$outboundSchema,
    evaluatorId: z.string(),
  }).transform((v) => {
    return remap$(v, {
      evaluatorId: "evaluator_id",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRun4$ {
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRun4$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRun4$inboundSchema;
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRun4$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRun4$outboundSchema;
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRun4$Outbound` instead. */
  export type Outbound =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRun4$Outbound;
}

export function getV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRun4ToJSON(
  getV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRun4:
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRun4,
): string {
  return JSON.stringify(
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRun4$outboundSchema
      .parse(
        getV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRun4,
      ),
  );
}

export function getV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRun4FromJSON(
  jsonString: string,
): SafeParseResult<
  GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRun4,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRun4$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRun4' from JSON`,
  );
}

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRunEvals23Type$inboundSchema:
  z.ZodNativeEnum<
    typeof GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRunEvals23Type
  > = z.nativeEnum(
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRunEvals23Type,
  );

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRunEvals23Type$outboundSchema:
  z.ZodNativeEnum<
    typeof GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRunEvals23Type
  > =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRunEvals23Type$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRunEvals23Type$ {
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRunEvals23Type$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRunEvals23Type$inboundSchema;
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRunEvals23Type$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRunEvals23Type$outboundSchema;
}

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRun3$inboundSchema:
  z.ZodType<
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRun3,
    z.ZodTypeDef,
    unknown
  > = z.object({
    type:
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRunEvals23Type$inboundSchema,
    human_eval_id: z.string(),
  }).transform((v) => {
    return remap$(v, {
      "human_eval_id": "humanEvalId",
    });
  });

/** @internal */
export type GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRun3$Outbound =
  {
    type: string;
    human_eval_id: string;
  };

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRun3$outboundSchema:
  z.ZodType<
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRun3$Outbound,
    z.ZodTypeDef,
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRun3
  > = z.object({
    type:
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRunEvals23Type$outboundSchema,
    humanEvalId: z.string(),
  }).transform((v) => {
    return remap$(v, {
      humanEvalId: "human_eval_id",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRun3$ {
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRun3$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRun3$inboundSchema;
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRun3$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRun3$outboundSchema;
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRun3$Outbound` instead. */
  export type Outbound =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRun3$Outbound;
}

export function getV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRun3ToJSON(
  getV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRun3:
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRun3,
): string {
  return JSON.stringify(
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRun3$outboundSchema
      .parse(
        getV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRun3,
      ),
  );
}

export function getV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRun3FromJSON(
  jsonString: string,
): SafeParseResult<
  GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRun3,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRun3$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRun3' from JSON`,
  );
}

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRunEvals22Type$inboundSchema:
  z.ZodNativeEnum<
    typeof GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRunEvals22Type
  > = z.nativeEnum(
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRunEvals22Type,
  );

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRunEvals22Type$outboundSchema:
  z.ZodNativeEnum<
    typeof GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRunEvals22Type
  > =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRunEvals22Type$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRunEvals22Type$ {
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRunEvals22Type$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRunEvals22Type$inboundSchema;
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRunEvals22Type$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRunEvals22Type$outboundSchema;
}

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRun2$inboundSchema:
  z.ZodType<
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRun2,
    z.ZodTypeDef,
    unknown
  > = z.object({
    type:
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRunEvals22Type$inboundSchema,
    contact_id: z.string(),
  }).transform((v) => {
    return remap$(v, {
      "contact_id": "contactId",
    });
  });

/** @internal */
export type GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRun2$Outbound =
  {
    type: string;
    contact_id: string;
  };

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRun2$outboundSchema:
  z.ZodType<
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRun2$Outbound,
    z.ZodTypeDef,
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRun2
  > = z.object({
    type:
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRunEvals22Type$outboundSchema,
    contactId: z.string(),
  }).transform((v) => {
    return remap$(v, {
      contactId: "contact_id",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRun2$ {
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRun2$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRun2$inboundSchema;
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRun2$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRun2$outboundSchema;
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRun2$Outbound` instead. */
  export type Outbound =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRun2$Outbound;
}

export function getV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRun2ToJSON(
  getV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRun2:
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRun2,
): string {
  return JSON.stringify(
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRun2$outboundSchema
      .parse(
        getV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRun2,
      ),
  );
}

export function getV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRun2FromJSON(
  jsonString: string,
): SafeParseResult<
  GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRun2,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRun2$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRun2' from JSON`,
  );
}

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRunEvals2Type$inboundSchema:
  z.ZodNativeEnum<
    typeof GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRunEvals2Type
  > = z.nativeEnum(
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRunEvals2Type,
  );

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRunEvals2Type$outboundSchema:
  z.ZodNativeEnum<
    typeof GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRunEvals2Type
  > =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRunEvals2Type$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRunEvals2Type$ {
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRunEvals2Type$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRunEvals2Type$inboundSchema;
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRunEvals2Type$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRunEvals2Type$outboundSchema;
}

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRunEvals1$inboundSchema:
  z.ZodType<
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRunEvals1,
    z.ZodTypeDef,
    unknown
  > = z.object({
    type:
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRunEvals2Type$inboundSchema,
    account_id: z.string(),
  }).transform((v) => {
    return remap$(v, {
      "account_id": "accountId",
    });
  });

/** @internal */
export type GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRunEvals1$Outbound =
  {
    type: string;
    account_id: string;
  };

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRunEvals1$outboundSchema:
  z.ZodType<
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRunEvals1$Outbound,
    z.ZodTypeDef,
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRunEvals1
  > = z.object({
    type:
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRunEvals2Type$outboundSchema,
    accountId: z.string(),
  }).transform((v) => {
    return remap$(v, {
      accountId: "account_id",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRunEvals1$ {
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRunEvals1$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRunEvals1$inboundSchema;
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRunEvals1$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRunEvals1$outboundSchema;
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRunEvals1$Outbound` instead. */
  export type Outbound =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRunEvals1$Outbound;
}

export function getV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRunEvals1ToJSON(
  getV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRunEvals1:
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRunEvals1,
): string {
  return JSON.stringify(
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRunEvals1$outboundSchema
      .parse(
        getV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRunEvals1,
      ),
  );
}

export function getV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRunEvals1FromJSON(
  jsonString: string,
): SafeParseResult<
  GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRunEvals1,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRunEvals1$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRunEvals1' from JSON`,
  );
}

/** @internal */
export const GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody3Evals7RelatedEntities$inboundSchema:
  z.ZodType<
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody3Evals7RelatedEntities,
    z.ZodTypeDef,
    unknown
  > = z.union([
    z.lazy(() =>
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRunEvals1$inboundSchema
    ),
    z.lazy(() =>
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRun2$inboundSchema
    ),
    z.lazy(() =>
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRun3$inboundSchema
    ),
    z.lazy(() =>
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRun4$inboundSchema
    ),
  ]);

/** @internal */
export type GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody3Evals7RelatedEntities$Outbound =
  | GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRunEvals1$Outbound
  | GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRun2$Outbound
  | GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRun3$Outbound
  | GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRun4$Outbound;

/** @internal */
export const GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody3Evals7RelatedEntities$outboundSchema:
  z.ZodType<
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody3Evals7RelatedEntities$Outbound,
    z.ZodTypeDef,
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody3Evals7RelatedEntities
  > = z.union([
    z.lazy(() =>
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRunEvals1$outboundSchema
    ),
    z.lazy(() =>
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRun2$outboundSchema
    ),
    z.lazy(() =>
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRun3$outboundSchema
    ),
    z.lazy(() =>
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRun4$outboundSchema
    ),
  ]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody3Evals7RelatedEntities$ {
  /** @deprecated use `GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody3Evals7RelatedEntities$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody3Evals7RelatedEntities$inboundSchema;
  /** @deprecated use `GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody3Evals7RelatedEntities$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody3Evals7RelatedEntities$outboundSchema;
  /** @deprecated use `GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody3Evals7RelatedEntities$Outbound` instead. */
  export type Outbound =
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody3Evals7RelatedEntities$Outbound;
}

export function getV2LogsIdEvalsResponse200ApplicationJSONResponseBody3Evals7RelatedEntitiesToJSON(
  getV2LogsIdEvalsResponse200ApplicationJSONResponseBody3Evals7RelatedEntities:
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody3Evals7RelatedEntities,
): string {
  return JSON.stringify(
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody3Evals7RelatedEntities$outboundSchema
      .parse(
        getV2LogsIdEvalsResponse200ApplicationJSONResponseBody3Evals7RelatedEntities,
      ),
  );
}

export function getV2LogsIdEvalsResponse200ApplicationJSONResponseBody3Evals7RelatedEntitiesFromJSON(
  jsonString: string,
): SafeParseResult<
  GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody3Evals7RelatedEntities,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody3Evals7RelatedEntities$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody3Evals7RelatedEntities' from JSON`,
  );
}

/** @internal */
export const GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody2$inboundSchema:
  z.ZodType<
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody2,
    z.ZodTypeDef,
    unknown
  > = z.object({
    type:
      GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody3Evals7Type$inboundSchema,
    value: z.number(),
    id: z.string(),
    status:
      GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody3Evals7Status$inboundSchema,
    timestamp: z.string().datetime({ offset: true }).transform(v =>
      new Date(v)
    ),
    related_entities: z.array(
      z.union([
        z.lazy(() =>
          GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRunEvals1$inboundSchema
        ),
        z.lazy(() =>
          GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRun2$inboundSchema
        ),
        z.lazy(() =>
          GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRun3$inboundSchema
        ),
        z.lazy(() =>
          GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRun4$inboundSchema
        ),
      ]),
    ),
  }).transform((v) => {
    return remap$(v, {
      "related_entities": "relatedEntities",
    });
  });

/** @internal */
export type GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody2$Outbound = {
  type: string;
  value: number;
  id: string;
  status: string;
  timestamp: string;
  related_entities: Array<
    | GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRunEvals1$Outbound
    | GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRun2$Outbound
    | GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRun3$Outbound
    | GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRun4$Outbound
  >;
};

/** @internal */
export const GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody2$outboundSchema:
  z.ZodType<
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody2$Outbound,
    z.ZodTypeDef,
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody2
  > = z.object({
    type:
      GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody3Evals7Type$outboundSchema,
    value: z.number(),
    id: z.string(),
    status:
      GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody3Evals7Status$outboundSchema,
    timestamp: z.date().transform(v => v.toISOString()),
    relatedEntities: z.array(
      z.union([
        z.lazy(() =>
          GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRunEvals1$outboundSchema
        ),
        z.lazy(() =>
          GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRun2$outboundSchema
        ),
        z.lazy(() =>
          GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRun3$outboundSchema
        ),
        z.lazy(() =>
          GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRun4$outboundSchema
        ),
      ]),
    ),
  }).transform((v) => {
    return remap$(v, {
      relatedEntities: "related_entities",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody2$ {
  /** @deprecated use `GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody2$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody2$inboundSchema;
  /** @deprecated use `GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody2$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody2$outboundSchema;
  /** @deprecated use `GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody2$Outbound` instead. */
  export type Outbound =
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody2$Outbound;
}

export function getV2LogsIdEvalsResponse200ApplicationJSONResponseBody2ToJSON(
  getV2LogsIdEvalsResponse200ApplicationJSONResponseBody2:
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody2,
): string {
  return JSON.stringify(
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody2$outboundSchema
      .parse(getV2LogsIdEvalsResponse200ApplicationJSONResponseBody2),
  );
}

export function getV2LogsIdEvalsResponse200ApplicationJSONResponseBody2FromJSON(
  jsonString: string,
): SafeParseResult<
  GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody2,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody2$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody2' from JSON`,
  );
}

/** @internal */
export const GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody3EvalsType$inboundSchema:
  z.ZodNativeEnum<
    typeof GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody3EvalsType
  > = z.nativeEnum(
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody3EvalsType,
  );

/** @internal */
export const GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody3EvalsType$outboundSchema:
  z.ZodNativeEnum<
    typeof GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody3EvalsType
  > =
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody3EvalsType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody3EvalsType$ {
  /** @deprecated use `GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody3EvalsType$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody3EvalsType$inboundSchema;
  /** @deprecated use `GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody3EvalsType$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody3EvalsType$outboundSchema;
}

/** @internal */
export const GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody3EvalsStatus$inboundSchema:
  z.ZodNativeEnum<
    typeof GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody3EvalsStatus
  > = z.nativeEnum(
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody3EvalsStatus,
  );

/** @internal */
export const GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody3EvalsStatus$outboundSchema:
  z.ZodNativeEnum<
    typeof GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody3EvalsStatus
  > =
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody3EvalsStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody3EvalsStatus$ {
  /** @deprecated use `GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody3EvalsStatus$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody3EvalsStatus$inboundSchema;
  /** @deprecated use `GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody3EvalsStatus$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody3EvalsStatus$outboundSchema;
}

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRunEvals14Type$inboundSchema:
  z.ZodNativeEnum<
    typeof GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRunEvals14Type
  > = z.nativeEnum(
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRunEvals14Type,
  );

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRunEvals14Type$outboundSchema:
  z.ZodNativeEnum<
    typeof GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRunEvals14Type
  > =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRunEvals14Type$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRunEvals14Type$ {
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRunEvals14Type$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRunEvals14Type$inboundSchema;
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRunEvals14Type$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRunEvals14Type$outboundSchema;
}

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRunEvals14$inboundSchema:
  z.ZodType<
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRunEvals14,
    z.ZodTypeDef,
    unknown
  > = z.object({
    type:
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRunEvals14Type$inboundSchema,
    evaluator_id: z.string(),
  }).transform((v) => {
    return remap$(v, {
      "evaluator_id": "evaluatorId",
    });
  });

/** @internal */
export type GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRunEvals14$Outbound =
  {
    type: string;
    evaluator_id: string;
  };

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRunEvals14$outboundSchema:
  z.ZodType<
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRunEvals14$Outbound,
    z.ZodTypeDef,
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRunEvals14
  > = z.object({
    type:
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRunEvals14Type$outboundSchema,
    evaluatorId: z.string(),
  }).transform((v) => {
    return remap$(v, {
      evaluatorId: "evaluator_id",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRunEvals14$ {
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRunEvals14$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRunEvals14$inboundSchema;
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRunEvals14$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRunEvals14$outboundSchema;
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRunEvals14$Outbound` instead. */
  export type Outbound =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRunEvals14$Outbound;
}

export function getV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRunEvals14ToJSON(
  getV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRunEvals14:
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRunEvals14,
): string {
  return JSON.stringify(
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRunEvals14$outboundSchema
      .parse(
        getV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRunEvals14,
      ),
  );
}

export function getV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRunEvals14FromJSON(
  jsonString: string,
): SafeParseResult<
  GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRunEvals14,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRunEvals14$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRunEvals14' from JSON`,
  );
}

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRunEvals1Type$inboundSchema:
  z.ZodNativeEnum<
    typeof GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRunEvals1Type
  > = z.nativeEnum(
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRunEvals1Type,
  );

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRunEvals1Type$outboundSchema:
  z.ZodNativeEnum<
    typeof GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRunEvals1Type
  > =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRunEvals1Type$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRunEvals1Type$ {
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRunEvals1Type$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRunEvals1Type$inboundSchema;
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRunEvals1Type$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRunEvals1Type$outboundSchema;
}

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRunEvals13$inboundSchema:
  z.ZodType<
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRunEvals13,
    z.ZodTypeDef,
    unknown
  > = z.object({
    type:
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRunEvals1Type$inboundSchema,
    human_eval_id: z.string(),
  }).transform((v) => {
    return remap$(v, {
      "human_eval_id": "humanEvalId",
    });
  });

/** @internal */
export type GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRunEvals13$Outbound =
  {
    type: string;
    human_eval_id: string;
  };

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRunEvals13$outboundSchema:
  z.ZodType<
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRunEvals13$Outbound,
    z.ZodTypeDef,
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRunEvals13
  > = z.object({
    type:
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRunEvals1Type$outboundSchema,
    humanEvalId: z.string(),
  }).transform((v) => {
    return remap$(v, {
      humanEvalId: "human_eval_id",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRunEvals13$ {
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRunEvals13$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRunEvals13$inboundSchema;
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRunEvals13$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRunEvals13$outboundSchema;
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRunEvals13$Outbound` instead. */
  export type Outbound =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRunEvals13$Outbound;
}

export function getV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRunEvals13ToJSON(
  getV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRunEvals13:
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRunEvals13,
): string {
  return JSON.stringify(
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRunEvals13$outboundSchema
      .parse(
        getV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRunEvals13,
      ),
  );
}

export function getV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRunEvals13FromJSON(
  jsonString: string,
): SafeParseResult<
  GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRunEvals13,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRunEvals13$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRunEvals13' from JSON`,
  );
}

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRunEvalsType$inboundSchema:
  z.ZodNativeEnum<
    typeof GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRunEvalsType
  > = z.nativeEnum(
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRunEvalsType,
  );

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRunEvalsType$outboundSchema:
  z.ZodNativeEnum<
    typeof GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRunEvalsType
  > =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRunEvalsType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRunEvalsType$ {
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRunEvalsType$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRunEvalsType$inboundSchema;
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRunEvalsType$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRunEvalsType$outboundSchema;
}

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRunEvals12$inboundSchema:
  z.ZodType<
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRunEvals12,
    z.ZodTypeDef,
    unknown
  > = z.object({
    type:
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRunEvalsType$inboundSchema,
    contact_id: z.string(),
  }).transform((v) => {
    return remap$(v, {
      "contact_id": "contactId",
    });
  });

/** @internal */
export type GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRunEvals12$Outbound =
  {
    type: string;
    contact_id: string;
  };

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRunEvals12$outboundSchema:
  z.ZodType<
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRunEvals12$Outbound,
    z.ZodTypeDef,
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRunEvals12
  > = z.object({
    type:
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRunEvalsType$outboundSchema,
    contactId: z.string(),
  }).transform((v) => {
    return remap$(v, {
      contactId: "contact_id",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRunEvals12$ {
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRunEvals12$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRunEvals12$inboundSchema;
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRunEvals12$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRunEvals12$outboundSchema;
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRunEvals12$Outbound` instead. */
  export type Outbound =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRunEvals12$Outbound;
}

export function getV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRunEvals12ToJSON(
  getV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRunEvals12:
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRunEvals12,
): string {
  return JSON.stringify(
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRunEvals12$outboundSchema
      .parse(
        getV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRunEvals12,
      ),
  );
}

export function getV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRunEvals12FromJSON(
  jsonString: string,
): SafeParseResult<
  GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRunEvals12,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRunEvals12$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRunEvals12' from JSON`,
  );
}

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRunEvals11Type$inboundSchema:
  z.ZodNativeEnum<
    typeof GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRunEvals11Type
  > = z.nativeEnum(
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRunEvals11Type,
  );

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRunEvals11Type$outboundSchema:
  z.ZodNativeEnum<
    typeof GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRunEvals11Type
  > =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRunEvals11Type$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRunEvals11Type$ {
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRunEvals11Type$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRunEvals11Type$inboundSchema;
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRunEvals11Type$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRunEvals11Type$outboundSchema;
}

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRunEvals11$inboundSchema:
  z.ZodType<
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRunEvals11,
    z.ZodTypeDef,
    unknown
  > = z.object({
    type:
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRunEvals11Type$inboundSchema,
    account_id: z.string(),
  }).transform((v) => {
    return remap$(v, {
      "account_id": "accountId",
    });
  });

/** @internal */
export type GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRunEvals11$Outbound =
  {
    type: string;
    account_id: string;
  };

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRunEvals11$outboundSchema:
  z.ZodType<
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRunEvals11$Outbound,
    z.ZodTypeDef,
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRunEvals11
  > = z.object({
    type:
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRunEvals11Type$outboundSchema,
    accountId: z.string(),
  }).transform((v) => {
    return remap$(v, {
      accountId: "account_id",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRunEvals11$ {
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRunEvals11$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRunEvals11$inboundSchema;
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRunEvals11$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRunEvals11$outboundSchema;
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRunEvals11$Outbound` instead. */
  export type Outbound =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRunEvals11$Outbound;
}

export function getV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRunEvals11ToJSON(
  getV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRunEvals11:
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRunEvals11,
): string {
  return JSON.stringify(
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRunEvals11$outboundSchema
      .parse(
        getV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRunEvals11,
      ),
  );
}

export function getV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRunEvals11FromJSON(
  jsonString: string,
): SafeParseResult<
  GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRunEvals11,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRunEvals11$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRunEvals11' from JSON`,
  );
}

/** @internal */
export const GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody3EvalsRelatedEntities$inboundSchema:
  z.ZodType<
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody3EvalsRelatedEntities,
    z.ZodTypeDef,
    unknown
  > = z.union([
    z.lazy(() =>
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRunEvals11$inboundSchema
    ),
    z.lazy(() =>
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRunEvals12$inboundSchema
    ),
    z.lazy(() =>
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRunEvals13$inboundSchema
    ),
    z.lazy(() =>
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRunEvals14$inboundSchema
    ),
  ]);

/** @internal */
export type GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody3EvalsRelatedEntities$Outbound =
  | GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRunEvals11$Outbound
  | GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRunEvals12$Outbound
  | GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRunEvals13$Outbound
  | GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRunEvals14$Outbound;

/** @internal */
export const GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody3EvalsRelatedEntities$outboundSchema:
  z.ZodType<
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody3EvalsRelatedEntities$Outbound,
    z.ZodTypeDef,
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody3EvalsRelatedEntities
  > = z.union([
    z.lazy(() =>
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRunEvals11$outboundSchema
    ),
    z.lazy(() =>
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRunEvals12$outboundSchema
    ),
    z.lazy(() =>
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRunEvals13$outboundSchema
    ),
    z.lazy(() =>
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRunEvals14$outboundSchema
    ),
  ]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody3EvalsRelatedEntities$ {
  /** @deprecated use `GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody3EvalsRelatedEntities$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody3EvalsRelatedEntities$inboundSchema;
  /** @deprecated use `GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody3EvalsRelatedEntities$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody3EvalsRelatedEntities$outboundSchema;
  /** @deprecated use `GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody3EvalsRelatedEntities$Outbound` instead. */
  export type Outbound =
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody3EvalsRelatedEntities$Outbound;
}

export function getV2LogsIdEvalsResponse200ApplicationJSONResponseBody3EvalsRelatedEntitiesToJSON(
  getV2LogsIdEvalsResponse200ApplicationJSONResponseBody3EvalsRelatedEntities:
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody3EvalsRelatedEntities,
): string {
  return JSON.stringify(
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody3EvalsRelatedEntities$outboundSchema
      .parse(
        getV2LogsIdEvalsResponse200ApplicationJSONResponseBody3EvalsRelatedEntities,
      ),
  );
}

export function getV2LogsIdEvalsResponse200ApplicationJSONResponseBody3EvalsRelatedEntitiesFromJSON(
  jsonString: string,
): SafeParseResult<
  GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody3EvalsRelatedEntities,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody3EvalsRelatedEntities$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody3EvalsRelatedEntities' from JSON`,
  );
}

/** @internal */
export const GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody1$inboundSchema:
  z.ZodType<
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody1,
    z.ZodTypeDef,
    unknown
  > = z.object({
    type:
      GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody3EvalsType$inboundSchema,
    value: z.string(),
    id: z.string(),
    status:
      GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody3EvalsStatus$inboundSchema,
    timestamp: z.string().datetime({ offset: true }).transform(v =>
      new Date(v)
    ),
    related_entities: z.array(
      z.union([
        z.lazy(() =>
          GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRunEvals11$inboundSchema
        ),
        z.lazy(() =>
          GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRunEvals12$inboundSchema
        ),
        z.lazy(() =>
          GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRunEvals13$inboundSchema
        ),
        z.lazy(() =>
          GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRunEvals14$inboundSchema
        ),
      ]),
    ),
  }).transform((v) => {
    return remap$(v, {
      "related_entities": "relatedEntities",
    });
  });

/** @internal */
export type GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody1$Outbound = {
  type: string;
  value: string;
  id: string;
  status: string;
  timestamp: string;
  related_entities: Array<
    | GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRunEvals11$Outbound
    | GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRunEvals12$Outbound
    | GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRunEvals13$Outbound
    | GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRunEvals14$Outbound
  >;
};

/** @internal */
export const GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody1$outboundSchema:
  z.ZodType<
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody1$Outbound,
    z.ZodTypeDef,
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody1
  > = z.object({
    type:
      GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody3EvalsType$outboundSchema,
    value: z.string(),
    id: z.string(),
    status:
      GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody3EvalsStatus$outboundSchema,
    timestamp: z.date().transform(v => v.toISOString()),
    relatedEntities: z.array(
      z.union([
        z.lazy(() =>
          GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRunEvals11$outboundSchema
        ),
        z.lazy(() =>
          GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRunEvals12$outboundSchema
        ),
        z.lazy(() =>
          GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRunEvals13$outboundSchema
        ),
        z.lazy(() =>
          GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRunEvals14$outboundSchema
        ),
      ]),
    ),
  }).transform((v) => {
    return remap$(v, {
      relatedEntities: "related_entities",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody1$ {
  /** @deprecated use `GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody1$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody1$inboundSchema;
  /** @deprecated use `GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody1$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody1$outboundSchema;
  /** @deprecated use `GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody1$Outbound` instead. */
  export type Outbound =
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody1$Outbound;
}

export function getV2LogsIdEvalsResponse200ApplicationJSONResponseBody1ToJSON(
  getV2LogsIdEvalsResponse200ApplicationJSONResponseBody1:
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody1,
): string {
  return JSON.stringify(
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody1$outboundSchema
      .parse(getV2LogsIdEvalsResponse200ApplicationJSONResponseBody1),
  );
}

export function getV2LogsIdEvalsResponse200ApplicationJSONResponseBody1FromJSON(
  jsonString: string,
): SafeParseResult<
  GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody1,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody1$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody1' from JSON`,
  );
}

/** @internal */
export const GetV2LogsIdEvalsResponseEvals$inboundSchema: z.ZodType<
  GetV2LogsIdEvalsResponseEvals,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() =>
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody1$inboundSchema
  ),
  z.lazy(() =>
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody2$inboundSchema
  ),
  z.lazy(() =>
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody3$inboundSchema
  ),
  z.lazy(() =>
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody4$inboundSchema
  ),
]);

/** @internal */
export type GetV2LogsIdEvalsResponseEvals$Outbound =
  | GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody1$Outbound
  | GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody2$Outbound
  | GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody3$Outbound
  | GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody4$Outbound;

/** @internal */
export const GetV2LogsIdEvalsResponseEvals$outboundSchema: z.ZodType<
  GetV2LogsIdEvalsResponseEvals$Outbound,
  z.ZodTypeDef,
  GetV2LogsIdEvalsResponseEvals
> = z.union([
  z.lazy(() =>
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody1$outboundSchema
  ),
  z.lazy(() =>
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody2$outboundSchema
  ),
  z.lazy(() =>
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody3$outboundSchema
  ),
  z.lazy(() =>
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody4$outboundSchema
  ),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdEvalsResponseEvals$ {
  /** @deprecated use `GetV2LogsIdEvalsResponseEvals$inboundSchema` instead. */
  export const inboundSchema = GetV2LogsIdEvalsResponseEvals$inboundSchema;
  /** @deprecated use `GetV2LogsIdEvalsResponseEvals$outboundSchema` instead. */
  export const outboundSchema = GetV2LogsIdEvalsResponseEvals$outboundSchema;
  /** @deprecated use `GetV2LogsIdEvalsResponseEvals$Outbound` instead. */
  export type Outbound = GetV2LogsIdEvalsResponseEvals$Outbound;
}

export function getV2LogsIdEvalsResponseEvalsToJSON(
  getV2LogsIdEvalsResponseEvals: GetV2LogsIdEvalsResponseEvals,
): string {
  return JSON.stringify(
    GetV2LogsIdEvalsResponseEvals$outboundSchema.parse(
      getV2LogsIdEvalsResponseEvals,
    ),
  );
}

export function getV2LogsIdEvalsResponseEvalsFromJSON(
  jsonString: string,
): SafeParseResult<GetV2LogsIdEvalsResponseEvals, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetV2LogsIdEvalsResponseEvals$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetV2LogsIdEvalsResponseEvals' from JSON`,
  );
}

/** @internal */
export const GetV2LogsIdMessageResponse200ApplicationJSONResponseBody3Evals7Role$inboundSchema:
  z.ZodNativeEnum<
    typeof GetV2LogsIdMessageResponse200ApplicationJSONResponseBody3Evals7Role
  > = z.nativeEnum(
    GetV2LogsIdMessageResponse200ApplicationJSONResponseBody3Evals7Role,
  );

/** @internal */
export const GetV2LogsIdMessageResponse200ApplicationJSONResponseBody3Evals7Role$outboundSchema:
  z.ZodNativeEnum<
    typeof GetV2LogsIdMessageResponse200ApplicationJSONResponseBody3Evals7Role
  > =
    GetV2LogsIdMessageResponse200ApplicationJSONResponseBody3Evals7Role$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdMessageResponse200ApplicationJSONResponseBody3Evals7Role$ {
  /** @deprecated use `GetV2LogsIdMessageResponse200ApplicationJSONResponseBody3Evals7Role$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsIdMessageResponse200ApplicationJSONResponseBody3Evals7Role$inboundSchema;
  /** @deprecated use `GetV2LogsIdMessageResponse200ApplicationJSONResponseBody3Evals7Role$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdMessageResponse200ApplicationJSONResponseBody3Evals7Role$outboundSchema;
}

/** @internal */
export const GetV2LogsIdMessageResponse200ApplicationJson3$inboundSchema:
  z.ZodType<
    GetV2LogsIdMessageResponse200ApplicationJson3,
    z.ZodTypeDef,
    unknown
  > = z.object({
    role:
      GetV2LogsIdMessageResponse200ApplicationJSONResponseBody3Evals7Role$inboundSchema,
    url: z.string(),
  });

/** @internal */
export type GetV2LogsIdMessageResponse200ApplicationJson3$Outbound = {
  role: string;
  url: string;
};

/** @internal */
export const GetV2LogsIdMessageResponse200ApplicationJson3$outboundSchema:
  z.ZodType<
    GetV2LogsIdMessageResponse200ApplicationJson3$Outbound,
    z.ZodTypeDef,
    GetV2LogsIdMessageResponse200ApplicationJson3
  > = z.object({
    role:
      GetV2LogsIdMessageResponse200ApplicationJSONResponseBody3Evals7Role$outboundSchema,
    url: z.string(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdMessageResponse200ApplicationJson3$ {
  /** @deprecated use `GetV2LogsIdMessageResponse200ApplicationJson3$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsIdMessageResponse200ApplicationJson3$inboundSchema;
  /** @deprecated use `GetV2LogsIdMessageResponse200ApplicationJson3$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdMessageResponse200ApplicationJson3$outboundSchema;
  /** @deprecated use `GetV2LogsIdMessageResponse200ApplicationJson3$Outbound` instead. */
  export type Outbound = GetV2LogsIdMessageResponse200ApplicationJson3$Outbound;
}

export function getV2LogsIdMessageResponse200ApplicationJson3ToJSON(
  getV2LogsIdMessageResponse200ApplicationJson3:
    GetV2LogsIdMessageResponse200ApplicationJson3,
): string {
  return JSON.stringify(
    GetV2LogsIdMessageResponse200ApplicationJson3$outboundSchema.parse(
      getV2LogsIdMessageResponse200ApplicationJson3,
    ),
  );
}

export function getV2LogsIdMessageResponse200ApplicationJson3FromJSON(
  jsonString: string,
): SafeParseResult<
  GetV2LogsIdMessageResponse200ApplicationJson3,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetV2LogsIdMessageResponse200ApplicationJson3$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'GetV2LogsIdMessageResponse200ApplicationJson3' from JSON`,
  );
}

/** @internal */
export const GetV2LogsIdMessageResponse200ApplicationJSONResponseBody3EvalsRole$inboundSchema:
  z.ZodNativeEnum<
    typeof GetV2LogsIdMessageResponse200ApplicationJSONResponseBody3EvalsRole
  > = z.nativeEnum(
    GetV2LogsIdMessageResponse200ApplicationJSONResponseBody3EvalsRole,
  );

/** @internal */
export const GetV2LogsIdMessageResponse200ApplicationJSONResponseBody3EvalsRole$outboundSchema:
  z.ZodNativeEnum<
    typeof GetV2LogsIdMessageResponse200ApplicationJSONResponseBody3EvalsRole
  > =
    GetV2LogsIdMessageResponse200ApplicationJSONResponseBody3EvalsRole$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdMessageResponse200ApplicationJSONResponseBody3EvalsRole$ {
  /** @deprecated use `GetV2LogsIdMessageResponse200ApplicationJSONResponseBody3EvalsRole$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsIdMessageResponse200ApplicationJSONResponseBody3EvalsRole$inboundSchema;
  /** @deprecated use `GetV2LogsIdMessageResponse200ApplicationJSONResponseBody3EvalsRole$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdMessageResponse200ApplicationJSONResponseBody3EvalsRole$outboundSchema;
}

/** @internal */
export const GetV2LogsIdMessageResponse200ApplicationJson2$inboundSchema:
  z.ZodType<
    GetV2LogsIdMessageResponse200ApplicationJson2,
    z.ZodTypeDef,
    unknown
  > = z.object({
    role:
      GetV2LogsIdMessageResponse200ApplicationJSONResponseBody3EvalsRole$inboundSchema,
    content: z.nullable(z.string()),
  });

/** @internal */
export type GetV2LogsIdMessageResponse200ApplicationJson2$Outbound = {
  role: string;
  content: string | null;
};

/** @internal */
export const GetV2LogsIdMessageResponse200ApplicationJson2$outboundSchema:
  z.ZodType<
    GetV2LogsIdMessageResponse200ApplicationJson2$Outbound,
    z.ZodTypeDef,
    GetV2LogsIdMessageResponse200ApplicationJson2
  > = z.object({
    role:
      GetV2LogsIdMessageResponse200ApplicationJSONResponseBody3EvalsRole$outboundSchema,
    content: z.nullable(z.string()),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdMessageResponse200ApplicationJson2$ {
  /** @deprecated use `GetV2LogsIdMessageResponse200ApplicationJson2$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsIdMessageResponse200ApplicationJson2$inboundSchema;
  /** @deprecated use `GetV2LogsIdMessageResponse200ApplicationJson2$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdMessageResponse200ApplicationJson2$outboundSchema;
  /** @deprecated use `GetV2LogsIdMessageResponse200ApplicationJson2$Outbound` instead. */
  export type Outbound = GetV2LogsIdMessageResponse200ApplicationJson2$Outbound;
}

export function getV2LogsIdMessageResponse200ApplicationJson2ToJSON(
  getV2LogsIdMessageResponse200ApplicationJson2:
    GetV2LogsIdMessageResponse200ApplicationJson2,
): string {
  return JSON.stringify(
    GetV2LogsIdMessageResponse200ApplicationJson2$outboundSchema.parse(
      getV2LogsIdMessageResponse200ApplicationJson2,
    ),
  );
}

export function getV2LogsIdMessageResponse200ApplicationJson2FromJSON(
  jsonString: string,
): SafeParseResult<
  GetV2LogsIdMessageResponse200ApplicationJson2,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetV2LogsIdMessageResponse200ApplicationJson2$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'GetV2LogsIdMessageResponse200ApplicationJson2' from JSON`,
  );
}

/** @internal */
export const GetV2LogsIdMessageResponse200ApplicationJSONResponseBody3Evals7WorkflowRunRole$inboundSchema:
  z.ZodNativeEnum<
    typeof GetV2LogsIdMessageResponse200ApplicationJSONResponseBody3Evals7WorkflowRunRole
  > = z.nativeEnum(
    GetV2LogsIdMessageResponse200ApplicationJSONResponseBody3Evals7WorkflowRunRole,
  );

/** @internal */
export const GetV2LogsIdMessageResponse200ApplicationJSONResponseBody3Evals7WorkflowRunRole$outboundSchema:
  z.ZodNativeEnum<
    typeof GetV2LogsIdMessageResponse200ApplicationJSONResponseBody3Evals7WorkflowRunRole
  > =
    GetV2LogsIdMessageResponse200ApplicationJSONResponseBody3Evals7WorkflowRunRole$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdMessageResponse200ApplicationJSONResponseBody3Evals7WorkflowRunRole$ {
  /** @deprecated use `GetV2LogsIdMessageResponse200ApplicationJSONResponseBody3Evals7WorkflowRunRole$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsIdMessageResponse200ApplicationJSONResponseBody3Evals7WorkflowRunRole$inboundSchema;
  /** @deprecated use `GetV2LogsIdMessageResponse200ApplicationJSONResponseBody3Evals7WorkflowRunRole$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdMessageResponse200ApplicationJSONResponseBody3Evals7WorkflowRunRole$outboundSchema;
}

/** @internal */
export const GetV2LogsIdMessageResponse200ApplicationJSONType$inboundSchema:
  z.ZodNativeEnum<typeof GetV2LogsIdMessageResponse200ApplicationJSONType> = z
    .nativeEnum(GetV2LogsIdMessageResponse200ApplicationJSONType);

/** @internal */
export const GetV2LogsIdMessageResponse200ApplicationJSONType$outboundSchema:
  z.ZodNativeEnum<typeof GetV2LogsIdMessageResponse200ApplicationJSONType> =
    GetV2LogsIdMessageResponse200ApplicationJSONType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdMessageResponse200ApplicationJSONType$ {
  /** @deprecated use `GetV2LogsIdMessageResponse200ApplicationJSONType$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsIdMessageResponse200ApplicationJSONType$inboundSchema;
  /** @deprecated use `GetV2LogsIdMessageResponse200ApplicationJSONType$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdMessageResponse200ApplicationJSONType$outboundSchema;
}

/** @internal */
export const GetV2LogsIdMessageResponse200ApplicationJSONFunction$inboundSchema:
  z.ZodType<
    GetV2LogsIdMessageResponse200ApplicationJSONFunction,
    z.ZodTypeDef,
    unknown
  > = z.object({
    name: z.string(),
    arguments: z.string(),
  });

/** @internal */
export type GetV2LogsIdMessageResponse200ApplicationJSONFunction$Outbound = {
  name: string;
  arguments: string;
};

/** @internal */
export const GetV2LogsIdMessageResponse200ApplicationJSONFunction$outboundSchema:
  z.ZodType<
    GetV2LogsIdMessageResponse200ApplicationJSONFunction$Outbound,
    z.ZodTypeDef,
    GetV2LogsIdMessageResponse200ApplicationJSONFunction
  > = z.object({
    name: z.string(),
    arguments: z.string(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdMessageResponse200ApplicationJSONFunction$ {
  /** @deprecated use `GetV2LogsIdMessageResponse200ApplicationJSONFunction$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsIdMessageResponse200ApplicationJSONFunction$inboundSchema;
  /** @deprecated use `GetV2LogsIdMessageResponse200ApplicationJSONFunction$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdMessageResponse200ApplicationJSONFunction$outboundSchema;
  /** @deprecated use `GetV2LogsIdMessageResponse200ApplicationJSONFunction$Outbound` instead. */
  export type Outbound =
    GetV2LogsIdMessageResponse200ApplicationJSONFunction$Outbound;
}

export function getV2LogsIdMessageResponse200ApplicationJSONFunctionToJSON(
  getV2LogsIdMessageResponse200ApplicationJSONFunction:
    GetV2LogsIdMessageResponse200ApplicationJSONFunction,
): string {
  return JSON.stringify(
    GetV2LogsIdMessageResponse200ApplicationJSONFunction$outboundSchema.parse(
      getV2LogsIdMessageResponse200ApplicationJSONFunction,
    ),
  );
}

export function getV2LogsIdMessageResponse200ApplicationJSONFunctionFromJSON(
  jsonString: string,
): SafeParseResult<
  GetV2LogsIdMessageResponse200ApplicationJSONFunction,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetV2LogsIdMessageResponse200ApplicationJSONFunction$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'GetV2LogsIdMessageResponse200ApplicationJSONFunction' from JSON`,
  );
}

/** @internal */
export const GetV2LogsIdMessageResponse200ApplicationJSONToolCalls$inboundSchema:
  z.ZodType<
    GetV2LogsIdMessageResponse200ApplicationJSONToolCalls,
    z.ZodTypeDef,
    unknown
  > = z.object({
    id: z.string().optional(),
    index: z.number().optional(),
    type: GetV2LogsIdMessageResponse200ApplicationJSONType$inboundSchema,
    function: z.lazy(() =>
      GetV2LogsIdMessageResponse200ApplicationJSONFunction$inboundSchema
    ),
  });

/** @internal */
export type GetV2LogsIdMessageResponse200ApplicationJSONToolCalls$Outbound = {
  id?: string | undefined;
  index?: number | undefined;
  type: string;
  function: GetV2LogsIdMessageResponse200ApplicationJSONFunction$Outbound;
};

/** @internal */
export const GetV2LogsIdMessageResponse200ApplicationJSONToolCalls$outboundSchema:
  z.ZodType<
    GetV2LogsIdMessageResponse200ApplicationJSONToolCalls$Outbound,
    z.ZodTypeDef,
    GetV2LogsIdMessageResponse200ApplicationJSONToolCalls
  > = z.object({
    id: z.string().optional(),
    index: z.number().optional(),
    type: GetV2LogsIdMessageResponse200ApplicationJSONType$outboundSchema,
    function: z.lazy(() =>
      GetV2LogsIdMessageResponse200ApplicationJSONFunction$outboundSchema
    ),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdMessageResponse200ApplicationJSONToolCalls$ {
  /** @deprecated use `GetV2LogsIdMessageResponse200ApplicationJSONToolCalls$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsIdMessageResponse200ApplicationJSONToolCalls$inboundSchema;
  /** @deprecated use `GetV2LogsIdMessageResponse200ApplicationJSONToolCalls$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdMessageResponse200ApplicationJSONToolCalls$outboundSchema;
  /** @deprecated use `GetV2LogsIdMessageResponse200ApplicationJSONToolCalls$Outbound` instead. */
  export type Outbound =
    GetV2LogsIdMessageResponse200ApplicationJSONToolCalls$Outbound;
}

export function getV2LogsIdMessageResponse200ApplicationJSONToolCallsToJSON(
  getV2LogsIdMessageResponse200ApplicationJSONToolCalls:
    GetV2LogsIdMessageResponse200ApplicationJSONToolCalls,
): string {
  return JSON.stringify(
    GetV2LogsIdMessageResponse200ApplicationJSONToolCalls$outboundSchema.parse(
      getV2LogsIdMessageResponse200ApplicationJSONToolCalls,
    ),
  );
}

export function getV2LogsIdMessageResponse200ApplicationJSONToolCallsFromJSON(
  jsonString: string,
): SafeParseResult<
  GetV2LogsIdMessageResponse200ApplicationJSONToolCalls,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetV2LogsIdMessageResponse200ApplicationJSONToolCalls$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'GetV2LogsIdMessageResponse200ApplicationJSONToolCalls' from JSON`,
  );
}

/** @internal */
export const GetV2LogsIdMessageResponse200ApplicationJson1$inboundSchema:
  z.ZodType<
    GetV2LogsIdMessageResponse200ApplicationJson1,
    z.ZodTypeDef,
    unknown
  > = z.object({
    role:
      GetV2LogsIdMessageResponse200ApplicationJSONResponseBody3Evals7WorkflowRunRole$inboundSchema,
    content: z.nullable(z.string()).optional(),
    tool_calls: z.array(
      z.lazy(() =>
        GetV2LogsIdMessageResponse200ApplicationJSONToolCalls$inboundSchema
      ),
    ),
  }).transform((v) => {
    return remap$(v, {
      "tool_calls": "toolCalls",
    });
  });

/** @internal */
export type GetV2LogsIdMessageResponse200ApplicationJson1$Outbound = {
  role: string;
  content?: string | null | undefined;
  tool_calls: Array<
    GetV2LogsIdMessageResponse200ApplicationJSONToolCalls$Outbound
  >;
};

/** @internal */
export const GetV2LogsIdMessageResponse200ApplicationJson1$outboundSchema:
  z.ZodType<
    GetV2LogsIdMessageResponse200ApplicationJson1$Outbound,
    z.ZodTypeDef,
    GetV2LogsIdMessageResponse200ApplicationJson1
  > = z.object({
    role:
      GetV2LogsIdMessageResponse200ApplicationJSONResponseBody3Evals7WorkflowRunRole$outboundSchema,
    content: z.nullable(z.string()).optional(),
    toolCalls: z.array(
      z.lazy(() =>
        GetV2LogsIdMessageResponse200ApplicationJSONToolCalls$outboundSchema
      ),
    ),
  }).transform((v) => {
    return remap$(v, {
      toolCalls: "tool_calls",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdMessageResponse200ApplicationJson1$ {
  /** @deprecated use `GetV2LogsIdMessageResponse200ApplicationJson1$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsIdMessageResponse200ApplicationJson1$inboundSchema;
  /** @deprecated use `GetV2LogsIdMessageResponse200ApplicationJson1$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdMessageResponse200ApplicationJson1$outboundSchema;
  /** @deprecated use `GetV2LogsIdMessageResponse200ApplicationJson1$Outbound` instead. */
  export type Outbound = GetV2LogsIdMessageResponse200ApplicationJson1$Outbound;
}

export function getV2LogsIdMessageResponse200ApplicationJson1ToJSON(
  getV2LogsIdMessageResponse200ApplicationJson1:
    GetV2LogsIdMessageResponse200ApplicationJson1,
): string {
  return JSON.stringify(
    GetV2LogsIdMessageResponse200ApplicationJson1$outboundSchema.parse(
      getV2LogsIdMessageResponse200ApplicationJson1,
    ),
  );
}

export function getV2LogsIdMessageResponse200ApplicationJson1FromJSON(
  jsonString: string,
): SafeParseResult<
  GetV2LogsIdMessageResponse200ApplicationJson1,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetV2LogsIdMessageResponse200ApplicationJson1$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'GetV2LogsIdMessageResponse200ApplicationJson1' from JSON`,
  );
}

/** @internal */
export const GetV2LogsIdEvalsResponseMessage$inboundSchema: z.ZodType<
  GetV2LogsIdEvalsResponseMessage,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => GetV2LogsIdMessageResponse200ApplicationJson2$inboundSchema),
  z.lazy(() => GetV2LogsIdMessageResponse200ApplicationJson3$inboundSchema),
  z.lazy(() => GetV2LogsIdMessageResponse200ApplicationJson1$inboundSchema),
]);

/** @internal */
export type GetV2LogsIdEvalsResponseMessage$Outbound =
  | GetV2LogsIdMessageResponse200ApplicationJson2$Outbound
  | GetV2LogsIdMessageResponse200ApplicationJson3$Outbound
  | GetV2LogsIdMessageResponse200ApplicationJson1$Outbound;

/** @internal */
export const GetV2LogsIdEvalsResponseMessage$outboundSchema: z.ZodType<
  GetV2LogsIdEvalsResponseMessage$Outbound,
  z.ZodTypeDef,
  GetV2LogsIdEvalsResponseMessage
> = z.union([
  z.lazy(() => GetV2LogsIdMessageResponse200ApplicationJson2$outboundSchema),
  z.lazy(() => GetV2LogsIdMessageResponse200ApplicationJson3$outboundSchema),
  z.lazy(() => GetV2LogsIdMessageResponse200ApplicationJson1$outboundSchema),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdEvalsResponseMessage$ {
  /** @deprecated use `GetV2LogsIdEvalsResponseMessage$inboundSchema` instead. */
  export const inboundSchema = GetV2LogsIdEvalsResponseMessage$inboundSchema;
  /** @deprecated use `GetV2LogsIdEvalsResponseMessage$outboundSchema` instead. */
  export const outboundSchema = GetV2LogsIdEvalsResponseMessage$outboundSchema;
  /** @deprecated use `GetV2LogsIdEvalsResponseMessage$Outbound` instead. */
  export type Outbound = GetV2LogsIdEvalsResponseMessage$Outbound;
}

export function getV2LogsIdEvalsResponseMessageToJSON(
  getV2LogsIdEvalsResponseMessage: GetV2LogsIdEvalsResponseMessage,
): string {
  return JSON.stringify(
    GetV2LogsIdEvalsResponseMessage$outboundSchema.parse(
      getV2LogsIdEvalsResponseMessage,
    ),
  );
}

export function getV2LogsIdEvalsResponseMessageFromJSON(
  jsonString: string,
): SafeParseResult<GetV2LogsIdEvalsResponseMessage, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetV2LogsIdEvalsResponseMessage$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetV2LogsIdEvalsResponseMessage' from JSON`,
  );
}

/** @internal */
export const GetV2LogsIdEvalsResponseChoices$inboundSchema: z.ZodType<
  GetV2LogsIdEvalsResponseChoices,
  z.ZodTypeDef,
  unknown
> = z.object({
  index: z.number(),
  message: z.union([
    z.lazy(() => GetV2LogsIdMessageResponse200ApplicationJson2$inboundSchema),
    z.lazy(() => GetV2LogsIdMessageResponse200ApplicationJson3$inboundSchema),
    z.lazy(() => GetV2LogsIdMessageResponse200ApplicationJson1$inboundSchema),
  ]).optional(),
  finish_reason: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    "finish_reason": "finishReason",
  });
});

/** @internal */
export type GetV2LogsIdEvalsResponseChoices$Outbound = {
  index: number;
  message?:
    | GetV2LogsIdMessageResponse200ApplicationJson2$Outbound
    | GetV2LogsIdMessageResponse200ApplicationJson3$Outbound
    | GetV2LogsIdMessageResponse200ApplicationJson1$Outbound
    | undefined;
  finish_reason?: string | null | undefined;
};

/** @internal */
export const GetV2LogsIdEvalsResponseChoices$outboundSchema: z.ZodType<
  GetV2LogsIdEvalsResponseChoices$Outbound,
  z.ZodTypeDef,
  GetV2LogsIdEvalsResponseChoices
> = z.object({
  index: z.number(),
  message: z.union([
    z.lazy(() => GetV2LogsIdMessageResponse200ApplicationJson2$outboundSchema),
    z.lazy(() => GetV2LogsIdMessageResponse200ApplicationJson3$outboundSchema),
    z.lazy(() => GetV2LogsIdMessageResponse200ApplicationJson1$outboundSchema),
  ]).optional(),
  finishReason: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    finishReason: "finish_reason",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdEvalsResponseChoices$ {
  /** @deprecated use `GetV2LogsIdEvalsResponseChoices$inboundSchema` instead. */
  export const inboundSchema = GetV2LogsIdEvalsResponseChoices$inboundSchema;
  /** @deprecated use `GetV2LogsIdEvalsResponseChoices$outboundSchema` instead. */
  export const outboundSchema = GetV2LogsIdEvalsResponseChoices$outboundSchema;
  /** @deprecated use `GetV2LogsIdEvalsResponseChoices$Outbound` instead. */
  export type Outbound = GetV2LogsIdEvalsResponseChoices$Outbound;
}

export function getV2LogsIdEvalsResponseChoicesToJSON(
  getV2LogsIdEvalsResponseChoices: GetV2LogsIdEvalsResponseChoices,
): string {
  return JSON.stringify(
    GetV2LogsIdEvalsResponseChoices$outboundSchema.parse(
      getV2LogsIdEvalsResponseChoices,
    ),
  );
}

export function getV2LogsIdEvalsResponseChoicesFromJSON(
  jsonString: string,
): SafeParseResult<GetV2LogsIdEvalsResponseChoices, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetV2LogsIdEvalsResponseChoices$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetV2LogsIdEvalsResponseChoices' from JSON`,
  );
}

/** @internal */
export const GetV2LogsIdEvalsResponseAction$inboundSchema: z.ZodNativeEnum<
  typeof GetV2LogsIdEvalsResponseAction
> = z.nativeEnum(GetV2LogsIdEvalsResponseAction);

/** @internal */
export const GetV2LogsIdEvalsResponseAction$outboundSchema: z.ZodNativeEnum<
  typeof GetV2LogsIdEvalsResponseAction
> = GetV2LogsIdEvalsResponseAction$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdEvalsResponseAction$ {
  /** @deprecated use `GetV2LogsIdEvalsResponseAction$inboundSchema` instead. */
  export const inboundSchema = GetV2LogsIdEvalsResponseAction$inboundSchema;
  /** @deprecated use `GetV2LogsIdEvalsResponseAction$outboundSchema` instead. */
  export const outboundSchema = GetV2LogsIdEvalsResponseAction$outboundSchema;
}

/** @internal */
export const GetV2LogsIdEvalsResponseModelType$inboundSchema: z.ZodNativeEnum<
  typeof GetV2LogsIdEvalsResponseModelType
> = z.nativeEnum(GetV2LogsIdEvalsResponseModelType);

/** @internal */
export const GetV2LogsIdEvalsResponseModelType$outboundSchema: z.ZodNativeEnum<
  typeof GetV2LogsIdEvalsResponseModelType
> = GetV2LogsIdEvalsResponseModelType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdEvalsResponseModelType$ {
  /** @deprecated use `GetV2LogsIdEvalsResponseModelType$inboundSchema` instead. */
  export const inboundSchema = GetV2LogsIdEvalsResponseModelType$inboundSchema;
  /** @deprecated use `GetV2LogsIdEvalsResponseModelType$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdEvalsResponseModelType$outboundSchema;
}

/** @internal */
export const GetV2LogsIdEvalsResponse200Format$inboundSchema: z.ZodNativeEnum<
  typeof GetV2LogsIdEvalsResponse200Format
> = z.nativeEnum(GetV2LogsIdEvalsResponse200Format);

/** @internal */
export const GetV2LogsIdEvalsResponse200Format$outboundSchema: z.ZodNativeEnum<
  typeof GetV2LogsIdEvalsResponse200Format
> = GetV2LogsIdEvalsResponse200Format$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdEvalsResponse200Format$ {
  /** @deprecated use `GetV2LogsIdEvalsResponse200Format$inboundSchema` instead. */
  export const inboundSchema = GetV2LogsIdEvalsResponse200Format$inboundSchema;
  /** @deprecated use `GetV2LogsIdEvalsResponse200Format$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdEvalsResponse200Format$outboundSchema;
}

/** @internal */
export const GetV2LogsIdEvalsResponseQuality$inboundSchema: z.ZodNativeEnum<
  typeof GetV2LogsIdEvalsResponseQuality
> = z.nativeEnum(GetV2LogsIdEvalsResponseQuality);

/** @internal */
export const GetV2LogsIdEvalsResponseQuality$outboundSchema: z.ZodNativeEnum<
  typeof GetV2LogsIdEvalsResponseQuality
> = GetV2LogsIdEvalsResponseQuality$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdEvalsResponseQuality$ {
  /** @deprecated use `GetV2LogsIdEvalsResponseQuality$inboundSchema` instead. */
  export const inboundSchema = GetV2LogsIdEvalsResponseQuality$inboundSchema;
  /** @deprecated use `GetV2LogsIdEvalsResponseQuality$outboundSchema` instead. */
  export const outboundSchema = GetV2LogsIdEvalsResponseQuality$outboundSchema;
}

/** @internal */
export const GetV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody3EvalsType$inboundSchema:
  z.ZodNativeEnum<
    typeof GetV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody3EvalsType
  > = z.nativeEnum(
    GetV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody3EvalsType,
  );

/** @internal */
export const GetV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody3EvalsType$outboundSchema:
  z.ZodNativeEnum<
    typeof GetV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody3EvalsType
  > =
    GetV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody3EvalsType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody3EvalsType$ {
  /** @deprecated use `GetV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody3EvalsType$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody3EvalsType$inboundSchema;
  /** @deprecated use `GetV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody3EvalsType$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody3EvalsType$outboundSchema;
}

/** @internal */
export const GetV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody32$inboundSchema:
  z.ZodType<
    GetV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody32,
    z.ZodTypeDef,
    unknown
  > = z.object({
    type:
      GetV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody3EvalsType$inboundSchema,
  });

/** @internal */
export type GetV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody32$Outbound =
  {
    type: string;
  };

/** @internal */
export const GetV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody32$outboundSchema:
  z.ZodType<
    GetV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody32$Outbound,
    z.ZodTypeDef,
    GetV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody32
  > = z.object({
    type:
      GetV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody3EvalsType$outboundSchema,
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody32$ {
  /** @deprecated use `GetV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody32$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody32$inboundSchema;
  /** @deprecated use `GetV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody32$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody32$outboundSchema;
  /** @deprecated use `GetV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody32$Outbound` instead. */
  export type Outbound =
    GetV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody32$Outbound;
}

export function getV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody32ToJSON(
  getV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody32:
    GetV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody32,
): string {
  return JSON.stringify(
    GetV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody32$outboundSchema
      .parse(getV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody32),
  );
}

export function getV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody32FromJSON(
  jsonString: string,
): SafeParseResult<
  GetV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody32,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody32$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'GetV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody32' from JSON`,
  );
}

/** @internal */
export const GetV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody3Type$inboundSchema:
  z.ZodNativeEnum<
    typeof GetV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody3Type
  > = z.nativeEnum(
    GetV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody3Type,
  );

/** @internal */
export const GetV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody3Type$outboundSchema:
  z.ZodNativeEnum<
    typeof GetV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody3Type
  > =
    GetV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody3Type$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody3Type$ {
  /** @deprecated use `GetV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody3Type$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody3Type$inboundSchema;
  /** @deprecated use `GetV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody3Type$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody3Type$outboundSchema;
}

/** @internal */
export const GetV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody3JSONSchema$inboundSchema:
  z.ZodType<
    GetV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody3JSONSchema,
    z.ZodTypeDef,
    unknown
  > = z.object({
    name: z.string(),
    strict: z.boolean(),
    schema: z.record(z.any()),
  });

/** @internal */
export type GetV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody3JSONSchema$Outbound =
  {
    name: string;
    strict: boolean;
    schema: { [k: string]: any };
  };

/** @internal */
export const GetV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody3JSONSchema$outboundSchema:
  z.ZodType<
    GetV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody3JSONSchema$Outbound,
    z.ZodTypeDef,
    GetV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody3JSONSchema
  > = z.object({
    name: z.string(),
    strict: z.boolean(),
    schema: z.record(z.any()),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody3JSONSchema$ {
  /** @deprecated use `GetV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody3JSONSchema$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody3JSONSchema$inboundSchema;
  /** @deprecated use `GetV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody3JSONSchema$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody3JSONSchema$outboundSchema;
  /** @deprecated use `GetV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody3JSONSchema$Outbound` instead. */
  export type Outbound =
    GetV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody3JSONSchema$Outbound;
}

export function getV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody3JSONSchemaToJSON(
  getV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody3JSONSchema:
    GetV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody3JSONSchema,
): string {
  return JSON.stringify(
    GetV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody3JSONSchema$outboundSchema
      .parse(
        getV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody3JSONSchema,
      ),
  );
}

export function getV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody3JSONSchemaFromJSON(
  jsonString: string,
): SafeParseResult<
  GetV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody3JSONSchema,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody3JSONSchema$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'GetV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody3JSONSchema' from JSON`,
  );
}

/** @internal */
export const GetV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody31$inboundSchema:
  z.ZodType<
    GetV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody31,
    z.ZodTypeDef,
    unknown
  > = z.object({
    type:
      GetV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody3Type$inboundSchema,
    json_schema: z.lazy(() =>
      GetV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody3JSONSchema$inboundSchema
    ),
  }).transform((v) => {
    return remap$(v, {
      "json_schema": "jsonSchema",
    });
  });

/** @internal */
export type GetV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody31$Outbound =
  {
    type: string;
    json_schema:
      GetV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody3JSONSchema$Outbound;
  };

/** @internal */
export const GetV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody31$outboundSchema:
  z.ZodType<
    GetV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody31$Outbound,
    z.ZodTypeDef,
    GetV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody31
  > = z.object({
    type:
      GetV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody3Type$outboundSchema,
    jsonSchema: z.lazy(() =>
      GetV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody3JSONSchema$outboundSchema
    ),
  }).transform((v) => {
    return remap$(v, {
      jsonSchema: "json_schema",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody31$ {
  /** @deprecated use `GetV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody31$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody31$inboundSchema;
  /** @deprecated use `GetV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody31$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody31$outboundSchema;
  /** @deprecated use `GetV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody31$Outbound` instead. */
  export type Outbound =
    GetV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody31$Outbound;
}

export function getV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody31ToJSON(
  getV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody31:
    GetV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody31,
): string {
  return JSON.stringify(
    GetV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody31$outboundSchema
      .parse(getV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody31),
  );
}

export function getV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody31FromJSON(
  jsonString: string,
): SafeParseResult<
  GetV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody31,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody31$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'GetV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody31' from JSON`,
  );
}

/** @internal */
export const GetV2LogsIdEvalsResponseResponseFormat$inboundSchema: z.ZodType<
  GetV2LogsIdEvalsResponseResponseFormat,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() =>
    GetV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody32$inboundSchema
  ),
  z.lazy(() =>
    GetV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody31$inboundSchema
  ),
]);

/** @internal */
export type GetV2LogsIdEvalsResponseResponseFormat$Outbound =
  | GetV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody32$Outbound
  | GetV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody31$Outbound;

/** @internal */
export const GetV2LogsIdEvalsResponseResponseFormat$outboundSchema: z.ZodType<
  GetV2LogsIdEvalsResponseResponseFormat$Outbound,
  z.ZodTypeDef,
  GetV2LogsIdEvalsResponseResponseFormat
> = z.union([
  z.lazy(() =>
    GetV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody32$outboundSchema
  ),
  z.lazy(() =>
    GetV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody31$outboundSchema
  ),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdEvalsResponseResponseFormat$ {
  /** @deprecated use `GetV2LogsIdEvalsResponseResponseFormat$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsIdEvalsResponseResponseFormat$inboundSchema;
  /** @deprecated use `GetV2LogsIdEvalsResponseResponseFormat$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdEvalsResponseResponseFormat$outboundSchema;
  /** @deprecated use `GetV2LogsIdEvalsResponseResponseFormat$Outbound` instead. */
  export type Outbound = GetV2LogsIdEvalsResponseResponseFormat$Outbound;
}

export function getV2LogsIdEvalsResponseResponseFormatToJSON(
  getV2LogsIdEvalsResponseResponseFormat:
    GetV2LogsIdEvalsResponseResponseFormat,
): string {
  return JSON.stringify(
    GetV2LogsIdEvalsResponseResponseFormat$outboundSchema.parse(
      getV2LogsIdEvalsResponseResponseFormat,
    ),
  );
}

export function getV2LogsIdEvalsResponseResponseFormatFromJSON(
  jsonString: string,
): SafeParseResult<GetV2LogsIdEvalsResponseResponseFormat, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      GetV2LogsIdEvalsResponseResponseFormat$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetV2LogsIdEvalsResponseResponseFormat' from JSON`,
  );
}

/** @internal */
export const GetV2LogsIdEvalsResponsePhotoRealVersion$inboundSchema:
  z.ZodNativeEnum<typeof GetV2LogsIdEvalsResponsePhotoRealVersion> = z
    .nativeEnum(GetV2LogsIdEvalsResponsePhotoRealVersion);

/** @internal */
export const GetV2LogsIdEvalsResponsePhotoRealVersion$outboundSchema:
  z.ZodNativeEnum<typeof GetV2LogsIdEvalsResponsePhotoRealVersion> =
    GetV2LogsIdEvalsResponsePhotoRealVersion$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdEvalsResponsePhotoRealVersion$ {
  /** @deprecated use `GetV2LogsIdEvalsResponsePhotoRealVersion$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsIdEvalsResponsePhotoRealVersion$inboundSchema;
  /** @deprecated use `GetV2LogsIdEvalsResponsePhotoRealVersion$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdEvalsResponsePhotoRealVersion$outboundSchema;
}

/** @internal */
export const GetV2LogsIdEvalsResponseEncodingFormat$inboundSchema:
  z.ZodNativeEnum<typeof GetV2LogsIdEvalsResponseEncodingFormat> = z.nativeEnum(
    GetV2LogsIdEvalsResponseEncodingFormat,
  );

/** @internal */
export const GetV2LogsIdEvalsResponseEncodingFormat$outboundSchema:
  z.ZodNativeEnum<typeof GetV2LogsIdEvalsResponseEncodingFormat> =
    GetV2LogsIdEvalsResponseEncodingFormat$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdEvalsResponseEncodingFormat$ {
  /** @deprecated use `GetV2LogsIdEvalsResponseEncodingFormat$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsIdEvalsResponseEncodingFormat$inboundSchema;
  /** @deprecated use `GetV2LogsIdEvalsResponseEncodingFormat$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdEvalsResponseEncodingFormat$outboundSchema;
}

/** @internal */
export const GetV2LogsIdEvalsResponseModelParameters$inboundSchema: z.ZodType<
  GetV2LogsIdEvalsResponseModelParameters,
  z.ZodTypeDef,
  unknown
> = z.object({
  temperature: z.number().optional(),
  maxTokens: z.number().optional(),
  topK: z.number().optional(),
  topP: z.number().optional(),
  frequencyPenalty: z.number().optional(),
  presencePenalty: z.number().optional(),
  numImages: z.number().optional(),
  seed: z.number().optional(),
  format: GetV2LogsIdEvalsResponse200Format$inboundSchema.optional(),
  dimensions: z.string().optional(),
  quality: GetV2LogsIdEvalsResponseQuality$inboundSchema.optional(),
  style: z.string().optional(),
  responseFormat: z.nullable(
    z.union([
      z.lazy(() =>
        GetV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody32$inboundSchema
      ),
      z.lazy(() =>
        GetV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody31$inboundSchema
      ),
    ]),
  ).optional(),
  photoRealVersion: GetV2LogsIdEvalsResponsePhotoRealVersion$inboundSchema
    .optional(),
  encoding_format: GetV2LogsIdEvalsResponseEncodingFormat$inboundSchema
    .optional(),
}).transform((v) => {
  return remap$(v, {
    "encoding_format": "encodingFormat",
  });
});

/** @internal */
export type GetV2LogsIdEvalsResponseModelParameters$Outbound = {
  temperature?: number | undefined;
  maxTokens?: number | undefined;
  topK?: number | undefined;
  topP?: number | undefined;
  frequencyPenalty?: number | undefined;
  presencePenalty?: number | undefined;
  numImages?: number | undefined;
  seed?: number | undefined;
  format?: string | undefined;
  dimensions?: string | undefined;
  quality?: string | undefined;
  style?: string | undefined;
  responseFormat?:
    | GetV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody32$Outbound
    | GetV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody31$Outbound
    | null
    | undefined;
  photoRealVersion?: string | undefined;
  encoding_format?: string | undefined;
};

/** @internal */
export const GetV2LogsIdEvalsResponseModelParameters$outboundSchema: z.ZodType<
  GetV2LogsIdEvalsResponseModelParameters$Outbound,
  z.ZodTypeDef,
  GetV2LogsIdEvalsResponseModelParameters
> = z.object({
  temperature: z.number().optional(),
  maxTokens: z.number().optional(),
  topK: z.number().optional(),
  topP: z.number().optional(),
  frequencyPenalty: z.number().optional(),
  presencePenalty: z.number().optional(),
  numImages: z.number().optional(),
  seed: z.number().optional(),
  format: GetV2LogsIdEvalsResponse200Format$outboundSchema.optional(),
  dimensions: z.string().optional(),
  quality: GetV2LogsIdEvalsResponseQuality$outboundSchema.optional(),
  style: z.string().optional(),
  responseFormat: z.nullable(
    z.union([
      z.lazy(() =>
        GetV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody32$outboundSchema
      ),
      z.lazy(() =>
        GetV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody31$outboundSchema
      ),
    ]),
  ).optional(),
  photoRealVersion: GetV2LogsIdEvalsResponsePhotoRealVersion$outboundSchema
    .optional(),
  encodingFormat: GetV2LogsIdEvalsResponseEncodingFormat$outboundSchema
    .optional(),
}).transform((v) => {
  return remap$(v, {
    encodingFormat: "encoding_format",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdEvalsResponseModelParameters$ {
  /** @deprecated use `GetV2LogsIdEvalsResponseModelParameters$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsIdEvalsResponseModelParameters$inboundSchema;
  /** @deprecated use `GetV2LogsIdEvalsResponseModelParameters$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdEvalsResponseModelParameters$outboundSchema;
  /** @deprecated use `GetV2LogsIdEvalsResponseModelParameters$Outbound` instead. */
  export type Outbound = GetV2LogsIdEvalsResponseModelParameters$Outbound;
}

export function getV2LogsIdEvalsResponseModelParametersToJSON(
  getV2LogsIdEvalsResponseModelParameters:
    GetV2LogsIdEvalsResponseModelParameters,
): string {
  return JSON.stringify(
    GetV2LogsIdEvalsResponseModelParameters$outboundSchema.parse(
      getV2LogsIdEvalsResponseModelParameters,
    ),
  );
}

export function getV2LogsIdEvalsResponseModelParametersFromJSON(
  jsonString: string,
): SafeParseResult<
  GetV2LogsIdEvalsResponseModelParameters,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetV2LogsIdEvalsResponseModelParameters$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'GetV2LogsIdEvalsResponseModelParameters' from JSON`,
  );
}

/** @internal */
export const GetV2LogsIdEvalsResponseProvider$inboundSchema: z.ZodNativeEnum<
  typeof GetV2LogsIdEvalsResponseProvider
> = z.nativeEnum(GetV2LogsIdEvalsResponseProvider);

/** @internal */
export const GetV2LogsIdEvalsResponseProvider$outboundSchema: z.ZodNativeEnum<
  typeof GetV2LogsIdEvalsResponseProvider
> = GetV2LogsIdEvalsResponseProvider$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdEvalsResponseProvider$ {
  /** @deprecated use `GetV2LogsIdEvalsResponseProvider$inboundSchema` instead. */
  export const inboundSchema = GetV2LogsIdEvalsResponseProvider$inboundSchema;
  /** @deprecated use `GetV2LogsIdEvalsResponseProvider$outboundSchema` instead. */
  export const outboundSchema = GetV2LogsIdEvalsResponseProvider$outboundSchema;
}

/** @internal */
export const GetV2LogsIdEvalsResponseRole$inboundSchema: z.ZodNativeEnum<
  typeof GetV2LogsIdEvalsResponseRole
> = z.nativeEnum(GetV2LogsIdEvalsResponseRole);

/** @internal */
export const GetV2LogsIdEvalsResponseRole$outboundSchema: z.ZodNativeEnum<
  typeof GetV2LogsIdEvalsResponseRole
> = GetV2LogsIdEvalsResponseRole$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdEvalsResponseRole$ {
  /** @deprecated use `GetV2LogsIdEvalsResponseRole$inboundSchema` instead. */
  export const inboundSchema = GetV2LogsIdEvalsResponseRole$inboundSchema;
  /** @deprecated use `GetV2LogsIdEvalsResponseRole$outboundSchema` instead. */
  export const outboundSchema = GetV2LogsIdEvalsResponseRole$outboundSchema;
}

/** @internal */
export const GetV2LogsId2Response200ApplicationJSONResponseBody3EvalsType$inboundSchema:
  z.ZodNativeEnum<
    typeof GetV2LogsId2Response200ApplicationJSONResponseBody3EvalsType
  > = z.nativeEnum(
    GetV2LogsId2Response200ApplicationJSONResponseBody3EvalsType,
  );

/** @internal */
export const GetV2LogsId2Response200ApplicationJSONResponseBody3EvalsType$outboundSchema:
  z.ZodNativeEnum<
    typeof GetV2LogsId2Response200ApplicationJSONResponseBody3EvalsType
  > =
    GetV2LogsId2Response200ApplicationJSONResponseBody3EvalsType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsId2Response200ApplicationJSONResponseBody3EvalsType$ {
  /** @deprecated use `GetV2LogsId2Response200ApplicationJSONResponseBody3EvalsType$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsId2Response200ApplicationJSONResponseBody3EvalsType$inboundSchema;
  /** @deprecated use `GetV2LogsId2Response200ApplicationJSONResponseBody3EvalsType$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsId2Response200ApplicationJSONResponseBody3EvalsType$outboundSchema;
}

/** @internal */
export const GetV2LogsId2Response200ApplicationJSONImageUrl$inboundSchema:
  z.ZodType<
    GetV2LogsId2Response200ApplicationJSONImageUrl,
    z.ZodTypeDef,
    unknown
  > = z.object({
    id: z.string().optional(),
    url: z.string(),
    detail: z.string().optional(),
  });

/** @internal */
export type GetV2LogsId2Response200ApplicationJSONImageUrl$Outbound = {
  id?: string | undefined;
  url: string;
  detail?: string | undefined;
};

/** @internal */
export const GetV2LogsId2Response200ApplicationJSONImageUrl$outboundSchema:
  z.ZodType<
    GetV2LogsId2Response200ApplicationJSONImageUrl$Outbound,
    z.ZodTypeDef,
    GetV2LogsId2Response200ApplicationJSONImageUrl
  > = z.object({
    id: z.string().optional(),
    url: z.string(),
    detail: z.string().optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsId2Response200ApplicationJSONImageUrl$ {
  /** @deprecated use `GetV2LogsId2Response200ApplicationJSONImageUrl$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsId2Response200ApplicationJSONImageUrl$inboundSchema;
  /** @deprecated use `GetV2LogsId2Response200ApplicationJSONImageUrl$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsId2Response200ApplicationJSONImageUrl$outboundSchema;
  /** @deprecated use `GetV2LogsId2Response200ApplicationJSONImageUrl$Outbound` instead. */
  export type Outbound =
    GetV2LogsId2Response200ApplicationJSONImageUrl$Outbound;
}

export function getV2LogsId2Response200ApplicationJSONImageUrlToJSON(
  getV2LogsId2Response200ApplicationJSONImageUrl:
    GetV2LogsId2Response200ApplicationJSONImageUrl,
): string {
  return JSON.stringify(
    GetV2LogsId2Response200ApplicationJSONImageUrl$outboundSchema.parse(
      getV2LogsId2Response200ApplicationJSONImageUrl,
    ),
  );
}

export function getV2LogsId2Response200ApplicationJSONImageUrlFromJSON(
  jsonString: string,
): SafeParseResult<
  GetV2LogsId2Response200ApplicationJSONImageUrl,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetV2LogsId2Response200ApplicationJSONImageUrl$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'GetV2LogsId2Response200ApplicationJSONImageUrl' from JSON`,
  );
}

/** @internal */
export const GetV2LogsId2Response200ApplicationJson2$inboundSchema: z.ZodType<
  GetV2LogsId2Response200ApplicationJson2,
  z.ZodTypeDef,
  unknown
> = z.object({
  type:
    GetV2LogsId2Response200ApplicationJSONResponseBody3EvalsType$inboundSchema,
  image_url: z.lazy(() =>
    GetV2LogsId2Response200ApplicationJSONImageUrl$inboundSchema
  ),
}).transform((v) => {
  return remap$(v, {
    "image_url": "imageUrl",
  });
});

/** @internal */
export type GetV2LogsId2Response200ApplicationJson2$Outbound = {
  type: string;
  image_url: GetV2LogsId2Response200ApplicationJSONImageUrl$Outbound;
};

/** @internal */
export const GetV2LogsId2Response200ApplicationJson2$outboundSchema: z.ZodType<
  GetV2LogsId2Response200ApplicationJson2$Outbound,
  z.ZodTypeDef,
  GetV2LogsId2Response200ApplicationJson2
> = z.object({
  type:
    GetV2LogsId2Response200ApplicationJSONResponseBody3EvalsType$outboundSchema,
  imageUrl: z.lazy(() =>
    GetV2LogsId2Response200ApplicationJSONImageUrl$outboundSchema
  ),
}).transform((v) => {
  return remap$(v, {
    imageUrl: "image_url",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsId2Response200ApplicationJson2$ {
  /** @deprecated use `GetV2LogsId2Response200ApplicationJson2$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsId2Response200ApplicationJson2$inboundSchema;
  /** @deprecated use `GetV2LogsId2Response200ApplicationJson2$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsId2Response200ApplicationJson2$outboundSchema;
  /** @deprecated use `GetV2LogsId2Response200ApplicationJson2$Outbound` instead. */
  export type Outbound = GetV2LogsId2Response200ApplicationJson2$Outbound;
}

export function getV2LogsId2Response200ApplicationJson2ToJSON(
  getV2LogsId2Response200ApplicationJson2:
    GetV2LogsId2Response200ApplicationJson2,
): string {
  return JSON.stringify(
    GetV2LogsId2Response200ApplicationJson2$outboundSchema.parse(
      getV2LogsId2Response200ApplicationJson2,
    ),
  );
}

export function getV2LogsId2Response200ApplicationJson2FromJSON(
  jsonString: string,
): SafeParseResult<
  GetV2LogsId2Response200ApplicationJson2,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetV2LogsId2Response200ApplicationJson2$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'GetV2LogsId2Response200ApplicationJson2' from JSON`,
  );
}

/** @internal */
export const GetV2LogsId2Response200ApplicationJSONResponseBody3Type$inboundSchema:
  z.ZodNativeEnum<
    typeof GetV2LogsId2Response200ApplicationJSONResponseBody3Type
  > = z.nativeEnum(GetV2LogsId2Response200ApplicationJSONResponseBody3Type);

/** @internal */
export const GetV2LogsId2Response200ApplicationJSONResponseBody3Type$outboundSchema:
  z.ZodNativeEnum<
    typeof GetV2LogsId2Response200ApplicationJSONResponseBody3Type
  > = GetV2LogsId2Response200ApplicationJSONResponseBody3Type$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsId2Response200ApplicationJSONResponseBody3Type$ {
  /** @deprecated use `GetV2LogsId2Response200ApplicationJSONResponseBody3Type$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsId2Response200ApplicationJSONResponseBody3Type$inboundSchema;
  /** @deprecated use `GetV2LogsId2Response200ApplicationJSONResponseBody3Type$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsId2Response200ApplicationJSONResponseBody3Type$outboundSchema;
}

/** @internal */
export const GetV2LogsId2Response200ApplicationJson1$inboundSchema: z.ZodType<
  GetV2LogsId2Response200ApplicationJson1,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: GetV2LogsId2Response200ApplicationJSONResponseBody3Type$inboundSchema,
  text: z.string(),
});

/** @internal */
export type GetV2LogsId2Response200ApplicationJson1$Outbound = {
  type: string;
  text: string;
};

/** @internal */
export const GetV2LogsId2Response200ApplicationJson1$outboundSchema: z.ZodType<
  GetV2LogsId2Response200ApplicationJson1$Outbound,
  z.ZodTypeDef,
  GetV2LogsId2Response200ApplicationJson1
> = z.object({
  type: GetV2LogsId2Response200ApplicationJSONResponseBody3Type$outboundSchema,
  text: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsId2Response200ApplicationJson1$ {
  /** @deprecated use `GetV2LogsId2Response200ApplicationJson1$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsId2Response200ApplicationJson1$inboundSchema;
  /** @deprecated use `GetV2LogsId2Response200ApplicationJson1$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsId2Response200ApplicationJson1$outboundSchema;
  /** @deprecated use `GetV2LogsId2Response200ApplicationJson1$Outbound` instead. */
  export type Outbound = GetV2LogsId2Response200ApplicationJson1$Outbound;
}

export function getV2LogsId2Response200ApplicationJson1ToJSON(
  getV2LogsId2Response200ApplicationJson1:
    GetV2LogsId2Response200ApplicationJson1,
): string {
  return JSON.stringify(
    GetV2LogsId2Response200ApplicationJson1$outboundSchema.parse(
      getV2LogsId2Response200ApplicationJson1,
    ),
  );
}

export function getV2LogsId2Response200ApplicationJson1FromJSON(
  jsonString: string,
): SafeParseResult<
  GetV2LogsId2Response200ApplicationJson1,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetV2LogsId2Response200ApplicationJson1$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'GetV2LogsId2Response200ApplicationJson1' from JSON`,
  );
}

/** @internal */
export const GetV2LogsIdContentResponse200ApplicationJson2$inboundSchema:
  z.ZodType<
    GetV2LogsIdContentResponse200ApplicationJson2,
    z.ZodTypeDef,
    unknown
  > = z.union([
    z.lazy(() => GetV2LogsId2Response200ApplicationJson1$inboundSchema),
    z.lazy(() => GetV2LogsId2Response200ApplicationJson2$inboundSchema),
  ]);

/** @internal */
export type GetV2LogsIdContentResponse200ApplicationJson2$Outbound =
  | GetV2LogsId2Response200ApplicationJson1$Outbound
  | GetV2LogsId2Response200ApplicationJson2$Outbound;

/** @internal */
export const GetV2LogsIdContentResponse200ApplicationJson2$outboundSchema:
  z.ZodType<
    GetV2LogsIdContentResponse200ApplicationJson2$Outbound,
    z.ZodTypeDef,
    GetV2LogsIdContentResponse200ApplicationJson2
  > = z.union([
    z.lazy(() => GetV2LogsId2Response200ApplicationJson1$outboundSchema),
    z.lazy(() => GetV2LogsId2Response200ApplicationJson2$outboundSchema),
  ]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdContentResponse200ApplicationJson2$ {
  /** @deprecated use `GetV2LogsIdContentResponse200ApplicationJson2$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsIdContentResponse200ApplicationJson2$inboundSchema;
  /** @deprecated use `GetV2LogsIdContentResponse200ApplicationJson2$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdContentResponse200ApplicationJson2$outboundSchema;
  /** @deprecated use `GetV2LogsIdContentResponse200ApplicationJson2$Outbound` instead. */
  export type Outbound = GetV2LogsIdContentResponse200ApplicationJson2$Outbound;
}

export function getV2LogsIdContentResponse200ApplicationJson2ToJSON(
  getV2LogsIdContentResponse200ApplicationJson2:
    GetV2LogsIdContentResponse200ApplicationJson2,
): string {
  return JSON.stringify(
    GetV2LogsIdContentResponse200ApplicationJson2$outboundSchema.parse(
      getV2LogsIdContentResponse200ApplicationJson2,
    ),
  );
}

export function getV2LogsIdContentResponse200ApplicationJson2FromJSON(
  jsonString: string,
): SafeParseResult<
  GetV2LogsIdContentResponse200ApplicationJson2,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetV2LogsIdContentResponse200ApplicationJson2$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'GetV2LogsIdContentResponse200ApplicationJson2' from JSON`,
  );
}

/** @internal */
export const GetV2LogsIdEvalsResponseContent$inboundSchema: z.ZodType<
  GetV2LogsIdEvalsResponseContent,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.string(),
  z.array(z.union([
    z.lazy(() => GetV2LogsId2Response200ApplicationJson1$inboundSchema),
    z.lazy(() => GetV2LogsId2Response200ApplicationJson2$inboundSchema),
  ])),
]);

/** @internal */
export type GetV2LogsIdEvalsResponseContent$Outbound =
  | string
  | Array<
    | GetV2LogsId2Response200ApplicationJson1$Outbound
    | GetV2LogsId2Response200ApplicationJson2$Outbound
  >;

/** @internal */
export const GetV2LogsIdEvalsResponseContent$outboundSchema: z.ZodType<
  GetV2LogsIdEvalsResponseContent$Outbound,
  z.ZodTypeDef,
  GetV2LogsIdEvalsResponseContent
> = z.union([
  z.string(),
  z.array(z.union([
    z.lazy(() => GetV2LogsId2Response200ApplicationJson1$outboundSchema),
    z.lazy(() => GetV2LogsId2Response200ApplicationJson2$outboundSchema),
  ])),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdEvalsResponseContent$ {
  /** @deprecated use `GetV2LogsIdEvalsResponseContent$inboundSchema` instead. */
  export const inboundSchema = GetV2LogsIdEvalsResponseContent$inboundSchema;
  /** @deprecated use `GetV2LogsIdEvalsResponseContent$outboundSchema` instead. */
  export const outboundSchema = GetV2LogsIdEvalsResponseContent$outboundSchema;
  /** @deprecated use `GetV2LogsIdEvalsResponseContent$Outbound` instead. */
  export type Outbound = GetV2LogsIdEvalsResponseContent$Outbound;
}

export function getV2LogsIdEvalsResponseContentToJSON(
  getV2LogsIdEvalsResponseContent: GetV2LogsIdEvalsResponseContent,
): string {
  return JSON.stringify(
    GetV2LogsIdEvalsResponseContent$outboundSchema.parse(
      getV2LogsIdEvalsResponseContent,
    ),
  );
}

export function getV2LogsIdEvalsResponseContentFromJSON(
  jsonString: string,
): SafeParseResult<GetV2LogsIdEvalsResponseContent, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetV2LogsIdEvalsResponseContent$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetV2LogsIdEvalsResponseContent' from JSON`,
  );
}

/** @internal */
export const GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody37WorkflowRunDataType$inboundSchema:
  z.ZodNativeEnum<
    typeof GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody37WorkflowRunDataType
  > = z.nativeEnum(
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody37WorkflowRunDataType,
  );

/** @internal */
export const GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody37WorkflowRunDataType$outboundSchema:
  z.ZodNativeEnum<
    typeof GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody37WorkflowRunDataType
  > =
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody37WorkflowRunDataType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody37WorkflowRunDataType$ {
  /** @deprecated use `GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody37WorkflowRunDataType$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody37WorkflowRunDataType$inboundSchema;
  /** @deprecated use `GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody37WorkflowRunDataType$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody37WorkflowRunDataType$outboundSchema;
}

/** @internal */
export const GetV2LogsIdEvalsResponse200ApplicationJSONFunction$inboundSchema:
  z.ZodType<
    GetV2LogsIdEvalsResponse200ApplicationJSONFunction,
    z.ZodTypeDef,
    unknown
  > = z.object({
    name: z.string(),
    arguments: z.string(),
  });

/** @internal */
export type GetV2LogsIdEvalsResponse200ApplicationJSONFunction$Outbound = {
  name: string;
  arguments: string;
};

/** @internal */
export const GetV2LogsIdEvalsResponse200ApplicationJSONFunction$outboundSchema:
  z.ZodType<
    GetV2LogsIdEvalsResponse200ApplicationJSONFunction$Outbound,
    z.ZodTypeDef,
    GetV2LogsIdEvalsResponse200ApplicationJSONFunction
  > = z.object({
    name: z.string(),
    arguments: z.string(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdEvalsResponse200ApplicationJSONFunction$ {
  /** @deprecated use `GetV2LogsIdEvalsResponse200ApplicationJSONFunction$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsIdEvalsResponse200ApplicationJSONFunction$inboundSchema;
  /** @deprecated use `GetV2LogsIdEvalsResponse200ApplicationJSONFunction$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdEvalsResponse200ApplicationJSONFunction$outboundSchema;
  /** @deprecated use `GetV2LogsIdEvalsResponse200ApplicationJSONFunction$Outbound` instead. */
  export type Outbound =
    GetV2LogsIdEvalsResponse200ApplicationJSONFunction$Outbound;
}

export function getV2LogsIdEvalsResponse200ApplicationJSONFunctionToJSON(
  getV2LogsIdEvalsResponse200ApplicationJSONFunction:
    GetV2LogsIdEvalsResponse200ApplicationJSONFunction,
): string {
  return JSON.stringify(
    GetV2LogsIdEvalsResponse200ApplicationJSONFunction$outboundSchema.parse(
      getV2LogsIdEvalsResponse200ApplicationJSONFunction,
    ),
  );
}

export function getV2LogsIdEvalsResponse200ApplicationJSONFunctionFromJSON(
  jsonString: string,
): SafeParseResult<
  GetV2LogsIdEvalsResponse200ApplicationJSONFunction,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetV2LogsIdEvalsResponse200ApplicationJSONFunction$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'GetV2LogsIdEvalsResponse200ApplicationJSONFunction' from JSON`,
  );
}

/** @internal */
export const GetV2LogsIdEvalsResponseToolCalls$inboundSchema: z.ZodType<
  GetV2LogsIdEvalsResponseToolCalls,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string().optional(),
  index: z.number().optional(),
  type:
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody37WorkflowRunDataType$inboundSchema,
  function: z.lazy(() =>
    GetV2LogsIdEvalsResponse200ApplicationJSONFunction$inboundSchema
  ),
});

/** @internal */
export type GetV2LogsIdEvalsResponseToolCalls$Outbound = {
  id?: string | undefined;
  index?: number | undefined;
  type: string;
  function: GetV2LogsIdEvalsResponse200ApplicationJSONFunction$Outbound;
};

/** @internal */
export const GetV2LogsIdEvalsResponseToolCalls$outboundSchema: z.ZodType<
  GetV2LogsIdEvalsResponseToolCalls$Outbound,
  z.ZodTypeDef,
  GetV2LogsIdEvalsResponseToolCalls
> = z.object({
  id: z.string().optional(),
  index: z.number().optional(),
  type:
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody37WorkflowRunDataType$outboundSchema,
  function: z.lazy(() =>
    GetV2LogsIdEvalsResponse200ApplicationJSONFunction$outboundSchema
  ),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdEvalsResponseToolCalls$ {
  /** @deprecated use `GetV2LogsIdEvalsResponseToolCalls$inboundSchema` instead. */
  export const inboundSchema = GetV2LogsIdEvalsResponseToolCalls$inboundSchema;
  /** @deprecated use `GetV2LogsIdEvalsResponseToolCalls$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdEvalsResponseToolCalls$outboundSchema;
  /** @deprecated use `GetV2LogsIdEvalsResponseToolCalls$Outbound` instead. */
  export type Outbound = GetV2LogsIdEvalsResponseToolCalls$Outbound;
}

export function getV2LogsIdEvalsResponseToolCallsToJSON(
  getV2LogsIdEvalsResponseToolCalls: GetV2LogsIdEvalsResponseToolCalls,
): string {
  return JSON.stringify(
    GetV2LogsIdEvalsResponseToolCalls$outboundSchema.parse(
      getV2LogsIdEvalsResponseToolCalls,
    ),
  );
}

export function getV2LogsIdEvalsResponseToolCallsFromJSON(
  jsonString: string,
): SafeParseResult<GetV2LogsIdEvalsResponseToolCalls, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetV2LogsIdEvalsResponseToolCalls$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetV2LogsIdEvalsResponseToolCalls' from JSON`,
  );
}

/** @internal */
export const GetV2LogsIdEvalsResponseMessages$inboundSchema: z.ZodType<
  GetV2LogsIdEvalsResponseMessages,
  z.ZodTypeDef,
  unknown
> = z.object({
  role: GetV2LogsIdEvalsResponseRole$inboundSchema,
  content: z.union([
    z.string(),
    z.array(z.union([
      z.lazy(() => GetV2LogsId2Response200ApplicationJson1$inboundSchema),
      z.lazy(() => GetV2LogsId2Response200ApplicationJson2$inboundSchema),
    ])),
  ]),
  tool_calls: z.array(
    z.lazy(() => GetV2LogsIdEvalsResponseToolCalls$inboundSchema),
  ).optional(),
  id: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "tool_calls": "toolCalls",
  });
});

/** @internal */
export type GetV2LogsIdEvalsResponseMessages$Outbound = {
  role: string;
  content:
    | string
    | Array<
      | GetV2LogsId2Response200ApplicationJson1$Outbound
      | GetV2LogsId2Response200ApplicationJson2$Outbound
    >;
  tool_calls?: Array<GetV2LogsIdEvalsResponseToolCalls$Outbound> | undefined;
  id?: string | undefined;
};

/** @internal */
export const GetV2LogsIdEvalsResponseMessages$outboundSchema: z.ZodType<
  GetV2LogsIdEvalsResponseMessages$Outbound,
  z.ZodTypeDef,
  GetV2LogsIdEvalsResponseMessages
> = z.object({
  role: GetV2LogsIdEvalsResponseRole$outboundSchema,
  content: z.union([
    z.string(),
    z.array(z.union([
      z.lazy(() => GetV2LogsId2Response200ApplicationJson1$outboundSchema),
      z.lazy(() => GetV2LogsId2Response200ApplicationJson2$outboundSchema),
    ])),
  ]),
  toolCalls: z.array(
    z.lazy(() => GetV2LogsIdEvalsResponseToolCalls$outboundSchema),
  ).optional(),
  id: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    toolCalls: "tool_calls",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdEvalsResponseMessages$ {
  /** @deprecated use `GetV2LogsIdEvalsResponseMessages$inboundSchema` instead. */
  export const inboundSchema = GetV2LogsIdEvalsResponseMessages$inboundSchema;
  /** @deprecated use `GetV2LogsIdEvalsResponseMessages$outboundSchema` instead. */
  export const outboundSchema = GetV2LogsIdEvalsResponseMessages$outboundSchema;
  /** @deprecated use `GetV2LogsIdEvalsResponseMessages$Outbound` instead. */
  export type Outbound = GetV2LogsIdEvalsResponseMessages$Outbound;
}

export function getV2LogsIdEvalsResponseMessagesToJSON(
  getV2LogsIdEvalsResponseMessages: GetV2LogsIdEvalsResponseMessages,
): string {
  return JSON.stringify(
    GetV2LogsIdEvalsResponseMessages$outboundSchema.parse(
      getV2LogsIdEvalsResponseMessages,
    ),
  );
}

export function getV2LogsIdEvalsResponseMessagesFromJSON(
  jsonString: string,
): SafeParseResult<GetV2LogsIdEvalsResponseMessages, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetV2LogsIdEvalsResponseMessages$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetV2LogsIdEvalsResponseMessages' from JSON`,
  );
}

/** @internal */
export const GetV2LogsIdEvalsResponsePromptConfig$inboundSchema: z.ZodType<
  GetV2LogsIdEvalsResponsePromptConfig,
  z.ZodTypeDef,
  unknown
> = z.object({
  stream: z.boolean(),
  model: z.string(),
  model_db_id: z.string(),
  model_type: GetV2LogsIdEvalsResponseModelType$inboundSchema,
  model_parameters: z.lazy(() =>
    GetV2LogsIdEvalsResponseModelParameters$inboundSchema
  ),
  provider: GetV2LogsIdEvalsResponseProvider$inboundSchema,
  messages: z.array(
    z.lazy(() => GetV2LogsIdEvalsResponseMessages$inboundSchema),
  ),
  integration_id: z.nullable(z.string()).optional(),
  version: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "model_db_id": "modelDbId",
    "model_type": "modelType",
    "model_parameters": "modelParameters",
    "integration_id": "integrationId",
  });
});

/** @internal */
export type GetV2LogsIdEvalsResponsePromptConfig$Outbound = {
  stream: boolean;
  model: string;
  model_db_id: string;
  model_type: string;
  model_parameters: GetV2LogsIdEvalsResponseModelParameters$Outbound;
  provider: string;
  messages: Array<GetV2LogsIdEvalsResponseMessages$Outbound>;
  integration_id?: string | null | undefined;
  version?: string | undefined;
};

/** @internal */
export const GetV2LogsIdEvalsResponsePromptConfig$outboundSchema: z.ZodType<
  GetV2LogsIdEvalsResponsePromptConfig$Outbound,
  z.ZodTypeDef,
  GetV2LogsIdEvalsResponsePromptConfig
> = z.object({
  stream: z.boolean(),
  model: z.string(),
  modelDbId: z.string(),
  modelType: GetV2LogsIdEvalsResponseModelType$outboundSchema,
  modelParameters: z.lazy(() =>
    GetV2LogsIdEvalsResponseModelParameters$outboundSchema
  ),
  provider: GetV2LogsIdEvalsResponseProvider$outboundSchema,
  messages: z.array(
    z.lazy(() => GetV2LogsIdEvalsResponseMessages$outboundSchema),
  ),
  integrationId: z.nullable(z.string()).optional(),
  version: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    modelDbId: "model_db_id",
    modelType: "model_type",
    modelParameters: "model_parameters",
    integrationId: "integration_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdEvalsResponsePromptConfig$ {
  /** @deprecated use `GetV2LogsIdEvalsResponsePromptConfig$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsIdEvalsResponsePromptConfig$inboundSchema;
  /** @deprecated use `GetV2LogsIdEvalsResponsePromptConfig$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdEvalsResponsePromptConfig$outboundSchema;
  /** @deprecated use `GetV2LogsIdEvalsResponsePromptConfig$Outbound` instead. */
  export type Outbound = GetV2LogsIdEvalsResponsePromptConfig$Outbound;
}

export function getV2LogsIdEvalsResponsePromptConfigToJSON(
  getV2LogsIdEvalsResponsePromptConfig: GetV2LogsIdEvalsResponsePromptConfig,
): string {
  return JSON.stringify(
    GetV2LogsIdEvalsResponsePromptConfig$outboundSchema.parse(
      getV2LogsIdEvalsResponsePromptConfig,
    ),
  );
}

export function getV2LogsIdEvalsResponsePromptConfigFromJSON(
  jsonString: string,
): SafeParseResult<GetV2LogsIdEvalsResponsePromptConfig, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      GetV2LogsIdEvalsResponsePromptConfig$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetV2LogsIdEvalsResponsePromptConfig' from JSON`,
  );
}

/** @internal */
export const GetV2LogsIdEvalsResponseVariables$inboundSchema: z.ZodType<
  GetV2LogsIdEvalsResponseVariables,
  z.ZodTypeDef,
  unknown
> = z.object({
  key: z.string(),
  value: z.any().optional(),
  is_pii: z.boolean().default(false),
}).transform((v) => {
  return remap$(v, {
    "is_pii": "isPii",
  });
});

/** @internal */
export type GetV2LogsIdEvalsResponseVariables$Outbound = {
  key: string;
  value?: any | undefined;
  is_pii: boolean;
};

/** @internal */
export const GetV2LogsIdEvalsResponseVariables$outboundSchema: z.ZodType<
  GetV2LogsIdEvalsResponseVariables$Outbound,
  z.ZodTypeDef,
  GetV2LogsIdEvalsResponseVariables
> = z.object({
  key: z.string(),
  value: z.any().optional(),
  isPii: z.boolean().default(false),
}).transform((v) => {
  return remap$(v, {
    isPii: "is_pii",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdEvalsResponseVariables$ {
  /** @deprecated use `GetV2LogsIdEvalsResponseVariables$inboundSchema` instead. */
  export const inboundSchema = GetV2LogsIdEvalsResponseVariables$inboundSchema;
  /** @deprecated use `GetV2LogsIdEvalsResponseVariables$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdEvalsResponseVariables$outboundSchema;
  /** @deprecated use `GetV2LogsIdEvalsResponseVariables$Outbound` instead. */
  export type Outbound = GetV2LogsIdEvalsResponseVariables$Outbound;
}

export function getV2LogsIdEvalsResponseVariablesToJSON(
  getV2LogsIdEvalsResponseVariables: GetV2LogsIdEvalsResponseVariables,
): string {
  return JSON.stringify(
    GetV2LogsIdEvalsResponseVariables$outboundSchema.parse(
      getV2LogsIdEvalsResponseVariables,
    ),
  );
}

export function getV2LogsIdEvalsResponseVariablesFromJSON(
  jsonString: string,
): SafeParseResult<GetV2LogsIdEvalsResponseVariables, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetV2LogsIdEvalsResponseVariables$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetV2LogsIdEvalsResponseVariables' from JSON`,
  );
}

/** @internal */
export const GetV2LogsIdEvalsResponsePerformance$inboundSchema: z.ZodType<
  GetV2LogsIdEvalsResponsePerformance,
  z.ZodTypeDef,
  unknown
> = z.object({
  latency: z.number(),
  first_time_to_token: z.nullable(z.number()).optional(),
  tokens_per_second: z.nullable(z.number()).optional(),
}).transform((v) => {
  return remap$(v, {
    "first_time_to_token": "firstTimeToToken",
    "tokens_per_second": "tokensPerSecond",
  });
});

/** @internal */
export type GetV2LogsIdEvalsResponsePerformance$Outbound = {
  latency: number;
  first_time_to_token?: number | null | undefined;
  tokens_per_second?: number | null | undefined;
};

/** @internal */
export const GetV2LogsIdEvalsResponsePerformance$outboundSchema: z.ZodType<
  GetV2LogsIdEvalsResponsePerformance$Outbound,
  z.ZodTypeDef,
  GetV2LogsIdEvalsResponsePerformance
> = z.object({
  latency: z.number(),
  firstTimeToToken: z.nullable(z.number()).optional(),
  tokensPerSecond: z.nullable(z.number()).optional(),
}).transform((v) => {
  return remap$(v, {
    firstTimeToToken: "first_time_to_token",
    tokensPerSecond: "tokens_per_second",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdEvalsResponsePerformance$ {
  /** @deprecated use `GetV2LogsIdEvalsResponsePerformance$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsIdEvalsResponsePerformance$inboundSchema;
  /** @deprecated use `GetV2LogsIdEvalsResponsePerformance$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdEvalsResponsePerformance$outboundSchema;
  /** @deprecated use `GetV2LogsIdEvalsResponsePerformance$Outbound` instead. */
  export type Outbound = GetV2LogsIdEvalsResponsePerformance$Outbound;
}

export function getV2LogsIdEvalsResponsePerformanceToJSON(
  getV2LogsIdEvalsResponsePerformance: GetV2LogsIdEvalsResponsePerformance,
): string {
  return JSON.stringify(
    GetV2LogsIdEvalsResponsePerformance$outboundSchema.parse(
      getV2LogsIdEvalsResponsePerformance,
    ),
  );
}

export function getV2LogsIdEvalsResponsePerformanceFromJSON(
  jsonString: string,
): SafeParseResult<GetV2LogsIdEvalsResponsePerformance, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      GetV2LogsIdEvalsResponsePerformance$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetV2LogsIdEvalsResponsePerformance' from JSON`,
  );
}

/** @internal */
export const GetV2LogsIdEvalsResponsePromptTokensDetails$inboundSchema:
  z.ZodType<
    GetV2LogsIdEvalsResponsePromptTokensDetails,
    z.ZodTypeDef,
    unknown
  > = z.object({
    cached_tokens: z.number().optional(),
  }).transform((v) => {
    return remap$(v, {
      "cached_tokens": "cachedTokens",
    });
  });

/** @internal */
export type GetV2LogsIdEvalsResponsePromptTokensDetails$Outbound = {
  cached_tokens?: number | undefined;
};

/** @internal */
export const GetV2LogsIdEvalsResponsePromptTokensDetails$outboundSchema:
  z.ZodType<
    GetV2LogsIdEvalsResponsePromptTokensDetails$Outbound,
    z.ZodTypeDef,
    GetV2LogsIdEvalsResponsePromptTokensDetails
  > = z.object({
    cachedTokens: z.number().optional(),
  }).transform((v) => {
    return remap$(v, {
      cachedTokens: "cached_tokens",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdEvalsResponsePromptTokensDetails$ {
  /** @deprecated use `GetV2LogsIdEvalsResponsePromptTokensDetails$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsIdEvalsResponsePromptTokensDetails$inboundSchema;
  /** @deprecated use `GetV2LogsIdEvalsResponsePromptTokensDetails$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdEvalsResponsePromptTokensDetails$outboundSchema;
  /** @deprecated use `GetV2LogsIdEvalsResponsePromptTokensDetails$Outbound` instead. */
  export type Outbound = GetV2LogsIdEvalsResponsePromptTokensDetails$Outbound;
}

export function getV2LogsIdEvalsResponsePromptTokensDetailsToJSON(
  getV2LogsIdEvalsResponsePromptTokensDetails:
    GetV2LogsIdEvalsResponsePromptTokensDetails,
): string {
  return JSON.stringify(
    GetV2LogsIdEvalsResponsePromptTokensDetails$outboundSchema.parse(
      getV2LogsIdEvalsResponsePromptTokensDetails,
    ),
  );
}

export function getV2LogsIdEvalsResponsePromptTokensDetailsFromJSON(
  jsonString: string,
): SafeParseResult<
  GetV2LogsIdEvalsResponsePromptTokensDetails,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetV2LogsIdEvalsResponsePromptTokensDetails$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'GetV2LogsIdEvalsResponsePromptTokensDetails' from JSON`,
  );
}

/** @internal */
export const GetV2LogsIdEvalsResponseCompletionTokensDetails$inboundSchema:
  z.ZodType<
    GetV2LogsIdEvalsResponseCompletionTokensDetails,
    z.ZodTypeDef,
    unknown
  > = z.object({
    reasoning_tokens: z.number().optional(),
  }).transform((v) => {
    return remap$(v, {
      "reasoning_tokens": "reasoningTokens",
    });
  });

/** @internal */
export type GetV2LogsIdEvalsResponseCompletionTokensDetails$Outbound = {
  reasoning_tokens?: number | undefined;
};

/** @internal */
export const GetV2LogsIdEvalsResponseCompletionTokensDetails$outboundSchema:
  z.ZodType<
    GetV2LogsIdEvalsResponseCompletionTokensDetails$Outbound,
    z.ZodTypeDef,
    GetV2LogsIdEvalsResponseCompletionTokensDetails
  > = z.object({
    reasoningTokens: z.number().optional(),
  }).transform((v) => {
    return remap$(v, {
      reasoningTokens: "reasoning_tokens",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdEvalsResponseCompletionTokensDetails$ {
  /** @deprecated use `GetV2LogsIdEvalsResponseCompletionTokensDetails$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsIdEvalsResponseCompletionTokensDetails$inboundSchema;
  /** @deprecated use `GetV2LogsIdEvalsResponseCompletionTokensDetails$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdEvalsResponseCompletionTokensDetails$outboundSchema;
  /** @deprecated use `GetV2LogsIdEvalsResponseCompletionTokensDetails$Outbound` instead. */
  export type Outbound =
    GetV2LogsIdEvalsResponseCompletionTokensDetails$Outbound;
}

export function getV2LogsIdEvalsResponseCompletionTokensDetailsToJSON(
  getV2LogsIdEvalsResponseCompletionTokensDetails:
    GetV2LogsIdEvalsResponseCompletionTokensDetails,
): string {
  return JSON.stringify(
    GetV2LogsIdEvalsResponseCompletionTokensDetails$outboundSchema.parse(
      getV2LogsIdEvalsResponseCompletionTokensDetails,
    ),
  );
}

export function getV2LogsIdEvalsResponseCompletionTokensDetailsFromJSON(
  jsonString: string,
): SafeParseResult<
  GetV2LogsIdEvalsResponseCompletionTokensDetails,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetV2LogsIdEvalsResponseCompletionTokensDetails$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'GetV2LogsIdEvalsResponseCompletionTokensDetails' from JSON`,
  );
}

/** @internal */
export const GetV2LogsIdEvalsResponseUsage$inboundSchema: z.ZodType<
  GetV2LogsIdEvalsResponseUsage,
  z.ZodTypeDef,
  unknown
> = z.object({
  total_tokens: z.number().optional(),
  prompt_tokens: z.number().optional(),
  completion_tokens: z.number().optional(),
  prompt_tokens_details: z.lazy(() =>
    GetV2LogsIdEvalsResponsePromptTokensDetails$inboundSchema
  ).optional(),
  completion_tokens_details: z.lazy(() =>
    GetV2LogsIdEvalsResponseCompletionTokensDetails$inboundSchema
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    "total_tokens": "totalTokens",
    "prompt_tokens": "promptTokens",
    "completion_tokens": "completionTokens",
    "prompt_tokens_details": "promptTokensDetails",
    "completion_tokens_details": "completionTokensDetails",
  });
});

/** @internal */
export type GetV2LogsIdEvalsResponseUsage$Outbound = {
  total_tokens?: number | undefined;
  prompt_tokens?: number | undefined;
  completion_tokens?: number | undefined;
  prompt_tokens_details?:
    | GetV2LogsIdEvalsResponsePromptTokensDetails$Outbound
    | undefined;
  completion_tokens_details?:
    | GetV2LogsIdEvalsResponseCompletionTokensDetails$Outbound
    | undefined;
};

/** @internal */
export const GetV2LogsIdEvalsResponseUsage$outboundSchema: z.ZodType<
  GetV2LogsIdEvalsResponseUsage$Outbound,
  z.ZodTypeDef,
  GetV2LogsIdEvalsResponseUsage
> = z.object({
  totalTokens: z.number().optional(),
  promptTokens: z.number().optional(),
  completionTokens: z.number().optional(),
  promptTokensDetails: z.lazy(() =>
    GetV2LogsIdEvalsResponsePromptTokensDetails$outboundSchema
  ).optional(),
  completionTokensDetails: z.lazy(() =>
    GetV2LogsIdEvalsResponseCompletionTokensDetails$outboundSchema
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    totalTokens: "total_tokens",
    promptTokens: "prompt_tokens",
    completionTokens: "completion_tokens",
    promptTokensDetails: "prompt_tokens_details",
    completionTokensDetails: "completion_tokens_details",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdEvalsResponseUsage$ {
  /** @deprecated use `GetV2LogsIdEvalsResponseUsage$inboundSchema` instead. */
  export const inboundSchema = GetV2LogsIdEvalsResponseUsage$inboundSchema;
  /** @deprecated use `GetV2LogsIdEvalsResponseUsage$outboundSchema` instead. */
  export const outboundSchema = GetV2LogsIdEvalsResponseUsage$outboundSchema;
  /** @deprecated use `GetV2LogsIdEvalsResponseUsage$Outbound` instead. */
  export type Outbound = GetV2LogsIdEvalsResponseUsage$Outbound;
}

export function getV2LogsIdEvalsResponseUsageToJSON(
  getV2LogsIdEvalsResponseUsage: GetV2LogsIdEvalsResponseUsage,
): string {
  return JSON.stringify(
    GetV2LogsIdEvalsResponseUsage$outboundSchema.parse(
      getV2LogsIdEvalsResponseUsage,
    ),
  );
}

export function getV2LogsIdEvalsResponseUsageFromJSON(
  jsonString: string,
): SafeParseResult<GetV2LogsIdEvalsResponseUsage, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetV2LogsIdEvalsResponseUsage$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetV2LogsIdEvalsResponseUsage' from JSON`,
  );
}

/** @internal */
export const GetV2LogsIdEvalsResponseBilling$inboundSchema: z.ZodType<
  GetV2LogsIdEvalsResponseBilling,
  z.ZodTypeDef,
  unknown
> = z.object({
  total_cost: z.nullable(z.number()).optional(),
  input_cost: z.nullable(z.number()).optional(),
  output_cost: z.nullable(z.number()).optional(),
  billable: z.boolean(),
}).transform((v) => {
  return remap$(v, {
    "total_cost": "totalCost",
    "input_cost": "inputCost",
    "output_cost": "outputCost",
  });
});

/** @internal */
export type GetV2LogsIdEvalsResponseBilling$Outbound = {
  total_cost?: number | null | undefined;
  input_cost?: number | null | undefined;
  output_cost?: number | null | undefined;
  billable: boolean;
};

/** @internal */
export const GetV2LogsIdEvalsResponseBilling$outboundSchema: z.ZodType<
  GetV2LogsIdEvalsResponseBilling$Outbound,
  z.ZodTypeDef,
  GetV2LogsIdEvalsResponseBilling
> = z.object({
  totalCost: z.nullable(z.number()).optional(),
  inputCost: z.nullable(z.number()).optional(),
  outputCost: z.nullable(z.number()).optional(),
  billable: z.boolean(),
}).transform((v) => {
  return remap$(v, {
    totalCost: "total_cost",
    inputCost: "input_cost",
    outputCost: "output_cost",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdEvalsResponseBilling$ {
  /** @deprecated use `GetV2LogsIdEvalsResponseBilling$inboundSchema` instead. */
  export const inboundSchema = GetV2LogsIdEvalsResponseBilling$inboundSchema;
  /** @deprecated use `GetV2LogsIdEvalsResponseBilling$outboundSchema` instead. */
  export const outboundSchema = GetV2LogsIdEvalsResponseBilling$outboundSchema;
  /** @deprecated use `GetV2LogsIdEvalsResponseBilling$Outbound` instead. */
  export type Outbound = GetV2LogsIdEvalsResponseBilling$Outbound;
}

export function getV2LogsIdEvalsResponseBillingToJSON(
  getV2LogsIdEvalsResponseBilling: GetV2LogsIdEvalsResponseBilling,
): string {
  return JSON.stringify(
    GetV2LogsIdEvalsResponseBilling$outboundSchema.parse(
      getV2LogsIdEvalsResponseBilling,
    ),
  );
}

export function getV2LogsIdEvalsResponseBillingFromJSON(
  jsonString: string,
): SafeParseResult<GetV2LogsIdEvalsResponseBilling, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetV2LogsIdEvalsResponseBilling$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetV2LogsIdEvalsResponseBilling' from JSON`,
  );
}

/** @internal */
export const GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody37WorkflowRunType$inboundSchema:
  z.ZodNativeEnum<
    typeof GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody37WorkflowRunType
  > = z.nativeEnum(
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody37WorkflowRunType,
  );

/** @internal */
export const GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody37WorkflowRunType$outboundSchema:
  z.ZodNativeEnum<
    typeof GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody37WorkflowRunType
  > =
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody37WorkflowRunType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody37WorkflowRunType$ {
  /** @deprecated use `GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody37WorkflowRunType$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody37WorkflowRunType$inboundSchema;
  /** @deprecated use `GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody37WorkflowRunType$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody37WorkflowRunType$outboundSchema;
}

/** @internal */
export const GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody37WorkflowRunDataToolsType$inboundSchema:
  z.ZodNativeEnum<
    typeof GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody37WorkflowRunDataToolsType
  > = z.nativeEnum(
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody37WorkflowRunDataToolsType,
  );

/** @internal */
export const GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody37WorkflowRunDataToolsType$outboundSchema:
  z.ZodNativeEnum<
    typeof GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody37WorkflowRunDataToolsType
  > =
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody37WorkflowRunDataToolsType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody37WorkflowRunDataToolsType$ {
  /** @deprecated use `GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody37WorkflowRunDataToolsType$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody37WorkflowRunDataToolsType$inboundSchema;
  /** @deprecated use `GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody37WorkflowRunDataToolsType$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody37WorkflowRunDataToolsType$outboundSchema;
}

/** @internal */
export const GetV2LogsIdEvalsResponseParameters$inboundSchema: z.ZodType<
  GetV2LogsIdEvalsResponseParameters,
  z.ZodTypeDef,
  unknown
> = z.object({
  type:
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody37WorkflowRunDataToolsType$inboundSchema,
  properties: z.record(z.any()),
  required: z.array(z.string()).optional(),
  additionalProperties: z.boolean().optional(),
});

/** @internal */
export type GetV2LogsIdEvalsResponseParameters$Outbound = {
  type: string;
  properties: { [k: string]: any };
  required?: Array<string> | undefined;
  additionalProperties?: boolean | undefined;
};

/** @internal */
export const GetV2LogsIdEvalsResponseParameters$outboundSchema: z.ZodType<
  GetV2LogsIdEvalsResponseParameters$Outbound,
  z.ZodTypeDef,
  GetV2LogsIdEvalsResponseParameters
> = z.object({
  type:
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody37WorkflowRunDataToolsType$outboundSchema,
  properties: z.record(z.any()),
  required: z.array(z.string()).optional(),
  additionalProperties: z.boolean().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdEvalsResponseParameters$ {
  /** @deprecated use `GetV2LogsIdEvalsResponseParameters$inboundSchema` instead. */
  export const inboundSchema = GetV2LogsIdEvalsResponseParameters$inboundSchema;
  /** @deprecated use `GetV2LogsIdEvalsResponseParameters$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdEvalsResponseParameters$outboundSchema;
  /** @deprecated use `GetV2LogsIdEvalsResponseParameters$Outbound` instead. */
  export type Outbound = GetV2LogsIdEvalsResponseParameters$Outbound;
}

export function getV2LogsIdEvalsResponseParametersToJSON(
  getV2LogsIdEvalsResponseParameters: GetV2LogsIdEvalsResponseParameters,
): string {
  return JSON.stringify(
    GetV2LogsIdEvalsResponseParameters$outboundSchema.parse(
      getV2LogsIdEvalsResponseParameters,
    ),
  );
}

export function getV2LogsIdEvalsResponseParametersFromJSON(
  jsonString: string,
): SafeParseResult<GetV2LogsIdEvalsResponseParameters, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      GetV2LogsIdEvalsResponseParameters$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetV2LogsIdEvalsResponseParameters' from JSON`,
  );
}

/** @internal */
export const GetV2LogsIdEvalsResponseFunction$inboundSchema: z.ZodType<
  GetV2LogsIdEvalsResponseFunction,
  z.ZodTypeDef,
  unknown
> = z.object({
  name: z.string(),
  description: z.string().optional(),
  strict: z.boolean().optional(),
  parameters: z.lazy(() => GetV2LogsIdEvalsResponseParameters$inboundSchema),
});

/** @internal */
export type GetV2LogsIdEvalsResponseFunction$Outbound = {
  name: string;
  description?: string | undefined;
  strict?: boolean | undefined;
  parameters: GetV2LogsIdEvalsResponseParameters$Outbound;
};

/** @internal */
export const GetV2LogsIdEvalsResponseFunction$outboundSchema: z.ZodType<
  GetV2LogsIdEvalsResponseFunction$Outbound,
  z.ZodTypeDef,
  GetV2LogsIdEvalsResponseFunction
> = z.object({
  name: z.string(),
  description: z.string().optional(),
  strict: z.boolean().optional(),
  parameters: z.lazy(() => GetV2LogsIdEvalsResponseParameters$outboundSchema),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdEvalsResponseFunction$ {
  /** @deprecated use `GetV2LogsIdEvalsResponseFunction$inboundSchema` instead. */
  export const inboundSchema = GetV2LogsIdEvalsResponseFunction$inboundSchema;
  /** @deprecated use `GetV2LogsIdEvalsResponseFunction$outboundSchema` instead. */
  export const outboundSchema = GetV2LogsIdEvalsResponseFunction$outboundSchema;
  /** @deprecated use `GetV2LogsIdEvalsResponseFunction$Outbound` instead. */
  export type Outbound = GetV2LogsIdEvalsResponseFunction$Outbound;
}

export function getV2LogsIdEvalsResponseFunctionToJSON(
  getV2LogsIdEvalsResponseFunction: GetV2LogsIdEvalsResponseFunction,
): string {
  return JSON.stringify(
    GetV2LogsIdEvalsResponseFunction$outboundSchema.parse(
      getV2LogsIdEvalsResponseFunction,
    ),
  );
}

export function getV2LogsIdEvalsResponseFunctionFromJSON(
  jsonString: string,
): SafeParseResult<GetV2LogsIdEvalsResponseFunction, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetV2LogsIdEvalsResponseFunction$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetV2LogsIdEvalsResponseFunction' from JSON`,
  );
}

/** @internal */
export const GetV2LogsIdEvalsResponseTools$inboundSchema: z.ZodType<
  GetV2LogsIdEvalsResponseTools,
  z.ZodTypeDef,
  unknown
> = z.object({
  type:
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody37WorkflowRunType$inboundSchema,
  function: z.lazy(() => GetV2LogsIdEvalsResponseFunction$inboundSchema),
});

/** @internal */
export type GetV2LogsIdEvalsResponseTools$Outbound = {
  type: string;
  function: GetV2LogsIdEvalsResponseFunction$Outbound;
};

/** @internal */
export const GetV2LogsIdEvalsResponseTools$outboundSchema: z.ZodType<
  GetV2LogsIdEvalsResponseTools$Outbound,
  z.ZodTypeDef,
  GetV2LogsIdEvalsResponseTools
> = z.object({
  type:
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody37WorkflowRunType$outboundSchema,
  function: z.lazy(() => GetV2LogsIdEvalsResponseFunction$outboundSchema),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdEvalsResponseTools$ {
  /** @deprecated use `GetV2LogsIdEvalsResponseTools$inboundSchema` instead. */
  export const inboundSchema = GetV2LogsIdEvalsResponseTools$inboundSchema;
  /** @deprecated use `GetV2LogsIdEvalsResponseTools$outboundSchema` instead. */
  export const outboundSchema = GetV2LogsIdEvalsResponseTools$outboundSchema;
  /** @deprecated use `GetV2LogsIdEvalsResponseTools$Outbound` instead. */
  export type Outbound = GetV2LogsIdEvalsResponseTools$Outbound;
}

export function getV2LogsIdEvalsResponseToolsToJSON(
  getV2LogsIdEvalsResponseTools: GetV2LogsIdEvalsResponseTools,
): string {
  return JSON.stringify(
    GetV2LogsIdEvalsResponseTools$outboundSchema.parse(
      getV2LogsIdEvalsResponseTools,
    ),
  );
}

export function getV2LogsIdEvalsResponseToolsFromJSON(
  jsonString: string,
): SafeParseResult<GetV2LogsIdEvalsResponseTools, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetV2LogsIdEvalsResponseTools$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetV2LogsIdEvalsResponseTools' from JSON`,
  );
}

/** @internal */
export const GetV2LogsIdEvalsResponsePromptSnippets$inboundSchema: z.ZodType<
  GetV2LogsIdEvalsResponsePromptSnippets,
  z.ZodTypeDef,
  unknown
> = z.object({
  _id: z.string(),
  key: z.string(),
  value: z.string(),
}).transform((v) => {
  return remap$(v, {
    "_id": "id",
  });
});

/** @internal */
export type GetV2LogsIdEvalsResponsePromptSnippets$Outbound = {
  _id: string;
  key: string;
  value: string;
};

/** @internal */
export const GetV2LogsIdEvalsResponsePromptSnippets$outboundSchema: z.ZodType<
  GetV2LogsIdEvalsResponsePromptSnippets$Outbound,
  z.ZodTypeDef,
  GetV2LogsIdEvalsResponsePromptSnippets
> = z.object({
  id: z.string(),
  key: z.string(),
  value: z.string(),
}).transform((v) => {
  return remap$(v, {
    id: "_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdEvalsResponsePromptSnippets$ {
  /** @deprecated use `GetV2LogsIdEvalsResponsePromptSnippets$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsIdEvalsResponsePromptSnippets$inboundSchema;
  /** @deprecated use `GetV2LogsIdEvalsResponsePromptSnippets$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdEvalsResponsePromptSnippets$outboundSchema;
  /** @deprecated use `GetV2LogsIdEvalsResponsePromptSnippets$Outbound` instead. */
  export type Outbound = GetV2LogsIdEvalsResponsePromptSnippets$Outbound;
}

export function getV2LogsIdEvalsResponsePromptSnippetsToJSON(
  getV2LogsIdEvalsResponsePromptSnippets:
    GetV2LogsIdEvalsResponsePromptSnippets,
): string {
  return JSON.stringify(
    GetV2LogsIdEvalsResponsePromptSnippets$outboundSchema.parse(
      getV2LogsIdEvalsResponsePromptSnippets,
    ),
  );
}

export function getV2LogsIdEvalsResponsePromptSnippetsFromJSON(
  jsonString: string,
): SafeParseResult<GetV2LogsIdEvalsResponsePromptSnippets, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      GetV2LogsIdEvalsResponsePromptSnippets$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetV2LogsIdEvalsResponsePromptSnippets' from JSON`,
  );
}

/** @internal */
export const GetV2LogsIdEvalsResponseData$inboundSchema: z.ZodType<
  GetV2LogsIdEvalsResponseData,
  z.ZodTypeDef,
  unknown
> = z.object({
  choices: z.array(z.lazy(() => GetV2LogsIdEvalsResponseChoices$inboundSchema))
    .optional(),
  action: GetV2LogsIdEvalsResponseAction$inboundSchema,
  prompt_config: z.lazy(() =>
    GetV2LogsIdEvalsResponsePromptConfig$inboundSchema
  ),
  variables: z.array(
    z.lazy(() => GetV2LogsIdEvalsResponseVariables$inboundSchema),
  ),
  performance: z.lazy(() => GetV2LogsIdEvalsResponsePerformance$inboundSchema)
    .optional(),
  usage: z.lazy(() => GetV2LogsIdEvalsResponseUsage$inboundSchema).optional(),
  billing: z.lazy(() => GetV2LogsIdEvalsResponseBilling$inboundSchema)
    .optional(),
  tools: z.array(z.lazy(() => GetV2LogsIdEvalsResponseTools$inboundSchema))
    .optional(),
  prompt_snippets: z.array(
    z.lazy(() => GetV2LogsIdEvalsResponsePromptSnippets$inboundSchema),
  ),
}).transform((v) => {
  return remap$(v, {
    "prompt_config": "promptConfig",
    "prompt_snippets": "promptSnippets",
  });
});

/** @internal */
export type GetV2LogsIdEvalsResponseData$Outbound = {
  choices?: Array<GetV2LogsIdEvalsResponseChoices$Outbound> | undefined;
  action: string;
  prompt_config: GetV2LogsIdEvalsResponsePromptConfig$Outbound;
  variables: Array<GetV2LogsIdEvalsResponseVariables$Outbound>;
  performance?: GetV2LogsIdEvalsResponsePerformance$Outbound | undefined;
  usage?: GetV2LogsIdEvalsResponseUsage$Outbound | undefined;
  billing?: GetV2LogsIdEvalsResponseBilling$Outbound | undefined;
  tools?: Array<GetV2LogsIdEvalsResponseTools$Outbound> | undefined;
  prompt_snippets: Array<GetV2LogsIdEvalsResponsePromptSnippets$Outbound>;
};

/** @internal */
export const GetV2LogsIdEvalsResponseData$outboundSchema: z.ZodType<
  GetV2LogsIdEvalsResponseData$Outbound,
  z.ZodTypeDef,
  GetV2LogsIdEvalsResponseData
> = z.object({
  choices: z.array(z.lazy(() => GetV2LogsIdEvalsResponseChoices$outboundSchema))
    .optional(),
  action: GetV2LogsIdEvalsResponseAction$outboundSchema,
  promptConfig: z.lazy(() =>
    GetV2LogsIdEvalsResponsePromptConfig$outboundSchema
  ),
  variables: z.array(
    z.lazy(() => GetV2LogsIdEvalsResponseVariables$outboundSchema),
  ),
  performance: z.lazy(() => GetV2LogsIdEvalsResponsePerformance$outboundSchema)
    .optional(),
  usage: z.lazy(() => GetV2LogsIdEvalsResponseUsage$outboundSchema).optional(),
  billing: z.lazy(() => GetV2LogsIdEvalsResponseBilling$outboundSchema)
    .optional(),
  tools: z.array(z.lazy(() => GetV2LogsIdEvalsResponseTools$outboundSchema))
    .optional(),
  promptSnippets: z.array(
    z.lazy(() => GetV2LogsIdEvalsResponsePromptSnippets$outboundSchema),
  ),
}).transform((v) => {
  return remap$(v, {
    promptConfig: "prompt_config",
    promptSnippets: "prompt_snippets",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdEvalsResponseData$ {
  /** @deprecated use `GetV2LogsIdEvalsResponseData$inboundSchema` instead. */
  export const inboundSchema = GetV2LogsIdEvalsResponseData$inboundSchema;
  /** @deprecated use `GetV2LogsIdEvalsResponseData$outboundSchema` instead. */
  export const outboundSchema = GetV2LogsIdEvalsResponseData$outboundSchema;
  /** @deprecated use `GetV2LogsIdEvalsResponseData$Outbound` instead. */
  export type Outbound = GetV2LogsIdEvalsResponseData$Outbound;
}

export function getV2LogsIdEvalsResponseDataToJSON(
  getV2LogsIdEvalsResponseData: GetV2LogsIdEvalsResponseData,
): string {
  return JSON.stringify(
    GetV2LogsIdEvalsResponseData$outboundSchema.parse(
      getV2LogsIdEvalsResponseData,
    ),
  );
}

export function getV2LogsIdEvalsResponseDataFromJSON(
  jsonString: string,
): SafeParseResult<GetV2LogsIdEvalsResponseData, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetV2LogsIdEvalsResponseData$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetV2LogsIdEvalsResponseData' from JSON`,
  );
}

/** @internal */
export const GetV2LogsIdEvalsWorkflowRun$inboundSchema: z.ZodType<
  GetV2LogsIdEvalsWorkflowRun,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  workflow_metadata: z.record(z.any()).optional(),
  workflow_input: z.record(z.any()).optional(),
  workflow_output: z.record(z.any()).optional(),
  request_properties: z.lazy(() =>
    GetV2LogsIdEvalsResponseRequestProperties$inboundSchema
  ).optional(),
  started_at: z.string().datetime({ offset: true }).transform(v => new Date(v)),
  finished_at: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
  product_type: GetV2LogsIdEvalsResponseProductType$inboundSchema,
  related_entities: z.array(
    z.lazy(() =>
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRun1$inboundSchema
    ),
  ),
  evals: z.array(
    z.union([
      z.lazy(() =>
        GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody1$inboundSchema
      ),
      z.lazy(() =>
        GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody2$inboundSchema
      ),
      z.lazy(() =>
        GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody3$inboundSchema
      ),
      z.lazy(() =>
        GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody4$inboundSchema
      ),
    ]),
  ),
  data: z.lazy(() => GetV2LogsIdEvalsResponseData$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "workflow_metadata": "workflowMetadata",
    "workflow_input": "workflowInput",
    "workflow_output": "workflowOutput",
    "request_properties": "requestProperties",
    "started_at": "startedAt",
    "finished_at": "finishedAt",
    "product_type": "productType",
    "related_entities": "relatedEntities",
  });
});

/** @internal */
export type GetV2LogsIdEvalsWorkflowRun$Outbound = {
  id: string;
  workflow_metadata?: { [k: string]: any } | undefined;
  workflow_input?: { [k: string]: any } | undefined;
  workflow_output?: { [k: string]: any } | undefined;
  request_properties?:
    | GetV2LogsIdEvalsResponseRequestProperties$Outbound
    | undefined;
  started_at: string;
  finished_at?: string | undefined;
  product_type: string;
  related_entities: Array<
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRun1$Outbound
  >;
  evals: Array<
    | GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody1$Outbound
    | GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody2$Outbound
    | GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody3$Outbound
    | GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody4$Outbound
  >;
  data: GetV2LogsIdEvalsResponseData$Outbound;
};

/** @internal */
export const GetV2LogsIdEvalsWorkflowRun$outboundSchema: z.ZodType<
  GetV2LogsIdEvalsWorkflowRun$Outbound,
  z.ZodTypeDef,
  GetV2LogsIdEvalsWorkflowRun
> = z.object({
  id: z.string(),
  workflowMetadata: z.record(z.any()).optional(),
  workflowInput: z.record(z.any()).optional(),
  workflowOutput: z.record(z.any()).optional(),
  requestProperties: z.lazy(() =>
    GetV2LogsIdEvalsResponseRequestProperties$outboundSchema
  ).optional(),
  startedAt: z.date().transform(v => v.toISOString()),
  finishedAt: z.date().transform(v => v.toISOString()).optional(),
  productType: GetV2LogsIdEvalsResponseProductType$outboundSchema,
  relatedEntities: z.array(
    z.lazy(() =>
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7WorkflowRun1$outboundSchema
    ),
  ),
  evals: z.array(
    z.union([
      z.lazy(() =>
        GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody1$outboundSchema
      ),
      z.lazy(() =>
        GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody2$outboundSchema
      ),
      z.lazy(() =>
        GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody3$outboundSchema
      ),
      z.lazy(() =>
        GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody4$outboundSchema
      ),
    ]),
  ),
  data: z.lazy(() => GetV2LogsIdEvalsResponseData$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    workflowMetadata: "workflow_metadata",
    workflowInput: "workflow_input",
    workflowOutput: "workflow_output",
    requestProperties: "request_properties",
    startedAt: "started_at",
    finishedAt: "finished_at",
    productType: "product_type",
    relatedEntities: "related_entities",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdEvalsWorkflowRun$ {
  /** @deprecated use `GetV2LogsIdEvalsWorkflowRun$inboundSchema` instead. */
  export const inboundSchema = GetV2LogsIdEvalsWorkflowRun$inboundSchema;
  /** @deprecated use `GetV2LogsIdEvalsWorkflowRun$outboundSchema` instead. */
  export const outboundSchema = GetV2LogsIdEvalsWorkflowRun$outboundSchema;
  /** @deprecated use `GetV2LogsIdEvalsWorkflowRun$Outbound` instead. */
  export type Outbound = GetV2LogsIdEvalsWorkflowRun$Outbound;
}

export function getV2LogsIdEvalsWorkflowRunToJSON(
  getV2LogsIdEvalsWorkflowRun: GetV2LogsIdEvalsWorkflowRun,
): string {
  return JSON.stringify(
    GetV2LogsIdEvalsWorkflowRun$outboundSchema.parse(
      getV2LogsIdEvalsWorkflowRun,
    ),
  );
}

export function getV2LogsIdEvalsWorkflowRunFromJSON(
  jsonString: string,
): SafeParseResult<GetV2LogsIdEvalsWorkflowRun, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetV2LogsIdEvalsWorkflowRun$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetV2LogsIdEvalsWorkflowRun' from JSON`,
  );
}

/** @internal */
export const GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody37Status$inboundSchema:
  z.ZodNativeEnum<
    typeof GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody37Status
  > = z.nativeEnum(
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody37Status,
  );

/** @internal */
export const GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody37Status$outboundSchema:
  z.ZodNativeEnum<
    typeof GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody37Status
  > =
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody37Status$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody37Status$ {
  /** @deprecated use `GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody37Status$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody37Status$inboundSchema;
  /** @deprecated use `GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody37Status$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody37Status$outboundSchema;
}

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals74Type$inboundSchema:
  z.ZodNativeEnum<
    typeof GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals74Type
  > = z.nativeEnum(
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals74Type,
  );

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals74Type$outboundSchema:
  z.ZodNativeEnum<
    typeof GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals74Type
  > =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals74Type$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals74Type$ {
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals74Type$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals74Type$inboundSchema;
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals74Type$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals74Type$outboundSchema;
}

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals74$inboundSchema:
  z.ZodType<
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals74,
    z.ZodTypeDef,
    unknown
  > = z.object({
    type:
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals74Type$inboundSchema,
    evaluator_id: z.string(),
  }).transform((v) => {
    return remap$(v, {
      "evaluator_id": "evaluatorId",
    });
  });

/** @internal */
export type GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals74$Outbound =
  {
    type: string;
    evaluator_id: string;
  };

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals74$outboundSchema:
  z.ZodType<
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals74$Outbound,
    z.ZodTypeDef,
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals74
  > = z.object({
    type:
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals74Type$outboundSchema,
    evaluatorId: z.string(),
  }).transform((v) => {
    return remap$(v, {
      evaluatorId: "evaluator_id",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals74$ {
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals74$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals74$inboundSchema;
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals74$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals74$outboundSchema;
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals74$Outbound` instead. */
  export type Outbound =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals74$Outbound;
}

export function getV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals74ToJSON(
  getV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals74:
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals74,
): string {
  return JSON.stringify(
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals74$outboundSchema
      .parse(
        getV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals74,
      ),
  );
}

export function getV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals74FromJSON(
  jsonString: string,
): SafeParseResult<
  GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals74,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals74$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals74' from JSON`,
  );
}

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals73Type$inboundSchema:
  z.ZodNativeEnum<
    typeof GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals73Type
  > = z.nativeEnum(
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals73Type,
  );

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals73Type$outboundSchema:
  z.ZodNativeEnum<
    typeof GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals73Type
  > =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals73Type$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals73Type$ {
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals73Type$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals73Type$inboundSchema;
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals73Type$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals73Type$outboundSchema;
}

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals73$inboundSchema:
  z.ZodType<
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals73,
    z.ZodTypeDef,
    unknown
  > = z.object({
    type:
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals73Type$inboundSchema,
    human_eval_id: z.string(),
  }).transform((v) => {
    return remap$(v, {
      "human_eval_id": "humanEvalId",
    });
  });

/** @internal */
export type GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals73$Outbound =
  {
    type: string;
    human_eval_id: string;
  };

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals73$outboundSchema:
  z.ZodType<
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals73$Outbound,
    z.ZodTypeDef,
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals73
  > = z.object({
    type:
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals73Type$outboundSchema,
    humanEvalId: z.string(),
  }).transform((v) => {
    return remap$(v, {
      humanEvalId: "human_eval_id",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals73$ {
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals73$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals73$inboundSchema;
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals73$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals73$outboundSchema;
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals73$Outbound` instead. */
  export type Outbound =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals73$Outbound;
}

export function getV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals73ToJSON(
  getV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals73:
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals73,
): string {
  return JSON.stringify(
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals73$outboundSchema
      .parse(
        getV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals73,
      ),
  );
}

export function getV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals73FromJSON(
  jsonString: string,
): SafeParseResult<
  GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals73,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals73$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals73' from JSON`,
  );
}

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals72Type$inboundSchema:
  z.ZodNativeEnum<
    typeof GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals72Type
  > = z.nativeEnum(
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals72Type,
  );

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals72Type$outboundSchema:
  z.ZodNativeEnum<
    typeof GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals72Type
  > =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals72Type$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals72Type$ {
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals72Type$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals72Type$inboundSchema;
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals72Type$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals72Type$outboundSchema;
}

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals72$inboundSchema:
  z.ZodType<
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals72,
    z.ZodTypeDef,
    unknown
  > = z.object({
    type:
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals72Type$inboundSchema,
    contact_id: z.string(),
  }).transform((v) => {
    return remap$(v, {
      "contact_id": "contactId",
    });
  });

/** @internal */
export type GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals72$Outbound =
  {
    type: string;
    contact_id: string;
  };

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals72$outboundSchema:
  z.ZodType<
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals72$Outbound,
    z.ZodTypeDef,
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals72
  > = z.object({
    type:
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals72Type$outboundSchema,
    contactId: z.string(),
  }).transform((v) => {
    return remap$(v, {
      contactId: "contact_id",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals72$ {
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals72$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals72$inboundSchema;
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals72$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals72$outboundSchema;
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals72$Outbound` instead. */
  export type Outbound =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals72$Outbound;
}

export function getV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals72ToJSON(
  getV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals72:
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals72,
): string {
  return JSON.stringify(
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals72$outboundSchema
      .parse(
        getV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals72,
      ),
  );
}

export function getV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals72FromJSON(
  jsonString: string,
): SafeParseResult<
  GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals72,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals72$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals72' from JSON`,
  );
}

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7Type$inboundSchema:
  z.ZodNativeEnum<
    typeof GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7Type
  > = z.nativeEnum(
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7Type,
  );

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7Type$outboundSchema:
  z.ZodNativeEnum<
    typeof GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7Type
  > =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7Type$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7Type$ {
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7Type$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7Type$inboundSchema;
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7Type$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7Type$outboundSchema;
}

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals71$inboundSchema:
  z.ZodType<
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals71,
    z.ZodTypeDef,
    unknown
  > = z.object({
    type:
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7Type$inboundSchema,
    account_id: z.string(),
  }).transform((v) => {
    return remap$(v, {
      "account_id": "accountId",
    });
  });

/** @internal */
export type GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals71$Outbound =
  {
    type: string;
    account_id: string;
  };

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals71$outboundSchema:
  z.ZodType<
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals71$Outbound,
    z.ZodTypeDef,
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals71
  > = z.object({
    type:
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals7Type$outboundSchema,
    accountId: z.string(),
  }).transform((v) => {
    return remap$(v, {
      accountId: "account_id",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals71$ {
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals71$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals71$inboundSchema;
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals71$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals71$outboundSchema;
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals71$Outbound` instead. */
  export type Outbound =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals71$Outbound;
}

export function getV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals71ToJSON(
  getV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals71:
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals71,
): string {
  return JSON.stringify(
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals71$outboundSchema
      .parse(
        getV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals71,
      ),
  );
}

export function getV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals71FromJSON(
  jsonString: string,
): SafeParseResult<
  GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals71,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals71$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals71' from JSON`,
  );
}

/** @internal */
export const GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody37RelatedEntities$inboundSchema:
  z.ZodType<
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody37RelatedEntities,
    z.ZodTypeDef,
    unknown
  > = z.union([
    z.lazy(() =>
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals71$inboundSchema
    ),
    z.lazy(() =>
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals72$inboundSchema
    ),
    z.lazy(() =>
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals73$inboundSchema
    ),
    z.lazy(() =>
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals74$inboundSchema
    ),
  ]);

/** @internal */
export type GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody37RelatedEntities$Outbound =
  | GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals71$Outbound
  | GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals72$Outbound
  | GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals73$Outbound
  | GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals74$Outbound;

/** @internal */
export const GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody37RelatedEntities$outboundSchema:
  z.ZodType<
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody37RelatedEntities$Outbound,
    z.ZodTypeDef,
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody37RelatedEntities
  > = z.union([
    z.lazy(() =>
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals71$outboundSchema
    ),
    z.lazy(() =>
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals72$outboundSchema
    ),
    z.lazy(() =>
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals73$outboundSchema
    ),
    z.lazy(() =>
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals74$outboundSchema
    ),
  ]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody37RelatedEntities$ {
  /** @deprecated use `GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody37RelatedEntities$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody37RelatedEntities$inboundSchema;
  /** @deprecated use `GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody37RelatedEntities$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody37RelatedEntities$outboundSchema;
  /** @deprecated use `GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody37RelatedEntities$Outbound` instead. */
  export type Outbound =
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody37RelatedEntities$Outbound;
}

export function getV2LogsIdEvalsResponse200ApplicationJSONResponseBody37RelatedEntitiesToJSON(
  getV2LogsIdEvalsResponse200ApplicationJSONResponseBody37RelatedEntities:
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody37RelatedEntities,
): string {
  return JSON.stringify(
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody37RelatedEntities$outboundSchema
      .parse(
        getV2LogsIdEvalsResponse200ApplicationJSONResponseBody37RelatedEntities,
      ),
  );
}

export function getV2LogsIdEvalsResponse200ApplicationJSONResponseBody37RelatedEntitiesFromJSON(
  jsonString: string,
): SafeParseResult<
  GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody37RelatedEntities,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody37RelatedEntities$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody37RelatedEntities' from JSON`,
  );
}

/** @internal */
export const GetV2LogsIdEvalsResponse7$inboundSchema: z.ZodType<
  GetV2LogsIdEvalsResponse7,
  z.ZodTypeDef,
  unknown
> = z.object({
  type:
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody37Type$inboundSchema,
  workflow_run: z.lazy(() => GetV2LogsIdEvalsWorkflowRun$inboundSchema),
  id: z.string(),
  status:
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody37Status$inboundSchema,
  timestamp: z.string().datetime({ offset: true }).transform(v => new Date(v)),
  related_entities: z.array(
    z.union([
      z.lazy(() =>
        GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals71$inboundSchema
      ),
      z.lazy(() =>
        GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals72$inboundSchema
      ),
      z.lazy(() =>
        GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals73$inboundSchema
      ),
      z.lazy(() =>
        GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals74$inboundSchema
      ),
    ]),
  ),
}).transform((v) => {
  return remap$(v, {
    "workflow_run": "workflowRun",
    "related_entities": "relatedEntities",
  });
});

/** @internal */
export type GetV2LogsIdEvalsResponse7$Outbound = {
  type: string;
  workflow_run: GetV2LogsIdEvalsWorkflowRun$Outbound;
  id: string;
  status: string;
  timestamp: string;
  related_entities: Array<
    | GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals71$Outbound
    | GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals72$Outbound
    | GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals73$Outbound
    | GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals74$Outbound
  >;
};

/** @internal */
export const GetV2LogsIdEvalsResponse7$outboundSchema: z.ZodType<
  GetV2LogsIdEvalsResponse7$Outbound,
  z.ZodTypeDef,
  GetV2LogsIdEvalsResponse7
> = z.object({
  type:
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody37Type$outboundSchema,
  workflowRun: z.lazy(() => GetV2LogsIdEvalsWorkflowRun$outboundSchema),
  id: z.string(),
  status:
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody37Status$outboundSchema,
  timestamp: z.date().transform(v => v.toISOString()),
  relatedEntities: z.array(
    z.union([
      z.lazy(() =>
        GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals71$outboundSchema
      ),
      z.lazy(() =>
        GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals72$outboundSchema
      ),
      z.lazy(() =>
        GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals73$outboundSchema
      ),
      z.lazy(() =>
        GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals74$outboundSchema
      ),
    ]),
  ),
}).transform((v) => {
  return remap$(v, {
    workflowRun: "workflow_run",
    relatedEntities: "related_entities",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdEvalsResponse7$ {
  /** @deprecated use `GetV2LogsIdEvalsResponse7$inboundSchema` instead. */
  export const inboundSchema = GetV2LogsIdEvalsResponse7$inboundSchema;
  /** @deprecated use `GetV2LogsIdEvalsResponse7$outboundSchema` instead. */
  export const outboundSchema = GetV2LogsIdEvalsResponse7$outboundSchema;
  /** @deprecated use `GetV2LogsIdEvalsResponse7$Outbound` instead. */
  export type Outbound = GetV2LogsIdEvalsResponse7$Outbound;
}

export function getV2LogsIdEvalsResponse7ToJSON(
  getV2LogsIdEvalsResponse7: GetV2LogsIdEvalsResponse7,
): string {
  return JSON.stringify(
    GetV2LogsIdEvalsResponse7$outboundSchema.parse(getV2LogsIdEvalsResponse7),
  );
}

export function getV2LogsIdEvalsResponse7FromJSON(
  jsonString: string,
): SafeParseResult<GetV2LogsIdEvalsResponse7, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetV2LogsIdEvalsResponse7$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetV2LogsIdEvalsResponse7' from JSON`,
  );
}

/** @internal */
export const GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody36Type$inboundSchema:
  z.ZodNativeEnum<
    typeof GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody36Type
  > = z.nativeEnum(
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody36Type,
  );

/** @internal */
export const GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody36Type$outboundSchema:
  z.ZodNativeEnum<
    typeof GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody36Type
  > =
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody36Type$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody36Type$ {
  /** @deprecated use `GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody36Type$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody36Type$inboundSchema;
  /** @deprecated use `GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody36Type$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody36Type$outboundSchema;
}

/** @internal */
export const GetV2LogsIdEvalsResponse200ApplicationJSONResponseBodyValue$inboundSchema:
  z.ZodType<
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBodyValue,
    z.ZodTypeDef,
    unknown
  > = z.object({
    f1: z.number(),
    precision: z.number(),
    recall: z.number(),
  });

/** @internal */
export type GetV2LogsIdEvalsResponse200ApplicationJSONResponseBodyValue$Outbound =
  {
    f1: number;
    precision: number;
    recall: number;
  };

/** @internal */
export const GetV2LogsIdEvalsResponse200ApplicationJSONResponseBodyValue$outboundSchema:
  z.ZodType<
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBodyValue$Outbound,
    z.ZodTypeDef,
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBodyValue
  > = z.object({
    f1: z.number(),
    precision: z.number(),
    recall: z.number(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdEvalsResponse200ApplicationJSONResponseBodyValue$ {
  /** @deprecated use `GetV2LogsIdEvalsResponse200ApplicationJSONResponseBodyValue$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBodyValue$inboundSchema;
  /** @deprecated use `GetV2LogsIdEvalsResponse200ApplicationJSONResponseBodyValue$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBodyValue$outboundSchema;
  /** @deprecated use `GetV2LogsIdEvalsResponse200ApplicationJSONResponseBodyValue$Outbound` instead. */
  export type Outbound =
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBodyValue$Outbound;
}

export function getV2LogsIdEvalsResponse200ApplicationJSONResponseBodyValueToJSON(
  getV2LogsIdEvalsResponse200ApplicationJSONResponseBodyValue:
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBodyValue,
): string {
  return JSON.stringify(
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBodyValue$outboundSchema
      .parse(getV2LogsIdEvalsResponse200ApplicationJSONResponseBodyValue),
  );
}

export function getV2LogsIdEvalsResponse200ApplicationJSONResponseBodyValueFromJSON(
  jsonString: string,
): SafeParseResult<
  GetV2LogsIdEvalsResponse200ApplicationJSONResponseBodyValue,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetV2LogsIdEvalsResponse200ApplicationJSONResponseBodyValue$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'GetV2LogsIdEvalsResponse200ApplicationJSONResponseBodyValue' from JSON`,
  );
}

/** @internal */
export const GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody36Status$inboundSchema:
  z.ZodNativeEnum<
    typeof GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody36Status
  > = z.nativeEnum(
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody36Status,
  );

/** @internal */
export const GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody36Status$outboundSchema:
  z.ZodNativeEnum<
    typeof GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody36Status
  > =
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody36Status$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody36Status$ {
  /** @deprecated use `GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody36Status$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody36Status$inboundSchema;
  /** @deprecated use `GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody36Status$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody36Status$outboundSchema;
}

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals64Type$inboundSchema:
  z.ZodNativeEnum<
    typeof GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals64Type
  > = z.nativeEnum(
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals64Type,
  );

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals64Type$outboundSchema:
  z.ZodNativeEnum<
    typeof GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals64Type
  > =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals64Type$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals64Type$ {
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals64Type$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals64Type$inboundSchema;
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals64Type$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals64Type$outboundSchema;
}

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals64$inboundSchema:
  z.ZodType<
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals64,
    z.ZodTypeDef,
    unknown
  > = z.object({
    type:
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals64Type$inboundSchema,
    evaluator_id: z.string(),
  }).transform((v) => {
    return remap$(v, {
      "evaluator_id": "evaluatorId",
    });
  });

/** @internal */
export type GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals64$Outbound =
  {
    type: string;
    evaluator_id: string;
  };

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals64$outboundSchema:
  z.ZodType<
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals64$Outbound,
    z.ZodTypeDef,
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals64
  > = z.object({
    type:
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals64Type$outboundSchema,
    evaluatorId: z.string(),
  }).transform((v) => {
    return remap$(v, {
      evaluatorId: "evaluator_id",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals64$ {
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals64$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals64$inboundSchema;
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals64$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals64$outboundSchema;
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals64$Outbound` instead. */
  export type Outbound =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals64$Outbound;
}

export function getV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals64ToJSON(
  getV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals64:
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals64,
): string {
  return JSON.stringify(
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals64$outboundSchema
      .parse(
        getV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals64,
      ),
  );
}

export function getV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals64FromJSON(
  jsonString: string,
): SafeParseResult<
  GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals64,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals64$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals64' from JSON`,
  );
}

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals63Type$inboundSchema:
  z.ZodNativeEnum<
    typeof GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals63Type
  > = z.nativeEnum(
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals63Type,
  );

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals63Type$outboundSchema:
  z.ZodNativeEnum<
    typeof GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals63Type
  > =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals63Type$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals63Type$ {
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals63Type$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals63Type$inboundSchema;
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals63Type$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals63Type$outboundSchema;
}

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals63$inboundSchema:
  z.ZodType<
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals63,
    z.ZodTypeDef,
    unknown
  > = z.object({
    type:
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals63Type$inboundSchema,
    human_eval_id: z.string(),
  }).transform((v) => {
    return remap$(v, {
      "human_eval_id": "humanEvalId",
    });
  });

/** @internal */
export type GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals63$Outbound =
  {
    type: string;
    human_eval_id: string;
  };

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals63$outboundSchema:
  z.ZodType<
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals63$Outbound,
    z.ZodTypeDef,
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals63
  > = z.object({
    type:
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals63Type$outboundSchema,
    humanEvalId: z.string(),
  }).transform((v) => {
    return remap$(v, {
      humanEvalId: "human_eval_id",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals63$ {
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals63$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals63$inboundSchema;
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals63$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals63$outboundSchema;
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals63$Outbound` instead. */
  export type Outbound =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals63$Outbound;
}

export function getV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals63ToJSON(
  getV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals63:
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals63,
): string {
  return JSON.stringify(
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals63$outboundSchema
      .parse(
        getV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals63,
      ),
  );
}

export function getV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals63FromJSON(
  jsonString: string,
): SafeParseResult<
  GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals63,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals63$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals63' from JSON`,
  );
}

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals62Type$inboundSchema:
  z.ZodNativeEnum<
    typeof GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals62Type
  > = z.nativeEnum(
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals62Type,
  );

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals62Type$outboundSchema:
  z.ZodNativeEnum<
    typeof GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals62Type
  > =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals62Type$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals62Type$ {
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals62Type$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals62Type$inboundSchema;
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals62Type$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals62Type$outboundSchema;
}

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals62$inboundSchema:
  z.ZodType<
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals62,
    z.ZodTypeDef,
    unknown
  > = z.object({
    type:
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals62Type$inboundSchema,
    contact_id: z.string(),
  }).transform((v) => {
    return remap$(v, {
      "contact_id": "contactId",
    });
  });

/** @internal */
export type GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals62$Outbound =
  {
    type: string;
    contact_id: string;
  };

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals62$outboundSchema:
  z.ZodType<
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals62$Outbound,
    z.ZodTypeDef,
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals62
  > = z.object({
    type:
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals62Type$outboundSchema,
    contactId: z.string(),
  }).transform((v) => {
    return remap$(v, {
      contactId: "contact_id",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals62$ {
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals62$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals62$inboundSchema;
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals62$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals62$outboundSchema;
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals62$Outbound` instead. */
  export type Outbound =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals62$Outbound;
}

export function getV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals62ToJSON(
  getV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals62:
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals62,
): string {
  return JSON.stringify(
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals62$outboundSchema
      .parse(
        getV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals62,
      ),
  );
}

export function getV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals62FromJSON(
  jsonString: string,
): SafeParseResult<
  GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals62,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals62$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals62' from JSON`,
  );
}

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals6Type$inboundSchema:
  z.ZodNativeEnum<
    typeof GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals6Type
  > = z.nativeEnum(
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals6Type,
  );

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals6Type$outboundSchema:
  z.ZodNativeEnum<
    typeof GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals6Type
  > =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals6Type$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals6Type$ {
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals6Type$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals6Type$inboundSchema;
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals6Type$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals6Type$outboundSchema;
}

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals61$inboundSchema:
  z.ZodType<
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals61,
    z.ZodTypeDef,
    unknown
  > = z.object({
    type:
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals6Type$inboundSchema,
    account_id: z.string(),
  }).transform((v) => {
    return remap$(v, {
      "account_id": "accountId",
    });
  });

/** @internal */
export type GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals61$Outbound =
  {
    type: string;
    account_id: string;
  };

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals61$outboundSchema:
  z.ZodType<
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals61$Outbound,
    z.ZodTypeDef,
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals61
  > = z.object({
    type:
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals6Type$outboundSchema,
    accountId: z.string(),
  }).transform((v) => {
    return remap$(v, {
      accountId: "account_id",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals61$ {
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals61$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals61$inboundSchema;
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals61$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals61$outboundSchema;
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals61$Outbound` instead. */
  export type Outbound =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals61$Outbound;
}

export function getV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals61ToJSON(
  getV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals61:
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals61,
): string {
  return JSON.stringify(
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals61$outboundSchema
      .parse(
        getV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals61,
      ),
  );
}

export function getV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals61FromJSON(
  jsonString: string,
): SafeParseResult<
  GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals61,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals61$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals61' from JSON`,
  );
}

/** @internal */
export const GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody36RelatedEntities$inboundSchema:
  z.ZodType<
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody36RelatedEntities,
    z.ZodTypeDef,
    unknown
  > = z.union([
    z.lazy(() =>
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals61$inboundSchema
    ),
    z.lazy(() =>
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals62$inboundSchema
    ),
    z.lazy(() =>
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals63$inboundSchema
    ),
    z.lazy(() =>
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals64$inboundSchema
    ),
  ]);

/** @internal */
export type GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody36RelatedEntities$Outbound =
  | GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals61$Outbound
  | GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals62$Outbound
  | GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals63$Outbound
  | GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals64$Outbound;

/** @internal */
export const GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody36RelatedEntities$outboundSchema:
  z.ZodType<
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody36RelatedEntities$Outbound,
    z.ZodTypeDef,
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody36RelatedEntities
  > = z.union([
    z.lazy(() =>
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals61$outboundSchema
    ),
    z.lazy(() =>
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals62$outboundSchema
    ),
    z.lazy(() =>
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals63$outboundSchema
    ),
    z.lazy(() =>
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals64$outboundSchema
    ),
  ]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody36RelatedEntities$ {
  /** @deprecated use `GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody36RelatedEntities$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody36RelatedEntities$inboundSchema;
  /** @deprecated use `GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody36RelatedEntities$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody36RelatedEntities$outboundSchema;
  /** @deprecated use `GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody36RelatedEntities$Outbound` instead. */
  export type Outbound =
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody36RelatedEntities$Outbound;
}

export function getV2LogsIdEvalsResponse200ApplicationJSONResponseBody36RelatedEntitiesToJSON(
  getV2LogsIdEvalsResponse200ApplicationJSONResponseBody36RelatedEntities:
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody36RelatedEntities,
): string {
  return JSON.stringify(
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody36RelatedEntities$outboundSchema
      .parse(
        getV2LogsIdEvalsResponse200ApplicationJSONResponseBody36RelatedEntities,
      ),
  );
}

export function getV2LogsIdEvalsResponse200ApplicationJSONResponseBody36RelatedEntitiesFromJSON(
  jsonString: string,
): SafeParseResult<
  GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody36RelatedEntities,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody36RelatedEntities$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody36RelatedEntities' from JSON`,
  );
}

/** @internal */
export const GetV2LogsIdEvalsResponse6$inboundSchema: z.ZodType<
  GetV2LogsIdEvalsResponse6,
  z.ZodTypeDef,
  unknown
> = z.object({
  type:
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody36Type$inboundSchema,
  value: z.lazy(() =>
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBodyValue$inboundSchema
  ),
  id: z.string(),
  status:
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody36Status$inboundSchema,
  timestamp: z.string().datetime({ offset: true }).transform(v => new Date(v)),
  related_entities: z.array(
    z.union([
      z.lazy(() =>
        GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals61$inboundSchema
      ),
      z.lazy(() =>
        GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals62$inboundSchema
      ),
      z.lazy(() =>
        GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals63$inboundSchema
      ),
      z.lazy(() =>
        GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals64$inboundSchema
      ),
    ]),
  ),
}).transform((v) => {
  return remap$(v, {
    "related_entities": "relatedEntities",
  });
});

/** @internal */
export type GetV2LogsIdEvalsResponse6$Outbound = {
  type: string;
  value: GetV2LogsIdEvalsResponse200ApplicationJSONResponseBodyValue$Outbound;
  id: string;
  status: string;
  timestamp: string;
  related_entities: Array<
    | GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals61$Outbound
    | GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals62$Outbound
    | GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals63$Outbound
    | GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals64$Outbound
  >;
};

/** @internal */
export const GetV2LogsIdEvalsResponse6$outboundSchema: z.ZodType<
  GetV2LogsIdEvalsResponse6$Outbound,
  z.ZodTypeDef,
  GetV2LogsIdEvalsResponse6
> = z.object({
  type:
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody36Type$outboundSchema,
  value: z.lazy(() =>
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBodyValue$outboundSchema
  ),
  id: z.string(),
  status:
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody36Status$outboundSchema,
  timestamp: z.date().transform(v => v.toISOString()),
  relatedEntities: z.array(
    z.union([
      z.lazy(() =>
        GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals61$outboundSchema
      ),
      z.lazy(() =>
        GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals62$outboundSchema
      ),
      z.lazy(() =>
        GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals63$outboundSchema
      ),
      z.lazy(() =>
        GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals64$outboundSchema
      ),
    ]),
  ),
}).transform((v) => {
  return remap$(v, {
    relatedEntities: "related_entities",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdEvalsResponse6$ {
  /** @deprecated use `GetV2LogsIdEvalsResponse6$inboundSchema` instead. */
  export const inboundSchema = GetV2LogsIdEvalsResponse6$inboundSchema;
  /** @deprecated use `GetV2LogsIdEvalsResponse6$outboundSchema` instead. */
  export const outboundSchema = GetV2LogsIdEvalsResponse6$outboundSchema;
  /** @deprecated use `GetV2LogsIdEvalsResponse6$Outbound` instead. */
  export type Outbound = GetV2LogsIdEvalsResponse6$Outbound;
}

export function getV2LogsIdEvalsResponse6ToJSON(
  getV2LogsIdEvalsResponse6: GetV2LogsIdEvalsResponse6,
): string {
  return JSON.stringify(
    GetV2LogsIdEvalsResponse6$outboundSchema.parse(getV2LogsIdEvalsResponse6),
  );
}

export function getV2LogsIdEvalsResponse6FromJSON(
  jsonString: string,
): SafeParseResult<GetV2LogsIdEvalsResponse6, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetV2LogsIdEvalsResponse6$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetV2LogsIdEvalsResponse6' from JSON`,
  );
}

/** @internal */
export const GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody35Type$inboundSchema:
  z.ZodNativeEnum<
    typeof GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody35Type
  > = z.nativeEnum(
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody35Type,
  );

/** @internal */
export const GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody35Type$outboundSchema:
  z.ZodNativeEnum<
    typeof GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody35Type
  > =
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody35Type$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody35Type$ {
  /** @deprecated use `GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody35Type$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody35Type$inboundSchema;
  /** @deprecated use `GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody35Type$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody35Type$outboundSchema;
}

/** @internal */
export const GetV2LogsIdEvalsRouge1$inboundSchema: z.ZodType<
  GetV2LogsIdEvalsRouge1,
  z.ZodTypeDef,
  unknown
> = z.object({
  f1: z.number(),
  precision: z.number(),
  recall: z.number(),
});

/** @internal */
export type GetV2LogsIdEvalsRouge1$Outbound = {
  f1: number;
  precision: number;
  recall: number;
};

/** @internal */
export const GetV2LogsIdEvalsRouge1$outboundSchema: z.ZodType<
  GetV2LogsIdEvalsRouge1$Outbound,
  z.ZodTypeDef,
  GetV2LogsIdEvalsRouge1
> = z.object({
  f1: z.number(),
  precision: z.number(),
  recall: z.number(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdEvalsRouge1$ {
  /** @deprecated use `GetV2LogsIdEvalsRouge1$inboundSchema` instead. */
  export const inboundSchema = GetV2LogsIdEvalsRouge1$inboundSchema;
  /** @deprecated use `GetV2LogsIdEvalsRouge1$outboundSchema` instead. */
  export const outboundSchema = GetV2LogsIdEvalsRouge1$outboundSchema;
  /** @deprecated use `GetV2LogsIdEvalsRouge1$Outbound` instead. */
  export type Outbound = GetV2LogsIdEvalsRouge1$Outbound;
}

export function getV2LogsIdEvalsRouge1ToJSON(
  getV2LogsIdEvalsRouge1: GetV2LogsIdEvalsRouge1,
): string {
  return JSON.stringify(
    GetV2LogsIdEvalsRouge1$outboundSchema.parse(getV2LogsIdEvalsRouge1),
  );
}

export function getV2LogsIdEvalsRouge1FromJSON(
  jsonString: string,
): SafeParseResult<GetV2LogsIdEvalsRouge1, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetV2LogsIdEvalsRouge1$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetV2LogsIdEvalsRouge1' from JSON`,
  );
}

/** @internal */
export const GetV2LogsIdEvalsRouge2$inboundSchema: z.ZodType<
  GetV2LogsIdEvalsRouge2,
  z.ZodTypeDef,
  unknown
> = z.object({
  f1: z.number(),
  precision: z.number(),
  recall: z.number(),
});

/** @internal */
export type GetV2LogsIdEvalsRouge2$Outbound = {
  f1: number;
  precision: number;
  recall: number;
};

/** @internal */
export const GetV2LogsIdEvalsRouge2$outboundSchema: z.ZodType<
  GetV2LogsIdEvalsRouge2$Outbound,
  z.ZodTypeDef,
  GetV2LogsIdEvalsRouge2
> = z.object({
  f1: z.number(),
  precision: z.number(),
  recall: z.number(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdEvalsRouge2$ {
  /** @deprecated use `GetV2LogsIdEvalsRouge2$inboundSchema` instead. */
  export const inboundSchema = GetV2LogsIdEvalsRouge2$inboundSchema;
  /** @deprecated use `GetV2LogsIdEvalsRouge2$outboundSchema` instead. */
  export const outboundSchema = GetV2LogsIdEvalsRouge2$outboundSchema;
  /** @deprecated use `GetV2LogsIdEvalsRouge2$Outbound` instead. */
  export type Outbound = GetV2LogsIdEvalsRouge2$Outbound;
}

export function getV2LogsIdEvalsRouge2ToJSON(
  getV2LogsIdEvalsRouge2: GetV2LogsIdEvalsRouge2,
): string {
  return JSON.stringify(
    GetV2LogsIdEvalsRouge2$outboundSchema.parse(getV2LogsIdEvalsRouge2),
  );
}

export function getV2LogsIdEvalsRouge2FromJSON(
  jsonString: string,
): SafeParseResult<GetV2LogsIdEvalsRouge2, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetV2LogsIdEvalsRouge2$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetV2LogsIdEvalsRouge2' from JSON`,
  );
}

/** @internal */
export const GetV2LogsIdEvalsRougeL$inboundSchema: z.ZodType<
  GetV2LogsIdEvalsRougeL,
  z.ZodTypeDef,
  unknown
> = z.object({
  f1: z.number(),
  precision: z.number(),
  recall: z.number(),
});

/** @internal */
export type GetV2LogsIdEvalsRougeL$Outbound = {
  f1: number;
  precision: number;
  recall: number;
};

/** @internal */
export const GetV2LogsIdEvalsRougeL$outboundSchema: z.ZodType<
  GetV2LogsIdEvalsRougeL$Outbound,
  z.ZodTypeDef,
  GetV2LogsIdEvalsRougeL
> = z.object({
  f1: z.number(),
  precision: z.number(),
  recall: z.number(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdEvalsRougeL$ {
  /** @deprecated use `GetV2LogsIdEvalsRougeL$inboundSchema` instead. */
  export const inboundSchema = GetV2LogsIdEvalsRougeL$inboundSchema;
  /** @deprecated use `GetV2LogsIdEvalsRougeL$outboundSchema` instead. */
  export const outboundSchema = GetV2LogsIdEvalsRougeL$outboundSchema;
  /** @deprecated use `GetV2LogsIdEvalsRougeL$Outbound` instead. */
  export type Outbound = GetV2LogsIdEvalsRougeL$Outbound;
}

export function getV2LogsIdEvalsRougeLToJSON(
  getV2LogsIdEvalsRougeL: GetV2LogsIdEvalsRougeL,
): string {
  return JSON.stringify(
    GetV2LogsIdEvalsRougeL$outboundSchema.parse(getV2LogsIdEvalsRougeL),
  );
}

export function getV2LogsIdEvalsRougeLFromJSON(
  jsonString: string,
): SafeParseResult<GetV2LogsIdEvalsRougeL, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetV2LogsIdEvalsRougeL$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetV2LogsIdEvalsRougeL' from JSON`,
  );
}

/** @internal */
export const GetV2LogsIdEvalsResponse200ApplicationJSONValue$inboundSchema:
  z.ZodType<
    GetV2LogsIdEvalsResponse200ApplicationJSONValue,
    z.ZodTypeDef,
    unknown
  > = z.object({
    rouge_1: z.lazy(() => GetV2LogsIdEvalsRouge1$inboundSchema),
    rouge_2: z.lazy(() => GetV2LogsIdEvalsRouge2$inboundSchema),
    rouge_l: z.lazy(() => GetV2LogsIdEvalsRougeL$inboundSchema),
  }).transform((v) => {
    return remap$(v, {
      "rouge_1": "rouge1",
      "rouge_2": "rouge2",
      "rouge_l": "rougeL",
    });
  });

/** @internal */
export type GetV2LogsIdEvalsResponse200ApplicationJSONValue$Outbound = {
  rouge_1: GetV2LogsIdEvalsRouge1$Outbound;
  rouge_2: GetV2LogsIdEvalsRouge2$Outbound;
  rouge_l: GetV2LogsIdEvalsRougeL$Outbound;
};

/** @internal */
export const GetV2LogsIdEvalsResponse200ApplicationJSONValue$outboundSchema:
  z.ZodType<
    GetV2LogsIdEvalsResponse200ApplicationJSONValue$Outbound,
    z.ZodTypeDef,
    GetV2LogsIdEvalsResponse200ApplicationJSONValue
  > = z.object({
    rouge1: z.lazy(() => GetV2LogsIdEvalsRouge1$outboundSchema),
    rouge2: z.lazy(() => GetV2LogsIdEvalsRouge2$outboundSchema),
    rougeL: z.lazy(() => GetV2LogsIdEvalsRougeL$outboundSchema),
  }).transform((v) => {
    return remap$(v, {
      rouge1: "rouge_1",
      rouge2: "rouge_2",
      rougeL: "rouge_l",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdEvalsResponse200ApplicationJSONValue$ {
  /** @deprecated use `GetV2LogsIdEvalsResponse200ApplicationJSONValue$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsIdEvalsResponse200ApplicationJSONValue$inboundSchema;
  /** @deprecated use `GetV2LogsIdEvalsResponse200ApplicationJSONValue$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdEvalsResponse200ApplicationJSONValue$outboundSchema;
  /** @deprecated use `GetV2LogsIdEvalsResponse200ApplicationJSONValue$Outbound` instead. */
  export type Outbound =
    GetV2LogsIdEvalsResponse200ApplicationJSONValue$Outbound;
}

export function getV2LogsIdEvalsResponse200ApplicationJSONValueToJSON(
  getV2LogsIdEvalsResponse200ApplicationJSONValue:
    GetV2LogsIdEvalsResponse200ApplicationJSONValue,
): string {
  return JSON.stringify(
    GetV2LogsIdEvalsResponse200ApplicationJSONValue$outboundSchema.parse(
      getV2LogsIdEvalsResponse200ApplicationJSONValue,
    ),
  );
}

export function getV2LogsIdEvalsResponse200ApplicationJSONValueFromJSON(
  jsonString: string,
): SafeParseResult<
  GetV2LogsIdEvalsResponse200ApplicationJSONValue,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetV2LogsIdEvalsResponse200ApplicationJSONValue$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'GetV2LogsIdEvalsResponse200ApplicationJSONValue' from JSON`,
  );
}

/** @internal */
export const GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody35Status$inboundSchema:
  z.ZodNativeEnum<
    typeof GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody35Status
  > = z.nativeEnum(
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody35Status,
  );

/** @internal */
export const GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody35Status$outboundSchema:
  z.ZodNativeEnum<
    typeof GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody35Status
  > =
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody35Status$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody35Status$ {
  /** @deprecated use `GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody35Status$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody35Status$inboundSchema;
  /** @deprecated use `GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody35Status$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody35Status$outboundSchema;
}

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals54Type$inboundSchema:
  z.ZodNativeEnum<
    typeof GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals54Type
  > = z.nativeEnum(
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals54Type,
  );

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals54Type$outboundSchema:
  z.ZodNativeEnum<
    typeof GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals54Type
  > =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals54Type$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals54Type$ {
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals54Type$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals54Type$inboundSchema;
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals54Type$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals54Type$outboundSchema;
}

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals54$inboundSchema:
  z.ZodType<
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals54,
    z.ZodTypeDef,
    unknown
  > = z.object({
    type:
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals54Type$inboundSchema,
    evaluator_id: z.string(),
  }).transform((v) => {
    return remap$(v, {
      "evaluator_id": "evaluatorId",
    });
  });

/** @internal */
export type GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals54$Outbound =
  {
    type: string;
    evaluator_id: string;
  };

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals54$outboundSchema:
  z.ZodType<
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals54$Outbound,
    z.ZodTypeDef,
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals54
  > = z.object({
    type:
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals54Type$outboundSchema,
    evaluatorId: z.string(),
  }).transform((v) => {
    return remap$(v, {
      evaluatorId: "evaluator_id",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals54$ {
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals54$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals54$inboundSchema;
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals54$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals54$outboundSchema;
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals54$Outbound` instead. */
  export type Outbound =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals54$Outbound;
}

export function getV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals54ToJSON(
  getV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals54:
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals54,
): string {
  return JSON.stringify(
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals54$outboundSchema
      .parse(
        getV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals54,
      ),
  );
}

export function getV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals54FromJSON(
  jsonString: string,
): SafeParseResult<
  GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals54,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals54$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals54' from JSON`,
  );
}

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals53Type$inboundSchema:
  z.ZodNativeEnum<
    typeof GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals53Type
  > = z.nativeEnum(
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals53Type,
  );

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals53Type$outboundSchema:
  z.ZodNativeEnum<
    typeof GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals53Type
  > =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals53Type$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals53Type$ {
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals53Type$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals53Type$inboundSchema;
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals53Type$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals53Type$outboundSchema;
}

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals53$inboundSchema:
  z.ZodType<
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals53,
    z.ZodTypeDef,
    unknown
  > = z.object({
    type:
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals53Type$inboundSchema,
    human_eval_id: z.string(),
  }).transform((v) => {
    return remap$(v, {
      "human_eval_id": "humanEvalId",
    });
  });

/** @internal */
export type GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals53$Outbound =
  {
    type: string;
    human_eval_id: string;
  };

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals53$outboundSchema:
  z.ZodType<
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals53$Outbound,
    z.ZodTypeDef,
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals53
  > = z.object({
    type:
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals53Type$outboundSchema,
    humanEvalId: z.string(),
  }).transform((v) => {
    return remap$(v, {
      humanEvalId: "human_eval_id",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals53$ {
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals53$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals53$inboundSchema;
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals53$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals53$outboundSchema;
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals53$Outbound` instead. */
  export type Outbound =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals53$Outbound;
}

export function getV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals53ToJSON(
  getV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals53:
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals53,
): string {
  return JSON.stringify(
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals53$outboundSchema
      .parse(
        getV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals53,
      ),
  );
}

export function getV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals53FromJSON(
  jsonString: string,
): SafeParseResult<
  GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals53,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals53$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals53' from JSON`,
  );
}

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals52Type$inboundSchema:
  z.ZodNativeEnum<
    typeof GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals52Type
  > = z.nativeEnum(
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals52Type,
  );

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals52Type$outboundSchema:
  z.ZodNativeEnum<
    typeof GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals52Type
  > =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals52Type$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals52Type$ {
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals52Type$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals52Type$inboundSchema;
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals52Type$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals52Type$outboundSchema;
}

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals52$inboundSchema:
  z.ZodType<
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals52,
    z.ZodTypeDef,
    unknown
  > = z.object({
    type:
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals52Type$inboundSchema,
    contact_id: z.string(),
  }).transform((v) => {
    return remap$(v, {
      "contact_id": "contactId",
    });
  });

/** @internal */
export type GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals52$Outbound =
  {
    type: string;
    contact_id: string;
  };

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals52$outboundSchema:
  z.ZodType<
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals52$Outbound,
    z.ZodTypeDef,
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals52
  > = z.object({
    type:
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals52Type$outboundSchema,
    contactId: z.string(),
  }).transform((v) => {
    return remap$(v, {
      contactId: "contact_id",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals52$ {
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals52$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals52$inboundSchema;
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals52$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals52$outboundSchema;
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals52$Outbound` instead. */
  export type Outbound =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals52$Outbound;
}

export function getV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals52ToJSON(
  getV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals52:
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals52,
): string {
  return JSON.stringify(
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals52$outboundSchema
      .parse(
        getV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals52,
      ),
  );
}

export function getV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals52FromJSON(
  jsonString: string,
): SafeParseResult<
  GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals52,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals52$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals52' from JSON`,
  );
}

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals5Type$inboundSchema:
  z.ZodNativeEnum<
    typeof GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals5Type
  > = z.nativeEnum(
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals5Type,
  );

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals5Type$outboundSchema:
  z.ZodNativeEnum<
    typeof GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals5Type
  > =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals5Type$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals5Type$ {
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals5Type$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals5Type$inboundSchema;
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals5Type$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals5Type$outboundSchema;
}

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals51$inboundSchema:
  z.ZodType<
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals51,
    z.ZodTypeDef,
    unknown
  > = z.object({
    type:
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals5Type$inboundSchema,
    account_id: z.string(),
  }).transform((v) => {
    return remap$(v, {
      "account_id": "accountId",
    });
  });

/** @internal */
export type GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals51$Outbound =
  {
    type: string;
    account_id: string;
  };

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals51$outboundSchema:
  z.ZodType<
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals51$Outbound,
    z.ZodTypeDef,
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals51
  > = z.object({
    type:
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals5Type$outboundSchema,
    accountId: z.string(),
  }).transform((v) => {
    return remap$(v, {
      accountId: "account_id",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals51$ {
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals51$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals51$inboundSchema;
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals51$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals51$outboundSchema;
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals51$Outbound` instead. */
  export type Outbound =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals51$Outbound;
}

export function getV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals51ToJSON(
  getV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals51:
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals51,
): string {
  return JSON.stringify(
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals51$outboundSchema
      .parse(
        getV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals51,
      ),
  );
}

export function getV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals51FromJSON(
  jsonString: string,
): SafeParseResult<
  GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals51,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals51$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals51' from JSON`,
  );
}

/** @internal */
export const GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody35RelatedEntities$inboundSchema:
  z.ZodType<
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody35RelatedEntities,
    z.ZodTypeDef,
    unknown
  > = z.union([
    z.lazy(() =>
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals51$inboundSchema
    ),
    z.lazy(() =>
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals52$inboundSchema
    ),
    z.lazy(() =>
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals53$inboundSchema
    ),
    z.lazy(() =>
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals54$inboundSchema
    ),
  ]);

/** @internal */
export type GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody35RelatedEntities$Outbound =
  | GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals51$Outbound
  | GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals52$Outbound
  | GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals53$Outbound
  | GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals54$Outbound;

/** @internal */
export const GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody35RelatedEntities$outboundSchema:
  z.ZodType<
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody35RelatedEntities$Outbound,
    z.ZodTypeDef,
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody35RelatedEntities
  > = z.union([
    z.lazy(() =>
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals51$outboundSchema
    ),
    z.lazy(() =>
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals52$outboundSchema
    ),
    z.lazy(() =>
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals53$outboundSchema
    ),
    z.lazy(() =>
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals54$outboundSchema
    ),
  ]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody35RelatedEntities$ {
  /** @deprecated use `GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody35RelatedEntities$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody35RelatedEntities$inboundSchema;
  /** @deprecated use `GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody35RelatedEntities$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody35RelatedEntities$outboundSchema;
  /** @deprecated use `GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody35RelatedEntities$Outbound` instead. */
  export type Outbound =
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody35RelatedEntities$Outbound;
}

export function getV2LogsIdEvalsResponse200ApplicationJSONResponseBody35RelatedEntitiesToJSON(
  getV2LogsIdEvalsResponse200ApplicationJSONResponseBody35RelatedEntities:
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody35RelatedEntities,
): string {
  return JSON.stringify(
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody35RelatedEntities$outboundSchema
      .parse(
        getV2LogsIdEvalsResponse200ApplicationJSONResponseBody35RelatedEntities,
      ),
  );
}

export function getV2LogsIdEvalsResponse200ApplicationJSONResponseBody35RelatedEntitiesFromJSON(
  jsonString: string,
): SafeParseResult<
  GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody35RelatedEntities,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody35RelatedEntities$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody35RelatedEntities' from JSON`,
  );
}

/** @internal */
export const GetV2LogsIdEvalsResponse5$inboundSchema: z.ZodType<
  GetV2LogsIdEvalsResponse5,
  z.ZodTypeDef,
  unknown
> = z.object({
  type:
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody35Type$inboundSchema,
  value: z.lazy(() =>
    GetV2LogsIdEvalsResponse200ApplicationJSONValue$inboundSchema
  ),
  id: z.string(),
  status:
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody35Status$inboundSchema,
  timestamp: z.string().datetime({ offset: true }).transform(v => new Date(v)),
  related_entities: z.array(
    z.union([
      z.lazy(() =>
        GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals51$inboundSchema
      ),
      z.lazy(() =>
        GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals52$inboundSchema
      ),
      z.lazy(() =>
        GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals53$inboundSchema
      ),
      z.lazy(() =>
        GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals54$inboundSchema
      ),
    ]),
  ),
}).transform((v) => {
  return remap$(v, {
    "related_entities": "relatedEntities",
  });
});

/** @internal */
export type GetV2LogsIdEvalsResponse5$Outbound = {
  type: string;
  value: GetV2LogsIdEvalsResponse200ApplicationJSONValue$Outbound;
  id: string;
  status: string;
  timestamp: string;
  related_entities: Array<
    | GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals51$Outbound
    | GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals52$Outbound
    | GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals53$Outbound
    | GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals54$Outbound
  >;
};

/** @internal */
export const GetV2LogsIdEvalsResponse5$outboundSchema: z.ZodType<
  GetV2LogsIdEvalsResponse5$Outbound,
  z.ZodTypeDef,
  GetV2LogsIdEvalsResponse5
> = z.object({
  type:
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody35Type$outboundSchema,
  value: z.lazy(() =>
    GetV2LogsIdEvalsResponse200ApplicationJSONValue$outboundSchema
  ),
  id: z.string(),
  status:
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody35Status$outboundSchema,
  timestamp: z.date().transform(v => v.toISOString()),
  relatedEntities: z.array(
    z.union([
      z.lazy(() =>
        GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals51$outboundSchema
      ),
      z.lazy(() =>
        GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals52$outboundSchema
      ),
      z.lazy(() =>
        GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals53$outboundSchema
      ),
      z.lazy(() =>
        GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals54$outboundSchema
      ),
    ]),
  ),
}).transform((v) => {
  return remap$(v, {
    relatedEntities: "related_entities",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdEvalsResponse5$ {
  /** @deprecated use `GetV2LogsIdEvalsResponse5$inboundSchema` instead. */
  export const inboundSchema = GetV2LogsIdEvalsResponse5$inboundSchema;
  /** @deprecated use `GetV2LogsIdEvalsResponse5$outboundSchema` instead. */
  export const outboundSchema = GetV2LogsIdEvalsResponse5$outboundSchema;
  /** @deprecated use `GetV2LogsIdEvalsResponse5$Outbound` instead. */
  export type Outbound = GetV2LogsIdEvalsResponse5$Outbound;
}

export function getV2LogsIdEvalsResponse5ToJSON(
  getV2LogsIdEvalsResponse5: GetV2LogsIdEvalsResponse5,
): string {
  return JSON.stringify(
    GetV2LogsIdEvalsResponse5$outboundSchema.parse(getV2LogsIdEvalsResponse5),
  );
}

export function getV2LogsIdEvalsResponse5FromJSON(
  jsonString: string,
): SafeParseResult<GetV2LogsIdEvalsResponse5, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetV2LogsIdEvalsResponse5$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetV2LogsIdEvalsResponse5' from JSON`,
  );
}

/** @internal */
export const GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody34Type$inboundSchema:
  z.ZodNativeEnum<
    typeof GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody34Type
  > = z.nativeEnum(
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody34Type,
  );

/** @internal */
export const GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody34Type$outboundSchema:
  z.ZodNativeEnum<
    typeof GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody34Type
  > =
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody34Type$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody34Type$ {
  /** @deprecated use `GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody34Type$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody34Type$inboundSchema;
  /** @deprecated use `GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody34Type$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody34Type$outboundSchema;
}

/** @internal */
export const GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody34Status$inboundSchema:
  z.ZodNativeEnum<
    typeof GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody34Status
  > = z.nativeEnum(
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody34Status,
  );

/** @internal */
export const GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody34Status$outboundSchema:
  z.ZodNativeEnum<
    typeof GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody34Status
  > =
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody34Status$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody34Status$ {
  /** @deprecated use `GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody34Status$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody34Status$inboundSchema;
  /** @deprecated use `GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody34Status$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody34Status$outboundSchema;
}

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals44Type$inboundSchema:
  z.ZodNativeEnum<
    typeof GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals44Type
  > = z.nativeEnum(
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals44Type,
  );

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals44Type$outboundSchema:
  z.ZodNativeEnum<
    typeof GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals44Type
  > =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals44Type$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals44Type$ {
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals44Type$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals44Type$inboundSchema;
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals44Type$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals44Type$outboundSchema;
}

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals44$inboundSchema:
  z.ZodType<
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals44,
    z.ZodTypeDef,
    unknown
  > = z.object({
    type:
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals44Type$inboundSchema,
    evaluator_id: z.string(),
  }).transform((v) => {
    return remap$(v, {
      "evaluator_id": "evaluatorId",
    });
  });

/** @internal */
export type GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals44$Outbound =
  {
    type: string;
    evaluator_id: string;
  };

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals44$outboundSchema:
  z.ZodType<
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals44$Outbound,
    z.ZodTypeDef,
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals44
  > = z.object({
    type:
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals44Type$outboundSchema,
    evaluatorId: z.string(),
  }).transform((v) => {
    return remap$(v, {
      evaluatorId: "evaluator_id",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals44$ {
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals44$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals44$inboundSchema;
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals44$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals44$outboundSchema;
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals44$Outbound` instead. */
  export type Outbound =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals44$Outbound;
}

export function getV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals44ToJSON(
  getV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals44:
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals44,
): string {
  return JSON.stringify(
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals44$outboundSchema
      .parse(
        getV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals44,
      ),
  );
}

export function getV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals44FromJSON(
  jsonString: string,
): SafeParseResult<
  GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals44,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals44$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals44' from JSON`,
  );
}

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals43Type$inboundSchema:
  z.ZodNativeEnum<
    typeof GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals43Type
  > = z.nativeEnum(
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals43Type,
  );

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals43Type$outboundSchema:
  z.ZodNativeEnum<
    typeof GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals43Type
  > =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals43Type$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals43Type$ {
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals43Type$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals43Type$inboundSchema;
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals43Type$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals43Type$outboundSchema;
}

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals43$inboundSchema:
  z.ZodType<
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals43,
    z.ZodTypeDef,
    unknown
  > = z.object({
    type:
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals43Type$inboundSchema,
    human_eval_id: z.string(),
  }).transform((v) => {
    return remap$(v, {
      "human_eval_id": "humanEvalId",
    });
  });

/** @internal */
export type GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals43$Outbound =
  {
    type: string;
    human_eval_id: string;
  };

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals43$outboundSchema:
  z.ZodType<
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals43$Outbound,
    z.ZodTypeDef,
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals43
  > = z.object({
    type:
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals43Type$outboundSchema,
    humanEvalId: z.string(),
  }).transform((v) => {
    return remap$(v, {
      humanEvalId: "human_eval_id",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals43$ {
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals43$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals43$inboundSchema;
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals43$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals43$outboundSchema;
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals43$Outbound` instead. */
  export type Outbound =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals43$Outbound;
}

export function getV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals43ToJSON(
  getV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals43:
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals43,
): string {
  return JSON.stringify(
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals43$outboundSchema
      .parse(
        getV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals43,
      ),
  );
}

export function getV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals43FromJSON(
  jsonString: string,
): SafeParseResult<
  GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals43,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals43$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals43' from JSON`,
  );
}

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals42Type$inboundSchema:
  z.ZodNativeEnum<
    typeof GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals42Type
  > = z.nativeEnum(
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals42Type,
  );

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals42Type$outboundSchema:
  z.ZodNativeEnum<
    typeof GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals42Type
  > =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals42Type$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals42Type$ {
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals42Type$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals42Type$inboundSchema;
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals42Type$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals42Type$outboundSchema;
}

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals42$inboundSchema:
  z.ZodType<
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals42,
    z.ZodTypeDef,
    unknown
  > = z.object({
    type:
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals42Type$inboundSchema,
    contact_id: z.string(),
  }).transform((v) => {
    return remap$(v, {
      "contact_id": "contactId",
    });
  });

/** @internal */
export type GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals42$Outbound =
  {
    type: string;
    contact_id: string;
  };

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals42$outboundSchema:
  z.ZodType<
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals42$Outbound,
    z.ZodTypeDef,
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals42
  > = z.object({
    type:
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals42Type$outboundSchema,
    contactId: z.string(),
  }).transform((v) => {
    return remap$(v, {
      contactId: "contact_id",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals42$ {
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals42$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals42$inboundSchema;
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals42$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals42$outboundSchema;
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals42$Outbound` instead. */
  export type Outbound =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals42$Outbound;
}

export function getV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals42ToJSON(
  getV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals42:
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals42,
): string {
  return JSON.stringify(
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals42$outboundSchema
      .parse(
        getV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals42,
      ),
  );
}

export function getV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals42FromJSON(
  jsonString: string,
): SafeParseResult<
  GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals42,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals42$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals42' from JSON`,
  );
}

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals4Type$inboundSchema:
  z.ZodNativeEnum<
    typeof GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals4Type
  > = z.nativeEnum(
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals4Type,
  );

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals4Type$outboundSchema:
  z.ZodNativeEnum<
    typeof GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals4Type
  > =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals4Type$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals4Type$ {
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals4Type$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals4Type$inboundSchema;
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals4Type$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals4Type$outboundSchema;
}

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals41$inboundSchema:
  z.ZodType<
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals41,
    z.ZodTypeDef,
    unknown
  > = z.object({
    type:
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals4Type$inboundSchema,
    account_id: z.string(),
  }).transform((v) => {
    return remap$(v, {
      "account_id": "accountId",
    });
  });

/** @internal */
export type GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals41$Outbound =
  {
    type: string;
    account_id: string;
  };

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals41$outboundSchema:
  z.ZodType<
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals41$Outbound,
    z.ZodTypeDef,
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals41
  > = z.object({
    type:
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals4Type$outboundSchema,
    accountId: z.string(),
  }).transform((v) => {
    return remap$(v, {
      accountId: "account_id",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals41$ {
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals41$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals41$inboundSchema;
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals41$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals41$outboundSchema;
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals41$Outbound` instead. */
  export type Outbound =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals41$Outbound;
}

export function getV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals41ToJSON(
  getV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals41:
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals41,
): string {
  return JSON.stringify(
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals41$outboundSchema
      .parse(
        getV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals41,
      ),
  );
}

export function getV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals41FromJSON(
  jsonString: string,
): SafeParseResult<
  GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals41,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals41$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals41' from JSON`,
  );
}

/** @internal */
export const GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody34RelatedEntities$inboundSchema:
  z.ZodType<
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody34RelatedEntities,
    z.ZodTypeDef,
    unknown
  > = z.union([
    z.lazy(() =>
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals41$inboundSchema
    ),
    z.lazy(() =>
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals42$inboundSchema
    ),
    z.lazy(() =>
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals43$inboundSchema
    ),
    z.lazy(() =>
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals44$inboundSchema
    ),
  ]);

/** @internal */
export type GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody34RelatedEntities$Outbound =
  | GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals41$Outbound
  | GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals42$Outbound
  | GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals43$Outbound
  | GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals44$Outbound;

/** @internal */
export const GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody34RelatedEntities$outboundSchema:
  z.ZodType<
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody34RelatedEntities$Outbound,
    z.ZodTypeDef,
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody34RelatedEntities
  > = z.union([
    z.lazy(() =>
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals41$outboundSchema
    ),
    z.lazy(() =>
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals42$outboundSchema
    ),
    z.lazy(() =>
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals43$outboundSchema
    ),
    z.lazy(() =>
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals44$outboundSchema
    ),
  ]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody34RelatedEntities$ {
  /** @deprecated use `GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody34RelatedEntities$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody34RelatedEntities$inboundSchema;
  /** @deprecated use `GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody34RelatedEntities$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody34RelatedEntities$outboundSchema;
  /** @deprecated use `GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody34RelatedEntities$Outbound` instead. */
  export type Outbound =
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody34RelatedEntities$Outbound;
}

export function getV2LogsIdEvalsResponse200ApplicationJSONResponseBody34RelatedEntitiesToJSON(
  getV2LogsIdEvalsResponse200ApplicationJSONResponseBody34RelatedEntities:
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody34RelatedEntities,
): string {
  return JSON.stringify(
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody34RelatedEntities$outboundSchema
      .parse(
        getV2LogsIdEvalsResponse200ApplicationJSONResponseBody34RelatedEntities,
      ),
  );
}

export function getV2LogsIdEvalsResponse200ApplicationJSONResponseBody34RelatedEntitiesFromJSON(
  jsonString: string,
): SafeParseResult<
  GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody34RelatedEntities,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody34RelatedEntities$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody34RelatedEntities' from JSON`,
  );
}

/** @internal */
export const GetV2LogsIdEvalsResponse4$inboundSchema: z.ZodType<
  GetV2LogsIdEvalsResponse4,
  z.ZodTypeDef,
  unknown
> = z.object({
  type:
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody34Type$inboundSchema,
  values: z.array(z.string()),
  id: z.string(),
  status:
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody34Status$inboundSchema,
  timestamp: z.string().datetime({ offset: true }).transform(v => new Date(v)),
  related_entities: z.array(
    z.union([
      z.lazy(() =>
        GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals41$inboundSchema
      ),
      z.lazy(() =>
        GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals42$inboundSchema
      ),
      z.lazy(() =>
        GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals43$inboundSchema
      ),
      z.lazy(() =>
        GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals44$inboundSchema
      ),
    ]),
  ),
}).transform((v) => {
  return remap$(v, {
    "related_entities": "relatedEntities",
  });
});

/** @internal */
export type GetV2LogsIdEvalsResponse4$Outbound = {
  type: string;
  values: Array<string>;
  id: string;
  status: string;
  timestamp: string;
  related_entities: Array<
    | GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals41$Outbound
    | GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals42$Outbound
    | GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals43$Outbound
    | GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals44$Outbound
  >;
};

/** @internal */
export const GetV2LogsIdEvalsResponse4$outboundSchema: z.ZodType<
  GetV2LogsIdEvalsResponse4$Outbound,
  z.ZodTypeDef,
  GetV2LogsIdEvalsResponse4
> = z.object({
  type:
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody34Type$outboundSchema,
  values: z.array(z.string()),
  id: z.string(),
  status:
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody34Status$outboundSchema,
  timestamp: z.date().transform(v => v.toISOString()),
  relatedEntities: z.array(
    z.union([
      z.lazy(() =>
        GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals41$outboundSchema
      ),
      z.lazy(() =>
        GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals42$outboundSchema
      ),
      z.lazy(() =>
        GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals43$outboundSchema
      ),
      z.lazy(() =>
        GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals44$outboundSchema
      ),
    ]),
  ),
}).transform((v) => {
  return remap$(v, {
    relatedEntities: "related_entities",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdEvalsResponse4$ {
  /** @deprecated use `GetV2LogsIdEvalsResponse4$inboundSchema` instead. */
  export const inboundSchema = GetV2LogsIdEvalsResponse4$inboundSchema;
  /** @deprecated use `GetV2LogsIdEvalsResponse4$outboundSchema` instead. */
  export const outboundSchema = GetV2LogsIdEvalsResponse4$outboundSchema;
  /** @deprecated use `GetV2LogsIdEvalsResponse4$Outbound` instead. */
  export type Outbound = GetV2LogsIdEvalsResponse4$Outbound;
}

export function getV2LogsIdEvalsResponse4ToJSON(
  getV2LogsIdEvalsResponse4: GetV2LogsIdEvalsResponse4,
): string {
  return JSON.stringify(
    GetV2LogsIdEvalsResponse4$outboundSchema.parse(getV2LogsIdEvalsResponse4),
  );
}

export function getV2LogsIdEvalsResponse4FromJSON(
  jsonString: string,
): SafeParseResult<GetV2LogsIdEvalsResponse4, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetV2LogsIdEvalsResponse4$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetV2LogsIdEvalsResponse4' from JSON`,
  );
}

/** @internal */
export const GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody33Type$inboundSchema:
  z.ZodNativeEnum<
    typeof GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody33Type
  > = z.nativeEnum(
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody33Type,
  );

/** @internal */
export const GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody33Type$outboundSchema:
  z.ZodNativeEnum<
    typeof GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody33Type
  > =
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody33Type$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody33Type$ {
  /** @deprecated use `GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody33Type$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody33Type$inboundSchema;
  /** @deprecated use `GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody33Type$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody33Type$outboundSchema;
}

/** @internal */
export const GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody33Status$inboundSchema:
  z.ZodNativeEnum<
    typeof GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody33Status
  > = z.nativeEnum(
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody33Status,
  );

/** @internal */
export const GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody33Status$outboundSchema:
  z.ZodNativeEnum<
    typeof GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody33Status
  > =
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody33Status$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody33Status$ {
  /** @deprecated use `GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody33Status$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody33Status$inboundSchema;
  /** @deprecated use `GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody33Status$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody33Status$outboundSchema;
}

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals34Type$inboundSchema:
  z.ZodNativeEnum<
    typeof GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals34Type
  > = z.nativeEnum(
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals34Type,
  );

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals34Type$outboundSchema:
  z.ZodNativeEnum<
    typeof GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals34Type
  > =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals34Type$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals34Type$ {
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals34Type$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals34Type$inboundSchema;
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals34Type$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals34Type$outboundSchema;
}

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals34$inboundSchema:
  z.ZodType<
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals34,
    z.ZodTypeDef,
    unknown
  > = z.object({
    type:
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals34Type$inboundSchema,
    evaluator_id: z.string(),
  }).transform((v) => {
    return remap$(v, {
      "evaluator_id": "evaluatorId",
    });
  });

/** @internal */
export type GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals34$Outbound =
  {
    type: string;
    evaluator_id: string;
  };

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals34$outboundSchema:
  z.ZodType<
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals34$Outbound,
    z.ZodTypeDef,
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals34
  > = z.object({
    type:
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals34Type$outboundSchema,
    evaluatorId: z.string(),
  }).transform((v) => {
    return remap$(v, {
      evaluatorId: "evaluator_id",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals34$ {
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals34$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals34$inboundSchema;
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals34$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals34$outboundSchema;
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals34$Outbound` instead. */
  export type Outbound =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals34$Outbound;
}

export function getV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals34ToJSON(
  getV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals34:
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals34,
): string {
  return JSON.stringify(
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals34$outboundSchema
      .parse(
        getV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals34,
      ),
  );
}

export function getV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals34FromJSON(
  jsonString: string,
): SafeParseResult<
  GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals34,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals34$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals34' from JSON`,
  );
}

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals33Type$inboundSchema:
  z.ZodNativeEnum<
    typeof GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals33Type
  > = z.nativeEnum(
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals33Type,
  );

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals33Type$outboundSchema:
  z.ZodNativeEnum<
    typeof GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals33Type
  > =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals33Type$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals33Type$ {
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals33Type$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals33Type$inboundSchema;
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals33Type$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals33Type$outboundSchema;
}

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals33$inboundSchema:
  z.ZodType<
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals33,
    z.ZodTypeDef,
    unknown
  > = z.object({
    type:
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals33Type$inboundSchema,
    human_eval_id: z.string(),
  }).transform((v) => {
    return remap$(v, {
      "human_eval_id": "humanEvalId",
    });
  });

/** @internal */
export type GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals33$Outbound =
  {
    type: string;
    human_eval_id: string;
  };

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals33$outboundSchema:
  z.ZodType<
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals33$Outbound,
    z.ZodTypeDef,
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals33
  > = z.object({
    type:
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals33Type$outboundSchema,
    humanEvalId: z.string(),
  }).transform((v) => {
    return remap$(v, {
      humanEvalId: "human_eval_id",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals33$ {
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals33$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals33$inboundSchema;
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals33$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals33$outboundSchema;
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals33$Outbound` instead. */
  export type Outbound =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals33$Outbound;
}

export function getV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals33ToJSON(
  getV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals33:
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals33,
): string {
  return JSON.stringify(
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals33$outboundSchema
      .parse(
        getV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals33,
      ),
  );
}

export function getV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals33FromJSON(
  jsonString: string,
): SafeParseResult<
  GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals33,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals33$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals33' from JSON`,
  );
}

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals32Type$inboundSchema:
  z.ZodNativeEnum<
    typeof GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals32Type
  > = z.nativeEnum(
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals32Type,
  );

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals32Type$outboundSchema:
  z.ZodNativeEnum<
    typeof GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals32Type
  > =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals32Type$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals32Type$ {
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals32Type$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals32Type$inboundSchema;
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals32Type$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals32Type$outboundSchema;
}

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals32$inboundSchema:
  z.ZodType<
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals32,
    z.ZodTypeDef,
    unknown
  > = z.object({
    type:
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals32Type$inboundSchema,
    contact_id: z.string(),
  }).transform((v) => {
    return remap$(v, {
      "contact_id": "contactId",
    });
  });

/** @internal */
export type GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals32$Outbound =
  {
    type: string;
    contact_id: string;
  };

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals32$outboundSchema:
  z.ZodType<
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals32$Outbound,
    z.ZodTypeDef,
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals32
  > = z.object({
    type:
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals32Type$outboundSchema,
    contactId: z.string(),
  }).transform((v) => {
    return remap$(v, {
      contactId: "contact_id",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals32$ {
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals32$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals32$inboundSchema;
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals32$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals32$outboundSchema;
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals32$Outbound` instead. */
  export type Outbound =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals32$Outbound;
}

export function getV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals32ToJSON(
  getV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals32:
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals32,
): string {
  return JSON.stringify(
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals32$outboundSchema
      .parse(
        getV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals32,
      ),
  );
}

export function getV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals32FromJSON(
  jsonString: string,
): SafeParseResult<
  GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals32,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals32$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals32' from JSON`,
  );
}

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals3Type$inboundSchema:
  z.ZodNativeEnum<
    typeof GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals3Type
  > = z.nativeEnum(
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals3Type,
  );

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals3Type$outboundSchema:
  z.ZodNativeEnum<
    typeof GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals3Type
  > =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals3Type$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals3Type$ {
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals3Type$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals3Type$inboundSchema;
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals3Type$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals3Type$outboundSchema;
}

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals31$inboundSchema:
  z.ZodType<
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals31,
    z.ZodTypeDef,
    unknown
  > = z.object({
    type:
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals3Type$inboundSchema,
    account_id: z.string(),
  }).transform((v) => {
    return remap$(v, {
      "account_id": "accountId",
    });
  });

/** @internal */
export type GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals31$Outbound =
  {
    type: string;
    account_id: string;
  };

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals31$outboundSchema:
  z.ZodType<
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals31$Outbound,
    z.ZodTypeDef,
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals31
  > = z.object({
    type:
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals3Type$outboundSchema,
    accountId: z.string(),
  }).transform((v) => {
    return remap$(v, {
      accountId: "account_id",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals31$ {
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals31$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals31$inboundSchema;
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals31$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals31$outboundSchema;
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals31$Outbound` instead. */
  export type Outbound =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals31$Outbound;
}

export function getV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals31ToJSON(
  getV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals31:
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals31,
): string {
  return JSON.stringify(
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals31$outboundSchema
      .parse(
        getV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals31,
      ),
  );
}

export function getV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals31FromJSON(
  jsonString: string,
): SafeParseResult<
  GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals31,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals31$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals31' from JSON`,
  );
}

/** @internal */
export const GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody33RelatedEntities$inboundSchema:
  z.ZodType<
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody33RelatedEntities,
    z.ZodTypeDef,
    unknown
  > = z.union([
    z.lazy(() =>
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals31$inboundSchema
    ),
    z.lazy(() =>
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals32$inboundSchema
    ),
    z.lazy(() =>
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals33$inboundSchema
    ),
    z.lazy(() =>
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals34$inboundSchema
    ),
  ]);

/** @internal */
export type GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody33RelatedEntities$Outbound =
  | GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals31$Outbound
  | GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals32$Outbound
  | GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals33$Outbound
  | GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals34$Outbound;

/** @internal */
export const GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody33RelatedEntities$outboundSchema:
  z.ZodType<
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody33RelatedEntities$Outbound,
    z.ZodTypeDef,
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody33RelatedEntities
  > = z.union([
    z.lazy(() =>
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals31$outboundSchema
    ),
    z.lazy(() =>
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals32$outboundSchema
    ),
    z.lazy(() =>
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals33$outboundSchema
    ),
    z.lazy(() =>
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals34$outboundSchema
    ),
  ]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody33RelatedEntities$ {
  /** @deprecated use `GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody33RelatedEntities$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody33RelatedEntities$inboundSchema;
  /** @deprecated use `GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody33RelatedEntities$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody33RelatedEntities$outboundSchema;
  /** @deprecated use `GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody33RelatedEntities$Outbound` instead. */
  export type Outbound =
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody33RelatedEntities$Outbound;
}

export function getV2LogsIdEvalsResponse200ApplicationJSONResponseBody33RelatedEntitiesToJSON(
  getV2LogsIdEvalsResponse200ApplicationJSONResponseBody33RelatedEntities:
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody33RelatedEntities,
): string {
  return JSON.stringify(
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody33RelatedEntities$outboundSchema
      .parse(
        getV2LogsIdEvalsResponse200ApplicationJSONResponseBody33RelatedEntities,
      ),
  );
}

export function getV2LogsIdEvalsResponse200ApplicationJSONResponseBody33RelatedEntitiesFromJSON(
  jsonString: string,
): SafeParseResult<
  GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody33RelatedEntities,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody33RelatedEntities$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody33RelatedEntities' from JSON`,
  );
}

/** @internal */
export const GetV2LogsIdEvalsResponse3$inboundSchema: z.ZodType<
  GetV2LogsIdEvalsResponse3,
  z.ZodTypeDef,
  unknown
> = z.object({
  type:
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody33Type$inboundSchema,
  value: z.boolean(),
  id: z.string(),
  status:
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody33Status$inboundSchema,
  timestamp: z.string().datetime({ offset: true }).transform(v => new Date(v)),
  related_entities: z.array(
    z.union([
      z.lazy(() =>
        GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals31$inboundSchema
      ),
      z.lazy(() =>
        GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals32$inboundSchema
      ),
      z.lazy(() =>
        GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals33$inboundSchema
      ),
      z.lazy(() =>
        GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals34$inboundSchema
      ),
    ]),
  ),
}).transform((v) => {
  return remap$(v, {
    "related_entities": "relatedEntities",
  });
});

/** @internal */
export type GetV2LogsIdEvalsResponse3$Outbound = {
  type: string;
  value: boolean;
  id: string;
  status: string;
  timestamp: string;
  related_entities: Array<
    | GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals31$Outbound
    | GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals32$Outbound
    | GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals33$Outbound
    | GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals34$Outbound
  >;
};

/** @internal */
export const GetV2LogsIdEvalsResponse3$outboundSchema: z.ZodType<
  GetV2LogsIdEvalsResponse3$Outbound,
  z.ZodTypeDef,
  GetV2LogsIdEvalsResponse3
> = z.object({
  type:
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody33Type$outboundSchema,
  value: z.boolean(),
  id: z.string(),
  status:
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody33Status$outboundSchema,
  timestamp: z.date().transform(v => v.toISOString()),
  relatedEntities: z.array(
    z.union([
      z.lazy(() =>
        GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals31$outboundSchema
      ),
      z.lazy(() =>
        GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals32$outboundSchema
      ),
      z.lazy(() =>
        GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals33$outboundSchema
      ),
      z.lazy(() =>
        GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals34$outboundSchema
      ),
    ]),
  ),
}).transform((v) => {
  return remap$(v, {
    relatedEntities: "related_entities",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdEvalsResponse3$ {
  /** @deprecated use `GetV2LogsIdEvalsResponse3$inboundSchema` instead. */
  export const inboundSchema = GetV2LogsIdEvalsResponse3$inboundSchema;
  /** @deprecated use `GetV2LogsIdEvalsResponse3$outboundSchema` instead. */
  export const outboundSchema = GetV2LogsIdEvalsResponse3$outboundSchema;
  /** @deprecated use `GetV2LogsIdEvalsResponse3$Outbound` instead. */
  export type Outbound = GetV2LogsIdEvalsResponse3$Outbound;
}

export function getV2LogsIdEvalsResponse3ToJSON(
  getV2LogsIdEvalsResponse3: GetV2LogsIdEvalsResponse3,
): string {
  return JSON.stringify(
    GetV2LogsIdEvalsResponse3$outboundSchema.parse(getV2LogsIdEvalsResponse3),
  );
}

export function getV2LogsIdEvalsResponse3FromJSON(
  jsonString: string,
): SafeParseResult<GetV2LogsIdEvalsResponse3, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetV2LogsIdEvalsResponse3$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetV2LogsIdEvalsResponse3' from JSON`,
  );
}

/** @internal */
export const GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody32Type$inboundSchema:
  z.ZodNativeEnum<
    typeof GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody32Type
  > = z.nativeEnum(
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody32Type,
  );

/** @internal */
export const GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody32Type$outboundSchema:
  z.ZodNativeEnum<
    typeof GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody32Type
  > =
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody32Type$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody32Type$ {
  /** @deprecated use `GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody32Type$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody32Type$inboundSchema;
  /** @deprecated use `GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody32Type$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody32Type$outboundSchema;
}

/** @internal */
export const GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody32Status$inboundSchema:
  z.ZodNativeEnum<
    typeof GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody32Status
  > = z.nativeEnum(
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody32Status,
  );

/** @internal */
export const GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody32Status$outboundSchema:
  z.ZodNativeEnum<
    typeof GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody32Status
  > =
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody32Status$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody32Status$ {
  /** @deprecated use `GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody32Status$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody32Status$inboundSchema;
  /** @deprecated use `GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody32Status$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody32Status$outboundSchema;
}

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals24Type$inboundSchema:
  z.ZodNativeEnum<
    typeof GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals24Type
  > = z.nativeEnum(
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals24Type,
  );

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals24Type$outboundSchema:
  z.ZodNativeEnum<
    typeof GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals24Type
  > =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals24Type$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals24Type$ {
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals24Type$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals24Type$inboundSchema;
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals24Type$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals24Type$outboundSchema;
}

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals4$inboundSchema:
  z.ZodType<
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals4,
    z.ZodTypeDef,
    unknown
  > = z.object({
    type:
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals24Type$inboundSchema,
    evaluator_id: z.string(),
  }).transform((v) => {
    return remap$(v, {
      "evaluator_id": "evaluatorId",
    });
  });

/** @internal */
export type GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals4$Outbound =
  {
    type: string;
    evaluator_id: string;
  };

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals4$outboundSchema:
  z.ZodType<
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals4$Outbound,
    z.ZodTypeDef,
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals4
  > = z.object({
    type:
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals24Type$outboundSchema,
    evaluatorId: z.string(),
  }).transform((v) => {
    return remap$(v, {
      evaluatorId: "evaluator_id",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals4$ {
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals4$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals4$inboundSchema;
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals4$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals4$outboundSchema;
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals4$Outbound` instead. */
  export type Outbound =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals4$Outbound;
}

export function getV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals4ToJSON(
  getV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals4:
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals4,
): string {
  return JSON.stringify(
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals4$outboundSchema
      .parse(
        getV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals4,
      ),
  );
}

export function getV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals4FromJSON(
  jsonString: string,
): SafeParseResult<
  GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals4,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals4$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals4' from JSON`,
  );
}

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals23Type$inboundSchema:
  z.ZodNativeEnum<
    typeof GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals23Type
  > = z.nativeEnum(
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals23Type,
  );

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals23Type$outboundSchema:
  z.ZodNativeEnum<
    typeof GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals23Type
  > =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals23Type$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals23Type$ {
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals23Type$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals23Type$inboundSchema;
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals23Type$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals23Type$outboundSchema;
}

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals3$inboundSchema:
  z.ZodType<
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals3,
    z.ZodTypeDef,
    unknown
  > = z.object({
    type:
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals23Type$inboundSchema,
    human_eval_id: z.string(),
  }).transform((v) => {
    return remap$(v, {
      "human_eval_id": "humanEvalId",
    });
  });

/** @internal */
export type GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals3$Outbound =
  {
    type: string;
    human_eval_id: string;
  };

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals3$outboundSchema:
  z.ZodType<
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals3$Outbound,
    z.ZodTypeDef,
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals3
  > = z.object({
    type:
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals23Type$outboundSchema,
    humanEvalId: z.string(),
  }).transform((v) => {
    return remap$(v, {
      humanEvalId: "human_eval_id",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals3$ {
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals3$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals3$inboundSchema;
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals3$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals3$outboundSchema;
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals3$Outbound` instead. */
  export type Outbound =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals3$Outbound;
}

export function getV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals3ToJSON(
  getV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals3:
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals3,
): string {
  return JSON.stringify(
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals3$outboundSchema
      .parse(
        getV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals3,
      ),
  );
}

export function getV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals3FromJSON(
  jsonString: string,
): SafeParseResult<
  GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals3,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals3$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals3' from JSON`,
  );
}

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals22Type$inboundSchema:
  z.ZodNativeEnum<
    typeof GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals22Type
  > = z.nativeEnum(
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals22Type,
  );

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals22Type$outboundSchema:
  z.ZodNativeEnum<
    typeof GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals22Type
  > =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals22Type$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals22Type$ {
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals22Type$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals22Type$inboundSchema;
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals22Type$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals22Type$outboundSchema;
}

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals2$inboundSchema:
  z.ZodType<
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals2,
    z.ZodTypeDef,
    unknown
  > = z.object({
    type:
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals22Type$inboundSchema,
    contact_id: z.string(),
  }).transform((v) => {
    return remap$(v, {
      "contact_id": "contactId",
    });
  });

/** @internal */
export type GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals2$Outbound =
  {
    type: string;
    contact_id: string;
  };

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals2$outboundSchema:
  z.ZodType<
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals2$Outbound,
    z.ZodTypeDef,
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals2
  > = z.object({
    type:
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals22Type$outboundSchema,
    contactId: z.string(),
  }).transform((v) => {
    return remap$(v, {
      contactId: "contact_id",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals2$ {
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals2$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals2$inboundSchema;
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals2$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals2$outboundSchema;
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals2$Outbound` instead. */
  export type Outbound =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals2$Outbound;
}

export function getV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals2ToJSON(
  getV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals2:
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals2,
): string {
  return JSON.stringify(
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals2$outboundSchema
      .parse(
        getV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals2,
      ),
  );
}

export function getV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals2FromJSON(
  jsonString: string,
): SafeParseResult<
  GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals2,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals2$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals2' from JSON`,
  );
}

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals2Type$inboundSchema:
  z.ZodNativeEnum<
    typeof GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals2Type
  > = z.nativeEnum(
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals2Type,
  );

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals2Type$outboundSchema:
  z.ZodNativeEnum<
    typeof GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals2Type
  > =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals2Type$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals2Type$ {
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals2Type$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals2Type$inboundSchema;
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals2Type$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals2Type$outboundSchema;
}

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals1$inboundSchema:
  z.ZodType<
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals1,
    z.ZodTypeDef,
    unknown
  > = z.object({
    type:
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals2Type$inboundSchema,
    account_id: z.string(),
  }).transform((v) => {
    return remap$(v, {
      "account_id": "accountId",
    });
  });

/** @internal */
export type GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals1$Outbound =
  {
    type: string;
    account_id: string;
  };

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals1$outboundSchema:
  z.ZodType<
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals1$Outbound,
    z.ZodTypeDef,
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals1
  > = z.object({
    type:
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals2Type$outboundSchema,
    accountId: z.string(),
  }).transform((v) => {
    return remap$(v, {
      accountId: "account_id",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals1$ {
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals1$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals1$inboundSchema;
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals1$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals1$outboundSchema;
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals1$Outbound` instead. */
  export type Outbound =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals1$Outbound;
}

export function getV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals1ToJSON(
  getV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals1:
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals1,
): string {
  return JSON.stringify(
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals1$outboundSchema
      .parse(
        getV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals1,
      ),
  );
}

export function getV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals1FromJSON(
  jsonString: string,
): SafeParseResult<
  GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals1,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals1$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals1' from JSON`,
  );
}

/** @internal */
export const GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody32RelatedEntities$inboundSchema:
  z.ZodType<
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody32RelatedEntities,
    z.ZodTypeDef,
    unknown
  > = z.union([
    z.lazy(() =>
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals1$inboundSchema
    ),
    z.lazy(() =>
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals2$inboundSchema
    ),
    z.lazy(() =>
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals3$inboundSchema
    ),
    z.lazy(() =>
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals4$inboundSchema
    ),
  ]);

/** @internal */
export type GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody32RelatedEntities$Outbound =
  | GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals1$Outbound
  | GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals2$Outbound
  | GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals3$Outbound
  | GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals4$Outbound;

/** @internal */
export const GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody32RelatedEntities$outboundSchema:
  z.ZodType<
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody32RelatedEntities$Outbound,
    z.ZodTypeDef,
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody32RelatedEntities
  > = z.union([
    z.lazy(() =>
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals1$outboundSchema
    ),
    z.lazy(() =>
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals2$outboundSchema
    ),
    z.lazy(() =>
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals3$outboundSchema
    ),
    z.lazy(() =>
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals4$outboundSchema
    ),
  ]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody32RelatedEntities$ {
  /** @deprecated use `GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody32RelatedEntities$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody32RelatedEntities$inboundSchema;
  /** @deprecated use `GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody32RelatedEntities$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody32RelatedEntities$outboundSchema;
  /** @deprecated use `GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody32RelatedEntities$Outbound` instead. */
  export type Outbound =
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody32RelatedEntities$Outbound;
}

export function getV2LogsIdEvalsResponse200ApplicationJSONResponseBody32RelatedEntitiesToJSON(
  getV2LogsIdEvalsResponse200ApplicationJSONResponseBody32RelatedEntities:
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody32RelatedEntities,
): string {
  return JSON.stringify(
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody32RelatedEntities$outboundSchema
      .parse(
        getV2LogsIdEvalsResponse200ApplicationJSONResponseBody32RelatedEntities,
      ),
  );
}

export function getV2LogsIdEvalsResponse200ApplicationJSONResponseBody32RelatedEntitiesFromJSON(
  jsonString: string,
): SafeParseResult<
  GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody32RelatedEntities,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody32RelatedEntities$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody32RelatedEntities' from JSON`,
  );
}

/** @internal */
export const GetV2LogsIdEvalsResponse2$inboundSchema: z.ZodType<
  GetV2LogsIdEvalsResponse2,
  z.ZodTypeDef,
  unknown
> = z.object({
  type:
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody32Type$inboundSchema,
  value: z.number(),
  id: z.string(),
  status:
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody32Status$inboundSchema,
  timestamp: z.string().datetime({ offset: true }).transform(v => new Date(v)),
  related_entities: z.array(
    z.union([
      z.lazy(() =>
        GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals1$inboundSchema
      ),
      z.lazy(() =>
        GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals2$inboundSchema
      ),
      z.lazy(() =>
        GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals3$inboundSchema
      ),
      z.lazy(() =>
        GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals4$inboundSchema
      ),
    ]),
  ),
}).transform((v) => {
  return remap$(v, {
    "related_entities": "relatedEntities",
  });
});

/** @internal */
export type GetV2LogsIdEvalsResponse2$Outbound = {
  type: string;
  value: number;
  id: string;
  status: string;
  timestamp: string;
  related_entities: Array<
    | GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals1$Outbound
    | GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals2$Outbound
    | GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals3$Outbound
    | GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals4$Outbound
  >;
};

/** @internal */
export const GetV2LogsIdEvalsResponse2$outboundSchema: z.ZodType<
  GetV2LogsIdEvalsResponse2$Outbound,
  z.ZodTypeDef,
  GetV2LogsIdEvalsResponse2
> = z.object({
  type:
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody32Type$outboundSchema,
  value: z.number(),
  id: z.string(),
  status:
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody32Status$outboundSchema,
  timestamp: z.date().transform(v => v.toISOString()),
  relatedEntities: z.array(
    z.union([
      z.lazy(() =>
        GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals1$outboundSchema
      ),
      z.lazy(() =>
        GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals2$outboundSchema
      ),
      z.lazy(() =>
        GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals3$outboundSchema
      ),
      z.lazy(() =>
        GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals4$outboundSchema
      ),
    ]),
  ),
}).transform((v) => {
  return remap$(v, {
    relatedEntities: "related_entities",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdEvalsResponse2$ {
  /** @deprecated use `GetV2LogsIdEvalsResponse2$inboundSchema` instead. */
  export const inboundSchema = GetV2LogsIdEvalsResponse2$inboundSchema;
  /** @deprecated use `GetV2LogsIdEvalsResponse2$outboundSchema` instead. */
  export const outboundSchema = GetV2LogsIdEvalsResponse2$outboundSchema;
  /** @deprecated use `GetV2LogsIdEvalsResponse2$Outbound` instead. */
  export type Outbound = GetV2LogsIdEvalsResponse2$Outbound;
}

export function getV2LogsIdEvalsResponse2ToJSON(
  getV2LogsIdEvalsResponse2: GetV2LogsIdEvalsResponse2,
): string {
  return JSON.stringify(
    GetV2LogsIdEvalsResponse2$outboundSchema.parse(getV2LogsIdEvalsResponse2),
  );
}

export function getV2LogsIdEvalsResponse2FromJSON(
  jsonString: string,
): SafeParseResult<GetV2LogsIdEvalsResponse2, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetV2LogsIdEvalsResponse2$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetV2LogsIdEvalsResponse2' from JSON`,
  );
}

/** @internal */
export const GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody3Type$inboundSchema:
  z.ZodNativeEnum<
    typeof GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody3Type
  > = z.nativeEnum(GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody3Type);

/** @internal */
export const GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody3Type$outboundSchema:
  z.ZodNativeEnum<
    typeof GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody3Type
  > = GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody3Type$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody3Type$ {
  /** @deprecated use `GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody3Type$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody3Type$inboundSchema;
  /** @deprecated use `GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody3Type$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody3Type$outboundSchema;
}

/** @internal */
export const GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody3Status$inboundSchema:
  z.ZodNativeEnum<
    typeof GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody3Status
  > = z.nativeEnum(
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody3Status,
  );

/** @internal */
export const GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody3Status$outboundSchema:
  z.ZodNativeEnum<
    typeof GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody3Status
  > =
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody3Status$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody3Status$ {
  /** @deprecated use `GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody3Status$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody3Status$inboundSchema;
  /** @deprecated use `GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody3Status$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody3Status$outboundSchema;
}

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals14Type$inboundSchema:
  z.ZodNativeEnum<
    typeof GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals14Type
  > = z.nativeEnum(
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals14Type,
  );

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals14Type$outboundSchema:
  z.ZodNativeEnum<
    typeof GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals14Type
  > =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals14Type$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals14Type$ {
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals14Type$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals14Type$inboundSchema;
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals14Type$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals14Type$outboundSchema;
}

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody34$inboundSchema:
  z.ZodType<
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody34,
    z.ZodTypeDef,
    unknown
  > = z.object({
    type:
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals14Type$inboundSchema,
    evaluator_id: z.string(),
  }).transform((v) => {
    return remap$(v, {
      "evaluator_id": "evaluatorId",
    });
  });

/** @internal */
export type GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody34$Outbound =
  {
    type: string;
    evaluator_id: string;
  };

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody34$outboundSchema:
  z.ZodType<
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody34$Outbound,
    z.ZodTypeDef,
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody34
  > = z.object({
    type:
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals14Type$outboundSchema,
    evaluatorId: z.string(),
  }).transform((v) => {
    return remap$(v, {
      evaluatorId: "evaluator_id",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody34$ {
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody34$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody34$inboundSchema;
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody34$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody34$outboundSchema;
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody34$Outbound` instead. */
  export type Outbound =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody34$Outbound;
}

export function getV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody34ToJSON(
  getV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody34:
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody34,
): string {
  return JSON.stringify(
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody34$outboundSchema
      .parse(
        getV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody34,
      ),
  );
}

export function getV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody34FromJSON(
  jsonString: string,
): SafeParseResult<
  GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody34,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody34$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody34' from JSON`,
  );
}

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals1Type$inboundSchema:
  z.ZodNativeEnum<
    typeof GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals1Type
  > = z.nativeEnum(
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals1Type,
  );

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals1Type$outboundSchema:
  z.ZodNativeEnum<
    typeof GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals1Type
  > =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals1Type$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals1Type$ {
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals1Type$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals1Type$inboundSchema;
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals1Type$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals1Type$outboundSchema;
}

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody33$inboundSchema:
  z.ZodType<
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody33,
    z.ZodTypeDef,
    unknown
  > = z.object({
    type:
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals1Type$inboundSchema,
    human_eval_id: z.string(),
  }).transform((v) => {
    return remap$(v, {
      "human_eval_id": "humanEvalId",
    });
  });

/** @internal */
export type GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody33$Outbound =
  {
    type: string;
    human_eval_id: string;
  };

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody33$outboundSchema:
  z.ZodType<
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody33$Outbound,
    z.ZodTypeDef,
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody33
  > = z.object({
    type:
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals1Type$outboundSchema,
    humanEvalId: z.string(),
  }).transform((v) => {
    return remap$(v, {
      humanEvalId: "human_eval_id",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody33$ {
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody33$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody33$inboundSchema;
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody33$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody33$outboundSchema;
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody33$Outbound` instead. */
  export type Outbound =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody33$Outbound;
}

export function getV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody33ToJSON(
  getV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody33:
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody33,
): string {
  return JSON.stringify(
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody33$outboundSchema
      .parse(
        getV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody33,
      ),
  );
}

export function getV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody33FromJSON(
  jsonString: string,
): SafeParseResult<
  GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody33,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody33$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody33' from JSON`,
  );
}

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3EvalsType$inboundSchema:
  z.ZodNativeEnum<
    typeof GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3EvalsType
  > = z.nativeEnum(
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3EvalsType,
  );

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3EvalsType$outboundSchema:
  z.ZodNativeEnum<
    typeof GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3EvalsType
  > =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3EvalsType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3EvalsType$ {
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3EvalsType$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3EvalsType$inboundSchema;
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3EvalsType$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3EvalsType$outboundSchema;
}

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody32$inboundSchema:
  z.ZodType<
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody32,
    z.ZodTypeDef,
    unknown
  > = z.object({
    type:
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3EvalsType$inboundSchema,
    contact_id: z.string(),
  }).transform((v) => {
    return remap$(v, {
      "contact_id": "contactId",
    });
  });

/** @internal */
export type GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody32$Outbound =
  {
    type: string;
    contact_id: string;
  };

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody32$outboundSchema:
  z.ZodType<
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody32$Outbound,
    z.ZodTypeDef,
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody32
  > = z.object({
    type:
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3EvalsType$outboundSchema,
    contactId: z.string(),
  }).transform((v) => {
    return remap$(v, {
      contactId: "contact_id",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody32$ {
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody32$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody32$inboundSchema;
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody32$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody32$outboundSchema;
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody32$Outbound` instead. */
  export type Outbound =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody32$Outbound;
}

export function getV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody32ToJSON(
  getV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody32:
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody32,
): string {
  return JSON.stringify(
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody32$outboundSchema
      .parse(
        getV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody32,
      ),
  );
}

export function getV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody32FromJSON(
  jsonString: string,
): SafeParseResult<
  GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody32,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody32$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody32' from JSON`,
  );
}

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals11Type$inboundSchema:
  z.ZodNativeEnum<
    typeof GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals11Type
  > = z.nativeEnum(
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals11Type,
  );

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals11Type$outboundSchema:
  z.ZodNativeEnum<
    typeof GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals11Type
  > =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals11Type$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals11Type$ {
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals11Type$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals11Type$inboundSchema;
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals11Type$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals11Type$outboundSchema;
}

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody31$inboundSchema:
  z.ZodType<
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody31,
    z.ZodTypeDef,
    unknown
  > = z.object({
    type:
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals11Type$inboundSchema,
    account_id: z.string(),
  }).transform((v) => {
    return remap$(v, {
      "account_id": "accountId",
    });
  });

/** @internal */
export type GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody31$Outbound =
  {
    type: string;
    account_id: string;
  };

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody31$outboundSchema:
  z.ZodType<
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody31$Outbound,
    z.ZodTypeDef,
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody31
  > = z.object({
    type:
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Evals11Type$outboundSchema,
    accountId: z.string(),
  }).transform((v) => {
    return remap$(v, {
      accountId: "account_id",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody31$ {
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody31$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody31$inboundSchema;
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody31$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody31$outboundSchema;
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody31$Outbound` instead. */
  export type Outbound =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody31$Outbound;
}

export function getV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody31ToJSON(
  getV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody31:
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody31,
): string {
  return JSON.stringify(
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody31$outboundSchema
      .parse(
        getV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody31,
      ),
  );
}

export function getV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody31FromJSON(
  jsonString: string,
): SafeParseResult<
  GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody31,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody31$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody31' from JSON`,
  );
}

/** @internal */
export const GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody3RelatedEntities$inboundSchema:
  z.ZodType<
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody3RelatedEntities,
    z.ZodTypeDef,
    unknown
  > = z.union([
    z.lazy(() =>
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody31$inboundSchema
    ),
    z.lazy(() =>
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody32$inboundSchema
    ),
    z.lazy(() =>
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody33$inboundSchema
    ),
    z.lazy(() =>
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody34$inboundSchema
    ),
  ]);

/** @internal */
export type GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody3RelatedEntities$Outbound =
  | GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody31$Outbound
  | GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody32$Outbound
  | GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody33$Outbound
  | GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody34$Outbound;

/** @internal */
export const GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody3RelatedEntities$outboundSchema:
  z.ZodType<
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody3RelatedEntities$Outbound,
    z.ZodTypeDef,
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody3RelatedEntities
  > = z.union([
    z.lazy(() =>
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody31$outboundSchema
    ),
    z.lazy(() =>
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody32$outboundSchema
    ),
    z.lazy(() =>
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody33$outboundSchema
    ),
    z.lazy(() =>
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody34$outboundSchema
    ),
  ]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody3RelatedEntities$ {
  /** @deprecated use `GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody3RelatedEntities$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody3RelatedEntities$inboundSchema;
  /** @deprecated use `GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody3RelatedEntities$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody3RelatedEntities$outboundSchema;
  /** @deprecated use `GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody3RelatedEntities$Outbound` instead. */
  export type Outbound =
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody3RelatedEntities$Outbound;
}

export function getV2LogsIdEvalsResponse200ApplicationJSONResponseBody3RelatedEntitiesToJSON(
  getV2LogsIdEvalsResponse200ApplicationJSONResponseBody3RelatedEntities:
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody3RelatedEntities,
): string {
  return JSON.stringify(
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody3RelatedEntities$outboundSchema
      .parse(
        getV2LogsIdEvalsResponse200ApplicationJSONResponseBody3RelatedEntities,
      ),
  );
}

export function getV2LogsIdEvalsResponse200ApplicationJSONResponseBody3RelatedEntitiesFromJSON(
  jsonString: string,
): SafeParseResult<
  GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody3RelatedEntities,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody3RelatedEntities$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody3RelatedEntities' from JSON`,
  );
}

/** @internal */
export const GetV2LogsIdEvalsResponse1$inboundSchema: z.ZodType<
  GetV2LogsIdEvalsResponse1,
  z.ZodTypeDef,
  unknown
> = z.object({
  type:
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody3Type$inboundSchema,
  value: z.string(),
  id: z.string(),
  status:
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody3Status$inboundSchema,
  timestamp: z.string().datetime({ offset: true }).transform(v => new Date(v)),
  related_entities: z.array(
    z.union([
      z.lazy(() =>
        GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody31$inboundSchema
      ),
      z.lazy(() =>
        GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody32$inboundSchema
      ),
      z.lazy(() =>
        GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody33$inboundSchema
      ),
      z.lazy(() =>
        GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody34$inboundSchema
      ),
    ]),
  ),
}).transform((v) => {
  return remap$(v, {
    "related_entities": "relatedEntities",
  });
});

/** @internal */
export type GetV2LogsIdEvalsResponse1$Outbound = {
  type: string;
  value: string;
  id: string;
  status: string;
  timestamp: string;
  related_entities: Array<
    | GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody31$Outbound
    | GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody32$Outbound
    | GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody33$Outbound
    | GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody34$Outbound
  >;
};

/** @internal */
export const GetV2LogsIdEvalsResponse1$outboundSchema: z.ZodType<
  GetV2LogsIdEvalsResponse1$Outbound,
  z.ZodTypeDef,
  GetV2LogsIdEvalsResponse1
> = z.object({
  type:
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody3Type$outboundSchema,
  value: z.string(),
  id: z.string(),
  status:
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody3Status$outboundSchema,
  timestamp: z.date().transform(v => v.toISOString()),
  relatedEntities: z.array(
    z.union([
      z.lazy(() =>
        GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody31$outboundSchema
      ),
      z.lazy(() =>
        GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody32$outboundSchema
      ),
      z.lazy(() =>
        GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody33$outboundSchema
      ),
      z.lazy(() =>
        GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody34$outboundSchema
      ),
    ]),
  ),
}).transform((v) => {
  return remap$(v, {
    relatedEntities: "related_entities",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdEvalsResponse1$ {
  /** @deprecated use `GetV2LogsIdEvalsResponse1$inboundSchema` instead. */
  export const inboundSchema = GetV2LogsIdEvalsResponse1$inboundSchema;
  /** @deprecated use `GetV2LogsIdEvalsResponse1$outboundSchema` instead. */
  export const outboundSchema = GetV2LogsIdEvalsResponse1$outboundSchema;
  /** @deprecated use `GetV2LogsIdEvalsResponse1$Outbound` instead. */
  export type Outbound = GetV2LogsIdEvalsResponse1$Outbound;
}

export function getV2LogsIdEvalsResponse1ToJSON(
  getV2LogsIdEvalsResponse1: GetV2LogsIdEvalsResponse1,
): string {
  return JSON.stringify(
    GetV2LogsIdEvalsResponse1$outboundSchema.parse(getV2LogsIdEvalsResponse1),
  );
}

export function getV2LogsIdEvalsResponse1FromJSON(
  jsonString: string,
): SafeParseResult<GetV2LogsIdEvalsResponse1, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetV2LogsIdEvalsResponse1$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetV2LogsIdEvalsResponse1' from JSON`,
  );
}

/** @internal */
export const GetV2LogsIdResponseBodyEvals$inboundSchema: z.ZodType<
  GetV2LogsIdResponseBodyEvals,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => GetV2LogsIdEvalsResponse1$inboundSchema),
  z.lazy(() => GetV2LogsIdEvalsResponse2$inboundSchema),
  z.lazy(() => GetV2LogsIdEvalsResponse3$inboundSchema),
  z.lazy(() => GetV2LogsIdEvalsResponse4$inboundSchema),
  z.lazy(() => GetV2LogsIdEvalsResponse5$inboundSchema),
  z.lazy(() => GetV2LogsIdEvalsResponse6$inboundSchema),
  z.lazy(() => GetV2LogsIdEvalsResponse7$inboundSchema),
]);

/** @internal */
export type GetV2LogsIdResponseBodyEvals$Outbound =
  | GetV2LogsIdEvalsResponse1$Outbound
  | GetV2LogsIdEvalsResponse2$Outbound
  | GetV2LogsIdEvalsResponse3$Outbound
  | GetV2LogsIdEvalsResponse4$Outbound
  | GetV2LogsIdEvalsResponse5$Outbound
  | GetV2LogsIdEvalsResponse6$Outbound
  | GetV2LogsIdEvalsResponse7$Outbound;

/** @internal */
export const GetV2LogsIdResponseBodyEvals$outboundSchema: z.ZodType<
  GetV2LogsIdResponseBodyEvals$Outbound,
  z.ZodTypeDef,
  GetV2LogsIdResponseBodyEvals
> = z.union([
  z.lazy(() => GetV2LogsIdEvalsResponse1$outboundSchema),
  z.lazy(() => GetV2LogsIdEvalsResponse2$outboundSchema),
  z.lazy(() => GetV2LogsIdEvalsResponse3$outboundSchema),
  z.lazy(() => GetV2LogsIdEvalsResponse4$outboundSchema),
  z.lazy(() => GetV2LogsIdEvalsResponse5$outboundSchema),
  z.lazy(() => GetV2LogsIdEvalsResponse6$outboundSchema),
  z.lazy(() => GetV2LogsIdEvalsResponse7$outboundSchema),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdResponseBodyEvals$ {
  /** @deprecated use `GetV2LogsIdResponseBodyEvals$inboundSchema` instead. */
  export const inboundSchema = GetV2LogsIdResponseBodyEvals$inboundSchema;
  /** @deprecated use `GetV2LogsIdResponseBodyEvals$outboundSchema` instead. */
  export const outboundSchema = GetV2LogsIdResponseBodyEvals$outboundSchema;
  /** @deprecated use `GetV2LogsIdResponseBodyEvals$Outbound` instead. */
  export type Outbound = GetV2LogsIdResponseBodyEvals$Outbound;
}

export function getV2LogsIdResponseBodyEvalsToJSON(
  getV2LogsIdResponseBodyEvals: GetV2LogsIdResponseBodyEvals,
): string {
  return JSON.stringify(
    GetV2LogsIdResponseBodyEvals$outboundSchema.parse(
      getV2LogsIdResponseBodyEvals,
    ),
  );
}

export function getV2LogsIdResponseBodyEvalsFromJSON(
  jsonString: string,
): SafeParseResult<GetV2LogsIdResponseBodyEvals, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetV2LogsIdResponseBodyEvals$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetV2LogsIdResponseBodyEvals' from JSON`,
  );
}

/** @internal */
export const GetV2LogsIdResponseBodyProductType$inboundSchema: z.ZodNativeEnum<
  typeof GetV2LogsIdResponseBodyProductType
> = z.nativeEnum(GetV2LogsIdResponseBodyProductType);

/** @internal */
export const GetV2LogsIdResponseBodyProductType$outboundSchema: z.ZodNativeEnum<
  typeof GetV2LogsIdResponseBodyProductType
> = GetV2LogsIdResponseBodyProductType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdResponseBodyProductType$ {
  /** @deprecated use `GetV2LogsIdResponseBodyProductType$inboundSchema` instead. */
  export const inboundSchema = GetV2LogsIdResponseBodyProductType$inboundSchema;
  /** @deprecated use `GetV2LogsIdResponseBodyProductType$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdResponseBodyProductType$outboundSchema;
}

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody34Type$inboundSchema:
  z.ZodNativeEnum<
    typeof GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody34Type
  > = z.nativeEnum(
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody34Type,
  );

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody34Type$outboundSchema:
  z.ZodNativeEnum<
    typeof GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody34Type
  > =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody34Type$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody34Type$ {
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody34Type$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody34Type$inboundSchema;
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody34Type$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody34Type$outboundSchema;
}

/** @internal */
export const GetV2LogsIdRelatedEntities4$inboundSchema: z.ZodType<
  GetV2LogsIdRelatedEntities4,
  z.ZodTypeDef,
  unknown
> = z.object({
  type:
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody34Type$inboundSchema,
  account_id: z.string(),
}).transform((v) => {
  return remap$(v, {
    "account_id": "accountId",
  });
});

/** @internal */
export type GetV2LogsIdRelatedEntities4$Outbound = {
  type: string;
  account_id: string;
};

/** @internal */
export const GetV2LogsIdRelatedEntities4$outboundSchema: z.ZodType<
  GetV2LogsIdRelatedEntities4$Outbound,
  z.ZodTypeDef,
  GetV2LogsIdRelatedEntities4
> = z.object({
  type:
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody34Type$outboundSchema,
  accountId: z.string(),
}).transform((v) => {
  return remap$(v, {
    accountId: "account_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdRelatedEntities4$ {
  /** @deprecated use `GetV2LogsIdRelatedEntities4$inboundSchema` instead. */
  export const inboundSchema = GetV2LogsIdRelatedEntities4$inboundSchema;
  /** @deprecated use `GetV2LogsIdRelatedEntities4$outboundSchema` instead. */
  export const outboundSchema = GetV2LogsIdRelatedEntities4$outboundSchema;
  /** @deprecated use `GetV2LogsIdRelatedEntities4$Outbound` instead. */
  export type Outbound = GetV2LogsIdRelatedEntities4$Outbound;
}

export function getV2LogsIdRelatedEntities4ToJSON(
  getV2LogsIdRelatedEntities4: GetV2LogsIdRelatedEntities4,
): string {
  return JSON.stringify(
    GetV2LogsIdRelatedEntities4$outboundSchema.parse(
      getV2LogsIdRelatedEntities4,
    ),
  );
}

export function getV2LogsIdRelatedEntities4FromJSON(
  jsonString: string,
): SafeParseResult<GetV2LogsIdRelatedEntities4, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetV2LogsIdRelatedEntities4$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetV2LogsIdRelatedEntities4' from JSON`,
  );
}

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody33Type$inboundSchema:
  z.ZodNativeEnum<
    typeof GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody33Type
  > = z.nativeEnum(
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody33Type,
  );

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody33Type$outboundSchema:
  z.ZodNativeEnum<
    typeof GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody33Type
  > =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody33Type$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody33Type$ {
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody33Type$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody33Type$inboundSchema;
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody33Type$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody33Type$outboundSchema;
}

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse3$inboundSchema: z.ZodType<
  GetV2LogsIdRelatedEntitiesResponse3,
  z.ZodTypeDef,
  unknown
> = z.object({
  type:
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody33Type$inboundSchema,
  playground_completion_id: z.string(),
}).transform((v) => {
  return remap$(v, {
    "playground_completion_id": "playgroundCompletionId",
  });
});

/** @internal */
export type GetV2LogsIdRelatedEntitiesResponse3$Outbound = {
  type: string;
  playground_completion_id: string;
};

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse3$outboundSchema: z.ZodType<
  GetV2LogsIdRelatedEntitiesResponse3$Outbound,
  z.ZodTypeDef,
  GetV2LogsIdRelatedEntitiesResponse3
> = z.object({
  type:
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody33Type$outboundSchema,
  playgroundCompletionId: z.string(),
}).transform((v) => {
  return remap$(v, {
    playgroundCompletionId: "playground_completion_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdRelatedEntitiesResponse3$ {
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse3$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsIdRelatedEntitiesResponse3$inboundSchema;
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse3$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdRelatedEntitiesResponse3$outboundSchema;
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse3$Outbound` instead. */
  export type Outbound = GetV2LogsIdRelatedEntitiesResponse3$Outbound;
}

export function getV2LogsIdRelatedEntitiesResponse3ToJSON(
  getV2LogsIdRelatedEntitiesResponse3: GetV2LogsIdRelatedEntitiesResponse3,
): string {
  return JSON.stringify(
    GetV2LogsIdRelatedEntitiesResponse3$outboundSchema.parse(
      getV2LogsIdRelatedEntitiesResponse3,
    ),
  );
}

export function getV2LogsIdRelatedEntitiesResponse3FromJSON(
  jsonString: string,
): SafeParseResult<GetV2LogsIdRelatedEntitiesResponse3, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      GetV2LogsIdRelatedEntitiesResponse3$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetV2LogsIdRelatedEntitiesResponse3' from JSON`,
  );
}

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody32Type$inboundSchema:
  z.ZodNativeEnum<
    typeof GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody32Type
  > = z.nativeEnum(
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody32Type,
  );

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody32Type$outboundSchema:
  z.ZodNativeEnum<
    typeof GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody32Type
  > =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody32Type$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody32Type$ {
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody32Type$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody32Type$inboundSchema;
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody32Type$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody32Type$outboundSchema;
}

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse2$inboundSchema: z.ZodType<
  GetV2LogsIdRelatedEntitiesResponse2,
  z.ZodTypeDef,
  unknown
> = z.object({
  type:
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody32Type$inboundSchema,
  playground_block_id: z.string(),
}).transform((v) => {
  return remap$(v, {
    "playground_block_id": "playgroundBlockId",
  });
});

/** @internal */
export type GetV2LogsIdRelatedEntitiesResponse2$Outbound = {
  type: string;
  playground_block_id: string;
};

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse2$outboundSchema: z.ZodType<
  GetV2LogsIdRelatedEntitiesResponse2$Outbound,
  z.ZodTypeDef,
  GetV2LogsIdRelatedEntitiesResponse2
> = z.object({
  type:
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody32Type$outboundSchema,
  playgroundBlockId: z.string(),
}).transform((v) => {
  return remap$(v, {
    playgroundBlockId: "playground_block_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdRelatedEntitiesResponse2$ {
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse2$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsIdRelatedEntitiesResponse2$inboundSchema;
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse2$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdRelatedEntitiesResponse2$outboundSchema;
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse2$Outbound` instead. */
  export type Outbound = GetV2LogsIdRelatedEntitiesResponse2$Outbound;
}

export function getV2LogsIdRelatedEntitiesResponse2ToJSON(
  getV2LogsIdRelatedEntitiesResponse2: GetV2LogsIdRelatedEntitiesResponse2,
): string {
  return JSON.stringify(
    GetV2LogsIdRelatedEntitiesResponse2$outboundSchema.parse(
      getV2LogsIdRelatedEntitiesResponse2,
    ),
  );
}

export function getV2LogsIdRelatedEntitiesResponse2FromJSON(
  jsonString: string,
): SafeParseResult<GetV2LogsIdRelatedEntitiesResponse2, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      GetV2LogsIdRelatedEntitiesResponse2$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetV2LogsIdRelatedEntitiesResponse2' from JSON`,
  );
}

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Type$inboundSchema:
  z.ZodNativeEnum<
    typeof GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Type
  > = z.nativeEnum(
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Type,
  );

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Type$outboundSchema:
  z.ZodNativeEnum<
    typeof GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Type
  > =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Type$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Type$ {
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Type$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Type$inboundSchema;
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Type$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Type$outboundSchema;
}

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse1$inboundSchema: z.ZodType<
  GetV2LogsIdRelatedEntitiesResponse1,
  z.ZodTypeDef,
  unknown
> = z.object({
  type:
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Type$inboundSchema,
  playground_id: z.string(),
}).transform((v) => {
  return remap$(v, {
    "playground_id": "playgroundId",
  });
});

/** @internal */
export type GetV2LogsIdRelatedEntitiesResponse1$Outbound = {
  type: string;
  playground_id: string;
};

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse1$outboundSchema: z.ZodType<
  GetV2LogsIdRelatedEntitiesResponse1$Outbound,
  z.ZodTypeDef,
  GetV2LogsIdRelatedEntitiesResponse1
> = z.object({
  type:
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3Type$outboundSchema,
  playgroundId: z.string(),
}).transform((v) => {
  return remap$(v, {
    playgroundId: "playground_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdRelatedEntitiesResponse1$ {
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse1$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsIdRelatedEntitiesResponse1$inboundSchema;
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse1$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdRelatedEntitiesResponse1$outboundSchema;
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse1$Outbound` instead. */
  export type Outbound = GetV2LogsIdRelatedEntitiesResponse1$Outbound;
}

export function getV2LogsIdRelatedEntitiesResponse1ToJSON(
  getV2LogsIdRelatedEntitiesResponse1: GetV2LogsIdRelatedEntitiesResponse1,
): string {
  return JSON.stringify(
    GetV2LogsIdRelatedEntitiesResponse1$outboundSchema.parse(
      getV2LogsIdRelatedEntitiesResponse1,
    ),
  );
}

export function getV2LogsIdRelatedEntitiesResponse1FromJSON(
  jsonString: string,
): SafeParseResult<GetV2LogsIdRelatedEntitiesResponse1, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      GetV2LogsIdRelatedEntitiesResponse1$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetV2LogsIdRelatedEntitiesResponse1' from JSON`,
  );
}

/** @internal */
export const GetV2LogsIdResponseBodyRelatedEntities$inboundSchema: z.ZodType<
  GetV2LogsIdResponseBodyRelatedEntities,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => GetV2LogsIdRelatedEntitiesResponse1$inboundSchema),
  z.lazy(() => GetV2LogsIdRelatedEntitiesResponse2$inboundSchema),
  z.lazy(() => GetV2LogsIdRelatedEntitiesResponse3$inboundSchema),
  z.lazy(() => GetV2LogsIdRelatedEntities4$inboundSchema),
]);

/** @internal */
export type GetV2LogsIdResponseBodyRelatedEntities$Outbound =
  | GetV2LogsIdRelatedEntitiesResponse1$Outbound
  | GetV2LogsIdRelatedEntitiesResponse2$Outbound
  | GetV2LogsIdRelatedEntitiesResponse3$Outbound
  | GetV2LogsIdRelatedEntities4$Outbound;

/** @internal */
export const GetV2LogsIdResponseBodyRelatedEntities$outboundSchema: z.ZodType<
  GetV2LogsIdResponseBodyRelatedEntities$Outbound,
  z.ZodTypeDef,
  GetV2LogsIdResponseBodyRelatedEntities
> = z.union([
  z.lazy(() => GetV2LogsIdRelatedEntitiesResponse1$outboundSchema),
  z.lazy(() => GetV2LogsIdRelatedEntitiesResponse2$outboundSchema),
  z.lazy(() => GetV2LogsIdRelatedEntitiesResponse3$outboundSchema),
  z.lazy(() => GetV2LogsIdRelatedEntities4$outboundSchema),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdResponseBodyRelatedEntities$ {
  /** @deprecated use `GetV2LogsIdResponseBodyRelatedEntities$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsIdResponseBodyRelatedEntities$inboundSchema;
  /** @deprecated use `GetV2LogsIdResponseBodyRelatedEntities$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdResponseBodyRelatedEntities$outboundSchema;
  /** @deprecated use `GetV2LogsIdResponseBodyRelatedEntities$Outbound` instead. */
  export type Outbound = GetV2LogsIdResponseBodyRelatedEntities$Outbound;
}

export function getV2LogsIdResponseBodyRelatedEntitiesToJSON(
  getV2LogsIdResponseBodyRelatedEntities:
    GetV2LogsIdResponseBodyRelatedEntities,
): string {
  return JSON.stringify(
    GetV2LogsIdResponseBodyRelatedEntities$outboundSchema.parse(
      getV2LogsIdResponseBodyRelatedEntities,
    ),
  );
}

export function getV2LogsIdResponseBodyRelatedEntitiesFromJSON(
  jsonString: string,
): SafeParseResult<GetV2LogsIdResponseBodyRelatedEntities, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      GetV2LogsIdResponseBodyRelatedEntities$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetV2LogsIdResponseBodyRelatedEntities' from JSON`,
  );
}

/** @internal */
export const GetV2LogsIdMessageResponse200ApplicationJSONResponseBody3Role$inboundSchema:
  z.ZodNativeEnum<
    typeof GetV2LogsIdMessageResponse200ApplicationJSONResponseBody3Role
  > = z.nativeEnum(
    GetV2LogsIdMessageResponse200ApplicationJSONResponseBody3Role,
  );

/** @internal */
export const GetV2LogsIdMessageResponse200ApplicationJSONResponseBody3Role$outboundSchema:
  z.ZodNativeEnum<
    typeof GetV2LogsIdMessageResponse200ApplicationJSONResponseBody3Role
  > =
    GetV2LogsIdMessageResponse200ApplicationJSONResponseBody3Role$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdMessageResponse200ApplicationJSONResponseBody3Role$ {
  /** @deprecated use `GetV2LogsIdMessageResponse200ApplicationJSONResponseBody3Role$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsIdMessageResponse200ApplicationJSONResponseBody3Role$inboundSchema;
  /** @deprecated use `GetV2LogsIdMessageResponse200ApplicationJSONResponseBody3Role$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdMessageResponse200ApplicationJSONResponseBody3Role$outboundSchema;
}

/** @internal */
export const GetV2LogsIdMessageResponse3$inboundSchema: z.ZodType<
  GetV2LogsIdMessageResponse3,
  z.ZodTypeDef,
  unknown
> = z.object({
  role:
    GetV2LogsIdMessageResponse200ApplicationJSONResponseBody3Role$inboundSchema,
  url: z.string(),
});

/** @internal */
export type GetV2LogsIdMessageResponse3$Outbound = {
  role: string;
  url: string;
};

/** @internal */
export const GetV2LogsIdMessageResponse3$outboundSchema: z.ZodType<
  GetV2LogsIdMessageResponse3$Outbound,
  z.ZodTypeDef,
  GetV2LogsIdMessageResponse3
> = z.object({
  role:
    GetV2LogsIdMessageResponse200ApplicationJSONResponseBody3Role$outboundSchema,
  url: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdMessageResponse3$ {
  /** @deprecated use `GetV2LogsIdMessageResponse3$inboundSchema` instead. */
  export const inboundSchema = GetV2LogsIdMessageResponse3$inboundSchema;
  /** @deprecated use `GetV2LogsIdMessageResponse3$outboundSchema` instead. */
  export const outboundSchema = GetV2LogsIdMessageResponse3$outboundSchema;
  /** @deprecated use `GetV2LogsIdMessageResponse3$Outbound` instead. */
  export type Outbound = GetV2LogsIdMessageResponse3$Outbound;
}

export function getV2LogsIdMessageResponse3ToJSON(
  getV2LogsIdMessageResponse3: GetV2LogsIdMessageResponse3,
): string {
  return JSON.stringify(
    GetV2LogsIdMessageResponse3$outboundSchema.parse(
      getV2LogsIdMessageResponse3,
    ),
  );
}

export function getV2LogsIdMessageResponse3FromJSON(
  jsonString: string,
): SafeParseResult<GetV2LogsIdMessageResponse3, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetV2LogsIdMessageResponse3$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetV2LogsIdMessageResponse3' from JSON`,
  );
}

/** @internal */
export const GetV2LogsIdMessageResponse200ApplicationJSONResponseBodyRole$inboundSchema:
  z.ZodNativeEnum<
    typeof GetV2LogsIdMessageResponse200ApplicationJSONResponseBodyRole
  > = z.nativeEnum(
    GetV2LogsIdMessageResponse200ApplicationJSONResponseBodyRole,
  );

/** @internal */
export const GetV2LogsIdMessageResponse200ApplicationJSONResponseBodyRole$outboundSchema:
  z.ZodNativeEnum<
    typeof GetV2LogsIdMessageResponse200ApplicationJSONResponseBodyRole
  > =
    GetV2LogsIdMessageResponse200ApplicationJSONResponseBodyRole$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdMessageResponse200ApplicationJSONResponseBodyRole$ {
  /** @deprecated use `GetV2LogsIdMessageResponse200ApplicationJSONResponseBodyRole$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsIdMessageResponse200ApplicationJSONResponseBodyRole$inboundSchema;
  /** @deprecated use `GetV2LogsIdMessageResponse200ApplicationJSONResponseBodyRole$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdMessageResponse200ApplicationJSONResponseBodyRole$outboundSchema;
}

/** @internal */
export const GetV2LogsIdMessageResponse2$inboundSchema: z.ZodType<
  GetV2LogsIdMessageResponse2,
  z.ZodTypeDef,
  unknown
> = z.object({
  role:
    GetV2LogsIdMessageResponse200ApplicationJSONResponseBodyRole$inboundSchema,
  content: z.nullable(z.string()),
});

/** @internal */
export type GetV2LogsIdMessageResponse2$Outbound = {
  role: string;
  content: string | null;
};

/** @internal */
export const GetV2LogsIdMessageResponse2$outboundSchema: z.ZodType<
  GetV2LogsIdMessageResponse2$Outbound,
  z.ZodTypeDef,
  GetV2LogsIdMessageResponse2
> = z.object({
  role:
    GetV2LogsIdMessageResponse200ApplicationJSONResponseBodyRole$outboundSchema,
  content: z.nullable(z.string()),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdMessageResponse2$ {
  /** @deprecated use `GetV2LogsIdMessageResponse2$inboundSchema` instead. */
  export const inboundSchema = GetV2LogsIdMessageResponse2$inboundSchema;
  /** @deprecated use `GetV2LogsIdMessageResponse2$outboundSchema` instead. */
  export const outboundSchema = GetV2LogsIdMessageResponse2$outboundSchema;
  /** @deprecated use `GetV2LogsIdMessageResponse2$Outbound` instead. */
  export type Outbound = GetV2LogsIdMessageResponse2$Outbound;
}

export function getV2LogsIdMessageResponse2ToJSON(
  getV2LogsIdMessageResponse2: GetV2LogsIdMessageResponse2,
): string {
  return JSON.stringify(
    GetV2LogsIdMessageResponse2$outboundSchema.parse(
      getV2LogsIdMessageResponse2,
    ),
  );
}

export function getV2LogsIdMessageResponse2FromJSON(
  jsonString: string,
): SafeParseResult<GetV2LogsIdMessageResponse2, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetV2LogsIdMessageResponse2$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetV2LogsIdMessageResponse2' from JSON`,
  );
}

/** @internal */
export const GetV2LogsIdMessageResponse200ApplicationJSONRole$inboundSchema:
  z.ZodNativeEnum<typeof GetV2LogsIdMessageResponse200ApplicationJSONRole> = z
    .nativeEnum(GetV2LogsIdMessageResponse200ApplicationJSONRole);

/** @internal */
export const GetV2LogsIdMessageResponse200ApplicationJSONRole$outboundSchema:
  z.ZodNativeEnum<typeof GetV2LogsIdMessageResponse200ApplicationJSONRole> =
    GetV2LogsIdMessageResponse200ApplicationJSONRole$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdMessageResponse200ApplicationJSONRole$ {
  /** @deprecated use `GetV2LogsIdMessageResponse200ApplicationJSONRole$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsIdMessageResponse200ApplicationJSONRole$inboundSchema;
  /** @deprecated use `GetV2LogsIdMessageResponse200ApplicationJSONRole$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdMessageResponse200ApplicationJSONRole$outboundSchema;
}

/** @internal */
export const GetV2LogsIdMessageResponseType$inboundSchema: z.ZodNativeEnum<
  typeof GetV2LogsIdMessageResponseType
> = z.nativeEnum(GetV2LogsIdMessageResponseType);

/** @internal */
export const GetV2LogsIdMessageResponseType$outboundSchema: z.ZodNativeEnum<
  typeof GetV2LogsIdMessageResponseType
> = GetV2LogsIdMessageResponseType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdMessageResponseType$ {
  /** @deprecated use `GetV2LogsIdMessageResponseType$inboundSchema` instead. */
  export const inboundSchema = GetV2LogsIdMessageResponseType$inboundSchema;
  /** @deprecated use `GetV2LogsIdMessageResponseType$outboundSchema` instead. */
  export const outboundSchema = GetV2LogsIdMessageResponseType$outboundSchema;
}

/** @internal */
export const GetV2LogsIdMessageResponseFunction$inboundSchema: z.ZodType<
  GetV2LogsIdMessageResponseFunction,
  z.ZodTypeDef,
  unknown
> = z.object({
  name: z.string(),
  arguments: z.string(),
});

/** @internal */
export type GetV2LogsIdMessageResponseFunction$Outbound = {
  name: string;
  arguments: string;
};

/** @internal */
export const GetV2LogsIdMessageResponseFunction$outboundSchema: z.ZodType<
  GetV2LogsIdMessageResponseFunction$Outbound,
  z.ZodTypeDef,
  GetV2LogsIdMessageResponseFunction
> = z.object({
  name: z.string(),
  arguments: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdMessageResponseFunction$ {
  /** @deprecated use `GetV2LogsIdMessageResponseFunction$inboundSchema` instead. */
  export const inboundSchema = GetV2LogsIdMessageResponseFunction$inboundSchema;
  /** @deprecated use `GetV2LogsIdMessageResponseFunction$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdMessageResponseFunction$outboundSchema;
  /** @deprecated use `GetV2LogsIdMessageResponseFunction$Outbound` instead. */
  export type Outbound = GetV2LogsIdMessageResponseFunction$Outbound;
}

export function getV2LogsIdMessageResponseFunctionToJSON(
  getV2LogsIdMessageResponseFunction: GetV2LogsIdMessageResponseFunction,
): string {
  return JSON.stringify(
    GetV2LogsIdMessageResponseFunction$outboundSchema.parse(
      getV2LogsIdMessageResponseFunction,
    ),
  );
}

export function getV2LogsIdMessageResponseFunctionFromJSON(
  jsonString: string,
): SafeParseResult<GetV2LogsIdMessageResponseFunction, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      GetV2LogsIdMessageResponseFunction$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetV2LogsIdMessageResponseFunction' from JSON`,
  );
}

/** @internal */
export const GetV2LogsIdMessageResponseToolCalls$inboundSchema: z.ZodType<
  GetV2LogsIdMessageResponseToolCalls,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string().optional(),
  index: z.number().optional(),
  type: GetV2LogsIdMessageResponseType$inboundSchema,
  function: z.lazy(() => GetV2LogsIdMessageResponseFunction$inboundSchema),
});

/** @internal */
export type GetV2LogsIdMessageResponseToolCalls$Outbound = {
  id?: string | undefined;
  index?: number | undefined;
  type: string;
  function: GetV2LogsIdMessageResponseFunction$Outbound;
};

/** @internal */
export const GetV2LogsIdMessageResponseToolCalls$outboundSchema: z.ZodType<
  GetV2LogsIdMessageResponseToolCalls$Outbound,
  z.ZodTypeDef,
  GetV2LogsIdMessageResponseToolCalls
> = z.object({
  id: z.string().optional(),
  index: z.number().optional(),
  type: GetV2LogsIdMessageResponseType$outboundSchema,
  function: z.lazy(() => GetV2LogsIdMessageResponseFunction$outboundSchema),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdMessageResponseToolCalls$ {
  /** @deprecated use `GetV2LogsIdMessageResponseToolCalls$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsIdMessageResponseToolCalls$inboundSchema;
  /** @deprecated use `GetV2LogsIdMessageResponseToolCalls$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdMessageResponseToolCalls$outboundSchema;
  /** @deprecated use `GetV2LogsIdMessageResponseToolCalls$Outbound` instead. */
  export type Outbound = GetV2LogsIdMessageResponseToolCalls$Outbound;
}

export function getV2LogsIdMessageResponseToolCallsToJSON(
  getV2LogsIdMessageResponseToolCalls: GetV2LogsIdMessageResponseToolCalls,
): string {
  return JSON.stringify(
    GetV2LogsIdMessageResponseToolCalls$outboundSchema.parse(
      getV2LogsIdMessageResponseToolCalls,
    ),
  );
}

export function getV2LogsIdMessageResponseToolCallsFromJSON(
  jsonString: string,
): SafeParseResult<GetV2LogsIdMessageResponseToolCalls, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      GetV2LogsIdMessageResponseToolCalls$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetV2LogsIdMessageResponseToolCalls' from JSON`,
  );
}

/** @internal */
export const GetV2LogsIdMessageResponse1$inboundSchema: z.ZodType<
  GetV2LogsIdMessageResponse1,
  z.ZodTypeDef,
  unknown
> = z.object({
  role: GetV2LogsIdMessageResponse200ApplicationJSONRole$inboundSchema,
  content: z.nullable(z.string()).optional(),
  tool_calls: z.array(
    z.lazy(() => GetV2LogsIdMessageResponseToolCalls$inboundSchema),
  ),
}).transform((v) => {
  return remap$(v, {
    "tool_calls": "toolCalls",
  });
});

/** @internal */
export type GetV2LogsIdMessageResponse1$Outbound = {
  role: string;
  content?: string | null | undefined;
  tool_calls: Array<GetV2LogsIdMessageResponseToolCalls$Outbound>;
};

/** @internal */
export const GetV2LogsIdMessageResponse1$outboundSchema: z.ZodType<
  GetV2LogsIdMessageResponse1$Outbound,
  z.ZodTypeDef,
  GetV2LogsIdMessageResponse1
> = z.object({
  role: GetV2LogsIdMessageResponse200ApplicationJSONRole$outboundSchema,
  content: z.nullable(z.string()).optional(),
  toolCalls: z.array(
    z.lazy(() => GetV2LogsIdMessageResponseToolCalls$outboundSchema),
  ),
}).transform((v) => {
  return remap$(v, {
    toolCalls: "tool_calls",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdMessageResponse1$ {
  /** @deprecated use `GetV2LogsIdMessageResponse1$inboundSchema` instead. */
  export const inboundSchema = GetV2LogsIdMessageResponse1$inboundSchema;
  /** @deprecated use `GetV2LogsIdMessageResponse1$outboundSchema` instead. */
  export const outboundSchema = GetV2LogsIdMessageResponse1$outboundSchema;
  /** @deprecated use `GetV2LogsIdMessageResponse1$Outbound` instead. */
  export type Outbound = GetV2LogsIdMessageResponse1$Outbound;
}

export function getV2LogsIdMessageResponse1ToJSON(
  getV2LogsIdMessageResponse1: GetV2LogsIdMessageResponse1,
): string {
  return JSON.stringify(
    GetV2LogsIdMessageResponse1$outboundSchema.parse(
      getV2LogsIdMessageResponse1,
    ),
  );
}

export function getV2LogsIdMessageResponse1FromJSON(
  jsonString: string,
): SafeParseResult<GetV2LogsIdMessageResponse1, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetV2LogsIdMessageResponse1$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetV2LogsIdMessageResponse1' from JSON`,
  );
}

/** @internal */
export const GetV2LogsIdResponseBodyMessage$inboundSchema: z.ZodType<
  GetV2LogsIdResponseBodyMessage,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => GetV2LogsIdMessageResponse2$inboundSchema),
  z.lazy(() => GetV2LogsIdMessageResponse3$inboundSchema),
  z.lazy(() => GetV2LogsIdMessageResponse1$inboundSchema),
]);

/** @internal */
export type GetV2LogsIdResponseBodyMessage$Outbound =
  | GetV2LogsIdMessageResponse2$Outbound
  | GetV2LogsIdMessageResponse3$Outbound
  | GetV2LogsIdMessageResponse1$Outbound;

/** @internal */
export const GetV2LogsIdResponseBodyMessage$outboundSchema: z.ZodType<
  GetV2LogsIdResponseBodyMessage$Outbound,
  z.ZodTypeDef,
  GetV2LogsIdResponseBodyMessage
> = z.union([
  z.lazy(() => GetV2LogsIdMessageResponse2$outboundSchema),
  z.lazy(() => GetV2LogsIdMessageResponse3$outboundSchema),
  z.lazy(() => GetV2LogsIdMessageResponse1$outboundSchema),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdResponseBodyMessage$ {
  /** @deprecated use `GetV2LogsIdResponseBodyMessage$inboundSchema` instead. */
  export const inboundSchema = GetV2LogsIdResponseBodyMessage$inboundSchema;
  /** @deprecated use `GetV2LogsIdResponseBodyMessage$outboundSchema` instead. */
  export const outboundSchema = GetV2LogsIdResponseBodyMessage$outboundSchema;
  /** @deprecated use `GetV2LogsIdResponseBodyMessage$Outbound` instead. */
  export type Outbound = GetV2LogsIdResponseBodyMessage$Outbound;
}

export function getV2LogsIdResponseBodyMessageToJSON(
  getV2LogsIdResponseBodyMessage: GetV2LogsIdResponseBodyMessage,
): string {
  return JSON.stringify(
    GetV2LogsIdResponseBodyMessage$outboundSchema.parse(
      getV2LogsIdResponseBodyMessage,
    ),
  );
}

export function getV2LogsIdResponseBodyMessageFromJSON(
  jsonString: string,
): SafeParseResult<GetV2LogsIdResponseBodyMessage, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetV2LogsIdResponseBodyMessage$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetV2LogsIdResponseBodyMessage' from JSON`,
  );
}

/** @internal */
export const GetV2LogsIdResponseBodyChoices$inboundSchema: z.ZodType<
  GetV2LogsIdResponseBodyChoices,
  z.ZodTypeDef,
  unknown
> = z.object({
  index: z.number(),
  message: z.union([
    z.lazy(() => GetV2LogsIdMessageResponse2$inboundSchema),
    z.lazy(() => GetV2LogsIdMessageResponse3$inboundSchema),
    z.lazy(() => GetV2LogsIdMessageResponse1$inboundSchema),
  ]).optional(),
  finish_reason: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    "finish_reason": "finishReason",
  });
});

/** @internal */
export type GetV2LogsIdResponseBodyChoices$Outbound = {
  index: number;
  message?:
    | GetV2LogsIdMessageResponse2$Outbound
    | GetV2LogsIdMessageResponse3$Outbound
    | GetV2LogsIdMessageResponse1$Outbound
    | undefined;
  finish_reason?: string | null | undefined;
};

/** @internal */
export const GetV2LogsIdResponseBodyChoices$outboundSchema: z.ZodType<
  GetV2LogsIdResponseBodyChoices$Outbound,
  z.ZodTypeDef,
  GetV2LogsIdResponseBodyChoices
> = z.object({
  index: z.number(),
  message: z.union([
    z.lazy(() => GetV2LogsIdMessageResponse2$outboundSchema),
    z.lazy(() => GetV2LogsIdMessageResponse3$outboundSchema),
    z.lazy(() => GetV2LogsIdMessageResponse1$outboundSchema),
  ]).optional(),
  finishReason: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    finishReason: "finish_reason",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdResponseBodyChoices$ {
  /** @deprecated use `GetV2LogsIdResponseBodyChoices$inboundSchema` instead. */
  export const inboundSchema = GetV2LogsIdResponseBodyChoices$inboundSchema;
  /** @deprecated use `GetV2LogsIdResponseBodyChoices$outboundSchema` instead. */
  export const outboundSchema = GetV2LogsIdResponseBodyChoices$outboundSchema;
  /** @deprecated use `GetV2LogsIdResponseBodyChoices$Outbound` instead. */
  export type Outbound = GetV2LogsIdResponseBodyChoices$Outbound;
}

export function getV2LogsIdResponseBodyChoicesToJSON(
  getV2LogsIdResponseBodyChoices: GetV2LogsIdResponseBodyChoices,
): string {
  return JSON.stringify(
    GetV2LogsIdResponseBodyChoices$outboundSchema.parse(
      getV2LogsIdResponseBodyChoices,
    ),
  );
}

export function getV2LogsIdResponseBodyChoicesFromJSON(
  jsonString: string,
): SafeParseResult<GetV2LogsIdResponseBodyChoices, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetV2LogsIdResponseBodyChoices$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetV2LogsIdResponseBodyChoices' from JSON`,
  );
}

/** @internal */
export const GetV2LogsIdResponseBodyAction$inboundSchema: z.ZodNativeEnum<
  typeof GetV2LogsIdResponseBodyAction
> = z.nativeEnum(GetV2LogsIdResponseBodyAction);

/** @internal */
export const GetV2LogsIdResponseBodyAction$outboundSchema: z.ZodNativeEnum<
  typeof GetV2LogsIdResponseBodyAction
> = GetV2LogsIdResponseBodyAction$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdResponseBodyAction$ {
  /** @deprecated use `GetV2LogsIdResponseBodyAction$inboundSchema` instead. */
  export const inboundSchema = GetV2LogsIdResponseBodyAction$inboundSchema;
  /** @deprecated use `GetV2LogsIdResponseBodyAction$outboundSchema` instead. */
  export const outboundSchema = GetV2LogsIdResponseBodyAction$outboundSchema;
}

/** @internal */
export const GetV2LogsIdResponseBodyModelType$inboundSchema: z.ZodNativeEnum<
  typeof GetV2LogsIdResponseBodyModelType
> = z.nativeEnum(GetV2LogsIdResponseBodyModelType);

/** @internal */
export const GetV2LogsIdResponseBodyModelType$outboundSchema: z.ZodNativeEnum<
  typeof GetV2LogsIdResponseBodyModelType
> = GetV2LogsIdResponseBodyModelType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdResponseBodyModelType$ {
  /** @deprecated use `GetV2LogsIdResponseBodyModelType$inboundSchema` instead. */
  export const inboundSchema = GetV2LogsIdResponseBodyModelType$inboundSchema;
  /** @deprecated use `GetV2LogsIdResponseBodyModelType$outboundSchema` instead. */
  export const outboundSchema = GetV2LogsIdResponseBodyModelType$outboundSchema;
}

/** @internal */
export const GetV2LogsIdResponseBodyFormat$inboundSchema: z.ZodNativeEnum<
  typeof GetV2LogsIdResponseBodyFormat
> = z.nativeEnum(GetV2LogsIdResponseBodyFormat);

/** @internal */
export const GetV2LogsIdResponseBodyFormat$outboundSchema: z.ZodNativeEnum<
  typeof GetV2LogsIdResponseBodyFormat
> = GetV2LogsIdResponseBodyFormat$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdResponseBodyFormat$ {
  /** @deprecated use `GetV2LogsIdResponseBodyFormat$inboundSchema` instead. */
  export const inboundSchema = GetV2LogsIdResponseBodyFormat$inboundSchema;
  /** @deprecated use `GetV2LogsIdResponseBodyFormat$outboundSchema` instead. */
  export const outboundSchema = GetV2LogsIdResponseBodyFormat$outboundSchema;
}

/** @internal */
export const GetV2LogsIdResponseBodyQuality$inboundSchema: z.ZodNativeEnum<
  typeof GetV2LogsIdResponseBodyQuality
> = z.nativeEnum(GetV2LogsIdResponseBodyQuality);

/** @internal */
export const GetV2LogsIdResponseBodyQuality$outboundSchema: z.ZodNativeEnum<
  typeof GetV2LogsIdResponseBodyQuality
> = GetV2LogsIdResponseBodyQuality$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdResponseBodyQuality$ {
  /** @deprecated use `GetV2LogsIdResponseBodyQuality$inboundSchema` instead. */
  export const inboundSchema = GetV2LogsIdResponseBodyQuality$inboundSchema;
  /** @deprecated use `GetV2LogsIdResponseBodyQuality$outboundSchema` instead. */
  export const outboundSchema = GetV2LogsIdResponseBodyQuality$outboundSchema;
}

/** @internal */
export const GetV2LogsIdResponseFormatResponse200ApplicationJSONType$inboundSchema:
  z.ZodNativeEnum<
    typeof GetV2LogsIdResponseFormatResponse200ApplicationJSONType
  > = z.nativeEnum(GetV2LogsIdResponseFormatResponse200ApplicationJSONType);

/** @internal */
export const GetV2LogsIdResponseFormatResponse200ApplicationJSONType$outboundSchema:
  z.ZodNativeEnum<
    typeof GetV2LogsIdResponseFormatResponse200ApplicationJSONType
  > = GetV2LogsIdResponseFormatResponse200ApplicationJSONType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdResponseFormatResponse200ApplicationJSONType$ {
  /** @deprecated use `GetV2LogsIdResponseFormatResponse200ApplicationJSONType$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsIdResponseFormatResponse200ApplicationJSONType$inboundSchema;
  /** @deprecated use `GetV2LogsIdResponseFormatResponse200ApplicationJSONType$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdResponseFormatResponse200ApplicationJSONType$outboundSchema;
}

/** @internal */
export const GetV2LogsIdResponseFormatResponse2$inboundSchema: z.ZodType<
  GetV2LogsIdResponseFormatResponse2,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: GetV2LogsIdResponseFormatResponse200ApplicationJSONType$inboundSchema,
});

/** @internal */
export type GetV2LogsIdResponseFormatResponse2$Outbound = {
  type: string;
};

/** @internal */
export const GetV2LogsIdResponseFormatResponse2$outboundSchema: z.ZodType<
  GetV2LogsIdResponseFormatResponse2$Outbound,
  z.ZodTypeDef,
  GetV2LogsIdResponseFormatResponse2
> = z.object({
  type: GetV2LogsIdResponseFormatResponse200ApplicationJSONType$outboundSchema,
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdResponseFormatResponse2$ {
  /** @deprecated use `GetV2LogsIdResponseFormatResponse2$inboundSchema` instead. */
  export const inboundSchema = GetV2LogsIdResponseFormatResponse2$inboundSchema;
  /** @deprecated use `GetV2LogsIdResponseFormatResponse2$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdResponseFormatResponse2$outboundSchema;
  /** @deprecated use `GetV2LogsIdResponseFormatResponse2$Outbound` instead. */
  export type Outbound = GetV2LogsIdResponseFormatResponse2$Outbound;
}

export function getV2LogsIdResponseFormatResponse2ToJSON(
  getV2LogsIdResponseFormatResponse2: GetV2LogsIdResponseFormatResponse2,
): string {
  return JSON.stringify(
    GetV2LogsIdResponseFormatResponse2$outboundSchema.parse(
      getV2LogsIdResponseFormatResponse2,
    ),
  );
}

export function getV2LogsIdResponseFormatResponse2FromJSON(
  jsonString: string,
): SafeParseResult<GetV2LogsIdResponseFormatResponse2, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      GetV2LogsIdResponseFormatResponse2$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetV2LogsIdResponseFormatResponse2' from JSON`,
  );
}

/** @internal */
export const GetV2LogsIdResponseFormatResponse200Type$inboundSchema:
  z.ZodNativeEnum<typeof GetV2LogsIdResponseFormatResponse200Type> = z
    .nativeEnum(GetV2LogsIdResponseFormatResponse200Type);

/** @internal */
export const GetV2LogsIdResponseFormatResponse200Type$outboundSchema:
  z.ZodNativeEnum<typeof GetV2LogsIdResponseFormatResponse200Type> =
    GetV2LogsIdResponseFormatResponse200Type$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdResponseFormatResponse200Type$ {
  /** @deprecated use `GetV2LogsIdResponseFormatResponse200Type$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsIdResponseFormatResponse200Type$inboundSchema;
  /** @deprecated use `GetV2LogsIdResponseFormatResponse200Type$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdResponseFormatResponse200Type$outboundSchema;
}

/** @internal */
export const GetV2LogsIdResponseFormatResponseJsonSchema$inboundSchema:
  z.ZodType<
    GetV2LogsIdResponseFormatResponseJsonSchema,
    z.ZodTypeDef,
    unknown
  > = z.object({
    name: z.string(),
    strict: z.boolean(),
    schema: z.record(z.any()),
  });

/** @internal */
export type GetV2LogsIdResponseFormatResponseJsonSchema$Outbound = {
  name: string;
  strict: boolean;
  schema: { [k: string]: any };
};

/** @internal */
export const GetV2LogsIdResponseFormatResponseJsonSchema$outboundSchema:
  z.ZodType<
    GetV2LogsIdResponseFormatResponseJsonSchema$Outbound,
    z.ZodTypeDef,
    GetV2LogsIdResponseFormatResponseJsonSchema
  > = z.object({
    name: z.string(),
    strict: z.boolean(),
    schema: z.record(z.any()),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdResponseFormatResponseJsonSchema$ {
  /** @deprecated use `GetV2LogsIdResponseFormatResponseJsonSchema$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsIdResponseFormatResponseJsonSchema$inboundSchema;
  /** @deprecated use `GetV2LogsIdResponseFormatResponseJsonSchema$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdResponseFormatResponseJsonSchema$outboundSchema;
  /** @deprecated use `GetV2LogsIdResponseFormatResponseJsonSchema$Outbound` instead. */
  export type Outbound = GetV2LogsIdResponseFormatResponseJsonSchema$Outbound;
}

export function getV2LogsIdResponseFormatResponseJsonSchemaToJSON(
  getV2LogsIdResponseFormatResponseJsonSchema:
    GetV2LogsIdResponseFormatResponseJsonSchema,
): string {
  return JSON.stringify(
    GetV2LogsIdResponseFormatResponseJsonSchema$outboundSchema.parse(
      getV2LogsIdResponseFormatResponseJsonSchema,
    ),
  );
}

export function getV2LogsIdResponseFormatResponseJsonSchemaFromJSON(
  jsonString: string,
): SafeParseResult<
  GetV2LogsIdResponseFormatResponseJsonSchema,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetV2LogsIdResponseFormatResponseJsonSchema$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'GetV2LogsIdResponseFormatResponseJsonSchema' from JSON`,
  );
}

/** @internal */
export const GetV2LogsIdResponseFormatResponse1$inboundSchema: z.ZodType<
  GetV2LogsIdResponseFormatResponse1,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: GetV2LogsIdResponseFormatResponse200Type$inboundSchema,
  json_schema: z.lazy(() =>
    GetV2LogsIdResponseFormatResponseJsonSchema$inboundSchema
  ),
}).transform((v) => {
  return remap$(v, {
    "json_schema": "jsonSchema",
  });
});

/** @internal */
export type GetV2LogsIdResponseFormatResponse1$Outbound = {
  type: string;
  json_schema: GetV2LogsIdResponseFormatResponseJsonSchema$Outbound;
};

/** @internal */
export const GetV2LogsIdResponseFormatResponse1$outboundSchema: z.ZodType<
  GetV2LogsIdResponseFormatResponse1$Outbound,
  z.ZodTypeDef,
  GetV2LogsIdResponseFormatResponse1
> = z.object({
  type: GetV2LogsIdResponseFormatResponse200Type$outboundSchema,
  jsonSchema: z.lazy(() =>
    GetV2LogsIdResponseFormatResponseJsonSchema$outboundSchema
  ),
}).transform((v) => {
  return remap$(v, {
    jsonSchema: "json_schema",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdResponseFormatResponse1$ {
  /** @deprecated use `GetV2LogsIdResponseFormatResponse1$inboundSchema` instead. */
  export const inboundSchema = GetV2LogsIdResponseFormatResponse1$inboundSchema;
  /** @deprecated use `GetV2LogsIdResponseFormatResponse1$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdResponseFormatResponse1$outboundSchema;
  /** @deprecated use `GetV2LogsIdResponseFormatResponse1$Outbound` instead. */
  export type Outbound = GetV2LogsIdResponseFormatResponse1$Outbound;
}

export function getV2LogsIdResponseFormatResponse1ToJSON(
  getV2LogsIdResponseFormatResponse1: GetV2LogsIdResponseFormatResponse1,
): string {
  return JSON.stringify(
    GetV2LogsIdResponseFormatResponse1$outboundSchema.parse(
      getV2LogsIdResponseFormatResponse1,
    ),
  );
}

export function getV2LogsIdResponseFormatResponse1FromJSON(
  jsonString: string,
): SafeParseResult<GetV2LogsIdResponseFormatResponse1, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      GetV2LogsIdResponseFormatResponse1$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetV2LogsIdResponseFormatResponse1' from JSON`,
  );
}

/** @internal */
export const GetV2LogsIdResponseBodyResponseFormat$inboundSchema: z.ZodType<
  GetV2LogsIdResponseBodyResponseFormat,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => GetV2LogsIdResponseFormatResponse2$inboundSchema),
  z.lazy(() => GetV2LogsIdResponseFormatResponse1$inboundSchema),
]);

/** @internal */
export type GetV2LogsIdResponseBodyResponseFormat$Outbound =
  | GetV2LogsIdResponseFormatResponse2$Outbound
  | GetV2LogsIdResponseFormatResponse1$Outbound;

/** @internal */
export const GetV2LogsIdResponseBodyResponseFormat$outboundSchema: z.ZodType<
  GetV2LogsIdResponseBodyResponseFormat$Outbound,
  z.ZodTypeDef,
  GetV2LogsIdResponseBodyResponseFormat
> = z.union([
  z.lazy(() => GetV2LogsIdResponseFormatResponse2$outboundSchema),
  z.lazy(() => GetV2LogsIdResponseFormatResponse1$outboundSchema),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdResponseBodyResponseFormat$ {
  /** @deprecated use `GetV2LogsIdResponseBodyResponseFormat$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsIdResponseBodyResponseFormat$inboundSchema;
  /** @deprecated use `GetV2LogsIdResponseBodyResponseFormat$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdResponseBodyResponseFormat$outboundSchema;
  /** @deprecated use `GetV2LogsIdResponseBodyResponseFormat$Outbound` instead. */
  export type Outbound = GetV2LogsIdResponseBodyResponseFormat$Outbound;
}

export function getV2LogsIdResponseBodyResponseFormatToJSON(
  getV2LogsIdResponseBodyResponseFormat: GetV2LogsIdResponseBodyResponseFormat,
): string {
  return JSON.stringify(
    GetV2LogsIdResponseBodyResponseFormat$outboundSchema.parse(
      getV2LogsIdResponseBodyResponseFormat,
    ),
  );
}

export function getV2LogsIdResponseBodyResponseFormatFromJSON(
  jsonString: string,
): SafeParseResult<GetV2LogsIdResponseBodyResponseFormat, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      GetV2LogsIdResponseBodyResponseFormat$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetV2LogsIdResponseBodyResponseFormat' from JSON`,
  );
}

/** @internal */
export const GetV2LogsIdResponseBodyPhotoRealVersion$inboundSchema:
  z.ZodNativeEnum<typeof GetV2LogsIdResponseBodyPhotoRealVersion> = z
    .nativeEnum(GetV2LogsIdResponseBodyPhotoRealVersion);

/** @internal */
export const GetV2LogsIdResponseBodyPhotoRealVersion$outboundSchema:
  z.ZodNativeEnum<typeof GetV2LogsIdResponseBodyPhotoRealVersion> =
    GetV2LogsIdResponseBodyPhotoRealVersion$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdResponseBodyPhotoRealVersion$ {
  /** @deprecated use `GetV2LogsIdResponseBodyPhotoRealVersion$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsIdResponseBodyPhotoRealVersion$inboundSchema;
  /** @deprecated use `GetV2LogsIdResponseBodyPhotoRealVersion$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdResponseBodyPhotoRealVersion$outboundSchema;
}

/** @internal */
export const GetV2LogsIdResponseBodyEncodingFormat$inboundSchema:
  z.ZodNativeEnum<typeof GetV2LogsIdResponseBodyEncodingFormat> = z.nativeEnum(
    GetV2LogsIdResponseBodyEncodingFormat,
  );

/** @internal */
export const GetV2LogsIdResponseBodyEncodingFormat$outboundSchema:
  z.ZodNativeEnum<typeof GetV2LogsIdResponseBodyEncodingFormat> =
    GetV2LogsIdResponseBodyEncodingFormat$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdResponseBodyEncodingFormat$ {
  /** @deprecated use `GetV2LogsIdResponseBodyEncodingFormat$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsIdResponseBodyEncodingFormat$inboundSchema;
  /** @deprecated use `GetV2LogsIdResponseBodyEncodingFormat$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdResponseBodyEncodingFormat$outboundSchema;
}

/** @internal */
export const GetV2LogsIdResponseBodyModelParameters$inboundSchema: z.ZodType<
  GetV2LogsIdResponseBodyModelParameters,
  z.ZodTypeDef,
  unknown
> = z.object({
  temperature: z.number().optional(),
  maxTokens: z.number().optional(),
  topK: z.number().optional(),
  topP: z.number().optional(),
  frequencyPenalty: z.number().optional(),
  presencePenalty: z.number().optional(),
  numImages: z.number().optional(),
  seed: z.number().optional(),
  format: GetV2LogsIdResponseBodyFormat$inboundSchema.optional(),
  dimensions: z.string().optional(),
  quality: GetV2LogsIdResponseBodyQuality$inboundSchema.optional(),
  style: z.string().optional(),
  responseFormat: z.nullable(
    z.union([
      z.lazy(() => GetV2LogsIdResponseFormatResponse2$inboundSchema),
      z.lazy(() => GetV2LogsIdResponseFormatResponse1$inboundSchema),
    ]),
  ).optional(),
  photoRealVersion: GetV2LogsIdResponseBodyPhotoRealVersion$inboundSchema
    .optional(),
  encoding_format: GetV2LogsIdResponseBodyEncodingFormat$inboundSchema
    .optional(),
}).transform((v) => {
  return remap$(v, {
    "encoding_format": "encodingFormat",
  });
});

/** @internal */
export type GetV2LogsIdResponseBodyModelParameters$Outbound = {
  temperature?: number | undefined;
  maxTokens?: number | undefined;
  topK?: number | undefined;
  topP?: number | undefined;
  frequencyPenalty?: number | undefined;
  presencePenalty?: number | undefined;
  numImages?: number | undefined;
  seed?: number | undefined;
  format?: string | undefined;
  dimensions?: string | undefined;
  quality?: string | undefined;
  style?: string | undefined;
  responseFormat?:
    | GetV2LogsIdResponseFormatResponse2$Outbound
    | GetV2LogsIdResponseFormatResponse1$Outbound
    | null
    | undefined;
  photoRealVersion?: string | undefined;
  encoding_format?: string | undefined;
};

/** @internal */
export const GetV2LogsIdResponseBodyModelParameters$outboundSchema: z.ZodType<
  GetV2LogsIdResponseBodyModelParameters$Outbound,
  z.ZodTypeDef,
  GetV2LogsIdResponseBodyModelParameters
> = z.object({
  temperature: z.number().optional(),
  maxTokens: z.number().optional(),
  topK: z.number().optional(),
  topP: z.number().optional(),
  frequencyPenalty: z.number().optional(),
  presencePenalty: z.number().optional(),
  numImages: z.number().optional(),
  seed: z.number().optional(),
  format: GetV2LogsIdResponseBodyFormat$outboundSchema.optional(),
  dimensions: z.string().optional(),
  quality: GetV2LogsIdResponseBodyQuality$outboundSchema.optional(),
  style: z.string().optional(),
  responseFormat: z.nullable(
    z.union([
      z.lazy(() => GetV2LogsIdResponseFormatResponse2$outboundSchema),
      z.lazy(() => GetV2LogsIdResponseFormatResponse1$outboundSchema),
    ]),
  ).optional(),
  photoRealVersion: GetV2LogsIdResponseBodyPhotoRealVersion$outboundSchema
    .optional(),
  encodingFormat: GetV2LogsIdResponseBodyEncodingFormat$outboundSchema
    .optional(),
}).transform((v) => {
  return remap$(v, {
    encodingFormat: "encoding_format",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdResponseBodyModelParameters$ {
  /** @deprecated use `GetV2LogsIdResponseBodyModelParameters$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsIdResponseBodyModelParameters$inboundSchema;
  /** @deprecated use `GetV2LogsIdResponseBodyModelParameters$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdResponseBodyModelParameters$outboundSchema;
  /** @deprecated use `GetV2LogsIdResponseBodyModelParameters$Outbound` instead. */
  export type Outbound = GetV2LogsIdResponseBodyModelParameters$Outbound;
}

export function getV2LogsIdResponseBodyModelParametersToJSON(
  getV2LogsIdResponseBodyModelParameters:
    GetV2LogsIdResponseBodyModelParameters,
): string {
  return JSON.stringify(
    GetV2LogsIdResponseBodyModelParameters$outboundSchema.parse(
      getV2LogsIdResponseBodyModelParameters,
    ),
  );
}

export function getV2LogsIdResponseBodyModelParametersFromJSON(
  jsonString: string,
): SafeParseResult<GetV2LogsIdResponseBodyModelParameters, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      GetV2LogsIdResponseBodyModelParameters$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetV2LogsIdResponseBodyModelParameters' from JSON`,
  );
}

/** @internal */
export const GetV2LogsIdResponseBodyProvider$inboundSchema: z.ZodNativeEnum<
  typeof GetV2LogsIdResponseBodyProvider
> = z.nativeEnum(GetV2LogsIdResponseBodyProvider);

/** @internal */
export const GetV2LogsIdResponseBodyProvider$outboundSchema: z.ZodNativeEnum<
  typeof GetV2LogsIdResponseBodyProvider
> = GetV2LogsIdResponseBodyProvider$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdResponseBodyProvider$ {
  /** @deprecated use `GetV2LogsIdResponseBodyProvider$inboundSchema` instead. */
  export const inboundSchema = GetV2LogsIdResponseBodyProvider$inboundSchema;
  /** @deprecated use `GetV2LogsIdResponseBodyProvider$outboundSchema` instead. */
  export const outboundSchema = GetV2LogsIdResponseBodyProvider$outboundSchema;
}

/** @internal */
export const GetV2LogsIdResponseBodyRole$inboundSchema: z.ZodNativeEnum<
  typeof GetV2LogsIdResponseBodyRole
> = z.nativeEnum(GetV2LogsIdResponseBodyRole);

/** @internal */
export const GetV2LogsIdResponseBodyRole$outboundSchema: z.ZodNativeEnum<
  typeof GetV2LogsIdResponseBodyRole
> = GetV2LogsIdResponseBodyRole$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdResponseBodyRole$ {
  /** @deprecated use `GetV2LogsIdResponseBodyRole$inboundSchema` instead. */
  export const inboundSchema = GetV2LogsIdResponseBodyRole$inboundSchema;
  /** @deprecated use `GetV2LogsIdResponseBodyRole$outboundSchema` instead. */
  export const outboundSchema = GetV2LogsIdResponseBodyRole$outboundSchema;
}

/** @internal */
export const GetV2LogsId2Response200ApplicationJSONType$inboundSchema:
  z.ZodNativeEnum<typeof GetV2LogsId2Response200ApplicationJSONType> = z
    .nativeEnum(GetV2LogsId2Response200ApplicationJSONType);

/** @internal */
export const GetV2LogsId2Response200ApplicationJSONType$outboundSchema:
  z.ZodNativeEnum<typeof GetV2LogsId2Response200ApplicationJSONType> =
    GetV2LogsId2Response200ApplicationJSONType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsId2Response200ApplicationJSONType$ {
  /** @deprecated use `GetV2LogsId2Response200ApplicationJSONType$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsId2Response200ApplicationJSONType$inboundSchema;
  /** @deprecated use `GetV2LogsId2Response200ApplicationJSONType$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsId2Response200ApplicationJSONType$outboundSchema;
}

/** @internal */
export const GetV2LogsId2ResponseImageUrl$inboundSchema: z.ZodType<
  GetV2LogsId2ResponseImageUrl,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string().optional(),
  url: z.string(),
  detail: z.string().optional(),
});

/** @internal */
export type GetV2LogsId2ResponseImageUrl$Outbound = {
  id?: string | undefined;
  url: string;
  detail?: string | undefined;
};

/** @internal */
export const GetV2LogsId2ResponseImageUrl$outboundSchema: z.ZodType<
  GetV2LogsId2ResponseImageUrl$Outbound,
  z.ZodTypeDef,
  GetV2LogsId2ResponseImageUrl
> = z.object({
  id: z.string().optional(),
  url: z.string(),
  detail: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsId2ResponseImageUrl$ {
  /** @deprecated use `GetV2LogsId2ResponseImageUrl$inboundSchema` instead. */
  export const inboundSchema = GetV2LogsId2ResponseImageUrl$inboundSchema;
  /** @deprecated use `GetV2LogsId2ResponseImageUrl$outboundSchema` instead. */
  export const outboundSchema = GetV2LogsId2ResponseImageUrl$outboundSchema;
  /** @deprecated use `GetV2LogsId2ResponseImageUrl$Outbound` instead. */
  export type Outbound = GetV2LogsId2ResponseImageUrl$Outbound;
}

export function getV2LogsId2ResponseImageUrlToJSON(
  getV2LogsId2ResponseImageUrl: GetV2LogsId2ResponseImageUrl,
): string {
  return JSON.stringify(
    GetV2LogsId2ResponseImageUrl$outboundSchema.parse(
      getV2LogsId2ResponseImageUrl,
    ),
  );
}

export function getV2LogsId2ResponseImageUrlFromJSON(
  jsonString: string,
): SafeParseResult<GetV2LogsId2ResponseImageUrl, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetV2LogsId2ResponseImageUrl$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetV2LogsId2ResponseImageUrl' from JSON`,
  );
}

/** @internal */
export const GetV2LogsId2Response2$inboundSchema: z.ZodType<
  GetV2LogsId2Response2,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: GetV2LogsId2Response200ApplicationJSONType$inboundSchema,
  image_url: z.lazy(() => GetV2LogsId2ResponseImageUrl$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "image_url": "imageUrl",
  });
});

/** @internal */
export type GetV2LogsId2Response2$Outbound = {
  type: string;
  image_url: GetV2LogsId2ResponseImageUrl$Outbound;
};

/** @internal */
export const GetV2LogsId2Response2$outboundSchema: z.ZodType<
  GetV2LogsId2Response2$Outbound,
  z.ZodTypeDef,
  GetV2LogsId2Response2
> = z.object({
  type: GetV2LogsId2Response200ApplicationJSONType$outboundSchema,
  imageUrl: z.lazy(() => GetV2LogsId2ResponseImageUrl$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    imageUrl: "image_url",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsId2Response2$ {
  /** @deprecated use `GetV2LogsId2Response2$inboundSchema` instead. */
  export const inboundSchema = GetV2LogsId2Response2$inboundSchema;
  /** @deprecated use `GetV2LogsId2Response2$outboundSchema` instead. */
  export const outboundSchema = GetV2LogsId2Response2$outboundSchema;
  /** @deprecated use `GetV2LogsId2Response2$Outbound` instead. */
  export type Outbound = GetV2LogsId2Response2$Outbound;
}

export function getV2LogsId2Response2ToJSON(
  getV2LogsId2Response2: GetV2LogsId2Response2,
): string {
  return JSON.stringify(
    GetV2LogsId2Response2$outboundSchema.parse(getV2LogsId2Response2),
  );
}

export function getV2LogsId2Response2FromJSON(
  jsonString: string,
): SafeParseResult<GetV2LogsId2Response2, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetV2LogsId2Response2$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetV2LogsId2Response2' from JSON`,
  );
}

/** @internal */
export const GetV2LogsId2Response200Type$inboundSchema: z.ZodNativeEnum<
  typeof GetV2LogsId2Response200Type
> = z.nativeEnum(GetV2LogsId2Response200Type);

/** @internal */
export const GetV2LogsId2Response200Type$outboundSchema: z.ZodNativeEnum<
  typeof GetV2LogsId2Response200Type
> = GetV2LogsId2Response200Type$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsId2Response200Type$ {
  /** @deprecated use `GetV2LogsId2Response200Type$inboundSchema` instead. */
  export const inboundSchema = GetV2LogsId2Response200Type$inboundSchema;
  /** @deprecated use `GetV2LogsId2Response200Type$outboundSchema` instead. */
  export const outboundSchema = GetV2LogsId2Response200Type$outboundSchema;
}

/** @internal */
export const GetV2LogsId2Response1$inboundSchema: z.ZodType<
  GetV2LogsId2Response1,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: GetV2LogsId2Response200Type$inboundSchema,
  text: z.string(),
});

/** @internal */
export type GetV2LogsId2Response1$Outbound = {
  type: string;
  text: string;
};

/** @internal */
export const GetV2LogsId2Response1$outboundSchema: z.ZodType<
  GetV2LogsId2Response1$Outbound,
  z.ZodTypeDef,
  GetV2LogsId2Response1
> = z.object({
  type: GetV2LogsId2Response200Type$outboundSchema,
  text: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsId2Response1$ {
  /** @deprecated use `GetV2LogsId2Response1$inboundSchema` instead. */
  export const inboundSchema = GetV2LogsId2Response1$inboundSchema;
  /** @deprecated use `GetV2LogsId2Response1$outboundSchema` instead. */
  export const outboundSchema = GetV2LogsId2Response1$outboundSchema;
  /** @deprecated use `GetV2LogsId2Response1$Outbound` instead. */
  export type Outbound = GetV2LogsId2Response1$Outbound;
}

export function getV2LogsId2Response1ToJSON(
  getV2LogsId2Response1: GetV2LogsId2Response1,
): string {
  return JSON.stringify(
    GetV2LogsId2Response1$outboundSchema.parse(getV2LogsId2Response1),
  );
}

export function getV2LogsId2Response1FromJSON(
  jsonString: string,
): SafeParseResult<GetV2LogsId2Response1, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetV2LogsId2Response1$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetV2LogsId2Response1' from JSON`,
  );
}

/** @internal */
export const GetV2LogsIdContentResponse2$inboundSchema: z.ZodType<
  GetV2LogsIdContentResponse2,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => GetV2LogsId2Response1$inboundSchema),
  z.lazy(() => GetV2LogsId2Response2$inboundSchema),
]);

/** @internal */
export type GetV2LogsIdContentResponse2$Outbound =
  | GetV2LogsId2Response1$Outbound
  | GetV2LogsId2Response2$Outbound;

/** @internal */
export const GetV2LogsIdContentResponse2$outboundSchema: z.ZodType<
  GetV2LogsIdContentResponse2$Outbound,
  z.ZodTypeDef,
  GetV2LogsIdContentResponse2
> = z.union([
  z.lazy(() => GetV2LogsId2Response1$outboundSchema),
  z.lazy(() => GetV2LogsId2Response2$outboundSchema),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdContentResponse2$ {
  /** @deprecated use `GetV2LogsIdContentResponse2$inboundSchema` instead. */
  export const inboundSchema = GetV2LogsIdContentResponse2$inboundSchema;
  /** @deprecated use `GetV2LogsIdContentResponse2$outboundSchema` instead. */
  export const outboundSchema = GetV2LogsIdContentResponse2$outboundSchema;
  /** @deprecated use `GetV2LogsIdContentResponse2$Outbound` instead. */
  export type Outbound = GetV2LogsIdContentResponse2$Outbound;
}

export function getV2LogsIdContentResponse2ToJSON(
  getV2LogsIdContentResponse2: GetV2LogsIdContentResponse2,
): string {
  return JSON.stringify(
    GetV2LogsIdContentResponse2$outboundSchema.parse(
      getV2LogsIdContentResponse2,
    ),
  );
}

export function getV2LogsIdContentResponse2FromJSON(
  jsonString: string,
): SafeParseResult<GetV2LogsIdContentResponse2, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetV2LogsIdContentResponse2$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetV2LogsIdContentResponse2' from JSON`,
  );
}

/** @internal */
export const GetV2LogsIdResponseBodyContent$inboundSchema: z.ZodType<
  GetV2LogsIdResponseBodyContent,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.string(),
  z.array(z.union([
    z.lazy(() => GetV2LogsId2Response1$inboundSchema),
    z.lazy(() => GetV2LogsId2Response2$inboundSchema),
  ])),
]);

/** @internal */
export type GetV2LogsIdResponseBodyContent$Outbound =
  | string
  | Array<GetV2LogsId2Response1$Outbound | GetV2LogsId2Response2$Outbound>;

/** @internal */
export const GetV2LogsIdResponseBodyContent$outboundSchema: z.ZodType<
  GetV2LogsIdResponseBodyContent$Outbound,
  z.ZodTypeDef,
  GetV2LogsIdResponseBodyContent
> = z.union([
  z.string(),
  z.array(z.union([
    z.lazy(() => GetV2LogsId2Response1$outboundSchema),
    z.lazy(() => GetV2LogsId2Response2$outboundSchema),
  ])),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdResponseBodyContent$ {
  /** @deprecated use `GetV2LogsIdResponseBodyContent$inboundSchema` instead. */
  export const inboundSchema = GetV2LogsIdResponseBodyContent$inboundSchema;
  /** @deprecated use `GetV2LogsIdResponseBodyContent$outboundSchema` instead. */
  export const outboundSchema = GetV2LogsIdResponseBodyContent$outboundSchema;
  /** @deprecated use `GetV2LogsIdResponseBodyContent$Outbound` instead. */
  export type Outbound = GetV2LogsIdResponseBodyContent$Outbound;
}

export function getV2LogsIdResponseBodyContentToJSON(
  getV2LogsIdResponseBodyContent: GetV2LogsIdResponseBodyContent,
): string {
  return JSON.stringify(
    GetV2LogsIdResponseBodyContent$outboundSchema.parse(
      getV2LogsIdResponseBodyContent,
    ),
  );
}

export function getV2LogsIdResponseBodyContentFromJSON(
  jsonString: string,
): SafeParseResult<GetV2LogsIdResponseBodyContent, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetV2LogsIdResponseBodyContent$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetV2LogsIdResponseBodyContent' from JSON`,
  );
}

/** @internal */
export const GetV2LogsIdResponseBodyResponse200Type$inboundSchema:
  z.ZodNativeEnum<typeof GetV2LogsIdResponseBodyResponse200Type> = z.nativeEnum(
    GetV2LogsIdResponseBodyResponse200Type,
  );

/** @internal */
export const GetV2LogsIdResponseBodyResponse200Type$outboundSchema:
  z.ZodNativeEnum<typeof GetV2LogsIdResponseBodyResponse200Type> =
    GetV2LogsIdResponseBodyResponse200Type$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdResponseBodyResponse200Type$ {
  /** @deprecated use `GetV2LogsIdResponseBodyResponse200Type$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsIdResponseBodyResponse200Type$inboundSchema;
  /** @deprecated use `GetV2LogsIdResponseBodyResponse200Type$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdResponseBodyResponse200Type$outboundSchema;
}

/** @internal */
export const GetV2LogsIdResponseBodyResponse200ApplicationJson3Function$inboundSchema:
  z.ZodType<
    GetV2LogsIdResponseBodyResponse200ApplicationJson3Function,
    z.ZodTypeDef,
    unknown
  > = z.object({
    name: z.string(),
    arguments: z.string(),
  });

/** @internal */
export type GetV2LogsIdResponseBodyResponse200ApplicationJson3Function$Outbound =
  {
    name: string;
    arguments: string;
  };

/** @internal */
export const GetV2LogsIdResponseBodyResponse200ApplicationJson3Function$outboundSchema:
  z.ZodType<
    GetV2LogsIdResponseBodyResponse200ApplicationJson3Function$Outbound,
    z.ZodTypeDef,
    GetV2LogsIdResponseBodyResponse200ApplicationJson3Function
  > = z.object({
    name: z.string(),
    arguments: z.string(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdResponseBodyResponse200ApplicationJson3Function$ {
  /** @deprecated use `GetV2LogsIdResponseBodyResponse200ApplicationJson3Function$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsIdResponseBodyResponse200ApplicationJson3Function$inboundSchema;
  /** @deprecated use `GetV2LogsIdResponseBodyResponse200ApplicationJson3Function$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdResponseBodyResponse200ApplicationJson3Function$outboundSchema;
  /** @deprecated use `GetV2LogsIdResponseBodyResponse200ApplicationJson3Function$Outbound` instead. */
  export type Outbound =
    GetV2LogsIdResponseBodyResponse200ApplicationJson3Function$Outbound;
}

export function getV2LogsIdResponseBodyResponse200ApplicationJson3FunctionToJSON(
  getV2LogsIdResponseBodyResponse200ApplicationJson3Function:
    GetV2LogsIdResponseBodyResponse200ApplicationJson3Function,
): string {
  return JSON.stringify(
    GetV2LogsIdResponseBodyResponse200ApplicationJson3Function$outboundSchema
      .parse(getV2LogsIdResponseBodyResponse200ApplicationJson3Function),
  );
}

export function getV2LogsIdResponseBodyResponse200ApplicationJson3FunctionFromJSON(
  jsonString: string,
): SafeParseResult<
  GetV2LogsIdResponseBodyResponse200ApplicationJson3Function,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetV2LogsIdResponseBodyResponse200ApplicationJson3Function$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'GetV2LogsIdResponseBodyResponse200ApplicationJson3Function' from JSON`,
  );
}

/** @internal */
export const GetV2LogsIdResponseBodyToolCalls$inboundSchema: z.ZodType<
  GetV2LogsIdResponseBodyToolCalls,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string().optional(),
  index: z.number().optional(),
  type: GetV2LogsIdResponseBodyResponse200Type$inboundSchema,
  function: z.lazy(() =>
    GetV2LogsIdResponseBodyResponse200ApplicationJson3Function$inboundSchema
  ),
});

/** @internal */
export type GetV2LogsIdResponseBodyToolCalls$Outbound = {
  id?: string | undefined;
  index?: number | undefined;
  type: string;
  function: GetV2LogsIdResponseBodyResponse200ApplicationJson3Function$Outbound;
};

/** @internal */
export const GetV2LogsIdResponseBodyToolCalls$outboundSchema: z.ZodType<
  GetV2LogsIdResponseBodyToolCalls$Outbound,
  z.ZodTypeDef,
  GetV2LogsIdResponseBodyToolCalls
> = z.object({
  id: z.string().optional(),
  index: z.number().optional(),
  type: GetV2LogsIdResponseBodyResponse200Type$outboundSchema,
  function: z.lazy(() =>
    GetV2LogsIdResponseBodyResponse200ApplicationJson3Function$outboundSchema
  ),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdResponseBodyToolCalls$ {
  /** @deprecated use `GetV2LogsIdResponseBodyToolCalls$inboundSchema` instead. */
  export const inboundSchema = GetV2LogsIdResponseBodyToolCalls$inboundSchema;
  /** @deprecated use `GetV2LogsIdResponseBodyToolCalls$outboundSchema` instead. */
  export const outboundSchema = GetV2LogsIdResponseBodyToolCalls$outboundSchema;
  /** @deprecated use `GetV2LogsIdResponseBodyToolCalls$Outbound` instead. */
  export type Outbound = GetV2LogsIdResponseBodyToolCalls$Outbound;
}

export function getV2LogsIdResponseBodyToolCallsToJSON(
  getV2LogsIdResponseBodyToolCalls: GetV2LogsIdResponseBodyToolCalls,
): string {
  return JSON.stringify(
    GetV2LogsIdResponseBodyToolCalls$outboundSchema.parse(
      getV2LogsIdResponseBodyToolCalls,
    ),
  );
}

export function getV2LogsIdResponseBodyToolCallsFromJSON(
  jsonString: string,
): SafeParseResult<GetV2LogsIdResponseBodyToolCalls, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetV2LogsIdResponseBodyToolCalls$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetV2LogsIdResponseBodyToolCalls' from JSON`,
  );
}

/** @internal */
export const GetV2LogsIdResponseBodyMessages$inboundSchema: z.ZodType<
  GetV2LogsIdResponseBodyMessages,
  z.ZodTypeDef,
  unknown
> = z.object({
  role: GetV2LogsIdResponseBodyRole$inboundSchema,
  content: z.union([
    z.string(),
    z.array(z.union([
      z.lazy(() => GetV2LogsId2Response1$inboundSchema),
      z.lazy(() => GetV2LogsId2Response2$inboundSchema),
    ])),
  ]),
  tool_calls: z.array(
    z.lazy(() => GetV2LogsIdResponseBodyToolCalls$inboundSchema),
  ).optional(),
  id: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "tool_calls": "toolCalls",
  });
});

/** @internal */
export type GetV2LogsIdResponseBodyMessages$Outbound = {
  role: string;
  content:
    | string
    | Array<GetV2LogsId2Response1$Outbound | GetV2LogsId2Response2$Outbound>;
  tool_calls?: Array<GetV2LogsIdResponseBodyToolCalls$Outbound> | undefined;
  id?: string | undefined;
};

/** @internal */
export const GetV2LogsIdResponseBodyMessages$outboundSchema: z.ZodType<
  GetV2LogsIdResponseBodyMessages$Outbound,
  z.ZodTypeDef,
  GetV2LogsIdResponseBodyMessages
> = z.object({
  role: GetV2LogsIdResponseBodyRole$outboundSchema,
  content: z.union([
    z.string(),
    z.array(z.union([
      z.lazy(() => GetV2LogsId2Response1$outboundSchema),
      z.lazy(() => GetV2LogsId2Response2$outboundSchema),
    ])),
  ]),
  toolCalls: z.array(
    z.lazy(() => GetV2LogsIdResponseBodyToolCalls$outboundSchema),
  ).optional(),
  id: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    toolCalls: "tool_calls",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdResponseBodyMessages$ {
  /** @deprecated use `GetV2LogsIdResponseBodyMessages$inboundSchema` instead. */
  export const inboundSchema = GetV2LogsIdResponseBodyMessages$inboundSchema;
  /** @deprecated use `GetV2LogsIdResponseBodyMessages$outboundSchema` instead. */
  export const outboundSchema = GetV2LogsIdResponseBodyMessages$outboundSchema;
  /** @deprecated use `GetV2LogsIdResponseBodyMessages$Outbound` instead. */
  export type Outbound = GetV2LogsIdResponseBodyMessages$Outbound;
}

export function getV2LogsIdResponseBodyMessagesToJSON(
  getV2LogsIdResponseBodyMessages: GetV2LogsIdResponseBodyMessages,
): string {
  return JSON.stringify(
    GetV2LogsIdResponseBodyMessages$outboundSchema.parse(
      getV2LogsIdResponseBodyMessages,
    ),
  );
}

export function getV2LogsIdResponseBodyMessagesFromJSON(
  jsonString: string,
): SafeParseResult<GetV2LogsIdResponseBodyMessages, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetV2LogsIdResponseBodyMessages$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetV2LogsIdResponseBodyMessages' from JSON`,
  );
}

/** @internal */
export const GetV2LogsIdResponseBodyPromptConfig$inboundSchema: z.ZodType<
  GetV2LogsIdResponseBodyPromptConfig,
  z.ZodTypeDef,
  unknown
> = z.object({
  stream: z.boolean(),
  model: z.string(),
  model_db_id: z.string(),
  model_type: GetV2LogsIdResponseBodyModelType$inboundSchema,
  model_parameters: z.lazy(() =>
    GetV2LogsIdResponseBodyModelParameters$inboundSchema
  ),
  provider: GetV2LogsIdResponseBodyProvider$inboundSchema,
  messages: z.array(
    z.lazy(() => GetV2LogsIdResponseBodyMessages$inboundSchema),
  ),
  integration_id: z.nullable(z.string()).optional(),
  version: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "model_db_id": "modelDbId",
    "model_type": "modelType",
    "model_parameters": "modelParameters",
    "integration_id": "integrationId",
  });
});

/** @internal */
export type GetV2LogsIdResponseBodyPromptConfig$Outbound = {
  stream: boolean;
  model: string;
  model_db_id: string;
  model_type: string;
  model_parameters: GetV2LogsIdResponseBodyModelParameters$Outbound;
  provider: string;
  messages: Array<GetV2LogsIdResponseBodyMessages$Outbound>;
  integration_id?: string | null | undefined;
  version?: string | undefined;
};

/** @internal */
export const GetV2LogsIdResponseBodyPromptConfig$outboundSchema: z.ZodType<
  GetV2LogsIdResponseBodyPromptConfig$Outbound,
  z.ZodTypeDef,
  GetV2LogsIdResponseBodyPromptConfig
> = z.object({
  stream: z.boolean(),
  model: z.string(),
  modelDbId: z.string(),
  modelType: GetV2LogsIdResponseBodyModelType$outboundSchema,
  modelParameters: z.lazy(() =>
    GetV2LogsIdResponseBodyModelParameters$outboundSchema
  ),
  provider: GetV2LogsIdResponseBodyProvider$outboundSchema,
  messages: z.array(
    z.lazy(() => GetV2LogsIdResponseBodyMessages$outboundSchema),
  ),
  integrationId: z.nullable(z.string()).optional(),
  version: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    modelDbId: "model_db_id",
    modelType: "model_type",
    modelParameters: "model_parameters",
    integrationId: "integration_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdResponseBodyPromptConfig$ {
  /** @deprecated use `GetV2LogsIdResponseBodyPromptConfig$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsIdResponseBodyPromptConfig$inboundSchema;
  /** @deprecated use `GetV2LogsIdResponseBodyPromptConfig$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdResponseBodyPromptConfig$outboundSchema;
  /** @deprecated use `GetV2LogsIdResponseBodyPromptConfig$Outbound` instead. */
  export type Outbound = GetV2LogsIdResponseBodyPromptConfig$Outbound;
}

export function getV2LogsIdResponseBodyPromptConfigToJSON(
  getV2LogsIdResponseBodyPromptConfig: GetV2LogsIdResponseBodyPromptConfig,
): string {
  return JSON.stringify(
    GetV2LogsIdResponseBodyPromptConfig$outboundSchema.parse(
      getV2LogsIdResponseBodyPromptConfig,
    ),
  );
}

export function getV2LogsIdResponseBodyPromptConfigFromJSON(
  jsonString: string,
): SafeParseResult<GetV2LogsIdResponseBodyPromptConfig, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      GetV2LogsIdResponseBodyPromptConfig$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetV2LogsIdResponseBodyPromptConfig' from JSON`,
  );
}

/** @internal */
export const ResponseBodyVariables$inboundSchema: z.ZodType<
  ResponseBodyVariables,
  z.ZodTypeDef,
  unknown
> = z.object({
  key: z.string(),
  value: z.any().optional(),
  is_pii: z.boolean().default(false),
}).transform((v) => {
  return remap$(v, {
    "is_pii": "isPii",
  });
});

/** @internal */
export type ResponseBodyVariables$Outbound = {
  key: string;
  value?: any | undefined;
  is_pii: boolean;
};

/** @internal */
export const ResponseBodyVariables$outboundSchema: z.ZodType<
  ResponseBodyVariables$Outbound,
  z.ZodTypeDef,
  ResponseBodyVariables
> = z.object({
  key: z.string(),
  value: z.any().optional(),
  isPii: z.boolean().default(false),
}).transform((v) => {
  return remap$(v, {
    isPii: "is_pii",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ResponseBodyVariables$ {
  /** @deprecated use `ResponseBodyVariables$inboundSchema` instead. */
  export const inboundSchema = ResponseBodyVariables$inboundSchema;
  /** @deprecated use `ResponseBodyVariables$outboundSchema` instead. */
  export const outboundSchema = ResponseBodyVariables$outboundSchema;
  /** @deprecated use `ResponseBodyVariables$Outbound` instead. */
  export type Outbound = ResponseBodyVariables$Outbound;
}

export function responseBodyVariablesToJSON(
  responseBodyVariables: ResponseBodyVariables,
): string {
  return JSON.stringify(
    ResponseBodyVariables$outboundSchema.parse(responseBodyVariables),
  );
}

export function responseBodyVariablesFromJSON(
  jsonString: string,
): SafeParseResult<ResponseBodyVariables, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ResponseBodyVariables$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ResponseBodyVariables' from JSON`,
  );
}

/** @internal */
export const GetV2LogsIdResponseBodyPerformance$inboundSchema: z.ZodType<
  GetV2LogsIdResponseBodyPerformance,
  z.ZodTypeDef,
  unknown
> = z.object({
  latency: z.number(),
  first_time_to_token: z.nullable(z.number()).optional(),
  tokens_per_second: z.nullable(z.number()).optional(),
}).transform((v) => {
  return remap$(v, {
    "first_time_to_token": "firstTimeToToken",
    "tokens_per_second": "tokensPerSecond",
  });
});

/** @internal */
export type GetV2LogsIdResponseBodyPerformance$Outbound = {
  latency: number;
  first_time_to_token?: number | null | undefined;
  tokens_per_second?: number | null | undefined;
};

/** @internal */
export const GetV2LogsIdResponseBodyPerformance$outboundSchema: z.ZodType<
  GetV2LogsIdResponseBodyPerformance$Outbound,
  z.ZodTypeDef,
  GetV2LogsIdResponseBodyPerformance
> = z.object({
  latency: z.number(),
  firstTimeToToken: z.nullable(z.number()).optional(),
  tokensPerSecond: z.nullable(z.number()).optional(),
}).transform((v) => {
  return remap$(v, {
    firstTimeToToken: "first_time_to_token",
    tokensPerSecond: "tokens_per_second",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdResponseBodyPerformance$ {
  /** @deprecated use `GetV2LogsIdResponseBodyPerformance$inboundSchema` instead. */
  export const inboundSchema = GetV2LogsIdResponseBodyPerformance$inboundSchema;
  /** @deprecated use `GetV2LogsIdResponseBodyPerformance$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdResponseBodyPerformance$outboundSchema;
  /** @deprecated use `GetV2LogsIdResponseBodyPerformance$Outbound` instead. */
  export type Outbound = GetV2LogsIdResponseBodyPerformance$Outbound;
}

export function getV2LogsIdResponseBodyPerformanceToJSON(
  getV2LogsIdResponseBodyPerformance: GetV2LogsIdResponseBodyPerformance,
): string {
  return JSON.stringify(
    GetV2LogsIdResponseBodyPerformance$outboundSchema.parse(
      getV2LogsIdResponseBodyPerformance,
    ),
  );
}

export function getV2LogsIdResponseBodyPerformanceFromJSON(
  jsonString: string,
): SafeParseResult<GetV2LogsIdResponseBodyPerformance, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      GetV2LogsIdResponseBodyPerformance$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetV2LogsIdResponseBodyPerformance' from JSON`,
  );
}

/** @internal */
export const ResponseBodyPromptTokensDetails$inboundSchema: z.ZodType<
  ResponseBodyPromptTokensDetails,
  z.ZodTypeDef,
  unknown
> = z.object({
  cached_tokens: z.number().optional(),
}).transform((v) => {
  return remap$(v, {
    "cached_tokens": "cachedTokens",
  });
});

/** @internal */
export type ResponseBodyPromptTokensDetails$Outbound = {
  cached_tokens?: number | undefined;
};

/** @internal */
export const ResponseBodyPromptTokensDetails$outboundSchema: z.ZodType<
  ResponseBodyPromptTokensDetails$Outbound,
  z.ZodTypeDef,
  ResponseBodyPromptTokensDetails
> = z.object({
  cachedTokens: z.number().optional(),
}).transform((v) => {
  return remap$(v, {
    cachedTokens: "cached_tokens",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ResponseBodyPromptTokensDetails$ {
  /** @deprecated use `ResponseBodyPromptTokensDetails$inboundSchema` instead. */
  export const inboundSchema = ResponseBodyPromptTokensDetails$inboundSchema;
  /** @deprecated use `ResponseBodyPromptTokensDetails$outboundSchema` instead. */
  export const outboundSchema = ResponseBodyPromptTokensDetails$outboundSchema;
  /** @deprecated use `ResponseBodyPromptTokensDetails$Outbound` instead. */
  export type Outbound = ResponseBodyPromptTokensDetails$Outbound;
}

export function responseBodyPromptTokensDetailsToJSON(
  responseBodyPromptTokensDetails: ResponseBodyPromptTokensDetails,
): string {
  return JSON.stringify(
    ResponseBodyPromptTokensDetails$outboundSchema.parse(
      responseBodyPromptTokensDetails,
    ),
  );
}

export function responseBodyPromptTokensDetailsFromJSON(
  jsonString: string,
): SafeParseResult<ResponseBodyPromptTokensDetails, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ResponseBodyPromptTokensDetails$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ResponseBodyPromptTokensDetails' from JSON`,
  );
}

/** @internal */
export const ResponseBodyCompletionTokensDetails$inboundSchema: z.ZodType<
  ResponseBodyCompletionTokensDetails,
  z.ZodTypeDef,
  unknown
> = z.object({
  reasoning_tokens: z.number().optional(),
}).transform((v) => {
  return remap$(v, {
    "reasoning_tokens": "reasoningTokens",
  });
});

/** @internal */
export type ResponseBodyCompletionTokensDetails$Outbound = {
  reasoning_tokens?: number | undefined;
};

/** @internal */
export const ResponseBodyCompletionTokensDetails$outboundSchema: z.ZodType<
  ResponseBodyCompletionTokensDetails$Outbound,
  z.ZodTypeDef,
  ResponseBodyCompletionTokensDetails
> = z.object({
  reasoningTokens: z.number().optional(),
}).transform((v) => {
  return remap$(v, {
    reasoningTokens: "reasoning_tokens",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ResponseBodyCompletionTokensDetails$ {
  /** @deprecated use `ResponseBodyCompletionTokensDetails$inboundSchema` instead. */
  export const inboundSchema =
    ResponseBodyCompletionTokensDetails$inboundSchema;
  /** @deprecated use `ResponseBodyCompletionTokensDetails$outboundSchema` instead. */
  export const outboundSchema =
    ResponseBodyCompletionTokensDetails$outboundSchema;
  /** @deprecated use `ResponseBodyCompletionTokensDetails$Outbound` instead. */
  export type Outbound = ResponseBodyCompletionTokensDetails$Outbound;
}

export function responseBodyCompletionTokensDetailsToJSON(
  responseBodyCompletionTokensDetails: ResponseBodyCompletionTokensDetails,
): string {
  return JSON.stringify(
    ResponseBodyCompletionTokensDetails$outboundSchema.parse(
      responseBodyCompletionTokensDetails,
    ),
  );
}

export function responseBodyCompletionTokensDetailsFromJSON(
  jsonString: string,
): SafeParseResult<ResponseBodyCompletionTokensDetails, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      ResponseBodyCompletionTokensDetails$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ResponseBodyCompletionTokensDetails' from JSON`,
  );
}

/** @internal */
export const GetV2LogsIdResponseBodyUsage$inboundSchema: z.ZodType<
  GetV2LogsIdResponseBodyUsage,
  z.ZodTypeDef,
  unknown
> = z.object({
  total_tokens: z.number().optional(),
  prompt_tokens: z.number().optional(),
  completion_tokens: z.number().optional(),
  prompt_tokens_details: z.lazy(() =>
    ResponseBodyPromptTokensDetails$inboundSchema
  ).optional(),
  completion_tokens_details: z.lazy(() =>
    ResponseBodyCompletionTokensDetails$inboundSchema
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    "total_tokens": "totalTokens",
    "prompt_tokens": "promptTokens",
    "completion_tokens": "completionTokens",
    "prompt_tokens_details": "promptTokensDetails",
    "completion_tokens_details": "completionTokensDetails",
  });
});

/** @internal */
export type GetV2LogsIdResponseBodyUsage$Outbound = {
  total_tokens?: number | undefined;
  prompt_tokens?: number | undefined;
  completion_tokens?: number | undefined;
  prompt_tokens_details?: ResponseBodyPromptTokensDetails$Outbound | undefined;
  completion_tokens_details?:
    | ResponseBodyCompletionTokensDetails$Outbound
    | undefined;
};

/** @internal */
export const GetV2LogsIdResponseBodyUsage$outboundSchema: z.ZodType<
  GetV2LogsIdResponseBodyUsage$Outbound,
  z.ZodTypeDef,
  GetV2LogsIdResponseBodyUsage
> = z.object({
  totalTokens: z.number().optional(),
  promptTokens: z.number().optional(),
  completionTokens: z.number().optional(),
  promptTokensDetails: z.lazy(() =>
    ResponseBodyPromptTokensDetails$outboundSchema
  ).optional(),
  completionTokensDetails: z.lazy(() =>
    ResponseBodyCompletionTokensDetails$outboundSchema
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    totalTokens: "total_tokens",
    promptTokens: "prompt_tokens",
    completionTokens: "completion_tokens",
    promptTokensDetails: "prompt_tokens_details",
    completionTokensDetails: "completion_tokens_details",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdResponseBodyUsage$ {
  /** @deprecated use `GetV2LogsIdResponseBodyUsage$inboundSchema` instead. */
  export const inboundSchema = GetV2LogsIdResponseBodyUsage$inboundSchema;
  /** @deprecated use `GetV2LogsIdResponseBodyUsage$outboundSchema` instead. */
  export const outboundSchema = GetV2LogsIdResponseBodyUsage$outboundSchema;
  /** @deprecated use `GetV2LogsIdResponseBodyUsage$Outbound` instead. */
  export type Outbound = GetV2LogsIdResponseBodyUsage$Outbound;
}

export function getV2LogsIdResponseBodyUsageToJSON(
  getV2LogsIdResponseBodyUsage: GetV2LogsIdResponseBodyUsage,
): string {
  return JSON.stringify(
    GetV2LogsIdResponseBodyUsage$outboundSchema.parse(
      getV2LogsIdResponseBodyUsage,
    ),
  );
}

export function getV2LogsIdResponseBodyUsageFromJSON(
  jsonString: string,
): SafeParseResult<GetV2LogsIdResponseBodyUsage, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetV2LogsIdResponseBodyUsage$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetV2LogsIdResponseBodyUsage' from JSON`,
  );
}

/** @internal */
export const ResponseBodyBilling$inboundSchema: z.ZodType<
  ResponseBodyBilling,
  z.ZodTypeDef,
  unknown
> = z.object({
  total_cost: z.nullable(z.number()).optional(),
  input_cost: z.nullable(z.number()).optional(),
  output_cost: z.nullable(z.number()).optional(),
  billable: z.boolean(),
}).transform((v) => {
  return remap$(v, {
    "total_cost": "totalCost",
    "input_cost": "inputCost",
    "output_cost": "outputCost",
  });
});

/** @internal */
export type ResponseBodyBilling$Outbound = {
  total_cost?: number | null | undefined;
  input_cost?: number | null | undefined;
  output_cost?: number | null | undefined;
  billable: boolean;
};

/** @internal */
export const ResponseBodyBilling$outboundSchema: z.ZodType<
  ResponseBodyBilling$Outbound,
  z.ZodTypeDef,
  ResponseBodyBilling
> = z.object({
  totalCost: z.nullable(z.number()).optional(),
  inputCost: z.nullable(z.number()).optional(),
  outputCost: z.nullable(z.number()).optional(),
  billable: z.boolean(),
}).transform((v) => {
  return remap$(v, {
    totalCost: "total_cost",
    inputCost: "input_cost",
    outputCost: "output_cost",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ResponseBodyBilling$ {
  /** @deprecated use `ResponseBodyBilling$inboundSchema` instead. */
  export const inboundSchema = ResponseBodyBilling$inboundSchema;
  /** @deprecated use `ResponseBodyBilling$outboundSchema` instead. */
  export const outboundSchema = ResponseBodyBilling$outboundSchema;
  /** @deprecated use `ResponseBodyBilling$Outbound` instead. */
  export type Outbound = ResponseBodyBilling$Outbound;
}

export function responseBodyBillingToJSON(
  responseBodyBilling: ResponseBodyBilling,
): string {
  return JSON.stringify(
    ResponseBodyBilling$outboundSchema.parse(responseBodyBilling),
  );
}

export function responseBodyBillingFromJSON(
  jsonString: string,
): SafeParseResult<ResponseBodyBilling, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ResponseBodyBilling$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ResponseBodyBilling' from JSON`,
  );
}

/** @internal */
export const GetV2LogsIdResponseBodyResponseMetadata$inboundSchema: z.ZodType<
  GetV2LogsIdResponseBodyResponseMetadata,
  z.ZodTypeDef,
  unknown
> = z.object({
  datasource_id: z.string(),
  chunk_id: z.string(),
  file_name: z.string(),
  page_number: z.nullable(z.number()).optional(),
  file_type: z.string(),
}).transform((v) => {
  return remap$(v, {
    "datasource_id": "datasourceId",
    "chunk_id": "chunkId",
    "file_name": "fileName",
    "page_number": "pageNumber",
    "file_type": "fileType",
  });
});

/** @internal */
export type GetV2LogsIdResponseBodyResponseMetadata$Outbound = {
  datasource_id: string;
  chunk_id: string;
  file_name: string;
  page_number?: number | null | undefined;
  file_type: string;
};

/** @internal */
export const GetV2LogsIdResponseBodyResponseMetadata$outboundSchema: z.ZodType<
  GetV2LogsIdResponseBodyResponseMetadata$Outbound,
  z.ZodTypeDef,
  GetV2LogsIdResponseBodyResponseMetadata
> = z.object({
  datasourceId: z.string(),
  chunkId: z.string(),
  fileName: z.string(),
  pageNumber: z.nullable(z.number()).optional(),
  fileType: z.string(),
}).transform((v) => {
  return remap$(v, {
    datasourceId: "datasource_id",
    chunkId: "chunk_id",
    fileName: "file_name",
    pageNumber: "page_number",
    fileType: "file_type",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdResponseBodyResponseMetadata$ {
  /** @deprecated use `GetV2LogsIdResponseBodyResponseMetadata$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsIdResponseBodyResponseMetadata$inboundSchema;
  /** @deprecated use `GetV2LogsIdResponseBodyResponseMetadata$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdResponseBodyResponseMetadata$outboundSchema;
  /** @deprecated use `GetV2LogsIdResponseBodyResponseMetadata$Outbound` instead. */
  export type Outbound = GetV2LogsIdResponseBodyResponseMetadata$Outbound;
}

export function getV2LogsIdResponseBodyResponseMetadataToJSON(
  getV2LogsIdResponseBodyResponseMetadata:
    GetV2LogsIdResponseBodyResponseMetadata,
): string {
  return JSON.stringify(
    GetV2LogsIdResponseBodyResponseMetadata$outboundSchema.parse(
      getV2LogsIdResponseBodyResponseMetadata,
    ),
  );
}

export function getV2LogsIdResponseBodyResponseMetadataFromJSON(
  jsonString: string,
): SafeParseResult<
  GetV2LogsIdResponseBodyResponseMetadata,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetV2LogsIdResponseBodyResponseMetadata$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'GetV2LogsIdResponseBodyResponseMetadata' from JSON`,
  );
}

/** @internal */
export const ResponseBodyDocuments$inboundSchema: z.ZodType<
  ResponseBodyDocuments,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  text: z.string(),
  metadata: z.lazy(() => GetV2LogsIdResponseBodyResponseMetadata$inboundSchema),
  score: z.number(),
  rerank_score: z.number().optional(),
}).transform((v) => {
  return remap$(v, {
    "rerank_score": "rerankScore",
  });
});

/** @internal */
export type ResponseBodyDocuments$Outbound = {
  id: string;
  text: string;
  metadata: GetV2LogsIdResponseBodyResponseMetadata$Outbound;
  score: number;
  rerank_score?: number | undefined;
};

/** @internal */
export const ResponseBodyDocuments$outboundSchema: z.ZodType<
  ResponseBodyDocuments$Outbound,
  z.ZodTypeDef,
  ResponseBodyDocuments
> = z.object({
  id: z.string(),
  text: z.string(),
  metadata: z.lazy(() =>
    GetV2LogsIdResponseBodyResponseMetadata$outboundSchema
  ),
  score: z.number(),
  rerankScore: z.number().optional(),
}).transform((v) => {
  return remap$(v, {
    rerankScore: "rerank_score",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ResponseBodyDocuments$ {
  /** @deprecated use `ResponseBodyDocuments$inboundSchema` instead. */
  export const inboundSchema = ResponseBodyDocuments$inboundSchema;
  /** @deprecated use `ResponseBodyDocuments$outboundSchema` instead. */
  export const outboundSchema = ResponseBodyDocuments$outboundSchema;
  /** @deprecated use `ResponseBodyDocuments$Outbound` instead. */
  export type Outbound = ResponseBodyDocuments$Outbound;
}

export function responseBodyDocumentsToJSON(
  responseBodyDocuments: ResponseBodyDocuments,
): string {
  return JSON.stringify(
    ResponseBodyDocuments$outboundSchema.parse(responseBodyDocuments),
  );
}

export function responseBodyDocumentsFromJSON(
  jsonString: string,
): SafeParseResult<ResponseBodyDocuments, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ResponseBodyDocuments$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ResponseBodyDocuments' from JSON`,
  );
}

/** @internal */
export const GetV2LogsIdResponseBodyRetrievals$inboundSchema: z.ZodType<
  GetV2LogsIdResponseBodyRetrievals,
  z.ZodTypeDef,
  unknown
> = z.object({
  knowledge_id: z.string(),
  documents: z.array(z.lazy(() => ResponseBodyDocuments$inboundSchema)),
  knowledge_key: z.string(),
  query: z.string(),
}).transform((v) => {
  return remap$(v, {
    "knowledge_id": "knowledgeId",
    "knowledge_key": "knowledgeKey",
  });
});

/** @internal */
export type GetV2LogsIdResponseBodyRetrievals$Outbound = {
  knowledge_id: string;
  documents: Array<ResponseBodyDocuments$Outbound>;
  knowledge_key: string;
  query: string;
};

/** @internal */
export const GetV2LogsIdResponseBodyRetrievals$outboundSchema: z.ZodType<
  GetV2LogsIdResponseBodyRetrievals$Outbound,
  z.ZodTypeDef,
  GetV2LogsIdResponseBodyRetrievals
> = z.object({
  knowledgeId: z.string(),
  documents: z.array(z.lazy(() => ResponseBodyDocuments$outboundSchema)),
  knowledgeKey: z.string(),
  query: z.string(),
}).transform((v) => {
  return remap$(v, {
    knowledgeId: "knowledge_id",
    knowledgeKey: "knowledge_key",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdResponseBodyRetrievals$ {
  /** @deprecated use `GetV2LogsIdResponseBodyRetrievals$inboundSchema` instead. */
  export const inboundSchema = GetV2LogsIdResponseBodyRetrievals$inboundSchema;
  /** @deprecated use `GetV2LogsIdResponseBodyRetrievals$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdResponseBodyRetrievals$outboundSchema;
  /** @deprecated use `GetV2LogsIdResponseBodyRetrievals$Outbound` instead. */
  export type Outbound = GetV2LogsIdResponseBodyRetrievals$Outbound;
}

export function getV2LogsIdResponseBodyRetrievalsToJSON(
  getV2LogsIdResponseBodyRetrievals: GetV2LogsIdResponseBodyRetrievals,
): string {
  return JSON.stringify(
    GetV2LogsIdResponseBodyRetrievals$outboundSchema.parse(
      getV2LogsIdResponseBodyRetrievals,
    ),
  );
}

export function getV2LogsIdResponseBodyRetrievalsFromJSON(
  jsonString: string,
): SafeParseResult<GetV2LogsIdResponseBodyRetrievals, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetV2LogsIdResponseBodyRetrievals$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetV2LogsIdResponseBodyRetrievals' from JSON`,
  );
}

/** @internal */
export const GetV2LogsIdConfigurationResponse200Type$inboundSchema:
  z.ZodNativeEnum<typeof GetV2LogsIdConfigurationResponse200Type> = z
    .nativeEnum(GetV2LogsIdConfigurationResponse200Type);

/** @internal */
export const GetV2LogsIdConfigurationResponse200Type$outboundSchema:
  z.ZodNativeEnum<typeof GetV2LogsIdConfigurationResponse200Type> =
    GetV2LogsIdConfigurationResponse200Type$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdConfigurationResponse200Type$ {
  /** @deprecated use `GetV2LogsIdConfigurationResponse200Type$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsIdConfigurationResponse200Type$inboundSchema;
  /** @deprecated use `GetV2LogsIdConfigurationResponse200Type$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdConfigurationResponse200Type$outboundSchema;
}

/** @internal */
export const GetV2LogsIdConfiguration2$inboundSchema: z.ZodType<
  GetV2LogsIdConfiguration2,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: GetV2LogsIdConfigurationResponse200Type$inboundSchema,
  query: z.string(),
});

/** @internal */
export type GetV2LogsIdConfiguration2$Outbound = {
  type: string;
  query: string;
};

/** @internal */
export const GetV2LogsIdConfiguration2$outboundSchema: z.ZodType<
  GetV2LogsIdConfiguration2$Outbound,
  z.ZodTypeDef,
  GetV2LogsIdConfiguration2
> = z.object({
  type: GetV2LogsIdConfigurationResponse200Type$outboundSchema,
  query: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdConfiguration2$ {
  /** @deprecated use `GetV2LogsIdConfiguration2$inboundSchema` instead. */
  export const inboundSchema = GetV2LogsIdConfiguration2$inboundSchema;
  /** @deprecated use `GetV2LogsIdConfiguration2$outboundSchema` instead. */
  export const outboundSchema = GetV2LogsIdConfiguration2$outboundSchema;
  /** @deprecated use `GetV2LogsIdConfiguration2$Outbound` instead. */
  export type Outbound = GetV2LogsIdConfiguration2$Outbound;
}

export function getV2LogsIdConfiguration2ToJSON(
  getV2LogsIdConfiguration2: GetV2LogsIdConfiguration2,
): string {
  return JSON.stringify(
    GetV2LogsIdConfiguration2$outboundSchema.parse(getV2LogsIdConfiguration2),
  );
}

export function getV2LogsIdConfiguration2FromJSON(
  jsonString: string,
): SafeParseResult<GetV2LogsIdConfiguration2, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetV2LogsIdConfiguration2$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetV2LogsIdConfiguration2' from JSON`,
  );
}

/** @internal */
export const GetV2LogsIdConfigurationResponseType$inboundSchema:
  z.ZodNativeEnum<typeof GetV2LogsIdConfigurationResponseType> = z.nativeEnum(
    GetV2LogsIdConfigurationResponseType,
  );

/** @internal */
export const GetV2LogsIdConfigurationResponseType$outboundSchema:
  z.ZodNativeEnum<typeof GetV2LogsIdConfigurationResponseType> =
    GetV2LogsIdConfigurationResponseType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdConfigurationResponseType$ {
  /** @deprecated use `GetV2LogsIdConfigurationResponseType$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsIdConfigurationResponseType$inboundSchema;
  /** @deprecated use `GetV2LogsIdConfigurationResponseType$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdConfigurationResponseType$outboundSchema;
}

/** @internal */
export const GetV2LogsIdConfiguration1$inboundSchema: z.ZodType<
  GetV2LogsIdConfiguration1,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: GetV2LogsIdConfigurationResponseType$inboundSchema,
});

/** @internal */
export type GetV2LogsIdConfiguration1$Outbound = {
  type: string;
};

/** @internal */
export const GetV2LogsIdConfiguration1$outboundSchema: z.ZodType<
  GetV2LogsIdConfiguration1$Outbound,
  z.ZodTypeDef,
  GetV2LogsIdConfiguration1
> = z.object({
  type: GetV2LogsIdConfigurationResponseType$outboundSchema,
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdConfiguration1$ {
  /** @deprecated use `GetV2LogsIdConfiguration1$inboundSchema` instead. */
  export const inboundSchema = GetV2LogsIdConfiguration1$inboundSchema;
  /** @deprecated use `GetV2LogsIdConfiguration1$outboundSchema` instead. */
  export const outboundSchema = GetV2LogsIdConfiguration1$outboundSchema;
  /** @deprecated use `GetV2LogsIdConfiguration1$Outbound` instead. */
  export type Outbound = GetV2LogsIdConfiguration1$Outbound;
}

export function getV2LogsIdConfiguration1ToJSON(
  getV2LogsIdConfiguration1: GetV2LogsIdConfiguration1,
): string {
  return JSON.stringify(
    GetV2LogsIdConfiguration1$outboundSchema.parse(getV2LogsIdConfiguration1),
  );
}

export function getV2LogsIdConfiguration1FromJSON(
  jsonString: string,
): SafeParseResult<GetV2LogsIdConfiguration1, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetV2LogsIdConfiguration1$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetV2LogsIdConfiguration1' from JSON`,
  );
}

/** @internal */
export const ResponseBodyConfiguration$inboundSchema: z.ZodType<
  ResponseBodyConfiguration,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => GetV2LogsIdConfiguration1$inboundSchema),
  z.lazy(() => GetV2LogsIdConfiguration2$inboundSchema),
]);

/** @internal */
export type ResponseBodyConfiguration$Outbound =
  | GetV2LogsIdConfiguration1$Outbound
  | GetV2LogsIdConfiguration2$Outbound;

/** @internal */
export const ResponseBodyConfiguration$outboundSchema: z.ZodType<
  ResponseBodyConfiguration$Outbound,
  z.ZodTypeDef,
  ResponseBodyConfiguration
> = z.union([
  z.lazy(() => GetV2LogsIdConfiguration1$outboundSchema),
  z.lazy(() => GetV2LogsIdConfiguration2$outboundSchema),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ResponseBodyConfiguration$ {
  /** @deprecated use `ResponseBodyConfiguration$inboundSchema` instead. */
  export const inboundSchema = ResponseBodyConfiguration$inboundSchema;
  /** @deprecated use `ResponseBodyConfiguration$outboundSchema` instead. */
  export const outboundSchema = ResponseBodyConfiguration$outboundSchema;
  /** @deprecated use `ResponseBodyConfiguration$Outbound` instead. */
  export type Outbound = ResponseBodyConfiguration$Outbound;
}

export function responseBodyConfigurationToJSON(
  responseBodyConfiguration: ResponseBodyConfiguration,
): string {
  return JSON.stringify(
    ResponseBodyConfiguration$outboundSchema.parse(responseBodyConfiguration),
  );
}

export function responseBodyConfigurationFromJSON(
  jsonString: string,
): SafeParseResult<ResponseBodyConfiguration, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ResponseBodyConfiguration$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ResponseBodyConfiguration' from JSON`,
  );
}

/** @internal */
export const ResponseBodyKnowledgeBases$inboundSchema: z.ZodType<
  ResponseBodyKnowledgeBases,
  z.ZodTypeDef,
  unknown
> = z.object({
  knowledge_id: z.string(),
  configuration: z.union([
    z.lazy(() => GetV2LogsIdConfiguration1$inboundSchema),
    z.lazy(() => GetV2LogsIdConfiguration2$inboundSchema),
  ]),
}).transform((v) => {
  return remap$(v, {
    "knowledge_id": "knowledgeId",
  });
});

/** @internal */
export type ResponseBodyKnowledgeBases$Outbound = {
  knowledge_id: string;
  configuration:
    | GetV2LogsIdConfiguration1$Outbound
    | GetV2LogsIdConfiguration2$Outbound;
};

/** @internal */
export const ResponseBodyKnowledgeBases$outboundSchema: z.ZodType<
  ResponseBodyKnowledgeBases$Outbound,
  z.ZodTypeDef,
  ResponseBodyKnowledgeBases
> = z.object({
  knowledgeId: z.string(),
  configuration: z.union([
    z.lazy(() => GetV2LogsIdConfiguration1$outboundSchema),
    z.lazy(() => GetV2LogsIdConfiguration2$outboundSchema),
  ]),
}).transform((v) => {
  return remap$(v, {
    knowledgeId: "knowledge_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ResponseBodyKnowledgeBases$ {
  /** @deprecated use `ResponseBodyKnowledgeBases$inboundSchema` instead. */
  export const inboundSchema = ResponseBodyKnowledgeBases$inboundSchema;
  /** @deprecated use `ResponseBodyKnowledgeBases$outboundSchema` instead. */
  export const outboundSchema = ResponseBodyKnowledgeBases$outboundSchema;
  /** @deprecated use `ResponseBodyKnowledgeBases$Outbound` instead. */
  export type Outbound = ResponseBodyKnowledgeBases$Outbound;
}

export function responseBodyKnowledgeBasesToJSON(
  responseBodyKnowledgeBases: ResponseBodyKnowledgeBases,
): string {
  return JSON.stringify(
    ResponseBodyKnowledgeBases$outboundSchema.parse(responseBodyKnowledgeBases),
  );
}

export function responseBodyKnowledgeBasesFromJSON(
  jsonString: string,
): SafeParseResult<ResponseBodyKnowledgeBases, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ResponseBodyKnowledgeBases$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ResponseBodyKnowledgeBases' from JSON`,
  );
}

/** @internal */
export const GetV2LogsIdResponseBodyType$inboundSchema: z.ZodNativeEnum<
  typeof GetV2LogsIdResponseBodyType
> = z.nativeEnum(GetV2LogsIdResponseBodyType);

/** @internal */
export const GetV2LogsIdResponseBodyType$outboundSchema: z.ZodNativeEnum<
  typeof GetV2LogsIdResponseBodyType
> = GetV2LogsIdResponseBodyType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdResponseBodyType$ {
  /** @deprecated use `GetV2LogsIdResponseBodyType$inboundSchema` instead. */
  export const inboundSchema = GetV2LogsIdResponseBodyType$inboundSchema;
  /** @deprecated use `GetV2LogsIdResponseBodyType$outboundSchema` instead. */
  export const outboundSchema = GetV2LogsIdResponseBodyType$outboundSchema;
}

/** @internal */
export const GetV2LogsIdResponseBodyResponse200ApplicationJson3Type$inboundSchema:
  z.ZodNativeEnum<
    typeof GetV2LogsIdResponseBodyResponse200ApplicationJson3Type
  > = z.nativeEnum(GetV2LogsIdResponseBodyResponse200ApplicationJson3Type);

/** @internal */
export const GetV2LogsIdResponseBodyResponse200ApplicationJson3Type$outboundSchema:
  z.ZodNativeEnum<
    typeof GetV2LogsIdResponseBodyResponse200ApplicationJson3Type
  > = GetV2LogsIdResponseBodyResponse200ApplicationJson3Type$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdResponseBodyResponse200ApplicationJson3Type$ {
  /** @deprecated use `GetV2LogsIdResponseBodyResponse200ApplicationJson3Type$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsIdResponseBodyResponse200ApplicationJson3Type$inboundSchema;
  /** @deprecated use `GetV2LogsIdResponseBodyResponse200ApplicationJson3Type$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdResponseBodyResponse200ApplicationJson3Type$outboundSchema;
}

/** @internal */
export const GetV2LogsIdResponseBodyParameters$inboundSchema: z.ZodType<
  GetV2LogsIdResponseBodyParameters,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: GetV2LogsIdResponseBodyResponse200ApplicationJson3Type$inboundSchema,
  properties: z.record(z.any()),
  required: z.array(z.string()).optional(),
  additionalProperties: z.boolean().optional(),
});

/** @internal */
export type GetV2LogsIdResponseBodyParameters$Outbound = {
  type: string;
  properties: { [k: string]: any };
  required?: Array<string> | undefined;
  additionalProperties?: boolean | undefined;
};

/** @internal */
export const GetV2LogsIdResponseBodyParameters$outboundSchema: z.ZodType<
  GetV2LogsIdResponseBodyParameters$Outbound,
  z.ZodTypeDef,
  GetV2LogsIdResponseBodyParameters
> = z.object({
  type: GetV2LogsIdResponseBodyResponse200ApplicationJson3Type$outboundSchema,
  properties: z.record(z.any()),
  required: z.array(z.string()).optional(),
  additionalProperties: z.boolean().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdResponseBodyParameters$ {
  /** @deprecated use `GetV2LogsIdResponseBodyParameters$inboundSchema` instead. */
  export const inboundSchema = GetV2LogsIdResponseBodyParameters$inboundSchema;
  /** @deprecated use `GetV2LogsIdResponseBodyParameters$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdResponseBodyParameters$outboundSchema;
  /** @deprecated use `GetV2LogsIdResponseBodyParameters$Outbound` instead. */
  export type Outbound = GetV2LogsIdResponseBodyParameters$Outbound;
}

export function getV2LogsIdResponseBodyParametersToJSON(
  getV2LogsIdResponseBodyParameters: GetV2LogsIdResponseBodyParameters,
): string {
  return JSON.stringify(
    GetV2LogsIdResponseBodyParameters$outboundSchema.parse(
      getV2LogsIdResponseBodyParameters,
    ),
  );
}

export function getV2LogsIdResponseBodyParametersFromJSON(
  jsonString: string,
): SafeParseResult<GetV2LogsIdResponseBodyParameters, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetV2LogsIdResponseBodyParameters$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetV2LogsIdResponseBodyParameters' from JSON`,
  );
}

/** @internal */
export const GetV2LogsIdResponseBodyFunction$inboundSchema: z.ZodType<
  GetV2LogsIdResponseBodyFunction,
  z.ZodTypeDef,
  unknown
> = z.object({
  name: z.string(),
  description: z.string().optional(),
  strict: z.boolean().optional(),
  parameters: z.lazy(() => GetV2LogsIdResponseBodyParameters$inboundSchema),
});

/** @internal */
export type GetV2LogsIdResponseBodyFunction$Outbound = {
  name: string;
  description?: string | undefined;
  strict?: boolean | undefined;
  parameters: GetV2LogsIdResponseBodyParameters$Outbound;
};

/** @internal */
export const GetV2LogsIdResponseBodyFunction$outboundSchema: z.ZodType<
  GetV2LogsIdResponseBodyFunction$Outbound,
  z.ZodTypeDef,
  GetV2LogsIdResponseBodyFunction
> = z.object({
  name: z.string(),
  description: z.string().optional(),
  strict: z.boolean().optional(),
  parameters: z.lazy(() => GetV2LogsIdResponseBodyParameters$outboundSchema),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdResponseBodyFunction$ {
  /** @deprecated use `GetV2LogsIdResponseBodyFunction$inboundSchema` instead. */
  export const inboundSchema = GetV2LogsIdResponseBodyFunction$inboundSchema;
  /** @deprecated use `GetV2LogsIdResponseBodyFunction$outboundSchema` instead. */
  export const outboundSchema = GetV2LogsIdResponseBodyFunction$outboundSchema;
  /** @deprecated use `GetV2LogsIdResponseBodyFunction$Outbound` instead. */
  export type Outbound = GetV2LogsIdResponseBodyFunction$Outbound;
}

export function getV2LogsIdResponseBodyFunctionToJSON(
  getV2LogsIdResponseBodyFunction: GetV2LogsIdResponseBodyFunction,
): string {
  return JSON.stringify(
    GetV2LogsIdResponseBodyFunction$outboundSchema.parse(
      getV2LogsIdResponseBodyFunction,
    ),
  );
}

export function getV2LogsIdResponseBodyFunctionFromJSON(
  jsonString: string,
): SafeParseResult<GetV2LogsIdResponseBodyFunction, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetV2LogsIdResponseBodyFunction$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetV2LogsIdResponseBodyFunction' from JSON`,
  );
}

/** @internal */
export const GetV2LogsIdResponseBodyTools$inboundSchema: z.ZodType<
  GetV2LogsIdResponseBodyTools,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: GetV2LogsIdResponseBodyType$inboundSchema,
  function: z.lazy(() => GetV2LogsIdResponseBodyFunction$inboundSchema),
});

/** @internal */
export type GetV2LogsIdResponseBodyTools$Outbound = {
  type: string;
  function: GetV2LogsIdResponseBodyFunction$Outbound;
};

/** @internal */
export const GetV2LogsIdResponseBodyTools$outboundSchema: z.ZodType<
  GetV2LogsIdResponseBodyTools$Outbound,
  z.ZodTypeDef,
  GetV2LogsIdResponseBodyTools
> = z.object({
  type: GetV2LogsIdResponseBodyType$outboundSchema,
  function: z.lazy(() => GetV2LogsIdResponseBodyFunction$outboundSchema),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdResponseBodyTools$ {
  /** @deprecated use `GetV2LogsIdResponseBodyTools$inboundSchema` instead. */
  export const inboundSchema = GetV2LogsIdResponseBodyTools$inboundSchema;
  /** @deprecated use `GetV2LogsIdResponseBodyTools$outboundSchema` instead. */
  export const outboundSchema = GetV2LogsIdResponseBodyTools$outboundSchema;
  /** @deprecated use `GetV2LogsIdResponseBodyTools$Outbound` instead. */
  export type Outbound = GetV2LogsIdResponseBodyTools$Outbound;
}

export function getV2LogsIdResponseBodyToolsToJSON(
  getV2LogsIdResponseBodyTools: GetV2LogsIdResponseBodyTools,
): string {
  return JSON.stringify(
    GetV2LogsIdResponseBodyTools$outboundSchema.parse(
      getV2LogsIdResponseBodyTools,
    ),
  );
}

export function getV2LogsIdResponseBodyToolsFromJSON(
  jsonString: string,
): SafeParseResult<GetV2LogsIdResponseBodyTools, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetV2LogsIdResponseBodyTools$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetV2LogsIdResponseBodyTools' from JSON`,
  );
}

/** @internal */
export const ResponseBodyPromptSnippets$inboundSchema: z.ZodType<
  ResponseBodyPromptSnippets,
  z.ZodTypeDef,
  unknown
> = z.object({
  _id: z.string(),
  key: z.string(),
  value: z.string(),
}).transform((v) => {
  return remap$(v, {
    "_id": "id",
  });
});

/** @internal */
export type ResponseBodyPromptSnippets$Outbound = {
  _id: string;
  key: string;
  value: string;
};

/** @internal */
export const ResponseBodyPromptSnippets$outboundSchema: z.ZodType<
  ResponseBodyPromptSnippets$Outbound,
  z.ZodTypeDef,
  ResponseBodyPromptSnippets
> = z.object({
  id: z.string(),
  key: z.string(),
  value: z.string(),
}).transform((v) => {
  return remap$(v, {
    id: "_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ResponseBodyPromptSnippets$ {
  /** @deprecated use `ResponseBodyPromptSnippets$inboundSchema` instead. */
  export const inboundSchema = ResponseBodyPromptSnippets$inboundSchema;
  /** @deprecated use `ResponseBodyPromptSnippets$outboundSchema` instead. */
  export const outboundSchema = ResponseBodyPromptSnippets$outboundSchema;
  /** @deprecated use `ResponseBodyPromptSnippets$Outbound` instead. */
  export type Outbound = ResponseBodyPromptSnippets$Outbound;
}

export function responseBodyPromptSnippetsToJSON(
  responseBodyPromptSnippets: ResponseBodyPromptSnippets,
): string {
  return JSON.stringify(
    ResponseBodyPromptSnippets$outboundSchema.parse(responseBodyPromptSnippets),
  );
}

export function responseBodyPromptSnippetsFromJSON(
  jsonString: string,
): SafeParseResult<ResponseBodyPromptSnippets, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ResponseBodyPromptSnippets$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ResponseBodyPromptSnippets' from JSON`,
  );
}

/** @internal */
export const GetV2LogsIdResponseBodyResponseData$inboundSchema: z.ZodType<
  GetV2LogsIdResponseBodyResponseData,
  z.ZodTypeDef,
  unknown
> = z.object({
  choices: z.array(z.lazy(() => GetV2LogsIdResponseBodyChoices$inboundSchema)),
  integration_ids: z.array(z.string()).optional(),
  action: GetV2LogsIdResponseBodyAction$inboundSchema,
  prompt_config: z.lazy(() =>
    GetV2LogsIdResponseBodyPromptConfig$inboundSchema
  ),
  variables: z.array(z.lazy(() => ResponseBodyVariables$inboundSchema)),
  performance: z.lazy(() => GetV2LogsIdResponseBodyPerformance$inboundSchema)
    .optional(),
  usage: z.lazy(() => GetV2LogsIdResponseBodyUsage$inboundSchema).optional(),
  billing: z.lazy(() => ResponseBodyBilling$inboundSchema),
  provider_response: z.any().optional(),
  retrievals: z.array(
    z.lazy(() => GetV2LogsIdResponseBodyRetrievals$inboundSchema),
  ).optional(),
  knowledge_bases: z.array(
    z.lazy(() => ResponseBodyKnowledgeBases$inboundSchema),
  ).optional(),
  tools: z.array(z.lazy(() => GetV2LogsIdResponseBodyTools$inboundSchema))
    .optional(),
  prompt_snippets: z.array(
    z.lazy(() => ResponseBodyPromptSnippets$inboundSchema),
  ),
}).transform((v) => {
  return remap$(v, {
    "integration_ids": "integrationIds",
    "prompt_config": "promptConfig",
    "provider_response": "providerResponse",
    "knowledge_bases": "knowledgeBases",
    "prompt_snippets": "promptSnippets",
  });
});

/** @internal */
export type GetV2LogsIdResponseBodyResponseData$Outbound = {
  choices: Array<GetV2LogsIdResponseBodyChoices$Outbound>;
  integration_ids?: Array<string> | undefined;
  action: string;
  prompt_config: GetV2LogsIdResponseBodyPromptConfig$Outbound;
  variables: Array<ResponseBodyVariables$Outbound>;
  performance?: GetV2LogsIdResponseBodyPerformance$Outbound | undefined;
  usage?: GetV2LogsIdResponseBodyUsage$Outbound | undefined;
  billing: ResponseBodyBilling$Outbound;
  provider_response?: any | undefined;
  retrievals?: Array<GetV2LogsIdResponseBodyRetrievals$Outbound> | undefined;
  knowledge_bases?: Array<ResponseBodyKnowledgeBases$Outbound> | undefined;
  tools?: Array<GetV2LogsIdResponseBodyTools$Outbound> | undefined;
  prompt_snippets: Array<ResponseBodyPromptSnippets$Outbound>;
};

/** @internal */
export const GetV2LogsIdResponseBodyResponseData$outboundSchema: z.ZodType<
  GetV2LogsIdResponseBodyResponseData$Outbound,
  z.ZodTypeDef,
  GetV2LogsIdResponseBodyResponseData
> = z.object({
  choices: z.array(z.lazy(() => GetV2LogsIdResponseBodyChoices$outboundSchema)),
  integrationIds: z.array(z.string()).optional(),
  action: GetV2LogsIdResponseBodyAction$outboundSchema,
  promptConfig: z.lazy(() =>
    GetV2LogsIdResponseBodyPromptConfig$outboundSchema
  ),
  variables: z.array(z.lazy(() => ResponseBodyVariables$outboundSchema)),
  performance: z.lazy(() => GetV2LogsIdResponseBodyPerformance$outboundSchema)
    .optional(),
  usage: z.lazy(() => GetV2LogsIdResponseBodyUsage$outboundSchema).optional(),
  billing: z.lazy(() => ResponseBodyBilling$outboundSchema),
  providerResponse: z.any().optional(),
  retrievals: z.array(
    z.lazy(() => GetV2LogsIdResponseBodyRetrievals$outboundSchema),
  ).optional(),
  knowledgeBases: z.array(
    z.lazy(() => ResponseBodyKnowledgeBases$outboundSchema),
  ).optional(),
  tools: z.array(z.lazy(() => GetV2LogsIdResponseBodyTools$outboundSchema))
    .optional(),
  promptSnippets: z.array(
    z.lazy(() => ResponseBodyPromptSnippets$outboundSchema),
  ),
}).transform((v) => {
  return remap$(v, {
    integrationIds: "integration_ids",
    promptConfig: "prompt_config",
    providerResponse: "provider_response",
    knowledgeBases: "knowledge_bases",
    promptSnippets: "prompt_snippets",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdResponseBodyResponseData$ {
  /** @deprecated use `GetV2LogsIdResponseBodyResponseData$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsIdResponseBodyResponseData$inboundSchema;
  /** @deprecated use `GetV2LogsIdResponseBodyResponseData$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdResponseBodyResponseData$outboundSchema;
  /** @deprecated use `GetV2LogsIdResponseBodyResponseData$Outbound` instead. */
  export type Outbound = GetV2LogsIdResponseBodyResponseData$Outbound;
}

export function getV2LogsIdResponseBodyResponseDataToJSON(
  getV2LogsIdResponseBodyResponseData: GetV2LogsIdResponseBodyResponseData,
): string {
  return JSON.stringify(
    GetV2LogsIdResponseBodyResponseData$outboundSchema.parse(
      getV2LogsIdResponseBodyResponseData,
    ),
  );
}

export function getV2LogsIdResponseBodyResponseDataFromJSON(
  jsonString: string,
): SafeParseResult<GetV2LogsIdResponseBodyResponseData, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      GetV2LogsIdResponseBodyResponseData$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetV2LogsIdResponseBodyResponseData' from JSON`,
  );
}

/** @internal */
export const ResponseBody3$inboundSchema: z.ZodType<
  ResponseBody3,
  z.ZodTypeDef,
  unknown
> = z.object({
  _id: z.string(),
  workspace_id: z.string(),
  workflow_metadata: z.record(z.any()).optional(),
  workflow_input: z.record(z.any()).optional(),
  workflow_output: z.record(z.any()).optional(),
  project_id: z.string().optional(),
  request_properties: z.lazy(() =>
    GetV2LogsIdResponseBodyRequestProperties$inboundSchema
  ).optional(),
  started_at: z.string().datetime({ offset: true }).transform(v => new Date(v)),
  finished_at: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
  evals: z.array(
    z.union([
      z.lazy(() => GetV2LogsIdEvalsResponse1$inboundSchema),
      z.lazy(() => GetV2LogsIdEvalsResponse2$inboundSchema),
      z.lazy(() => GetV2LogsIdEvalsResponse3$inboundSchema),
      z.lazy(() => GetV2LogsIdEvalsResponse4$inboundSchema),
      z.lazy(() => GetV2LogsIdEvalsResponse5$inboundSchema),
      z.lazy(() => GetV2LogsIdEvalsResponse6$inboundSchema),
      z.lazy(() => GetV2LogsIdEvalsResponse7$inboundSchema),
    ]),
  ),
  product_type: GetV2LogsIdResponseBodyProductType$inboundSchema,
  related_entities: z.array(
    z.union([
      z.lazy(() => GetV2LogsIdRelatedEntitiesResponse1$inboundSchema),
      z.lazy(() => GetV2LogsIdRelatedEntitiesResponse2$inboundSchema),
      z.lazy(() => GetV2LogsIdRelatedEntitiesResponse3$inboundSchema),
      z.lazy(() => GetV2LogsIdRelatedEntities4$inboundSchema),
    ]),
  ),
  data: z.lazy(() => GetV2LogsIdResponseBodyResponseData$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "_id": "id",
    "workspace_id": "workspaceId",
    "workflow_metadata": "workflowMetadata",
    "workflow_input": "workflowInput",
    "workflow_output": "workflowOutput",
    "project_id": "projectId",
    "request_properties": "requestProperties",
    "started_at": "startedAt",
    "finished_at": "finishedAt",
    "product_type": "productType",
    "related_entities": "relatedEntities",
  });
});

/** @internal */
export type ResponseBody3$Outbound = {
  _id: string;
  workspace_id: string;
  workflow_metadata?: { [k: string]: any } | undefined;
  workflow_input?: { [k: string]: any } | undefined;
  workflow_output?: { [k: string]: any } | undefined;
  project_id?: string | undefined;
  request_properties?:
    | GetV2LogsIdResponseBodyRequestProperties$Outbound
    | undefined;
  started_at: string;
  finished_at?: string | undefined;
  evals: Array<
    | GetV2LogsIdEvalsResponse1$Outbound
    | GetV2LogsIdEvalsResponse2$Outbound
    | GetV2LogsIdEvalsResponse3$Outbound
    | GetV2LogsIdEvalsResponse4$Outbound
    | GetV2LogsIdEvalsResponse5$Outbound
    | GetV2LogsIdEvalsResponse6$Outbound
    | GetV2LogsIdEvalsResponse7$Outbound
  >;
  product_type: string;
  related_entities: Array<
    | GetV2LogsIdRelatedEntitiesResponse1$Outbound
    | GetV2LogsIdRelatedEntitiesResponse2$Outbound
    | GetV2LogsIdRelatedEntitiesResponse3$Outbound
    | GetV2LogsIdRelatedEntities4$Outbound
  >;
  data: GetV2LogsIdResponseBodyResponseData$Outbound;
};

/** @internal */
export const ResponseBody3$outboundSchema: z.ZodType<
  ResponseBody3$Outbound,
  z.ZodTypeDef,
  ResponseBody3
> = z.object({
  id: z.string(),
  workspaceId: z.string(),
  workflowMetadata: z.record(z.any()).optional(),
  workflowInput: z.record(z.any()).optional(),
  workflowOutput: z.record(z.any()).optional(),
  projectId: z.string().optional(),
  requestProperties: z.lazy(() =>
    GetV2LogsIdResponseBodyRequestProperties$outboundSchema
  ).optional(),
  startedAt: z.date().transform(v => v.toISOString()),
  finishedAt: z.date().transform(v => v.toISOString()).optional(),
  evals: z.array(
    z.union([
      z.lazy(() => GetV2LogsIdEvalsResponse1$outboundSchema),
      z.lazy(() => GetV2LogsIdEvalsResponse2$outboundSchema),
      z.lazy(() => GetV2LogsIdEvalsResponse3$outboundSchema),
      z.lazy(() => GetV2LogsIdEvalsResponse4$outboundSchema),
      z.lazy(() => GetV2LogsIdEvalsResponse5$outboundSchema),
      z.lazy(() => GetV2LogsIdEvalsResponse6$outboundSchema),
      z.lazy(() => GetV2LogsIdEvalsResponse7$outboundSchema),
    ]),
  ),
  productType: GetV2LogsIdResponseBodyProductType$outboundSchema,
  relatedEntities: z.array(
    z.union([
      z.lazy(() => GetV2LogsIdRelatedEntitiesResponse1$outboundSchema),
      z.lazy(() => GetV2LogsIdRelatedEntitiesResponse2$outboundSchema),
      z.lazy(() => GetV2LogsIdRelatedEntitiesResponse3$outboundSchema),
      z.lazy(() => GetV2LogsIdRelatedEntities4$outboundSchema),
    ]),
  ),
  data: z.lazy(() => GetV2LogsIdResponseBodyResponseData$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    id: "_id",
    workspaceId: "workspace_id",
    workflowMetadata: "workflow_metadata",
    workflowInput: "workflow_input",
    workflowOutput: "workflow_output",
    projectId: "project_id",
    requestProperties: "request_properties",
    startedAt: "started_at",
    finishedAt: "finished_at",
    productType: "product_type",
    relatedEntities: "related_entities",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ResponseBody3$ {
  /** @deprecated use `ResponseBody3$inboundSchema` instead. */
  export const inboundSchema = ResponseBody3$inboundSchema;
  /** @deprecated use `ResponseBody3$outboundSchema` instead. */
  export const outboundSchema = ResponseBody3$outboundSchema;
  /** @deprecated use `ResponseBody3$Outbound` instead. */
  export type Outbound = ResponseBody3$Outbound;
}

export function responseBody3ToJSON(responseBody3: ResponseBody3): string {
  return JSON.stringify(ResponseBody3$outboundSchema.parse(responseBody3));
}

export function responseBody3FromJSON(
  jsonString: string,
): SafeParseResult<ResponseBody3, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ResponseBody3$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ResponseBody3' from JSON`,
  );
}

/** @internal */
export const ResponseBodyRequestProperties$inboundSchema: z.ZodType<
  ResponseBodyRequestProperties,
  z.ZodTypeDef,
  unknown
> = z.object({
  source: z.string().optional(),
  location: z.string().optional(),
  latitude: z.string().optional(),
  longitude: z.string().optional(),
  response_time: z.number().optional(),
  metadata: z.record(z.any()).optional(),
  status: z.number().optional(),
  context: z.record(z.any()).optional(),
  extra_params: z.record(z.any()).optional(),
}).transform((v) => {
  return remap$(v, {
    "response_time": "responseTime",
    "extra_params": "extraParams",
  });
});

/** @internal */
export type ResponseBodyRequestProperties$Outbound = {
  source?: string | undefined;
  location?: string | undefined;
  latitude?: string | undefined;
  longitude?: string | undefined;
  response_time?: number | undefined;
  metadata?: { [k: string]: any } | undefined;
  status?: number | undefined;
  context?: { [k: string]: any } | undefined;
  extra_params?: { [k: string]: any } | undefined;
};

/** @internal */
export const ResponseBodyRequestProperties$outboundSchema: z.ZodType<
  ResponseBodyRequestProperties$Outbound,
  z.ZodTypeDef,
  ResponseBodyRequestProperties
> = z.object({
  source: z.string().optional(),
  location: z.string().optional(),
  latitude: z.string().optional(),
  longitude: z.string().optional(),
  responseTime: z.number().optional(),
  metadata: z.record(z.any()).optional(),
  status: z.number().optional(),
  context: z.record(z.any()).optional(),
  extraParams: z.record(z.any()).optional(),
}).transform((v) => {
  return remap$(v, {
    responseTime: "response_time",
    extraParams: "extra_params",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ResponseBodyRequestProperties$ {
  /** @deprecated use `ResponseBodyRequestProperties$inboundSchema` instead. */
  export const inboundSchema = ResponseBodyRequestProperties$inboundSchema;
  /** @deprecated use `ResponseBodyRequestProperties$outboundSchema` instead. */
  export const outboundSchema = ResponseBodyRequestProperties$outboundSchema;
  /** @deprecated use `ResponseBodyRequestProperties$Outbound` instead. */
  export type Outbound = ResponseBodyRequestProperties$Outbound;
}

export function responseBodyRequestPropertiesToJSON(
  responseBodyRequestProperties: ResponseBodyRequestProperties,
): string {
  return JSON.stringify(
    ResponseBodyRequestProperties$outboundSchema.parse(
      responseBodyRequestProperties,
    ),
  );
}

export function responseBodyRequestPropertiesFromJSON(
  jsonString: string,
): SafeParseResult<ResponseBodyRequestProperties, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ResponseBodyRequestProperties$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ResponseBodyRequestProperties' from JSON`,
  );
}

/** @internal */
export const GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody27Type$inboundSchema:
  z.ZodNativeEnum<
    typeof GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody27Type
  > = z.nativeEnum(
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody27Type,
  );

/** @internal */
export const GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody27Type$outboundSchema:
  z.ZodNativeEnum<
    typeof GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody27Type
  > =
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody27Type$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody27Type$ {
  /** @deprecated use `GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody27Type$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody27Type$inboundSchema;
  /** @deprecated use `GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody27Type$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody27Type$outboundSchema;
}

/** @internal */
export const GetV2LogsIdEvalsRequestProperties$inboundSchema: z.ZodType<
  GetV2LogsIdEvalsRequestProperties,
  z.ZodTypeDef,
  unknown
> = z.object({
  source: z.string().optional(),
  location: z.string().optional(),
  latitude: z.string().optional(),
  longitude: z.string().optional(),
  response_time: z.number().optional(),
  metadata: z.record(z.any()).optional(),
  status: z.number().optional(),
  context: z.record(z.any()).optional(),
  extra_params: z.record(z.any()).optional(),
}).transform((v) => {
  return remap$(v, {
    "response_time": "responseTime",
    "extra_params": "extraParams",
  });
});

/** @internal */
export type GetV2LogsIdEvalsRequestProperties$Outbound = {
  source?: string | undefined;
  location?: string | undefined;
  latitude?: string | undefined;
  longitude?: string | undefined;
  response_time?: number | undefined;
  metadata?: { [k: string]: any } | undefined;
  status?: number | undefined;
  context?: { [k: string]: any } | undefined;
  extra_params?: { [k: string]: any } | undefined;
};

/** @internal */
export const GetV2LogsIdEvalsRequestProperties$outboundSchema: z.ZodType<
  GetV2LogsIdEvalsRequestProperties$Outbound,
  z.ZodTypeDef,
  GetV2LogsIdEvalsRequestProperties
> = z.object({
  source: z.string().optional(),
  location: z.string().optional(),
  latitude: z.string().optional(),
  longitude: z.string().optional(),
  responseTime: z.number().optional(),
  metadata: z.record(z.any()).optional(),
  status: z.number().optional(),
  context: z.record(z.any()).optional(),
  extraParams: z.record(z.any()).optional(),
}).transform((v) => {
  return remap$(v, {
    responseTime: "response_time",
    extraParams: "extra_params",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdEvalsRequestProperties$ {
  /** @deprecated use `GetV2LogsIdEvalsRequestProperties$inboundSchema` instead. */
  export const inboundSchema = GetV2LogsIdEvalsRequestProperties$inboundSchema;
  /** @deprecated use `GetV2LogsIdEvalsRequestProperties$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdEvalsRequestProperties$outboundSchema;
  /** @deprecated use `GetV2LogsIdEvalsRequestProperties$Outbound` instead. */
  export type Outbound = GetV2LogsIdEvalsRequestProperties$Outbound;
}

export function getV2LogsIdEvalsRequestPropertiesToJSON(
  getV2LogsIdEvalsRequestProperties: GetV2LogsIdEvalsRequestProperties,
): string {
  return JSON.stringify(
    GetV2LogsIdEvalsRequestProperties$outboundSchema.parse(
      getV2LogsIdEvalsRequestProperties,
    ),
  );
}

export function getV2LogsIdEvalsRequestPropertiesFromJSON(
  jsonString: string,
): SafeParseResult<GetV2LogsIdEvalsRequestProperties, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetV2LogsIdEvalsRequestProperties$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetV2LogsIdEvalsRequestProperties' from JSON`,
  );
}

/** @internal */
export const GetV2LogsIdEvalsProductType$inboundSchema: z.ZodNativeEnum<
  typeof GetV2LogsIdEvalsProductType
> = z.nativeEnum(GetV2LogsIdEvalsProductType);

/** @internal */
export const GetV2LogsIdEvalsProductType$outboundSchema: z.ZodNativeEnum<
  typeof GetV2LogsIdEvalsProductType
> = GetV2LogsIdEvalsProductType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdEvalsProductType$ {
  /** @deprecated use `GetV2LogsIdEvalsProductType$inboundSchema` instead. */
  export const inboundSchema = GetV2LogsIdEvalsProductType$inboundSchema;
  /** @deprecated use `GetV2LogsIdEvalsProductType$outboundSchema` instead. */
  export const outboundSchema = GetV2LogsIdEvalsProductType$outboundSchema;
}

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRunType$inboundSchema:
  z.ZodNativeEnum<
    typeof GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRunType
  > = z.nativeEnum(
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRunType,
  );

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRunType$outboundSchema:
  z.ZodNativeEnum<
    typeof GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRunType
  > =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRunType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRunType$ {
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRunType$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRunType$inboundSchema;
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRunType$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRunType$outboundSchema;
}

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRun1$inboundSchema:
  z.ZodType<
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRun1,
    z.ZodTypeDef,
    unknown
  > = z.object({
    type:
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRunType$inboundSchema,
    evaluator_id: z.string(),
  }).transform((v) => {
    return remap$(v, {
      "evaluator_id": "evaluatorId",
    });
  });

/** @internal */
export type GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRun1$Outbound =
  {
    type: string;
    evaluator_id: string;
  };

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRun1$outboundSchema:
  z.ZodType<
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRun1$Outbound,
    z.ZodTypeDef,
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRun1
  > = z.object({
    type:
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRunType$outboundSchema,
    evaluatorId: z.string(),
  }).transform((v) => {
    return remap$(v, {
      evaluatorId: "evaluator_id",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRun1$ {
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRun1$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRun1$inboundSchema;
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRun1$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRun1$outboundSchema;
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRun1$Outbound` instead. */
  export type Outbound =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRun1$Outbound;
}

export function getV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRun1ToJSON(
  getV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRun1:
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRun1,
): string {
  return JSON.stringify(
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRun1$outboundSchema
      .parse(
        getV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRun1,
      ),
  );
}

export function getV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRun1FromJSON(
  jsonString: string,
): SafeParseResult<
  GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRun1,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRun1$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRun1' from JSON`,
  );
}

/** @internal */
export const GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody27WorkflowRunRelatedEntities$inboundSchema:
  z.ZodType<
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody27WorkflowRunRelatedEntities,
    z.ZodTypeDef,
    unknown
  > = z.lazy(() =>
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRun1$inboundSchema
  );

/** @internal */
export type GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody27WorkflowRunRelatedEntities$Outbound =
  GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRun1$Outbound;

/** @internal */
export const GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody27WorkflowRunRelatedEntities$outboundSchema:
  z.ZodType<
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody27WorkflowRunRelatedEntities$Outbound,
    z.ZodTypeDef,
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody27WorkflowRunRelatedEntities
  > = z.lazy(() =>
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRun1$outboundSchema
  );

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody27WorkflowRunRelatedEntities$ {
  /** @deprecated use `GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody27WorkflowRunRelatedEntities$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody27WorkflowRunRelatedEntities$inboundSchema;
  /** @deprecated use `GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody27WorkflowRunRelatedEntities$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody27WorkflowRunRelatedEntities$outboundSchema;
  /** @deprecated use `GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody27WorkflowRunRelatedEntities$Outbound` instead. */
  export type Outbound =
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody27WorkflowRunRelatedEntities$Outbound;
}

export function getV2LogsIdEvalsResponse200ApplicationJSONResponseBody27WorkflowRunRelatedEntitiesToJSON(
  getV2LogsIdEvalsResponse200ApplicationJSONResponseBody27WorkflowRunRelatedEntities:
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody27WorkflowRunRelatedEntities,
): string {
  return JSON.stringify(
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody27WorkflowRunRelatedEntities$outboundSchema
      .parse(
        getV2LogsIdEvalsResponse200ApplicationJSONResponseBody27WorkflowRunRelatedEntities,
      ),
  );
}

export function getV2LogsIdEvalsResponse200ApplicationJSONResponseBody27WorkflowRunRelatedEntitiesFromJSON(
  jsonString: string,
): SafeParseResult<
  GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody27WorkflowRunRelatedEntities,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody27WorkflowRunRelatedEntities$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody27WorkflowRunRelatedEntities' from JSON`,
  );
}

/** @internal */
export const GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody2Evals7WorkflowRun4Type$inboundSchema:
  z.ZodNativeEnum<
    typeof GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody2Evals7WorkflowRun4Type
  > = z.nativeEnum(
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody2Evals7WorkflowRun4Type,
  );

/** @internal */
export const GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody2Evals7WorkflowRun4Type$outboundSchema:
  z.ZodNativeEnum<
    typeof GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody2Evals7WorkflowRun4Type
  > =
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody2Evals7WorkflowRun4Type$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody2Evals7WorkflowRun4Type$ {
  /** @deprecated use `GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody2Evals7WorkflowRun4Type$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody2Evals7WorkflowRun4Type$inboundSchema;
  /** @deprecated use `GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody2Evals7WorkflowRun4Type$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody2Evals7WorkflowRun4Type$outboundSchema;
}

/** @internal */
export const GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody2Evals7WorkflowRun4Status$inboundSchema:
  z.ZodNativeEnum<
    typeof GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody2Evals7WorkflowRun4Status
  > = z.nativeEnum(
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody2Evals7WorkflowRun4Status,
  );

/** @internal */
export const GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody2Evals7WorkflowRun4Status$outboundSchema:
  z.ZodNativeEnum<
    typeof GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody2Evals7WorkflowRun4Status
  > =
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody2Evals7WorkflowRun4Status$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody2Evals7WorkflowRun4Status$ {
  /** @deprecated use `GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody2Evals7WorkflowRun4Status$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody2Evals7WorkflowRun4Status$inboundSchema;
  /** @deprecated use `GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody2Evals7WorkflowRun4Status$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody2Evals7WorkflowRun4Status$outboundSchema;
}

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRunEvals44Type$inboundSchema:
  z.ZodNativeEnum<
    typeof GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRunEvals44Type
  > = z.nativeEnum(
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRunEvals44Type,
  );

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRunEvals44Type$outboundSchema:
  z.ZodNativeEnum<
    typeof GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRunEvals44Type
  > =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRunEvals44Type$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRunEvals44Type$ {
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRunEvals44Type$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRunEvals44Type$inboundSchema;
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRunEvals44Type$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRunEvals44Type$outboundSchema;
}

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRunEvals44$inboundSchema:
  z.ZodType<
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRunEvals44,
    z.ZodTypeDef,
    unknown
  > = z.object({
    type:
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRunEvals44Type$inboundSchema,
    evaluator_id: z.string(),
  }).transform((v) => {
    return remap$(v, {
      "evaluator_id": "evaluatorId",
    });
  });

/** @internal */
export type GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRunEvals44$Outbound =
  {
    type: string;
    evaluator_id: string;
  };

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRunEvals44$outboundSchema:
  z.ZodType<
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRunEvals44$Outbound,
    z.ZodTypeDef,
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRunEvals44
  > = z.object({
    type:
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRunEvals44Type$outboundSchema,
    evaluatorId: z.string(),
  }).transform((v) => {
    return remap$(v, {
      evaluatorId: "evaluator_id",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRunEvals44$ {
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRunEvals44$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRunEvals44$inboundSchema;
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRunEvals44$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRunEvals44$outboundSchema;
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRunEvals44$Outbound` instead. */
  export type Outbound =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRunEvals44$Outbound;
}

export function getV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRunEvals44ToJSON(
  getV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRunEvals44:
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRunEvals44,
): string {
  return JSON.stringify(
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRunEvals44$outboundSchema
      .parse(
        getV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRunEvals44,
      ),
  );
}

export function getV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRunEvals44FromJSON(
  jsonString: string,
): SafeParseResult<
  GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRunEvals44,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRunEvals44$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRunEvals44' from JSON`,
  );
}

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRunEvals43Type$inboundSchema:
  z.ZodNativeEnum<
    typeof GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRunEvals43Type
  > = z.nativeEnum(
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRunEvals43Type,
  );

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRunEvals43Type$outboundSchema:
  z.ZodNativeEnum<
    typeof GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRunEvals43Type
  > =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRunEvals43Type$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRunEvals43Type$ {
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRunEvals43Type$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRunEvals43Type$inboundSchema;
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRunEvals43Type$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRunEvals43Type$outboundSchema;
}

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRunEvals43$inboundSchema:
  z.ZodType<
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRunEvals43,
    z.ZodTypeDef,
    unknown
  > = z.object({
    type:
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRunEvals43Type$inboundSchema,
    human_eval_id: z.string(),
  }).transform((v) => {
    return remap$(v, {
      "human_eval_id": "humanEvalId",
    });
  });

/** @internal */
export type GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRunEvals43$Outbound =
  {
    type: string;
    human_eval_id: string;
  };

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRunEvals43$outboundSchema:
  z.ZodType<
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRunEvals43$Outbound,
    z.ZodTypeDef,
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRunEvals43
  > = z.object({
    type:
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRunEvals43Type$outboundSchema,
    humanEvalId: z.string(),
  }).transform((v) => {
    return remap$(v, {
      humanEvalId: "human_eval_id",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRunEvals43$ {
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRunEvals43$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRunEvals43$inboundSchema;
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRunEvals43$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRunEvals43$outboundSchema;
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRunEvals43$Outbound` instead. */
  export type Outbound =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRunEvals43$Outbound;
}

export function getV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRunEvals43ToJSON(
  getV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRunEvals43:
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRunEvals43,
): string {
  return JSON.stringify(
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRunEvals43$outboundSchema
      .parse(
        getV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRunEvals43,
      ),
  );
}

export function getV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRunEvals43FromJSON(
  jsonString: string,
): SafeParseResult<
  GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRunEvals43,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRunEvals43$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRunEvals43' from JSON`,
  );
}

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRunEvals42Type$inboundSchema:
  z.ZodNativeEnum<
    typeof GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRunEvals42Type
  > = z.nativeEnum(
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRunEvals42Type,
  );

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRunEvals42Type$outboundSchema:
  z.ZodNativeEnum<
    typeof GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRunEvals42Type
  > =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRunEvals42Type$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRunEvals42Type$ {
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRunEvals42Type$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRunEvals42Type$inboundSchema;
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRunEvals42Type$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRunEvals42Type$outboundSchema;
}

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRunEvals42$inboundSchema:
  z.ZodType<
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRunEvals42,
    z.ZodTypeDef,
    unknown
  > = z.object({
    type:
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRunEvals42Type$inboundSchema,
    contact_id: z.string(),
  }).transform((v) => {
    return remap$(v, {
      "contact_id": "contactId",
    });
  });

/** @internal */
export type GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRunEvals42$Outbound =
  {
    type: string;
    contact_id: string;
  };

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRunEvals42$outboundSchema:
  z.ZodType<
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRunEvals42$Outbound,
    z.ZodTypeDef,
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRunEvals42
  > = z.object({
    type:
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRunEvals42Type$outboundSchema,
    contactId: z.string(),
  }).transform((v) => {
    return remap$(v, {
      contactId: "contact_id",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRunEvals42$ {
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRunEvals42$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRunEvals42$inboundSchema;
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRunEvals42$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRunEvals42$outboundSchema;
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRunEvals42$Outbound` instead. */
  export type Outbound =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRunEvals42$Outbound;
}

export function getV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRunEvals42ToJSON(
  getV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRunEvals42:
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRunEvals42,
): string {
  return JSON.stringify(
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRunEvals42$outboundSchema
      .parse(
        getV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRunEvals42,
      ),
  );
}

export function getV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRunEvals42FromJSON(
  jsonString: string,
): SafeParseResult<
  GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRunEvals42,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRunEvals42$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRunEvals42' from JSON`,
  );
}

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRunEvals4Type$inboundSchema:
  z.ZodNativeEnum<
    typeof GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRunEvals4Type
  > = z.nativeEnum(
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRunEvals4Type,
  );

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRunEvals4Type$outboundSchema:
  z.ZodNativeEnum<
    typeof GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRunEvals4Type
  > =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRunEvals4Type$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRunEvals4Type$ {
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRunEvals4Type$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRunEvals4Type$inboundSchema;
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRunEvals4Type$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRunEvals4Type$outboundSchema;
}

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRunEvals41$inboundSchema:
  z.ZodType<
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRunEvals41,
    z.ZodTypeDef,
    unknown
  > = z.object({
    type:
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRunEvals4Type$inboundSchema,
    account_id: z.string(),
  }).transform((v) => {
    return remap$(v, {
      "account_id": "accountId",
    });
  });

/** @internal */
export type GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRunEvals41$Outbound =
  {
    type: string;
    account_id: string;
  };

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRunEvals41$outboundSchema:
  z.ZodType<
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRunEvals41$Outbound,
    z.ZodTypeDef,
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRunEvals41
  > = z.object({
    type:
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRunEvals4Type$outboundSchema,
    accountId: z.string(),
  }).transform((v) => {
    return remap$(v, {
      accountId: "account_id",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRunEvals41$ {
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRunEvals41$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRunEvals41$inboundSchema;
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRunEvals41$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRunEvals41$outboundSchema;
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRunEvals41$Outbound` instead. */
  export type Outbound =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRunEvals41$Outbound;
}

export function getV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRunEvals41ToJSON(
  getV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRunEvals41:
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRunEvals41,
): string {
  return JSON.stringify(
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRunEvals41$outboundSchema
      .parse(
        getV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRunEvals41,
      ),
  );
}

export function getV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRunEvals41FromJSON(
  jsonString: string,
): SafeParseResult<
  GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRunEvals41,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRunEvals41$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRunEvals41' from JSON`,
  );
}

/** @internal */
export const GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody2Evals7WorkflowRun4RelatedEntities$inboundSchema:
  z.ZodType<
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody2Evals7WorkflowRun4RelatedEntities,
    z.ZodTypeDef,
    unknown
  > = z.union([
    z.lazy(() =>
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRunEvals41$inboundSchema
    ),
    z.lazy(() =>
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRunEvals42$inboundSchema
    ),
    z.lazy(() =>
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRunEvals43$inboundSchema
    ),
    z.lazy(() =>
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRunEvals44$inboundSchema
    ),
  ]);

/** @internal */
export type GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody2Evals7WorkflowRun4RelatedEntities$Outbound =
  | GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRunEvals41$Outbound
  | GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRunEvals42$Outbound
  | GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRunEvals43$Outbound
  | GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRunEvals44$Outbound;

/** @internal */
export const GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody2Evals7WorkflowRun4RelatedEntities$outboundSchema:
  z.ZodType<
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody2Evals7WorkflowRun4RelatedEntities$Outbound,
    z.ZodTypeDef,
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody2Evals7WorkflowRun4RelatedEntities
  > = z.union([
    z.lazy(() =>
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRunEvals41$outboundSchema
    ),
    z.lazy(() =>
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRunEvals42$outboundSchema
    ),
    z.lazy(() =>
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRunEvals43$outboundSchema
    ),
    z.lazy(() =>
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRunEvals44$outboundSchema
    ),
  ]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody2Evals7WorkflowRun4RelatedEntities$ {
  /** @deprecated use `GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody2Evals7WorkflowRun4RelatedEntities$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody2Evals7WorkflowRun4RelatedEntities$inboundSchema;
  /** @deprecated use `GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody2Evals7WorkflowRun4RelatedEntities$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody2Evals7WorkflowRun4RelatedEntities$outboundSchema;
  /** @deprecated use `GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody2Evals7WorkflowRun4RelatedEntities$Outbound` instead. */
  export type Outbound =
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody2Evals7WorkflowRun4RelatedEntities$Outbound;
}

export function getV2LogsIdEvalsResponse200ApplicationJSONResponseBody2Evals7WorkflowRun4RelatedEntitiesToJSON(
  getV2LogsIdEvalsResponse200ApplicationJSONResponseBody2Evals7WorkflowRun4RelatedEntities:
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody2Evals7WorkflowRun4RelatedEntities,
): string {
  return JSON.stringify(
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody2Evals7WorkflowRun4RelatedEntities$outboundSchema
      .parse(
        getV2LogsIdEvalsResponse200ApplicationJSONResponseBody2Evals7WorkflowRun4RelatedEntities,
      ),
  );
}

export function getV2LogsIdEvalsResponse200ApplicationJSONResponseBody2Evals7WorkflowRun4RelatedEntitiesFromJSON(
  jsonString: string,
): SafeParseResult<
  GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody2Evals7WorkflowRun4RelatedEntities,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody2Evals7WorkflowRun4RelatedEntities$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody2Evals7WorkflowRun4RelatedEntities' from JSON`,
  );
}

/** @internal */
export const GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody24$inboundSchema:
  z.ZodType<
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody24,
    z.ZodTypeDef,
    unknown
  > = z.object({
    type:
      GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody2Evals7WorkflowRun4Type$inboundSchema,
    values: z.array(z.string()),
    id: z.string(),
    status:
      GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody2Evals7WorkflowRun4Status$inboundSchema,
    timestamp: z.string().datetime({ offset: true }).transform(v =>
      new Date(v)
    ),
    related_entities: z.array(
      z.union([
        z.lazy(() =>
          GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRunEvals41$inboundSchema
        ),
        z.lazy(() =>
          GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRunEvals42$inboundSchema
        ),
        z.lazy(() =>
          GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRunEvals43$inboundSchema
        ),
        z.lazy(() =>
          GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRunEvals44$inboundSchema
        ),
      ]),
    ),
  }).transform((v) => {
    return remap$(v, {
      "related_entities": "relatedEntities",
    });
  });

/** @internal */
export type GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody24$Outbound =
  {
    type: string;
    values: Array<string>;
    id: string;
    status: string;
    timestamp: string;
    related_entities: Array<
      | GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRunEvals41$Outbound
      | GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRunEvals42$Outbound
      | GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRunEvals43$Outbound
      | GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRunEvals44$Outbound
    >;
  };

/** @internal */
export const GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody24$outboundSchema:
  z.ZodType<
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody24$Outbound,
    z.ZodTypeDef,
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody24
  > = z.object({
    type:
      GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody2Evals7WorkflowRun4Type$outboundSchema,
    values: z.array(z.string()),
    id: z.string(),
    status:
      GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody2Evals7WorkflowRun4Status$outboundSchema,
    timestamp: z.date().transform(v => v.toISOString()),
    relatedEntities: z.array(
      z.union([
        z.lazy(() =>
          GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRunEvals41$outboundSchema
        ),
        z.lazy(() =>
          GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRunEvals42$outboundSchema
        ),
        z.lazy(() =>
          GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRunEvals43$outboundSchema
        ),
        z.lazy(() =>
          GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRunEvals44$outboundSchema
        ),
      ]),
    ),
  }).transform((v) => {
    return remap$(v, {
      relatedEntities: "related_entities",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody24$ {
  /** @deprecated use `GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody24$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody24$inboundSchema;
  /** @deprecated use `GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody24$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody24$outboundSchema;
  /** @deprecated use `GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody24$Outbound` instead. */
  export type Outbound =
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody24$Outbound;
}

export function getV2LogsIdEvalsResponse200ApplicationJSONResponseBody24ToJSON(
  getV2LogsIdEvalsResponse200ApplicationJSONResponseBody24:
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody24,
): string {
  return JSON.stringify(
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody24$outboundSchema
      .parse(getV2LogsIdEvalsResponse200ApplicationJSONResponseBody24),
  );
}

export function getV2LogsIdEvalsResponse200ApplicationJSONResponseBody24FromJSON(
  jsonString: string,
): SafeParseResult<
  GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody24,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody24$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody24' from JSON`,
  );
}

/** @internal */
export const GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody2Evals7WorkflowRunType$inboundSchema:
  z.ZodNativeEnum<
    typeof GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody2Evals7WorkflowRunType
  > = z.nativeEnum(
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody2Evals7WorkflowRunType,
  );

/** @internal */
export const GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody2Evals7WorkflowRunType$outboundSchema:
  z.ZodNativeEnum<
    typeof GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody2Evals7WorkflowRunType
  > =
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody2Evals7WorkflowRunType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody2Evals7WorkflowRunType$ {
  /** @deprecated use `GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody2Evals7WorkflowRunType$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody2Evals7WorkflowRunType$inboundSchema;
  /** @deprecated use `GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody2Evals7WorkflowRunType$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody2Evals7WorkflowRunType$outboundSchema;
}

/** @internal */
export const GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody2Evals7WorkflowRunStatus$inboundSchema:
  z.ZodNativeEnum<
    typeof GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody2Evals7WorkflowRunStatus
  > = z.nativeEnum(
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody2Evals7WorkflowRunStatus,
  );

/** @internal */
export const GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody2Evals7WorkflowRunStatus$outboundSchema:
  z.ZodNativeEnum<
    typeof GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody2Evals7WorkflowRunStatus
  > =
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody2Evals7WorkflowRunStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody2Evals7WorkflowRunStatus$ {
  /** @deprecated use `GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody2Evals7WorkflowRunStatus$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody2Evals7WorkflowRunStatus$inboundSchema;
  /** @deprecated use `GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody2Evals7WorkflowRunStatus$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody2Evals7WorkflowRunStatus$outboundSchema;
}

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRunEvals34Type$inboundSchema:
  z.ZodNativeEnum<
    typeof GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRunEvals34Type
  > = z.nativeEnum(
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRunEvals34Type,
  );

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRunEvals34Type$outboundSchema:
  z.ZodNativeEnum<
    typeof GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRunEvals34Type
  > =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRunEvals34Type$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRunEvals34Type$ {
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRunEvals34Type$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRunEvals34Type$inboundSchema;
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRunEvals34Type$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRunEvals34Type$outboundSchema;
}

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRunEvals4$inboundSchema:
  z.ZodType<
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRunEvals4,
    z.ZodTypeDef,
    unknown
  > = z.object({
    type:
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRunEvals34Type$inboundSchema,
    evaluator_id: z.string(),
  }).transform((v) => {
    return remap$(v, {
      "evaluator_id": "evaluatorId",
    });
  });

/** @internal */
export type GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRunEvals4$Outbound =
  {
    type: string;
    evaluator_id: string;
  };

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRunEvals4$outboundSchema:
  z.ZodType<
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRunEvals4$Outbound,
    z.ZodTypeDef,
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRunEvals4
  > = z.object({
    type:
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRunEvals34Type$outboundSchema,
    evaluatorId: z.string(),
  }).transform((v) => {
    return remap$(v, {
      evaluatorId: "evaluator_id",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRunEvals4$ {
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRunEvals4$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRunEvals4$inboundSchema;
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRunEvals4$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRunEvals4$outboundSchema;
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRunEvals4$Outbound` instead. */
  export type Outbound =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRunEvals4$Outbound;
}

export function getV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRunEvals4ToJSON(
  getV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRunEvals4:
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRunEvals4,
): string {
  return JSON.stringify(
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRunEvals4$outboundSchema
      .parse(
        getV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRunEvals4,
      ),
  );
}

export function getV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRunEvals4FromJSON(
  jsonString: string,
): SafeParseResult<
  GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRunEvals4,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRunEvals4$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRunEvals4' from JSON`,
  );
}

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRunEvals33Type$inboundSchema:
  z.ZodNativeEnum<
    typeof GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRunEvals33Type
  > = z.nativeEnum(
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRunEvals33Type,
  );

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRunEvals33Type$outboundSchema:
  z.ZodNativeEnum<
    typeof GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRunEvals33Type
  > =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRunEvals33Type$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRunEvals33Type$ {
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRunEvals33Type$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRunEvals33Type$inboundSchema;
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRunEvals33Type$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRunEvals33Type$outboundSchema;
}

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRunEvals3$inboundSchema:
  z.ZodType<
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRunEvals3,
    z.ZodTypeDef,
    unknown
  > = z.object({
    type:
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRunEvals33Type$inboundSchema,
    human_eval_id: z.string(),
  }).transform((v) => {
    return remap$(v, {
      "human_eval_id": "humanEvalId",
    });
  });

/** @internal */
export type GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRunEvals3$Outbound =
  {
    type: string;
    human_eval_id: string;
  };

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRunEvals3$outboundSchema:
  z.ZodType<
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRunEvals3$Outbound,
    z.ZodTypeDef,
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRunEvals3
  > = z.object({
    type:
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRunEvals33Type$outboundSchema,
    humanEvalId: z.string(),
  }).transform((v) => {
    return remap$(v, {
      humanEvalId: "human_eval_id",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRunEvals3$ {
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRunEvals3$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRunEvals3$inboundSchema;
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRunEvals3$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRunEvals3$outboundSchema;
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRunEvals3$Outbound` instead. */
  export type Outbound =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRunEvals3$Outbound;
}

export function getV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRunEvals3ToJSON(
  getV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRunEvals3:
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRunEvals3,
): string {
  return JSON.stringify(
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRunEvals3$outboundSchema
      .parse(
        getV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRunEvals3,
      ),
  );
}

export function getV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRunEvals3FromJSON(
  jsonString: string,
): SafeParseResult<
  GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRunEvals3,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRunEvals3$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRunEvals3' from JSON`,
  );
}

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRunEvals32Type$inboundSchema:
  z.ZodNativeEnum<
    typeof GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRunEvals32Type
  > = z.nativeEnum(
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRunEvals32Type,
  );

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRunEvals32Type$outboundSchema:
  z.ZodNativeEnum<
    typeof GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRunEvals32Type
  > =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRunEvals32Type$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRunEvals32Type$ {
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRunEvals32Type$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRunEvals32Type$inboundSchema;
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRunEvals32Type$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRunEvals32Type$outboundSchema;
}

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRunEvals2$inboundSchema:
  z.ZodType<
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRunEvals2,
    z.ZodTypeDef,
    unknown
  > = z.object({
    type:
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRunEvals32Type$inboundSchema,
    contact_id: z.string(),
  }).transform((v) => {
    return remap$(v, {
      "contact_id": "contactId",
    });
  });

/** @internal */
export type GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRunEvals2$Outbound =
  {
    type: string;
    contact_id: string;
  };

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRunEvals2$outboundSchema:
  z.ZodType<
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRunEvals2$Outbound,
    z.ZodTypeDef,
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRunEvals2
  > = z.object({
    type:
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRunEvals32Type$outboundSchema,
    contactId: z.string(),
  }).transform((v) => {
    return remap$(v, {
      contactId: "contact_id",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRunEvals2$ {
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRunEvals2$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRunEvals2$inboundSchema;
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRunEvals2$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRunEvals2$outboundSchema;
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRunEvals2$Outbound` instead. */
  export type Outbound =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRunEvals2$Outbound;
}

export function getV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRunEvals2ToJSON(
  getV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRunEvals2:
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRunEvals2,
): string {
  return JSON.stringify(
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRunEvals2$outboundSchema
      .parse(
        getV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRunEvals2,
      ),
  );
}

export function getV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRunEvals2FromJSON(
  jsonString: string,
): SafeParseResult<
  GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRunEvals2,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRunEvals2$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRunEvals2' from JSON`,
  );
}

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRunEvals3Type$inboundSchema:
  z.ZodNativeEnum<
    typeof GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRunEvals3Type
  > = z.nativeEnum(
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRunEvals3Type,
  );

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRunEvals3Type$outboundSchema:
  z.ZodNativeEnum<
    typeof GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRunEvals3Type
  > =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRunEvals3Type$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRunEvals3Type$ {
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRunEvals3Type$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRunEvals3Type$inboundSchema;
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRunEvals3Type$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRunEvals3Type$outboundSchema;
}

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRunEvals31$inboundSchema:
  z.ZodType<
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRunEvals31,
    z.ZodTypeDef,
    unknown
  > = z.object({
    type:
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRunEvals3Type$inboundSchema,
    account_id: z.string(),
  }).transform((v) => {
    return remap$(v, {
      "account_id": "accountId",
    });
  });

/** @internal */
export type GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRunEvals31$Outbound =
  {
    type: string;
    account_id: string;
  };

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRunEvals31$outboundSchema:
  z.ZodType<
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRunEvals31$Outbound,
    z.ZodTypeDef,
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRunEvals31
  > = z.object({
    type:
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRunEvals3Type$outboundSchema,
    accountId: z.string(),
  }).transform((v) => {
    return remap$(v, {
      accountId: "account_id",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRunEvals31$ {
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRunEvals31$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRunEvals31$inboundSchema;
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRunEvals31$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRunEvals31$outboundSchema;
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRunEvals31$Outbound` instead. */
  export type Outbound =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRunEvals31$Outbound;
}

export function getV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRunEvals31ToJSON(
  getV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRunEvals31:
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRunEvals31,
): string {
  return JSON.stringify(
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRunEvals31$outboundSchema
      .parse(
        getV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRunEvals31,
      ),
  );
}

export function getV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRunEvals31FromJSON(
  jsonString: string,
): SafeParseResult<
  GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRunEvals31,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRunEvals31$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRunEvals31' from JSON`,
  );
}

/** @internal */
export const GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody2Evals7WorkflowRunRelatedEntities$inboundSchema:
  z.ZodType<
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody2Evals7WorkflowRunRelatedEntities,
    z.ZodTypeDef,
    unknown
  > = z.union([
    z.lazy(() =>
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRunEvals31$inboundSchema
    ),
    z.lazy(() =>
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRunEvals2$inboundSchema
    ),
    z.lazy(() =>
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRunEvals3$inboundSchema
    ),
    z.lazy(() =>
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRunEvals4$inboundSchema
    ),
  ]);

/** @internal */
export type GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody2Evals7WorkflowRunRelatedEntities$Outbound =
  | GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRunEvals31$Outbound
  | GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRunEvals2$Outbound
  | GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRunEvals3$Outbound
  | GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRunEvals4$Outbound;

/** @internal */
export const GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody2Evals7WorkflowRunRelatedEntities$outboundSchema:
  z.ZodType<
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody2Evals7WorkflowRunRelatedEntities$Outbound,
    z.ZodTypeDef,
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody2Evals7WorkflowRunRelatedEntities
  > = z.union([
    z.lazy(() =>
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRunEvals31$outboundSchema
    ),
    z.lazy(() =>
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRunEvals2$outboundSchema
    ),
    z.lazy(() =>
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRunEvals3$outboundSchema
    ),
    z.lazy(() =>
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRunEvals4$outboundSchema
    ),
  ]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody2Evals7WorkflowRunRelatedEntities$ {
  /** @deprecated use `GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody2Evals7WorkflowRunRelatedEntities$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody2Evals7WorkflowRunRelatedEntities$inboundSchema;
  /** @deprecated use `GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody2Evals7WorkflowRunRelatedEntities$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody2Evals7WorkflowRunRelatedEntities$outboundSchema;
  /** @deprecated use `GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody2Evals7WorkflowRunRelatedEntities$Outbound` instead. */
  export type Outbound =
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody2Evals7WorkflowRunRelatedEntities$Outbound;
}

export function getV2LogsIdEvalsResponse200ApplicationJSONResponseBody2Evals7WorkflowRunRelatedEntitiesToJSON(
  getV2LogsIdEvalsResponse200ApplicationJSONResponseBody2Evals7WorkflowRunRelatedEntities:
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody2Evals7WorkflowRunRelatedEntities,
): string {
  return JSON.stringify(
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody2Evals7WorkflowRunRelatedEntities$outboundSchema
      .parse(
        getV2LogsIdEvalsResponse200ApplicationJSONResponseBody2Evals7WorkflowRunRelatedEntities,
      ),
  );
}

export function getV2LogsIdEvalsResponse200ApplicationJSONResponseBody2Evals7WorkflowRunRelatedEntitiesFromJSON(
  jsonString: string,
): SafeParseResult<
  GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody2Evals7WorkflowRunRelatedEntities,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody2Evals7WorkflowRunRelatedEntities$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody2Evals7WorkflowRunRelatedEntities' from JSON`,
  );
}

/** @internal */
export const GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody23$inboundSchema:
  z.ZodType<
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody23,
    z.ZodTypeDef,
    unknown
  > = z.object({
    type:
      GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody2Evals7WorkflowRunType$inboundSchema,
    value: z.boolean(),
    id: z.string(),
    status:
      GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody2Evals7WorkflowRunStatus$inboundSchema,
    timestamp: z.string().datetime({ offset: true }).transform(v =>
      new Date(v)
    ),
    related_entities: z.array(
      z.union([
        z.lazy(() =>
          GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRunEvals31$inboundSchema
        ),
        z.lazy(() =>
          GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRunEvals2$inboundSchema
        ),
        z.lazy(() =>
          GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRunEvals3$inboundSchema
        ),
        z.lazy(() =>
          GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRunEvals4$inboundSchema
        ),
      ]),
    ),
  }).transform((v) => {
    return remap$(v, {
      "related_entities": "relatedEntities",
    });
  });

/** @internal */
export type GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody23$Outbound =
  {
    type: string;
    value: boolean;
    id: string;
    status: string;
    timestamp: string;
    related_entities: Array<
      | GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRunEvals31$Outbound
      | GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRunEvals2$Outbound
      | GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRunEvals3$Outbound
      | GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRunEvals4$Outbound
    >;
  };

/** @internal */
export const GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody23$outboundSchema:
  z.ZodType<
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody23$Outbound,
    z.ZodTypeDef,
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody23
  > = z.object({
    type:
      GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody2Evals7WorkflowRunType$outboundSchema,
    value: z.boolean(),
    id: z.string(),
    status:
      GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody2Evals7WorkflowRunStatus$outboundSchema,
    timestamp: z.date().transform(v => v.toISOString()),
    relatedEntities: z.array(
      z.union([
        z.lazy(() =>
          GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRunEvals31$outboundSchema
        ),
        z.lazy(() =>
          GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRunEvals2$outboundSchema
        ),
        z.lazy(() =>
          GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRunEvals3$outboundSchema
        ),
        z.lazy(() =>
          GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRunEvals4$outboundSchema
        ),
      ]),
    ),
  }).transform((v) => {
    return remap$(v, {
      relatedEntities: "related_entities",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody23$ {
  /** @deprecated use `GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody23$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody23$inboundSchema;
  /** @deprecated use `GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody23$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody23$outboundSchema;
  /** @deprecated use `GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody23$Outbound` instead. */
  export type Outbound =
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody23$Outbound;
}

export function getV2LogsIdEvalsResponse200ApplicationJSONResponseBody23ToJSON(
  getV2LogsIdEvalsResponse200ApplicationJSONResponseBody23:
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody23,
): string {
  return JSON.stringify(
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody23$outboundSchema
      .parse(getV2LogsIdEvalsResponse200ApplicationJSONResponseBody23),
  );
}

export function getV2LogsIdEvalsResponse200ApplicationJSONResponseBody23FromJSON(
  jsonString: string,
): SafeParseResult<
  GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody23,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody23$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody23' from JSON`,
  );
}

/** @internal */
export const GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody2Evals7Type$inboundSchema:
  z.ZodNativeEnum<
    typeof GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody2Evals7Type
  > = z.nativeEnum(
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody2Evals7Type,
  );

/** @internal */
export const GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody2Evals7Type$outboundSchema:
  z.ZodNativeEnum<
    typeof GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody2Evals7Type
  > =
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody2Evals7Type$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody2Evals7Type$ {
  /** @deprecated use `GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody2Evals7Type$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody2Evals7Type$inboundSchema;
  /** @deprecated use `GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody2Evals7Type$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody2Evals7Type$outboundSchema;
}

/** @internal */
export const GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody2Evals7Status$inboundSchema:
  z.ZodNativeEnum<
    typeof GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody2Evals7Status
  > = z.nativeEnum(
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody2Evals7Status,
  );

/** @internal */
export const GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody2Evals7Status$outboundSchema:
  z.ZodNativeEnum<
    typeof GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody2Evals7Status
  > =
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody2Evals7Status$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody2Evals7Status$ {
  /** @deprecated use `GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody2Evals7Status$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody2Evals7Status$inboundSchema;
  /** @deprecated use `GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody2Evals7Status$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody2Evals7Status$outboundSchema;
}

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRunEvals24Type$inboundSchema:
  z.ZodNativeEnum<
    typeof GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRunEvals24Type
  > = z.nativeEnum(
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRunEvals24Type,
  );

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRunEvals24Type$outboundSchema:
  z.ZodNativeEnum<
    typeof GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRunEvals24Type
  > =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRunEvals24Type$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRunEvals24Type$ {
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRunEvals24Type$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRunEvals24Type$inboundSchema;
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRunEvals24Type$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRunEvals24Type$outboundSchema;
}

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRun4$inboundSchema:
  z.ZodType<
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRun4,
    z.ZodTypeDef,
    unknown
  > = z.object({
    type:
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRunEvals24Type$inboundSchema,
    evaluator_id: z.string(),
  }).transform((v) => {
    return remap$(v, {
      "evaluator_id": "evaluatorId",
    });
  });

/** @internal */
export type GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRun4$Outbound =
  {
    type: string;
    evaluator_id: string;
  };

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRun4$outboundSchema:
  z.ZodType<
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRun4$Outbound,
    z.ZodTypeDef,
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRun4
  > = z.object({
    type:
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRunEvals24Type$outboundSchema,
    evaluatorId: z.string(),
  }).transform((v) => {
    return remap$(v, {
      evaluatorId: "evaluator_id",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRun4$ {
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRun4$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRun4$inboundSchema;
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRun4$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRun4$outboundSchema;
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRun4$Outbound` instead. */
  export type Outbound =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRun4$Outbound;
}

export function getV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRun4ToJSON(
  getV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRun4:
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRun4,
): string {
  return JSON.stringify(
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRun4$outboundSchema
      .parse(
        getV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRun4,
      ),
  );
}

export function getV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRun4FromJSON(
  jsonString: string,
): SafeParseResult<
  GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRun4,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRun4$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRun4' from JSON`,
  );
}

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRunEvals23Type$inboundSchema:
  z.ZodNativeEnum<
    typeof GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRunEvals23Type
  > = z.nativeEnum(
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRunEvals23Type,
  );

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRunEvals23Type$outboundSchema:
  z.ZodNativeEnum<
    typeof GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRunEvals23Type
  > =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRunEvals23Type$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRunEvals23Type$ {
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRunEvals23Type$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRunEvals23Type$inboundSchema;
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRunEvals23Type$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRunEvals23Type$outboundSchema;
}

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRun3$inboundSchema:
  z.ZodType<
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRun3,
    z.ZodTypeDef,
    unknown
  > = z.object({
    type:
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRunEvals23Type$inboundSchema,
    human_eval_id: z.string(),
  }).transform((v) => {
    return remap$(v, {
      "human_eval_id": "humanEvalId",
    });
  });

/** @internal */
export type GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRun3$Outbound =
  {
    type: string;
    human_eval_id: string;
  };

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRun3$outboundSchema:
  z.ZodType<
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRun3$Outbound,
    z.ZodTypeDef,
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRun3
  > = z.object({
    type:
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRunEvals23Type$outboundSchema,
    humanEvalId: z.string(),
  }).transform((v) => {
    return remap$(v, {
      humanEvalId: "human_eval_id",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRun3$ {
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRun3$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRun3$inboundSchema;
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRun3$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRun3$outboundSchema;
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRun3$Outbound` instead. */
  export type Outbound =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRun3$Outbound;
}

export function getV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRun3ToJSON(
  getV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRun3:
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRun3,
): string {
  return JSON.stringify(
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRun3$outboundSchema
      .parse(
        getV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRun3,
      ),
  );
}

export function getV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRun3FromJSON(
  jsonString: string,
): SafeParseResult<
  GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRun3,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRun3$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRun3' from JSON`,
  );
}

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRunEvals22Type$inboundSchema:
  z.ZodNativeEnum<
    typeof GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRunEvals22Type
  > = z.nativeEnum(
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRunEvals22Type,
  );

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRunEvals22Type$outboundSchema:
  z.ZodNativeEnum<
    typeof GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRunEvals22Type
  > =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRunEvals22Type$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRunEvals22Type$ {
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRunEvals22Type$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRunEvals22Type$inboundSchema;
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRunEvals22Type$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRunEvals22Type$outboundSchema;
}

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRun2$inboundSchema:
  z.ZodType<
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRun2,
    z.ZodTypeDef,
    unknown
  > = z.object({
    type:
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRunEvals22Type$inboundSchema,
    contact_id: z.string(),
  }).transform((v) => {
    return remap$(v, {
      "contact_id": "contactId",
    });
  });

/** @internal */
export type GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRun2$Outbound =
  {
    type: string;
    contact_id: string;
  };

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRun2$outboundSchema:
  z.ZodType<
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRun2$Outbound,
    z.ZodTypeDef,
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRun2
  > = z.object({
    type:
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRunEvals22Type$outboundSchema,
    contactId: z.string(),
  }).transform((v) => {
    return remap$(v, {
      contactId: "contact_id",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRun2$ {
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRun2$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRun2$inboundSchema;
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRun2$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRun2$outboundSchema;
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRun2$Outbound` instead. */
  export type Outbound =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRun2$Outbound;
}

export function getV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRun2ToJSON(
  getV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRun2:
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRun2,
): string {
  return JSON.stringify(
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRun2$outboundSchema
      .parse(
        getV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRun2,
      ),
  );
}

export function getV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRun2FromJSON(
  jsonString: string,
): SafeParseResult<
  GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRun2,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRun2$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRun2' from JSON`,
  );
}

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRunEvals2Type$inboundSchema:
  z.ZodNativeEnum<
    typeof GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRunEvals2Type
  > = z.nativeEnum(
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRunEvals2Type,
  );

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRunEvals2Type$outboundSchema:
  z.ZodNativeEnum<
    typeof GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRunEvals2Type
  > =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRunEvals2Type$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRunEvals2Type$ {
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRunEvals2Type$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRunEvals2Type$inboundSchema;
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRunEvals2Type$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRunEvals2Type$outboundSchema;
}

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRunEvals1$inboundSchema:
  z.ZodType<
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRunEvals1,
    z.ZodTypeDef,
    unknown
  > = z.object({
    type:
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRunEvals2Type$inboundSchema,
    account_id: z.string(),
  }).transform((v) => {
    return remap$(v, {
      "account_id": "accountId",
    });
  });

/** @internal */
export type GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRunEvals1$Outbound =
  {
    type: string;
    account_id: string;
  };

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRunEvals1$outboundSchema:
  z.ZodType<
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRunEvals1$Outbound,
    z.ZodTypeDef,
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRunEvals1
  > = z.object({
    type:
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRunEvals2Type$outboundSchema,
    accountId: z.string(),
  }).transform((v) => {
    return remap$(v, {
      accountId: "account_id",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRunEvals1$ {
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRunEvals1$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRunEvals1$inboundSchema;
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRunEvals1$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRunEvals1$outboundSchema;
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRunEvals1$Outbound` instead. */
  export type Outbound =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRunEvals1$Outbound;
}

export function getV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRunEvals1ToJSON(
  getV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRunEvals1:
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRunEvals1,
): string {
  return JSON.stringify(
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRunEvals1$outboundSchema
      .parse(
        getV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRunEvals1,
      ),
  );
}

export function getV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRunEvals1FromJSON(
  jsonString: string,
): SafeParseResult<
  GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRunEvals1,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRunEvals1$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRunEvals1' from JSON`,
  );
}

/** @internal */
export const GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody2Evals7RelatedEntities$inboundSchema:
  z.ZodType<
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody2Evals7RelatedEntities,
    z.ZodTypeDef,
    unknown
  > = z.union([
    z.lazy(() =>
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRunEvals1$inboundSchema
    ),
    z.lazy(() =>
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRun2$inboundSchema
    ),
    z.lazy(() =>
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRun3$inboundSchema
    ),
    z.lazy(() =>
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRun4$inboundSchema
    ),
  ]);

/** @internal */
export type GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody2Evals7RelatedEntities$Outbound =
  | GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRunEvals1$Outbound
  | GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRun2$Outbound
  | GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRun3$Outbound
  | GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRun4$Outbound;

/** @internal */
export const GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody2Evals7RelatedEntities$outboundSchema:
  z.ZodType<
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody2Evals7RelatedEntities$Outbound,
    z.ZodTypeDef,
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody2Evals7RelatedEntities
  > = z.union([
    z.lazy(() =>
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRunEvals1$outboundSchema
    ),
    z.lazy(() =>
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRun2$outboundSchema
    ),
    z.lazy(() =>
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRun3$outboundSchema
    ),
    z.lazy(() =>
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRun4$outboundSchema
    ),
  ]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody2Evals7RelatedEntities$ {
  /** @deprecated use `GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody2Evals7RelatedEntities$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody2Evals7RelatedEntities$inboundSchema;
  /** @deprecated use `GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody2Evals7RelatedEntities$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody2Evals7RelatedEntities$outboundSchema;
  /** @deprecated use `GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody2Evals7RelatedEntities$Outbound` instead. */
  export type Outbound =
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody2Evals7RelatedEntities$Outbound;
}

export function getV2LogsIdEvalsResponse200ApplicationJSONResponseBody2Evals7RelatedEntitiesToJSON(
  getV2LogsIdEvalsResponse200ApplicationJSONResponseBody2Evals7RelatedEntities:
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody2Evals7RelatedEntities,
): string {
  return JSON.stringify(
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody2Evals7RelatedEntities$outboundSchema
      .parse(
        getV2LogsIdEvalsResponse200ApplicationJSONResponseBody2Evals7RelatedEntities,
      ),
  );
}

export function getV2LogsIdEvalsResponse200ApplicationJSONResponseBody2Evals7RelatedEntitiesFromJSON(
  jsonString: string,
): SafeParseResult<
  GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody2Evals7RelatedEntities,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody2Evals7RelatedEntities$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody2Evals7RelatedEntities' from JSON`,
  );
}

/** @internal */
export const GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody22$inboundSchema:
  z.ZodType<
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody22,
    z.ZodTypeDef,
    unknown
  > = z.object({
    type:
      GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody2Evals7Type$inboundSchema,
    value: z.number(),
    id: z.string(),
    status:
      GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody2Evals7Status$inboundSchema,
    timestamp: z.string().datetime({ offset: true }).transform(v =>
      new Date(v)
    ),
    related_entities: z.array(
      z.union([
        z.lazy(() =>
          GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRunEvals1$inboundSchema
        ),
        z.lazy(() =>
          GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRun2$inboundSchema
        ),
        z.lazy(() =>
          GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRun3$inboundSchema
        ),
        z.lazy(() =>
          GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRun4$inboundSchema
        ),
      ]),
    ),
  }).transform((v) => {
    return remap$(v, {
      "related_entities": "relatedEntities",
    });
  });

/** @internal */
export type GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody22$Outbound =
  {
    type: string;
    value: number;
    id: string;
    status: string;
    timestamp: string;
    related_entities: Array<
      | GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRunEvals1$Outbound
      | GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRun2$Outbound
      | GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRun3$Outbound
      | GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRun4$Outbound
    >;
  };

/** @internal */
export const GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody22$outboundSchema:
  z.ZodType<
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody22$Outbound,
    z.ZodTypeDef,
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody22
  > = z.object({
    type:
      GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody2Evals7Type$outboundSchema,
    value: z.number(),
    id: z.string(),
    status:
      GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody2Evals7Status$outboundSchema,
    timestamp: z.date().transform(v => v.toISOString()),
    relatedEntities: z.array(
      z.union([
        z.lazy(() =>
          GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRunEvals1$outboundSchema
        ),
        z.lazy(() =>
          GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRun2$outboundSchema
        ),
        z.lazy(() =>
          GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRun3$outboundSchema
        ),
        z.lazy(() =>
          GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRun4$outboundSchema
        ),
      ]),
    ),
  }).transform((v) => {
    return remap$(v, {
      relatedEntities: "related_entities",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody22$ {
  /** @deprecated use `GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody22$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody22$inboundSchema;
  /** @deprecated use `GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody22$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody22$outboundSchema;
  /** @deprecated use `GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody22$Outbound` instead. */
  export type Outbound =
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody22$Outbound;
}

export function getV2LogsIdEvalsResponse200ApplicationJSONResponseBody22ToJSON(
  getV2LogsIdEvalsResponse200ApplicationJSONResponseBody22:
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody22,
): string {
  return JSON.stringify(
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody22$outboundSchema
      .parse(getV2LogsIdEvalsResponse200ApplicationJSONResponseBody22),
  );
}

export function getV2LogsIdEvalsResponse200ApplicationJSONResponseBody22FromJSON(
  jsonString: string,
): SafeParseResult<
  GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody22,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody22$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody22' from JSON`,
  );
}

/** @internal */
export const GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody2EvalsType$inboundSchema:
  z.ZodNativeEnum<
    typeof GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody2EvalsType
  > = z.nativeEnum(
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody2EvalsType,
  );

/** @internal */
export const GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody2EvalsType$outboundSchema:
  z.ZodNativeEnum<
    typeof GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody2EvalsType
  > =
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody2EvalsType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody2EvalsType$ {
  /** @deprecated use `GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody2EvalsType$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody2EvalsType$inboundSchema;
  /** @deprecated use `GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody2EvalsType$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody2EvalsType$outboundSchema;
}

/** @internal */
export const GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody2EvalsStatus$inboundSchema:
  z.ZodNativeEnum<
    typeof GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody2EvalsStatus
  > = z.nativeEnum(
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody2EvalsStatus,
  );

/** @internal */
export const GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody2EvalsStatus$outboundSchema:
  z.ZodNativeEnum<
    typeof GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody2EvalsStatus
  > =
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody2EvalsStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody2EvalsStatus$ {
  /** @deprecated use `GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody2EvalsStatus$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody2EvalsStatus$inboundSchema;
  /** @deprecated use `GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody2EvalsStatus$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody2EvalsStatus$outboundSchema;
}

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRunEvals14Type$inboundSchema:
  z.ZodNativeEnum<
    typeof GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRunEvals14Type
  > = z.nativeEnum(
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRunEvals14Type,
  );

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRunEvals14Type$outboundSchema:
  z.ZodNativeEnum<
    typeof GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRunEvals14Type
  > =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRunEvals14Type$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRunEvals14Type$ {
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRunEvals14Type$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRunEvals14Type$inboundSchema;
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRunEvals14Type$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRunEvals14Type$outboundSchema;
}

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRunEvals14$inboundSchema:
  z.ZodType<
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRunEvals14,
    z.ZodTypeDef,
    unknown
  > = z.object({
    type:
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRunEvals14Type$inboundSchema,
    evaluator_id: z.string(),
  }).transform((v) => {
    return remap$(v, {
      "evaluator_id": "evaluatorId",
    });
  });

/** @internal */
export type GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRunEvals14$Outbound =
  {
    type: string;
    evaluator_id: string;
  };

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRunEvals14$outboundSchema:
  z.ZodType<
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRunEvals14$Outbound,
    z.ZodTypeDef,
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRunEvals14
  > = z.object({
    type:
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRunEvals14Type$outboundSchema,
    evaluatorId: z.string(),
  }).transform((v) => {
    return remap$(v, {
      evaluatorId: "evaluator_id",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRunEvals14$ {
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRunEvals14$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRunEvals14$inboundSchema;
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRunEvals14$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRunEvals14$outboundSchema;
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRunEvals14$Outbound` instead. */
  export type Outbound =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRunEvals14$Outbound;
}

export function getV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRunEvals14ToJSON(
  getV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRunEvals14:
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRunEvals14,
): string {
  return JSON.stringify(
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRunEvals14$outboundSchema
      .parse(
        getV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRunEvals14,
      ),
  );
}

export function getV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRunEvals14FromJSON(
  jsonString: string,
): SafeParseResult<
  GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRunEvals14,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRunEvals14$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRunEvals14' from JSON`,
  );
}

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRunEvals1Type$inboundSchema:
  z.ZodNativeEnum<
    typeof GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRunEvals1Type
  > = z.nativeEnum(
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRunEvals1Type,
  );

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRunEvals1Type$outboundSchema:
  z.ZodNativeEnum<
    typeof GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRunEvals1Type
  > =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRunEvals1Type$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRunEvals1Type$ {
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRunEvals1Type$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRunEvals1Type$inboundSchema;
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRunEvals1Type$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRunEvals1Type$outboundSchema;
}

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRunEvals13$inboundSchema:
  z.ZodType<
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRunEvals13,
    z.ZodTypeDef,
    unknown
  > = z.object({
    type:
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRunEvals1Type$inboundSchema,
    human_eval_id: z.string(),
  }).transform((v) => {
    return remap$(v, {
      "human_eval_id": "humanEvalId",
    });
  });

/** @internal */
export type GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRunEvals13$Outbound =
  {
    type: string;
    human_eval_id: string;
  };

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRunEvals13$outboundSchema:
  z.ZodType<
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRunEvals13$Outbound,
    z.ZodTypeDef,
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRunEvals13
  > = z.object({
    type:
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRunEvals1Type$outboundSchema,
    humanEvalId: z.string(),
  }).transform((v) => {
    return remap$(v, {
      humanEvalId: "human_eval_id",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRunEvals13$ {
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRunEvals13$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRunEvals13$inboundSchema;
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRunEvals13$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRunEvals13$outboundSchema;
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRunEvals13$Outbound` instead. */
  export type Outbound =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRunEvals13$Outbound;
}

export function getV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRunEvals13ToJSON(
  getV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRunEvals13:
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRunEvals13,
): string {
  return JSON.stringify(
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRunEvals13$outboundSchema
      .parse(
        getV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRunEvals13,
      ),
  );
}

export function getV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRunEvals13FromJSON(
  jsonString: string,
): SafeParseResult<
  GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRunEvals13,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRunEvals13$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRunEvals13' from JSON`,
  );
}

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRunEvalsType$inboundSchema:
  z.ZodNativeEnum<
    typeof GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRunEvalsType
  > = z.nativeEnum(
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRunEvalsType,
  );

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRunEvalsType$outboundSchema:
  z.ZodNativeEnum<
    typeof GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRunEvalsType
  > =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRunEvalsType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRunEvalsType$ {
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRunEvalsType$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRunEvalsType$inboundSchema;
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRunEvalsType$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRunEvalsType$outboundSchema;
}

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRunEvals12$inboundSchema:
  z.ZodType<
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRunEvals12,
    z.ZodTypeDef,
    unknown
  > = z.object({
    type:
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRunEvalsType$inboundSchema,
    contact_id: z.string(),
  }).transform((v) => {
    return remap$(v, {
      "contact_id": "contactId",
    });
  });

/** @internal */
export type GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRunEvals12$Outbound =
  {
    type: string;
    contact_id: string;
  };

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRunEvals12$outboundSchema:
  z.ZodType<
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRunEvals12$Outbound,
    z.ZodTypeDef,
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRunEvals12
  > = z.object({
    type:
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRunEvalsType$outboundSchema,
    contactId: z.string(),
  }).transform((v) => {
    return remap$(v, {
      contactId: "contact_id",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRunEvals12$ {
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRunEvals12$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRunEvals12$inboundSchema;
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRunEvals12$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRunEvals12$outboundSchema;
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRunEvals12$Outbound` instead. */
  export type Outbound =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRunEvals12$Outbound;
}

export function getV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRunEvals12ToJSON(
  getV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRunEvals12:
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRunEvals12,
): string {
  return JSON.stringify(
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRunEvals12$outboundSchema
      .parse(
        getV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRunEvals12,
      ),
  );
}

export function getV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRunEvals12FromJSON(
  jsonString: string,
): SafeParseResult<
  GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRunEvals12,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRunEvals12$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRunEvals12' from JSON`,
  );
}

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRunEvals11Type$inboundSchema:
  z.ZodNativeEnum<
    typeof GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRunEvals11Type
  > = z.nativeEnum(
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRunEvals11Type,
  );

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRunEvals11Type$outboundSchema:
  z.ZodNativeEnum<
    typeof GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRunEvals11Type
  > =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRunEvals11Type$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRunEvals11Type$ {
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRunEvals11Type$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRunEvals11Type$inboundSchema;
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRunEvals11Type$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRunEvals11Type$outboundSchema;
}

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRunEvals11$inboundSchema:
  z.ZodType<
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRunEvals11,
    z.ZodTypeDef,
    unknown
  > = z.object({
    type:
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRunEvals11Type$inboundSchema,
    account_id: z.string(),
  }).transform((v) => {
    return remap$(v, {
      "account_id": "accountId",
    });
  });

/** @internal */
export type GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRunEvals11$Outbound =
  {
    type: string;
    account_id: string;
  };

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRunEvals11$outboundSchema:
  z.ZodType<
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRunEvals11$Outbound,
    z.ZodTypeDef,
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRunEvals11
  > = z.object({
    type:
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRunEvals11Type$outboundSchema,
    accountId: z.string(),
  }).transform((v) => {
    return remap$(v, {
      accountId: "account_id",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRunEvals11$ {
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRunEvals11$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRunEvals11$inboundSchema;
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRunEvals11$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRunEvals11$outboundSchema;
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRunEvals11$Outbound` instead. */
  export type Outbound =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRunEvals11$Outbound;
}

export function getV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRunEvals11ToJSON(
  getV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRunEvals11:
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRunEvals11,
): string {
  return JSON.stringify(
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRunEvals11$outboundSchema
      .parse(
        getV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRunEvals11,
      ),
  );
}

export function getV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRunEvals11FromJSON(
  jsonString: string,
): SafeParseResult<
  GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRunEvals11,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRunEvals11$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRunEvals11' from JSON`,
  );
}

/** @internal */
export const GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody2EvalsRelatedEntities$inboundSchema:
  z.ZodType<
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody2EvalsRelatedEntities,
    z.ZodTypeDef,
    unknown
  > = z.union([
    z.lazy(() =>
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRunEvals11$inboundSchema
    ),
    z.lazy(() =>
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRunEvals12$inboundSchema
    ),
    z.lazy(() =>
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRunEvals13$inboundSchema
    ),
    z.lazy(() =>
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRunEvals14$inboundSchema
    ),
  ]);

/** @internal */
export type GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody2EvalsRelatedEntities$Outbound =
  | GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRunEvals11$Outbound
  | GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRunEvals12$Outbound
  | GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRunEvals13$Outbound
  | GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRunEvals14$Outbound;

/** @internal */
export const GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody2EvalsRelatedEntities$outboundSchema:
  z.ZodType<
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody2EvalsRelatedEntities$Outbound,
    z.ZodTypeDef,
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody2EvalsRelatedEntities
  > = z.union([
    z.lazy(() =>
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRunEvals11$outboundSchema
    ),
    z.lazy(() =>
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRunEvals12$outboundSchema
    ),
    z.lazy(() =>
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRunEvals13$outboundSchema
    ),
    z.lazy(() =>
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRunEvals14$outboundSchema
    ),
  ]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody2EvalsRelatedEntities$ {
  /** @deprecated use `GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody2EvalsRelatedEntities$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody2EvalsRelatedEntities$inboundSchema;
  /** @deprecated use `GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody2EvalsRelatedEntities$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody2EvalsRelatedEntities$outboundSchema;
  /** @deprecated use `GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody2EvalsRelatedEntities$Outbound` instead. */
  export type Outbound =
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody2EvalsRelatedEntities$Outbound;
}

export function getV2LogsIdEvalsResponse200ApplicationJSONResponseBody2EvalsRelatedEntitiesToJSON(
  getV2LogsIdEvalsResponse200ApplicationJSONResponseBody2EvalsRelatedEntities:
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody2EvalsRelatedEntities,
): string {
  return JSON.stringify(
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody2EvalsRelatedEntities$outboundSchema
      .parse(
        getV2LogsIdEvalsResponse200ApplicationJSONResponseBody2EvalsRelatedEntities,
      ),
  );
}

export function getV2LogsIdEvalsResponse200ApplicationJSONResponseBody2EvalsRelatedEntitiesFromJSON(
  jsonString: string,
): SafeParseResult<
  GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody2EvalsRelatedEntities,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody2EvalsRelatedEntities$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody2EvalsRelatedEntities' from JSON`,
  );
}

/** @internal */
export const GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody21$inboundSchema:
  z.ZodType<
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody21,
    z.ZodTypeDef,
    unknown
  > = z.object({
    type:
      GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody2EvalsType$inboundSchema,
    value: z.string(),
    id: z.string(),
    status:
      GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody2EvalsStatus$inboundSchema,
    timestamp: z.string().datetime({ offset: true }).transform(v =>
      new Date(v)
    ),
    related_entities: z.array(
      z.union([
        z.lazy(() =>
          GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRunEvals11$inboundSchema
        ),
        z.lazy(() =>
          GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRunEvals12$inboundSchema
        ),
        z.lazy(() =>
          GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRunEvals13$inboundSchema
        ),
        z.lazy(() =>
          GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRunEvals14$inboundSchema
        ),
      ]),
    ),
  }).transform((v) => {
    return remap$(v, {
      "related_entities": "relatedEntities",
    });
  });

/** @internal */
export type GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody21$Outbound =
  {
    type: string;
    value: string;
    id: string;
    status: string;
    timestamp: string;
    related_entities: Array<
      | GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRunEvals11$Outbound
      | GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRunEvals12$Outbound
      | GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRunEvals13$Outbound
      | GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRunEvals14$Outbound
    >;
  };

/** @internal */
export const GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody21$outboundSchema:
  z.ZodType<
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody21$Outbound,
    z.ZodTypeDef,
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody21
  > = z.object({
    type:
      GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody2EvalsType$outboundSchema,
    value: z.string(),
    id: z.string(),
    status:
      GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody2EvalsStatus$outboundSchema,
    timestamp: z.date().transform(v => v.toISOString()),
    relatedEntities: z.array(
      z.union([
        z.lazy(() =>
          GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRunEvals11$outboundSchema
        ),
        z.lazy(() =>
          GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRunEvals12$outboundSchema
        ),
        z.lazy(() =>
          GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRunEvals13$outboundSchema
        ),
        z.lazy(() =>
          GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRunEvals14$outboundSchema
        ),
      ]),
    ),
  }).transform((v) => {
    return remap$(v, {
      relatedEntities: "related_entities",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody21$ {
  /** @deprecated use `GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody21$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody21$inboundSchema;
  /** @deprecated use `GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody21$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody21$outboundSchema;
  /** @deprecated use `GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody21$Outbound` instead. */
  export type Outbound =
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody21$Outbound;
}

export function getV2LogsIdEvalsResponse200ApplicationJSONResponseBody21ToJSON(
  getV2LogsIdEvalsResponse200ApplicationJSONResponseBody21:
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody21,
): string {
  return JSON.stringify(
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody21$outboundSchema
      .parse(getV2LogsIdEvalsResponse200ApplicationJSONResponseBody21),
  );
}

export function getV2LogsIdEvalsResponse200ApplicationJSONResponseBody21FromJSON(
  jsonString: string,
): SafeParseResult<
  GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody21,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody21$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody21' from JSON`,
  );
}

/** @internal */
export const GetV2LogsIdEvalsEvals$inboundSchema: z.ZodType<
  GetV2LogsIdEvalsEvals,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() =>
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody21$inboundSchema
  ),
  z.lazy(() =>
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody22$inboundSchema
  ),
  z.lazy(() =>
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody23$inboundSchema
  ),
  z.lazy(() =>
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody24$inboundSchema
  ),
]);

/** @internal */
export type GetV2LogsIdEvalsEvals$Outbound =
  | GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody21$Outbound
  | GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody22$Outbound
  | GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody23$Outbound
  | GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody24$Outbound;

/** @internal */
export const GetV2LogsIdEvalsEvals$outboundSchema: z.ZodType<
  GetV2LogsIdEvalsEvals$Outbound,
  z.ZodTypeDef,
  GetV2LogsIdEvalsEvals
> = z.union([
  z.lazy(() =>
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody21$outboundSchema
  ),
  z.lazy(() =>
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody22$outboundSchema
  ),
  z.lazy(() =>
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody23$outboundSchema
  ),
  z.lazy(() =>
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody24$outboundSchema
  ),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdEvalsEvals$ {
  /** @deprecated use `GetV2LogsIdEvalsEvals$inboundSchema` instead. */
  export const inboundSchema = GetV2LogsIdEvalsEvals$inboundSchema;
  /** @deprecated use `GetV2LogsIdEvalsEvals$outboundSchema` instead. */
  export const outboundSchema = GetV2LogsIdEvalsEvals$outboundSchema;
  /** @deprecated use `GetV2LogsIdEvalsEvals$Outbound` instead. */
  export type Outbound = GetV2LogsIdEvalsEvals$Outbound;
}

export function getV2LogsIdEvalsEvalsToJSON(
  getV2LogsIdEvalsEvals: GetV2LogsIdEvalsEvals,
): string {
  return JSON.stringify(
    GetV2LogsIdEvalsEvals$outboundSchema.parse(getV2LogsIdEvalsEvals),
  );
}

export function getV2LogsIdEvalsEvalsFromJSON(
  jsonString: string,
): SafeParseResult<GetV2LogsIdEvalsEvals, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetV2LogsIdEvalsEvals$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetV2LogsIdEvalsEvals' from JSON`,
  );
}

/** @internal */
export const GetV2LogsIdMessageResponse200ApplicationJSONResponseBody2Role$inboundSchema:
  z.ZodNativeEnum<
    typeof GetV2LogsIdMessageResponse200ApplicationJSONResponseBody2Role
  > = z.nativeEnum(
    GetV2LogsIdMessageResponse200ApplicationJSONResponseBody2Role,
  );

/** @internal */
export const GetV2LogsIdMessageResponse200ApplicationJSONResponseBody2Role$outboundSchema:
  z.ZodNativeEnum<
    typeof GetV2LogsIdMessageResponse200ApplicationJSONResponseBody2Role
  > =
    GetV2LogsIdMessageResponse200ApplicationJSONResponseBody2Role$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdMessageResponse200ApplicationJSONResponseBody2Role$ {
  /** @deprecated use `GetV2LogsIdMessageResponse200ApplicationJSONResponseBody2Role$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsIdMessageResponse200ApplicationJSONResponseBody2Role$inboundSchema;
  /** @deprecated use `GetV2LogsIdMessageResponse200ApplicationJSONResponseBody2Role$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdMessageResponse200ApplicationJSONResponseBody2Role$outboundSchema;
}

/** @internal */
export const GetV2LogsIdMessageResponse200ApplicationJSONResponseBody3$inboundSchema:
  z.ZodType<
    GetV2LogsIdMessageResponse200ApplicationJSONResponseBody3,
    z.ZodTypeDef,
    unknown
  > = z.object({
    role:
      GetV2LogsIdMessageResponse200ApplicationJSONResponseBody2Role$inboundSchema,
    url: z.string(),
  });

/** @internal */
export type GetV2LogsIdMessageResponse200ApplicationJSONResponseBody3$Outbound =
  {
    role: string;
    url: string;
  };

/** @internal */
export const GetV2LogsIdMessageResponse200ApplicationJSONResponseBody3$outboundSchema:
  z.ZodType<
    GetV2LogsIdMessageResponse200ApplicationJSONResponseBody3$Outbound,
    z.ZodTypeDef,
    GetV2LogsIdMessageResponse200ApplicationJSONResponseBody3
  > = z.object({
    role:
      GetV2LogsIdMessageResponse200ApplicationJSONResponseBody2Role$outboundSchema,
    url: z.string(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdMessageResponse200ApplicationJSONResponseBody3$ {
  /** @deprecated use `GetV2LogsIdMessageResponse200ApplicationJSONResponseBody3$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsIdMessageResponse200ApplicationJSONResponseBody3$inboundSchema;
  /** @deprecated use `GetV2LogsIdMessageResponse200ApplicationJSONResponseBody3$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdMessageResponse200ApplicationJSONResponseBody3$outboundSchema;
  /** @deprecated use `GetV2LogsIdMessageResponse200ApplicationJSONResponseBody3$Outbound` instead. */
  export type Outbound =
    GetV2LogsIdMessageResponse200ApplicationJSONResponseBody3$Outbound;
}

export function getV2LogsIdMessageResponse200ApplicationJSONResponseBody3ToJSON(
  getV2LogsIdMessageResponse200ApplicationJSONResponseBody3:
    GetV2LogsIdMessageResponse200ApplicationJSONResponseBody3,
): string {
  return JSON.stringify(
    GetV2LogsIdMessageResponse200ApplicationJSONResponseBody3$outboundSchema
      .parse(getV2LogsIdMessageResponse200ApplicationJSONResponseBody3),
  );
}

export function getV2LogsIdMessageResponse200ApplicationJSONResponseBody3FromJSON(
  jsonString: string,
): SafeParseResult<
  GetV2LogsIdMessageResponse200ApplicationJSONResponseBody3,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetV2LogsIdMessageResponse200ApplicationJSONResponseBody3$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'GetV2LogsIdMessageResponse200ApplicationJSONResponseBody3' from JSON`,
  );
}

/** @internal */
export const GetV2LogsIdMessageResponse200ApplicationJSONResponseBody2Evals7Role$inboundSchema:
  z.ZodNativeEnum<
    typeof GetV2LogsIdMessageResponse200ApplicationJSONResponseBody2Evals7Role
  > = z.nativeEnum(
    GetV2LogsIdMessageResponse200ApplicationJSONResponseBody2Evals7Role,
  );

/** @internal */
export const GetV2LogsIdMessageResponse200ApplicationJSONResponseBody2Evals7Role$outboundSchema:
  z.ZodNativeEnum<
    typeof GetV2LogsIdMessageResponse200ApplicationJSONResponseBody2Evals7Role
  > =
    GetV2LogsIdMessageResponse200ApplicationJSONResponseBody2Evals7Role$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdMessageResponse200ApplicationJSONResponseBody2Evals7Role$ {
  /** @deprecated use `GetV2LogsIdMessageResponse200ApplicationJSONResponseBody2Evals7Role$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsIdMessageResponse200ApplicationJSONResponseBody2Evals7Role$inboundSchema;
  /** @deprecated use `GetV2LogsIdMessageResponse200ApplicationJSONResponseBody2Evals7Role$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdMessageResponse200ApplicationJSONResponseBody2Evals7Role$outboundSchema;
}

/** @internal */
export const GetV2LogsIdMessageResponse200ApplicationJSONResponseBody2$inboundSchema:
  z.ZodType<
    GetV2LogsIdMessageResponse200ApplicationJSONResponseBody2,
    z.ZodTypeDef,
    unknown
  > = z.object({
    role:
      GetV2LogsIdMessageResponse200ApplicationJSONResponseBody2Evals7Role$inboundSchema,
    content: z.nullable(z.string()),
  });

/** @internal */
export type GetV2LogsIdMessageResponse200ApplicationJSONResponseBody2$Outbound =
  {
    role: string;
    content: string | null;
  };

/** @internal */
export const GetV2LogsIdMessageResponse200ApplicationJSONResponseBody2$outboundSchema:
  z.ZodType<
    GetV2LogsIdMessageResponse200ApplicationJSONResponseBody2$Outbound,
    z.ZodTypeDef,
    GetV2LogsIdMessageResponse200ApplicationJSONResponseBody2
  > = z.object({
    role:
      GetV2LogsIdMessageResponse200ApplicationJSONResponseBody2Evals7Role$outboundSchema,
    content: z.nullable(z.string()),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdMessageResponse200ApplicationJSONResponseBody2$ {
  /** @deprecated use `GetV2LogsIdMessageResponse200ApplicationJSONResponseBody2$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsIdMessageResponse200ApplicationJSONResponseBody2$inboundSchema;
  /** @deprecated use `GetV2LogsIdMessageResponse200ApplicationJSONResponseBody2$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdMessageResponse200ApplicationJSONResponseBody2$outboundSchema;
  /** @deprecated use `GetV2LogsIdMessageResponse200ApplicationJSONResponseBody2$Outbound` instead. */
  export type Outbound =
    GetV2LogsIdMessageResponse200ApplicationJSONResponseBody2$Outbound;
}

export function getV2LogsIdMessageResponse200ApplicationJSONResponseBody2ToJSON(
  getV2LogsIdMessageResponse200ApplicationJSONResponseBody2:
    GetV2LogsIdMessageResponse200ApplicationJSONResponseBody2,
): string {
  return JSON.stringify(
    GetV2LogsIdMessageResponse200ApplicationJSONResponseBody2$outboundSchema
      .parse(getV2LogsIdMessageResponse200ApplicationJSONResponseBody2),
  );
}

export function getV2LogsIdMessageResponse200ApplicationJSONResponseBody2FromJSON(
  jsonString: string,
): SafeParseResult<
  GetV2LogsIdMessageResponse200ApplicationJSONResponseBody2,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetV2LogsIdMessageResponse200ApplicationJSONResponseBody2$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'GetV2LogsIdMessageResponse200ApplicationJSONResponseBody2' from JSON`,
  );
}

/** @internal */
export const GetV2LogsIdMessageResponse200ApplicationJSONResponseBody2EvalsRole$inboundSchema:
  z.ZodNativeEnum<
    typeof GetV2LogsIdMessageResponse200ApplicationJSONResponseBody2EvalsRole
  > = z.nativeEnum(
    GetV2LogsIdMessageResponse200ApplicationJSONResponseBody2EvalsRole,
  );

/** @internal */
export const GetV2LogsIdMessageResponse200ApplicationJSONResponseBody2EvalsRole$outboundSchema:
  z.ZodNativeEnum<
    typeof GetV2LogsIdMessageResponse200ApplicationJSONResponseBody2EvalsRole
  > =
    GetV2LogsIdMessageResponse200ApplicationJSONResponseBody2EvalsRole$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdMessageResponse200ApplicationJSONResponseBody2EvalsRole$ {
  /** @deprecated use `GetV2LogsIdMessageResponse200ApplicationJSONResponseBody2EvalsRole$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsIdMessageResponse200ApplicationJSONResponseBody2EvalsRole$inboundSchema;
  /** @deprecated use `GetV2LogsIdMessageResponse200ApplicationJSONResponseBody2EvalsRole$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdMessageResponse200ApplicationJSONResponseBody2EvalsRole$outboundSchema;
}

/** @internal */
export const GetV2LogsIdMessageResponse200ApplicationJSONResponseBodyType$inboundSchema:
  z.ZodNativeEnum<
    typeof GetV2LogsIdMessageResponse200ApplicationJSONResponseBodyType
  > = z.nativeEnum(
    GetV2LogsIdMessageResponse200ApplicationJSONResponseBodyType,
  );

/** @internal */
export const GetV2LogsIdMessageResponse200ApplicationJSONResponseBodyType$outboundSchema:
  z.ZodNativeEnum<
    typeof GetV2LogsIdMessageResponse200ApplicationJSONResponseBodyType
  > =
    GetV2LogsIdMessageResponse200ApplicationJSONResponseBodyType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdMessageResponse200ApplicationJSONResponseBodyType$ {
  /** @deprecated use `GetV2LogsIdMessageResponse200ApplicationJSONResponseBodyType$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsIdMessageResponse200ApplicationJSONResponseBodyType$inboundSchema;
  /** @deprecated use `GetV2LogsIdMessageResponse200ApplicationJSONResponseBodyType$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdMessageResponse200ApplicationJSONResponseBodyType$outboundSchema;
}

/** @internal */
export const GetV2LogsIdMessageResponse200ApplicationJSONResponseBodyFunction$inboundSchema:
  z.ZodType<
    GetV2LogsIdMessageResponse200ApplicationJSONResponseBodyFunction,
    z.ZodTypeDef,
    unknown
  > = z.object({
    name: z.string(),
    arguments: z.string(),
  });

/** @internal */
export type GetV2LogsIdMessageResponse200ApplicationJSONResponseBodyFunction$Outbound =
  {
    name: string;
    arguments: string;
  };

/** @internal */
export const GetV2LogsIdMessageResponse200ApplicationJSONResponseBodyFunction$outboundSchema:
  z.ZodType<
    GetV2LogsIdMessageResponse200ApplicationJSONResponseBodyFunction$Outbound,
    z.ZodTypeDef,
    GetV2LogsIdMessageResponse200ApplicationJSONResponseBodyFunction
  > = z.object({
    name: z.string(),
    arguments: z.string(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdMessageResponse200ApplicationJSONResponseBodyFunction$ {
  /** @deprecated use `GetV2LogsIdMessageResponse200ApplicationJSONResponseBodyFunction$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsIdMessageResponse200ApplicationJSONResponseBodyFunction$inboundSchema;
  /** @deprecated use `GetV2LogsIdMessageResponse200ApplicationJSONResponseBodyFunction$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdMessageResponse200ApplicationJSONResponseBodyFunction$outboundSchema;
  /** @deprecated use `GetV2LogsIdMessageResponse200ApplicationJSONResponseBodyFunction$Outbound` instead. */
  export type Outbound =
    GetV2LogsIdMessageResponse200ApplicationJSONResponseBodyFunction$Outbound;
}

export function getV2LogsIdMessageResponse200ApplicationJSONResponseBodyFunctionToJSON(
  getV2LogsIdMessageResponse200ApplicationJSONResponseBodyFunction:
    GetV2LogsIdMessageResponse200ApplicationJSONResponseBodyFunction,
): string {
  return JSON.stringify(
    GetV2LogsIdMessageResponse200ApplicationJSONResponseBodyFunction$outboundSchema
      .parse(getV2LogsIdMessageResponse200ApplicationJSONResponseBodyFunction),
  );
}

export function getV2LogsIdMessageResponse200ApplicationJSONResponseBodyFunctionFromJSON(
  jsonString: string,
): SafeParseResult<
  GetV2LogsIdMessageResponse200ApplicationJSONResponseBodyFunction,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetV2LogsIdMessageResponse200ApplicationJSONResponseBodyFunction$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'GetV2LogsIdMessageResponse200ApplicationJSONResponseBodyFunction' from JSON`,
  );
}

/** @internal */
export const GetV2LogsIdMessageResponse200ApplicationJSONResponseBodyToolCalls$inboundSchema:
  z.ZodType<
    GetV2LogsIdMessageResponse200ApplicationJSONResponseBodyToolCalls,
    z.ZodTypeDef,
    unknown
  > = z.object({
    id: z.string().optional(),
    index: z.number().optional(),
    type:
      GetV2LogsIdMessageResponse200ApplicationJSONResponseBodyType$inboundSchema,
    function: z.lazy(() =>
      GetV2LogsIdMessageResponse200ApplicationJSONResponseBodyFunction$inboundSchema
    ),
  });

/** @internal */
export type GetV2LogsIdMessageResponse200ApplicationJSONResponseBodyToolCalls$Outbound =
  {
    id?: string | undefined;
    index?: number | undefined;
    type: string;
    function:
      GetV2LogsIdMessageResponse200ApplicationJSONResponseBodyFunction$Outbound;
  };

/** @internal */
export const GetV2LogsIdMessageResponse200ApplicationJSONResponseBodyToolCalls$outboundSchema:
  z.ZodType<
    GetV2LogsIdMessageResponse200ApplicationJSONResponseBodyToolCalls$Outbound,
    z.ZodTypeDef,
    GetV2LogsIdMessageResponse200ApplicationJSONResponseBodyToolCalls
  > = z.object({
    id: z.string().optional(),
    index: z.number().optional(),
    type:
      GetV2LogsIdMessageResponse200ApplicationJSONResponseBodyType$outboundSchema,
    function: z.lazy(() =>
      GetV2LogsIdMessageResponse200ApplicationJSONResponseBodyFunction$outboundSchema
    ),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdMessageResponse200ApplicationJSONResponseBodyToolCalls$ {
  /** @deprecated use `GetV2LogsIdMessageResponse200ApplicationJSONResponseBodyToolCalls$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsIdMessageResponse200ApplicationJSONResponseBodyToolCalls$inboundSchema;
  /** @deprecated use `GetV2LogsIdMessageResponse200ApplicationJSONResponseBodyToolCalls$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdMessageResponse200ApplicationJSONResponseBodyToolCalls$outboundSchema;
  /** @deprecated use `GetV2LogsIdMessageResponse200ApplicationJSONResponseBodyToolCalls$Outbound` instead. */
  export type Outbound =
    GetV2LogsIdMessageResponse200ApplicationJSONResponseBodyToolCalls$Outbound;
}

export function getV2LogsIdMessageResponse200ApplicationJSONResponseBodyToolCallsToJSON(
  getV2LogsIdMessageResponse200ApplicationJSONResponseBodyToolCalls:
    GetV2LogsIdMessageResponse200ApplicationJSONResponseBodyToolCalls,
): string {
  return JSON.stringify(
    GetV2LogsIdMessageResponse200ApplicationJSONResponseBodyToolCalls$outboundSchema
      .parse(getV2LogsIdMessageResponse200ApplicationJSONResponseBodyToolCalls),
  );
}

export function getV2LogsIdMessageResponse200ApplicationJSONResponseBodyToolCallsFromJSON(
  jsonString: string,
): SafeParseResult<
  GetV2LogsIdMessageResponse200ApplicationJSONResponseBodyToolCalls,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetV2LogsIdMessageResponse200ApplicationJSONResponseBodyToolCalls$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'GetV2LogsIdMessageResponse200ApplicationJSONResponseBodyToolCalls' from JSON`,
  );
}

/** @internal */
export const GetV2LogsIdMessageResponse200ApplicationJSONResponseBody1$inboundSchema:
  z.ZodType<
    GetV2LogsIdMessageResponse200ApplicationJSONResponseBody1,
    z.ZodTypeDef,
    unknown
  > = z.object({
    role:
      GetV2LogsIdMessageResponse200ApplicationJSONResponseBody2EvalsRole$inboundSchema,
    content: z.nullable(z.string()).optional(),
    tool_calls: z.array(
      z.lazy(() =>
        GetV2LogsIdMessageResponse200ApplicationJSONResponseBodyToolCalls$inboundSchema
      ),
    ),
  }).transform((v) => {
    return remap$(v, {
      "tool_calls": "toolCalls",
    });
  });

/** @internal */
export type GetV2LogsIdMessageResponse200ApplicationJSONResponseBody1$Outbound =
  {
    role: string;
    content?: string | null | undefined;
    tool_calls: Array<
      GetV2LogsIdMessageResponse200ApplicationJSONResponseBodyToolCalls$Outbound
    >;
  };

/** @internal */
export const GetV2LogsIdMessageResponse200ApplicationJSONResponseBody1$outboundSchema:
  z.ZodType<
    GetV2LogsIdMessageResponse200ApplicationJSONResponseBody1$Outbound,
    z.ZodTypeDef,
    GetV2LogsIdMessageResponse200ApplicationJSONResponseBody1
  > = z.object({
    role:
      GetV2LogsIdMessageResponse200ApplicationJSONResponseBody2EvalsRole$outboundSchema,
    content: z.nullable(z.string()).optional(),
    toolCalls: z.array(
      z.lazy(() =>
        GetV2LogsIdMessageResponse200ApplicationJSONResponseBodyToolCalls$outboundSchema
      ),
    ),
  }).transform((v) => {
    return remap$(v, {
      toolCalls: "tool_calls",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdMessageResponse200ApplicationJSONResponseBody1$ {
  /** @deprecated use `GetV2LogsIdMessageResponse200ApplicationJSONResponseBody1$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsIdMessageResponse200ApplicationJSONResponseBody1$inboundSchema;
  /** @deprecated use `GetV2LogsIdMessageResponse200ApplicationJSONResponseBody1$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdMessageResponse200ApplicationJSONResponseBody1$outboundSchema;
  /** @deprecated use `GetV2LogsIdMessageResponse200ApplicationJSONResponseBody1$Outbound` instead. */
  export type Outbound =
    GetV2LogsIdMessageResponse200ApplicationJSONResponseBody1$Outbound;
}

export function getV2LogsIdMessageResponse200ApplicationJSONResponseBody1ToJSON(
  getV2LogsIdMessageResponse200ApplicationJSONResponseBody1:
    GetV2LogsIdMessageResponse200ApplicationJSONResponseBody1,
): string {
  return JSON.stringify(
    GetV2LogsIdMessageResponse200ApplicationJSONResponseBody1$outboundSchema
      .parse(getV2LogsIdMessageResponse200ApplicationJSONResponseBody1),
  );
}

export function getV2LogsIdMessageResponse200ApplicationJSONResponseBody1FromJSON(
  jsonString: string,
): SafeParseResult<
  GetV2LogsIdMessageResponse200ApplicationJSONResponseBody1,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetV2LogsIdMessageResponse200ApplicationJSONResponseBody1$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'GetV2LogsIdMessageResponse200ApplicationJSONResponseBody1' from JSON`,
  );
}

/** @internal */
export const GetV2LogsIdEvalsMessage$inboundSchema: z.ZodType<
  GetV2LogsIdEvalsMessage,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() =>
    GetV2LogsIdMessageResponse200ApplicationJSONResponseBody2$inboundSchema
  ),
  z.lazy(() =>
    GetV2LogsIdMessageResponse200ApplicationJSONResponseBody3$inboundSchema
  ),
  z.lazy(() =>
    GetV2LogsIdMessageResponse200ApplicationJSONResponseBody1$inboundSchema
  ),
]);

/** @internal */
export type GetV2LogsIdEvalsMessage$Outbound =
  | GetV2LogsIdMessageResponse200ApplicationJSONResponseBody2$Outbound
  | GetV2LogsIdMessageResponse200ApplicationJSONResponseBody3$Outbound
  | GetV2LogsIdMessageResponse200ApplicationJSONResponseBody1$Outbound;

/** @internal */
export const GetV2LogsIdEvalsMessage$outboundSchema: z.ZodType<
  GetV2LogsIdEvalsMessage$Outbound,
  z.ZodTypeDef,
  GetV2LogsIdEvalsMessage
> = z.union([
  z.lazy(() =>
    GetV2LogsIdMessageResponse200ApplicationJSONResponseBody2$outboundSchema
  ),
  z.lazy(() =>
    GetV2LogsIdMessageResponse200ApplicationJSONResponseBody3$outboundSchema
  ),
  z.lazy(() =>
    GetV2LogsIdMessageResponse200ApplicationJSONResponseBody1$outboundSchema
  ),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdEvalsMessage$ {
  /** @deprecated use `GetV2LogsIdEvalsMessage$inboundSchema` instead. */
  export const inboundSchema = GetV2LogsIdEvalsMessage$inboundSchema;
  /** @deprecated use `GetV2LogsIdEvalsMessage$outboundSchema` instead. */
  export const outboundSchema = GetV2LogsIdEvalsMessage$outboundSchema;
  /** @deprecated use `GetV2LogsIdEvalsMessage$Outbound` instead. */
  export type Outbound = GetV2LogsIdEvalsMessage$Outbound;
}

export function getV2LogsIdEvalsMessageToJSON(
  getV2LogsIdEvalsMessage: GetV2LogsIdEvalsMessage,
): string {
  return JSON.stringify(
    GetV2LogsIdEvalsMessage$outboundSchema.parse(getV2LogsIdEvalsMessage),
  );
}

export function getV2LogsIdEvalsMessageFromJSON(
  jsonString: string,
): SafeParseResult<GetV2LogsIdEvalsMessage, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetV2LogsIdEvalsMessage$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetV2LogsIdEvalsMessage' from JSON`,
  );
}

/** @internal */
export const GetV2LogsIdEvalsChoices$inboundSchema: z.ZodType<
  GetV2LogsIdEvalsChoices,
  z.ZodTypeDef,
  unknown
> = z.object({
  index: z.number(),
  message: z.union([
    z.lazy(() =>
      GetV2LogsIdMessageResponse200ApplicationJSONResponseBody2$inboundSchema
    ),
    z.lazy(() =>
      GetV2LogsIdMessageResponse200ApplicationJSONResponseBody3$inboundSchema
    ),
    z.lazy(() =>
      GetV2LogsIdMessageResponse200ApplicationJSONResponseBody1$inboundSchema
    ),
  ]).optional(),
  finish_reason: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    "finish_reason": "finishReason",
  });
});

/** @internal */
export type GetV2LogsIdEvalsChoices$Outbound = {
  index: number;
  message?:
    | GetV2LogsIdMessageResponse200ApplicationJSONResponseBody2$Outbound
    | GetV2LogsIdMessageResponse200ApplicationJSONResponseBody3$Outbound
    | GetV2LogsIdMessageResponse200ApplicationJSONResponseBody1$Outbound
    | undefined;
  finish_reason?: string | null | undefined;
};

/** @internal */
export const GetV2LogsIdEvalsChoices$outboundSchema: z.ZodType<
  GetV2LogsIdEvalsChoices$Outbound,
  z.ZodTypeDef,
  GetV2LogsIdEvalsChoices
> = z.object({
  index: z.number(),
  message: z.union([
    z.lazy(() =>
      GetV2LogsIdMessageResponse200ApplicationJSONResponseBody2$outboundSchema
    ),
    z.lazy(() =>
      GetV2LogsIdMessageResponse200ApplicationJSONResponseBody3$outboundSchema
    ),
    z.lazy(() =>
      GetV2LogsIdMessageResponse200ApplicationJSONResponseBody1$outboundSchema
    ),
  ]).optional(),
  finishReason: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    finishReason: "finish_reason",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdEvalsChoices$ {
  /** @deprecated use `GetV2LogsIdEvalsChoices$inboundSchema` instead. */
  export const inboundSchema = GetV2LogsIdEvalsChoices$inboundSchema;
  /** @deprecated use `GetV2LogsIdEvalsChoices$outboundSchema` instead. */
  export const outboundSchema = GetV2LogsIdEvalsChoices$outboundSchema;
  /** @deprecated use `GetV2LogsIdEvalsChoices$Outbound` instead. */
  export type Outbound = GetV2LogsIdEvalsChoices$Outbound;
}

export function getV2LogsIdEvalsChoicesToJSON(
  getV2LogsIdEvalsChoices: GetV2LogsIdEvalsChoices,
): string {
  return JSON.stringify(
    GetV2LogsIdEvalsChoices$outboundSchema.parse(getV2LogsIdEvalsChoices),
  );
}

export function getV2LogsIdEvalsChoicesFromJSON(
  jsonString: string,
): SafeParseResult<GetV2LogsIdEvalsChoices, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetV2LogsIdEvalsChoices$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetV2LogsIdEvalsChoices' from JSON`,
  );
}

/** @internal */
export const GetV2LogsIdEvalsAction$inboundSchema: z.ZodNativeEnum<
  typeof GetV2LogsIdEvalsAction
> = z.nativeEnum(GetV2LogsIdEvalsAction);

/** @internal */
export const GetV2LogsIdEvalsAction$outboundSchema: z.ZodNativeEnum<
  typeof GetV2LogsIdEvalsAction
> = GetV2LogsIdEvalsAction$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdEvalsAction$ {
  /** @deprecated use `GetV2LogsIdEvalsAction$inboundSchema` instead. */
  export const inboundSchema = GetV2LogsIdEvalsAction$inboundSchema;
  /** @deprecated use `GetV2LogsIdEvalsAction$outboundSchema` instead. */
  export const outboundSchema = GetV2LogsIdEvalsAction$outboundSchema;
}

/** @internal */
export const GetV2LogsIdEvalsModelType$inboundSchema: z.ZodNativeEnum<
  typeof GetV2LogsIdEvalsModelType
> = z.nativeEnum(GetV2LogsIdEvalsModelType);

/** @internal */
export const GetV2LogsIdEvalsModelType$outboundSchema: z.ZodNativeEnum<
  typeof GetV2LogsIdEvalsModelType
> = GetV2LogsIdEvalsModelType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdEvalsModelType$ {
  /** @deprecated use `GetV2LogsIdEvalsModelType$inboundSchema` instead. */
  export const inboundSchema = GetV2LogsIdEvalsModelType$inboundSchema;
  /** @deprecated use `GetV2LogsIdEvalsModelType$outboundSchema` instead. */
  export const outboundSchema = GetV2LogsIdEvalsModelType$outboundSchema;
}

/** @internal */
export const GetV2LogsIdEvalsFormat$inboundSchema: z.ZodNativeEnum<
  typeof GetV2LogsIdEvalsFormat
> = z.nativeEnum(GetV2LogsIdEvalsFormat);

/** @internal */
export const GetV2LogsIdEvalsFormat$outboundSchema: z.ZodNativeEnum<
  typeof GetV2LogsIdEvalsFormat
> = GetV2LogsIdEvalsFormat$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdEvalsFormat$ {
  /** @deprecated use `GetV2LogsIdEvalsFormat$inboundSchema` instead. */
  export const inboundSchema = GetV2LogsIdEvalsFormat$inboundSchema;
  /** @deprecated use `GetV2LogsIdEvalsFormat$outboundSchema` instead. */
  export const outboundSchema = GetV2LogsIdEvalsFormat$outboundSchema;
}

/** @internal */
export const GetV2LogsIdEvalsQuality$inboundSchema: z.ZodNativeEnum<
  typeof GetV2LogsIdEvalsQuality
> = z.nativeEnum(GetV2LogsIdEvalsQuality);

/** @internal */
export const GetV2LogsIdEvalsQuality$outboundSchema: z.ZodNativeEnum<
  typeof GetV2LogsIdEvalsQuality
> = GetV2LogsIdEvalsQuality$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdEvalsQuality$ {
  /** @deprecated use `GetV2LogsIdEvalsQuality$inboundSchema` instead. */
  export const inboundSchema = GetV2LogsIdEvalsQuality$inboundSchema;
  /** @deprecated use `GetV2LogsIdEvalsQuality$outboundSchema` instead. */
  export const outboundSchema = GetV2LogsIdEvalsQuality$outboundSchema;
}

/** @internal */
export const GetV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody2Evals7Type$inboundSchema:
  z.ZodNativeEnum<
    typeof GetV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody2Evals7Type
  > = z.nativeEnum(
    GetV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody2Evals7Type,
  );

/** @internal */
export const GetV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody2Evals7Type$outboundSchema:
  z.ZodNativeEnum<
    typeof GetV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody2Evals7Type
  > =
    GetV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody2Evals7Type$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody2Evals7Type$ {
  /** @deprecated use `GetV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody2Evals7Type$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody2Evals7Type$inboundSchema;
  /** @deprecated use `GetV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody2Evals7Type$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody2Evals7Type$outboundSchema;
}

/** @internal */
export const GetV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody22$inboundSchema:
  z.ZodType<
    GetV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody22,
    z.ZodTypeDef,
    unknown
  > = z.object({
    type:
      GetV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody2Evals7Type$inboundSchema,
  });

/** @internal */
export type GetV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody22$Outbound =
  {
    type: string;
  };

/** @internal */
export const GetV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody22$outboundSchema:
  z.ZodType<
    GetV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody22$Outbound,
    z.ZodTypeDef,
    GetV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody22
  > = z.object({
    type:
      GetV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody2Evals7Type$outboundSchema,
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody22$ {
  /** @deprecated use `GetV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody22$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody22$inboundSchema;
  /** @deprecated use `GetV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody22$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody22$outboundSchema;
  /** @deprecated use `GetV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody22$Outbound` instead. */
  export type Outbound =
    GetV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody22$Outbound;
}

export function getV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody22ToJSON(
  getV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody22:
    GetV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody22,
): string {
  return JSON.stringify(
    GetV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody22$outboundSchema
      .parse(getV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody22),
  );
}

export function getV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody22FromJSON(
  jsonString: string,
): SafeParseResult<
  GetV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody22,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody22$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'GetV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody22' from JSON`,
  );
}

/** @internal */
export const GetV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody2EvalsType$inboundSchema:
  z.ZodNativeEnum<
    typeof GetV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody2EvalsType
  > = z.nativeEnum(
    GetV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody2EvalsType,
  );

/** @internal */
export const GetV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody2EvalsType$outboundSchema:
  z.ZodNativeEnum<
    typeof GetV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody2EvalsType
  > =
    GetV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody2EvalsType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody2EvalsType$ {
  /** @deprecated use `GetV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody2EvalsType$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody2EvalsType$inboundSchema;
  /** @deprecated use `GetV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody2EvalsType$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody2EvalsType$outboundSchema;
}

/** @internal */
export const GetV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody2JSONSchema$inboundSchema:
  z.ZodType<
    GetV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody2JSONSchema,
    z.ZodTypeDef,
    unknown
  > = z.object({
    name: z.string(),
    strict: z.boolean(),
    schema: z.record(z.any()),
  });

/** @internal */
export type GetV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody2JSONSchema$Outbound =
  {
    name: string;
    strict: boolean;
    schema: { [k: string]: any };
  };

/** @internal */
export const GetV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody2JSONSchema$outboundSchema:
  z.ZodType<
    GetV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody2JSONSchema$Outbound,
    z.ZodTypeDef,
    GetV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody2JSONSchema
  > = z.object({
    name: z.string(),
    strict: z.boolean(),
    schema: z.record(z.any()),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody2JSONSchema$ {
  /** @deprecated use `GetV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody2JSONSchema$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody2JSONSchema$inboundSchema;
  /** @deprecated use `GetV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody2JSONSchema$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody2JSONSchema$outboundSchema;
  /** @deprecated use `GetV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody2JSONSchema$Outbound` instead. */
  export type Outbound =
    GetV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody2JSONSchema$Outbound;
}

export function getV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody2JSONSchemaToJSON(
  getV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody2JSONSchema:
    GetV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody2JSONSchema,
): string {
  return JSON.stringify(
    GetV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody2JSONSchema$outboundSchema
      .parse(
        getV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody2JSONSchema,
      ),
  );
}

export function getV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody2JSONSchemaFromJSON(
  jsonString: string,
): SafeParseResult<
  GetV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody2JSONSchema,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody2JSONSchema$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'GetV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody2JSONSchema' from JSON`,
  );
}

/** @internal */
export const GetV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody21$inboundSchema:
  z.ZodType<
    GetV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody21,
    z.ZodTypeDef,
    unknown
  > = z.object({
    type:
      GetV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody2EvalsType$inboundSchema,
    json_schema: z.lazy(() =>
      GetV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody2JSONSchema$inboundSchema
    ),
  }).transform((v) => {
    return remap$(v, {
      "json_schema": "jsonSchema",
    });
  });

/** @internal */
export type GetV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody21$Outbound =
  {
    type: string;
    json_schema:
      GetV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody2JSONSchema$Outbound;
  };

/** @internal */
export const GetV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody21$outboundSchema:
  z.ZodType<
    GetV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody21$Outbound,
    z.ZodTypeDef,
    GetV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody21
  > = z.object({
    type:
      GetV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody2EvalsType$outboundSchema,
    jsonSchema: z.lazy(() =>
      GetV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody2JSONSchema$outboundSchema
    ),
  }).transform((v) => {
    return remap$(v, {
      jsonSchema: "json_schema",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody21$ {
  /** @deprecated use `GetV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody21$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody21$inboundSchema;
  /** @deprecated use `GetV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody21$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody21$outboundSchema;
  /** @deprecated use `GetV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody21$Outbound` instead. */
  export type Outbound =
    GetV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody21$Outbound;
}

export function getV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody21ToJSON(
  getV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody21:
    GetV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody21,
): string {
  return JSON.stringify(
    GetV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody21$outboundSchema
      .parse(getV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody21),
  );
}

export function getV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody21FromJSON(
  jsonString: string,
): SafeParseResult<
  GetV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody21,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody21$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'GetV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody21' from JSON`,
  );
}

/** @internal */
export const GetV2LogsIdEvalsResponseFormat$inboundSchema: z.ZodType<
  GetV2LogsIdEvalsResponseFormat,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() =>
    GetV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody22$inboundSchema
  ),
  z.lazy(() =>
    GetV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody21$inboundSchema
  ),
]);

/** @internal */
export type GetV2LogsIdEvalsResponseFormat$Outbound =
  | GetV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody22$Outbound
  | GetV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody21$Outbound;

/** @internal */
export const GetV2LogsIdEvalsResponseFormat$outboundSchema: z.ZodType<
  GetV2LogsIdEvalsResponseFormat$Outbound,
  z.ZodTypeDef,
  GetV2LogsIdEvalsResponseFormat
> = z.union([
  z.lazy(() =>
    GetV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody22$outboundSchema
  ),
  z.lazy(() =>
    GetV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody21$outboundSchema
  ),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdEvalsResponseFormat$ {
  /** @deprecated use `GetV2LogsIdEvalsResponseFormat$inboundSchema` instead. */
  export const inboundSchema = GetV2LogsIdEvalsResponseFormat$inboundSchema;
  /** @deprecated use `GetV2LogsIdEvalsResponseFormat$outboundSchema` instead. */
  export const outboundSchema = GetV2LogsIdEvalsResponseFormat$outboundSchema;
  /** @deprecated use `GetV2LogsIdEvalsResponseFormat$Outbound` instead. */
  export type Outbound = GetV2LogsIdEvalsResponseFormat$Outbound;
}

export function getV2LogsIdEvalsResponseFormatToJSON(
  getV2LogsIdEvalsResponseFormat: GetV2LogsIdEvalsResponseFormat,
): string {
  return JSON.stringify(
    GetV2LogsIdEvalsResponseFormat$outboundSchema.parse(
      getV2LogsIdEvalsResponseFormat,
    ),
  );
}

export function getV2LogsIdEvalsResponseFormatFromJSON(
  jsonString: string,
): SafeParseResult<GetV2LogsIdEvalsResponseFormat, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetV2LogsIdEvalsResponseFormat$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetV2LogsIdEvalsResponseFormat' from JSON`,
  );
}

/** @internal */
export const GetV2LogsIdEvalsPhotoRealVersion$inboundSchema: z.ZodNativeEnum<
  typeof GetV2LogsIdEvalsPhotoRealVersion
> = z.nativeEnum(GetV2LogsIdEvalsPhotoRealVersion);

/** @internal */
export const GetV2LogsIdEvalsPhotoRealVersion$outboundSchema: z.ZodNativeEnum<
  typeof GetV2LogsIdEvalsPhotoRealVersion
> = GetV2LogsIdEvalsPhotoRealVersion$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdEvalsPhotoRealVersion$ {
  /** @deprecated use `GetV2LogsIdEvalsPhotoRealVersion$inboundSchema` instead. */
  export const inboundSchema = GetV2LogsIdEvalsPhotoRealVersion$inboundSchema;
  /** @deprecated use `GetV2LogsIdEvalsPhotoRealVersion$outboundSchema` instead. */
  export const outboundSchema = GetV2LogsIdEvalsPhotoRealVersion$outboundSchema;
}

/** @internal */
export const GetV2LogsIdEvalsEncodingFormat$inboundSchema: z.ZodNativeEnum<
  typeof GetV2LogsIdEvalsEncodingFormat
> = z.nativeEnum(GetV2LogsIdEvalsEncodingFormat);

/** @internal */
export const GetV2LogsIdEvalsEncodingFormat$outboundSchema: z.ZodNativeEnum<
  typeof GetV2LogsIdEvalsEncodingFormat
> = GetV2LogsIdEvalsEncodingFormat$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdEvalsEncodingFormat$ {
  /** @deprecated use `GetV2LogsIdEvalsEncodingFormat$inboundSchema` instead. */
  export const inboundSchema = GetV2LogsIdEvalsEncodingFormat$inboundSchema;
  /** @deprecated use `GetV2LogsIdEvalsEncodingFormat$outboundSchema` instead. */
  export const outboundSchema = GetV2LogsIdEvalsEncodingFormat$outboundSchema;
}

/** @internal */
export const GetV2LogsIdEvalsModelParameters$inboundSchema: z.ZodType<
  GetV2LogsIdEvalsModelParameters,
  z.ZodTypeDef,
  unknown
> = z.object({
  temperature: z.number().optional(),
  maxTokens: z.number().optional(),
  topK: z.number().optional(),
  topP: z.number().optional(),
  frequencyPenalty: z.number().optional(),
  presencePenalty: z.number().optional(),
  numImages: z.number().optional(),
  seed: z.number().optional(),
  format: GetV2LogsIdEvalsFormat$inboundSchema.optional(),
  dimensions: z.string().optional(),
  quality: GetV2LogsIdEvalsQuality$inboundSchema.optional(),
  style: z.string().optional(),
  responseFormat: z.nullable(
    z.union([
      z.lazy(() =>
        GetV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody22$inboundSchema
      ),
      z.lazy(() =>
        GetV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody21$inboundSchema
      ),
    ]),
  ).optional(),
  photoRealVersion: GetV2LogsIdEvalsPhotoRealVersion$inboundSchema.optional(),
  encoding_format: GetV2LogsIdEvalsEncodingFormat$inboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    "encoding_format": "encodingFormat",
  });
});

/** @internal */
export type GetV2LogsIdEvalsModelParameters$Outbound = {
  temperature?: number | undefined;
  maxTokens?: number | undefined;
  topK?: number | undefined;
  topP?: number | undefined;
  frequencyPenalty?: number | undefined;
  presencePenalty?: number | undefined;
  numImages?: number | undefined;
  seed?: number | undefined;
  format?: string | undefined;
  dimensions?: string | undefined;
  quality?: string | undefined;
  style?: string | undefined;
  responseFormat?:
    | GetV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody22$Outbound
    | GetV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody21$Outbound
    | null
    | undefined;
  photoRealVersion?: string | undefined;
  encoding_format?: string | undefined;
};

/** @internal */
export const GetV2LogsIdEvalsModelParameters$outboundSchema: z.ZodType<
  GetV2LogsIdEvalsModelParameters$Outbound,
  z.ZodTypeDef,
  GetV2LogsIdEvalsModelParameters
> = z.object({
  temperature: z.number().optional(),
  maxTokens: z.number().optional(),
  topK: z.number().optional(),
  topP: z.number().optional(),
  frequencyPenalty: z.number().optional(),
  presencePenalty: z.number().optional(),
  numImages: z.number().optional(),
  seed: z.number().optional(),
  format: GetV2LogsIdEvalsFormat$outboundSchema.optional(),
  dimensions: z.string().optional(),
  quality: GetV2LogsIdEvalsQuality$outboundSchema.optional(),
  style: z.string().optional(),
  responseFormat: z.nullable(
    z.union([
      z.lazy(() =>
        GetV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody22$outboundSchema
      ),
      z.lazy(() =>
        GetV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody21$outboundSchema
      ),
    ]),
  ).optional(),
  photoRealVersion: GetV2LogsIdEvalsPhotoRealVersion$outboundSchema.optional(),
  encodingFormat: GetV2LogsIdEvalsEncodingFormat$outboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    encodingFormat: "encoding_format",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdEvalsModelParameters$ {
  /** @deprecated use `GetV2LogsIdEvalsModelParameters$inboundSchema` instead. */
  export const inboundSchema = GetV2LogsIdEvalsModelParameters$inboundSchema;
  /** @deprecated use `GetV2LogsIdEvalsModelParameters$outboundSchema` instead. */
  export const outboundSchema = GetV2LogsIdEvalsModelParameters$outboundSchema;
  /** @deprecated use `GetV2LogsIdEvalsModelParameters$Outbound` instead. */
  export type Outbound = GetV2LogsIdEvalsModelParameters$Outbound;
}

export function getV2LogsIdEvalsModelParametersToJSON(
  getV2LogsIdEvalsModelParameters: GetV2LogsIdEvalsModelParameters,
): string {
  return JSON.stringify(
    GetV2LogsIdEvalsModelParameters$outboundSchema.parse(
      getV2LogsIdEvalsModelParameters,
    ),
  );
}

export function getV2LogsIdEvalsModelParametersFromJSON(
  jsonString: string,
): SafeParseResult<GetV2LogsIdEvalsModelParameters, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetV2LogsIdEvalsModelParameters$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetV2LogsIdEvalsModelParameters' from JSON`,
  );
}

/** @internal */
export const GetV2LogsIdEvalsProvider$inboundSchema: z.ZodNativeEnum<
  typeof GetV2LogsIdEvalsProvider
> = z.nativeEnum(GetV2LogsIdEvalsProvider);

/** @internal */
export const GetV2LogsIdEvalsProvider$outboundSchema: z.ZodNativeEnum<
  typeof GetV2LogsIdEvalsProvider
> = GetV2LogsIdEvalsProvider$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdEvalsProvider$ {
  /** @deprecated use `GetV2LogsIdEvalsProvider$inboundSchema` instead. */
  export const inboundSchema = GetV2LogsIdEvalsProvider$inboundSchema;
  /** @deprecated use `GetV2LogsIdEvalsProvider$outboundSchema` instead. */
  export const outboundSchema = GetV2LogsIdEvalsProvider$outboundSchema;
}

/** @internal */
export const GetV2LogsIdEvalsRole$inboundSchema: z.ZodNativeEnum<
  typeof GetV2LogsIdEvalsRole
> = z.nativeEnum(GetV2LogsIdEvalsRole);

/** @internal */
export const GetV2LogsIdEvalsRole$outboundSchema: z.ZodNativeEnum<
  typeof GetV2LogsIdEvalsRole
> = GetV2LogsIdEvalsRole$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdEvalsRole$ {
  /** @deprecated use `GetV2LogsIdEvalsRole$inboundSchema` instead. */
  export const inboundSchema = GetV2LogsIdEvalsRole$inboundSchema;
  /** @deprecated use `GetV2LogsIdEvalsRole$outboundSchema` instead. */
  export const outboundSchema = GetV2LogsIdEvalsRole$outboundSchema;
}

/** @internal */
export const GetV2LogsId2Response200ApplicationJSONResponseBody2EvalsType$inboundSchema:
  z.ZodNativeEnum<
    typeof GetV2LogsId2Response200ApplicationJSONResponseBody2EvalsType
  > = z.nativeEnum(
    GetV2LogsId2Response200ApplicationJSONResponseBody2EvalsType,
  );

/** @internal */
export const GetV2LogsId2Response200ApplicationJSONResponseBody2EvalsType$outboundSchema:
  z.ZodNativeEnum<
    typeof GetV2LogsId2Response200ApplicationJSONResponseBody2EvalsType
  > =
    GetV2LogsId2Response200ApplicationJSONResponseBody2EvalsType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsId2Response200ApplicationJSONResponseBody2EvalsType$ {
  /** @deprecated use `GetV2LogsId2Response200ApplicationJSONResponseBody2EvalsType$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsId2Response200ApplicationJSONResponseBody2EvalsType$inboundSchema;
  /** @deprecated use `GetV2LogsId2Response200ApplicationJSONResponseBody2EvalsType$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsId2Response200ApplicationJSONResponseBody2EvalsType$outboundSchema;
}

/** @internal */
export const GetV2LogsId2Response200ApplicationJSONResponseBodyImageUrl$inboundSchema:
  z.ZodType<
    GetV2LogsId2Response200ApplicationJSONResponseBodyImageUrl,
    z.ZodTypeDef,
    unknown
  > = z.object({
    id: z.string().optional(),
    url: z.string(),
    detail: z.string().optional(),
  });

/** @internal */
export type GetV2LogsId2Response200ApplicationJSONResponseBodyImageUrl$Outbound =
  {
    id?: string | undefined;
    url: string;
    detail?: string | undefined;
  };

/** @internal */
export const GetV2LogsId2Response200ApplicationJSONResponseBodyImageUrl$outboundSchema:
  z.ZodType<
    GetV2LogsId2Response200ApplicationJSONResponseBodyImageUrl$Outbound,
    z.ZodTypeDef,
    GetV2LogsId2Response200ApplicationJSONResponseBodyImageUrl
  > = z.object({
    id: z.string().optional(),
    url: z.string(),
    detail: z.string().optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsId2Response200ApplicationJSONResponseBodyImageUrl$ {
  /** @deprecated use `GetV2LogsId2Response200ApplicationJSONResponseBodyImageUrl$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsId2Response200ApplicationJSONResponseBodyImageUrl$inboundSchema;
  /** @deprecated use `GetV2LogsId2Response200ApplicationJSONResponseBodyImageUrl$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsId2Response200ApplicationJSONResponseBodyImageUrl$outboundSchema;
  /** @deprecated use `GetV2LogsId2Response200ApplicationJSONResponseBodyImageUrl$Outbound` instead. */
  export type Outbound =
    GetV2LogsId2Response200ApplicationJSONResponseBodyImageUrl$Outbound;
}

export function getV2LogsId2Response200ApplicationJSONResponseBodyImageUrlToJSON(
  getV2LogsId2Response200ApplicationJSONResponseBodyImageUrl:
    GetV2LogsId2Response200ApplicationJSONResponseBodyImageUrl,
): string {
  return JSON.stringify(
    GetV2LogsId2Response200ApplicationJSONResponseBodyImageUrl$outboundSchema
      .parse(getV2LogsId2Response200ApplicationJSONResponseBodyImageUrl),
  );
}

export function getV2LogsId2Response200ApplicationJSONResponseBodyImageUrlFromJSON(
  jsonString: string,
): SafeParseResult<
  GetV2LogsId2Response200ApplicationJSONResponseBodyImageUrl,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetV2LogsId2Response200ApplicationJSONResponseBodyImageUrl$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'GetV2LogsId2Response200ApplicationJSONResponseBodyImageUrl' from JSON`,
  );
}

/** @internal */
export const GetV2LogsId2Response200ApplicationJSONResponseBody2$inboundSchema:
  z.ZodType<
    GetV2LogsId2Response200ApplicationJSONResponseBody2,
    z.ZodTypeDef,
    unknown
  > = z.object({
    type:
      GetV2LogsId2Response200ApplicationJSONResponseBody2EvalsType$inboundSchema,
    image_url: z.lazy(() =>
      GetV2LogsId2Response200ApplicationJSONResponseBodyImageUrl$inboundSchema
    ),
  }).transform((v) => {
    return remap$(v, {
      "image_url": "imageUrl",
    });
  });

/** @internal */
export type GetV2LogsId2Response200ApplicationJSONResponseBody2$Outbound = {
  type: string;
  image_url:
    GetV2LogsId2Response200ApplicationJSONResponseBodyImageUrl$Outbound;
};

/** @internal */
export const GetV2LogsId2Response200ApplicationJSONResponseBody2$outboundSchema:
  z.ZodType<
    GetV2LogsId2Response200ApplicationJSONResponseBody2$Outbound,
    z.ZodTypeDef,
    GetV2LogsId2Response200ApplicationJSONResponseBody2
  > = z.object({
    type:
      GetV2LogsId2Response200ApplicationJSONResponseBody2EvalsType$outboundSchema,
    imageUrl: z.lazy(() =>
      GetV2LogsId2Response200ApplicationJSONResponseBodyImageUrl$outboundSchema
    ),
  }).transform((v) => {
    return remap$(v, {
      imageUrl: "image_url",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsId2Response200ApplicationJSONResponseBody2$ {
  /** @deprecated use `GetV2LogsId2Response200ApplicationJSONResponseBody2$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsId2Response200ApplicationJSONResponseBody2$inboundSchema;
  /** @deprecated use `GetV2LogsId2Response200ApplicationJSONResponseBody2$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsId2Response200ApplicationJSONResponseBody2$outboundSchema;
  /** @deprecated use `GetV2LogsId2Response200ApplicationJSONResponseBody2$Outbound` instead. */
  export type Outbound =
    GetV2LogsId2Response200ApplicationJSONResponseBody2$Outbound;
}

export function getV2LogsId2Response200ApplicationJSONResponseBody2ToJSON(
  getV2LogsId2Response200ApplicationJSONResponseBody2:
    GetV2LogsId2Response200ApplicationJSONResponseBody2,
): string {
  return JSON.stringify(
    GetV2LogsId2Response200ApplicationJSONResponseBody2$outboundSchema.parse(
      getV2LogsId2Response200ApplicationJSONResponseBody2,
    ),
  );
}

export function getV2LogsId2Response200ApplicationJSONResponseBody2FromJSON(
  jsonString: string,
): SafeParseResult<
  GetV2LogsId2Response200ApplicationJSONResponseBody2,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetV2LogsId2Response200ApplicationJSONResponseBody2$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'GetV2LogsId2Response200ApplicationJSONResponseBody2' from JSON`,
  );
}

/** @internal */
export const GetV2LogsId2Response200ApplicationJSONResponseBody2Type$inboundSchema:
  z.ZodNativeEnum<
    typeof GetV2LogsId2Response200ApplicationJSONResponseBody2Type
  > = z.nativeEnum(GetV2LogsId2Response200ApplicationJSONResponseBody2Type);

/** @internal */
export const GetV2LogsId2Response200ApplicationJSONResponseBody2Type$outboundSchema:
  z.ZodNativeEnum<
    typeof GetV2LogsId2Response200ApplicationJSONResponseBody2Type
  > = GetV2LogsId2Response200ApplicationJSONResponseBody2Type$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsId2Response200ApplicationJSONResponseBody2Type$ {
  /** @deprecated use `GetV2LogsId2Response200ApplicationJSONResponseBody2Type$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsId2Response200ApplicationJSONResponseBody2Type$inboundSchema;
  /** @deprecated use `GetV2LogsId2Response200ApplicationJSONResponseBody2Type$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsId2Response200ApplicationJSONResponseBody2Type$outboundSchema;
}

/** @internal */
export const GetV2LogsId2Response200ApplicationJSONResponseBody1$inboundSchema:
  z.ZodType<
    GetV2LogsId2Response200ApplicationJSONResponseBody1,
    z.ZodTypeDef,
    unknown
  > = z.object({
    type: GetV2LogsId2Response200ApplicationJSONResponseBody2Type$inboundSchema,
    text: z.string(),
  });

/** @internal */
export type GetV2LogsId2Response200ApplicationJSONResponseBody1$Outbound = {
  type: string;
  text: string;
};

/** @internal */
export const GetV2LogsId2Response200ApplicationJSONResponseBody1$outboundSchema:
  z.ZodType<
    GetV2LogsId2Response200ApplicationJSONResponseBody1$Outbound,
    z.ZodTypeDef,
    GetV2LogsId2Response200ApplicationJSONResponseBody1
  > = z.object({
    type:
      GetV2LogsId2Response200ApplicationJSONResponseBody2Type$outboundSchema,
    text: z.string(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsId2Response200ApplicationJSONResponseBody1$ {
  /** @deprecated use `GetV2LogsId2Response200ApplicationJSONResponseBody1$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsId2Response200ApplicationJSONResponseBody1$inboundSchema;
  /** @deprecated use `GetV2LogsId2Response200ApplicationJSONResponseBody1$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsId2Response200ApplicationJSONResponseBody1$outboundSchema;
  /** @deprecated use `GetV2LogsId2Response200ApplicationJSONResponseBody1$Outbound` instead. */
  export type Outbound =
    GetV2LogsId2Response200ApplicationJSONResponseBody1$Outbound;
}

export function getV2LogsId2Response200ApplicationJSONResponseBody1ToJSON(
  getV2LogsId2Response200ApplicationJSONResponseBody1:
    GetV2LogsId2Response200ApplicationJSONResponseBody1,
): string {
  return JSON.stringify(
    GetV2LogsId2Response200ApplicationJSONResponseBody1$outboundSchema.parse(
      getV2LogsId2Response200ApplicationJSONResponseBody1,
    ),
  );
}

export function getV2LogsId2Response200ApplicationJSONResponseBody1FromJSON(
  jsonString: string,
): SafeParseResult<
  GetV2LogsId2Response200ApplicationJSONResponseBody1,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetV2LogsId2Response200ApplicationJSONResponseBody1$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'GetV2LogsId2Response200ApplicationJSONResponseBody1' from JSON`,
  );
}

/** @internal */
export const GetV2LogsIdContentResponse200ApplicationJSONResponseBody2$inboundSchema:
  z.ZodType<
    GetV2LogsIdContentResponse200ApplicationJSONResponseBody2,
    z.ZodTypeDef,
    unknown
  > = z.union([
    z.lazy(() =>
      GetV2LogsId2Response200ApplicationJSONResponseBody1$inboundSchema
    ),
    z.lazy(() =>
      GetV2LogsId2Response200ApplicationJSONResponseBody2$inboundSchema
    ),
  ]);

/** @internal */
export type GetV2LogsIdContentResponse200ApplicationJSONResponseBody2$Outbound =
  | GetV2LogsId2Response200ApplicationJSONResponseBody1$Outbound
  | GetV2LogsId2Response200ApplicationJSONResponseBody2$Outbound;

/** @internal */
export const GetV2LogsIdContentResponse200ApplicationJSONResponseBody2$outboundSchema:
  z.ZodType<
    GetV2LogsIdContentResponse200ApplicationJSONResponseBody2$Outbound,
    z.ZodTypeDef,
    GetV2LogsIdContentResponse200ApplicationJSONResponseBody2
  > = z.union([
    z.lazy(() =>
      GetV2LogsId2Response200ApplicationJSONResponseBody1$outboundSchema
    ),
    z.lazy(() =>
      GetV2LogsId2Response200ApplicationJSONResponseBody2$outboundSchema
    ),
  ]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdContentResponse200ApplicationJSONResponseBody2$ {
  /** @deprecated use `GetV2LogsIdContentResponse200ApplicationJSONResponseBody2$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsIdContentResponse200ApplicationJSONResponseBody2$inboundSchema;
  /** @deprecated use `GetV2LogsIdContentResponse200ApplicationJSONResponseBody2$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdContentResponse200ApplicationJSONResponseBody2$outboundSchema;
  /** @deprecated use `GetV2LogsIdContentResponse200ApplicationJSONResponseBody2$Outbound` instead. */
  export type Outbound =
    GetV2LogsIdContentResponse200ApplicationJSONResponseBody2$Outbound;
}

export function getV2LogsIdContentResponse200ApplicationJSONResponseBody2ToJSON(
  getV2LogsIdContentResponse200ApplicationJSONResponseBody2:
    GetV2LogsIdContentResponse200ApplicationJSONResponseBody2,
): string {
  return JSON.stringify(
    GetV2LogsIdContentResponse200ApplicationJSONResponseBody2$outboundSchema
      .parse(getV2LogsIdContentResponse200ApplicationJSONResponseBody2),
  );
}

export function getV2LogsIdContentResponse200ApplicationJSONResponseBody2FromJSON(
  jsonString: string,
): SafeParseResult<
  GetV2LogsIdContentResponse200ApplicationJSONResponseBody2,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetV2LogsIdContentResponse200ApplicationJSONResponseBody2$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'GetV2LogsIdContentResponse200ApplicationJSONResponseBody2' from JSON`,
  );
}

/** @internal */
export const GetV2LogsIdEvalsContent$inboundSchema: z.ZodType<
  GetV2LogsIdEvalsContent,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.string(),
  z.array(z.union([
    z.lazy(() =>
      GetV2LogsId2Response200ApplicationJSONResponseBody1$inboundSchema
    ),
    z.lazy(() =>
      GetV2LogsId2Response200ApplicationJSONResponseBody2$inboundSchema
    ),
  ])),
]);

/** @internal */
export type GetV2LogsIdEvalsContent$Outbound =
  | string
  | Array<
    | GetV2LogsId2Response200ApplicationJSONResponseBody1$Outbound
    | GetV2LogsId2Response200ApplicationJSONResponseBody2$Outbound
  >;

/** @internal */
export const GetV2LogsIdEvalsContent$outboundSchema: z.ZodType<
  GetV2LogsIdEvalsContent$Outbound,
  z.ZodTypeDef,
  GetV2LogsIdEvalsContent
> = z.union([
  z.string(),
  z.array(z.union([
    z.lazy(() =>
      GetV2LogsId2Response200ApplicationJSONResponseBody1$outboundSchema
    ),
    z.lazy(() =>
      GetV2LogsId2Response200ApplicationJSONResponseBody2$outboundSchema
    ),
  ])),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdEvalsContent$ {
  /** @deprecated use `GetV2LogsIdEvalsContent$inboundSchema` instead. */
  export const inboundSchema = GetV2LogsIdEvalsContent$inboundSchema;
  /** @deprecated use `GetV2LogsIdEvalsContent$outboundSchema` instead. */
  export const outboundSchema = GetV2LogsIdEvalsContent$outboundSchema;
  /** @deprecated use `GetV2LogsIdEvalsContent$Outbound` instead. */
  export type Outbound = GetV2LogsIdEvalsContent$Outbound;
}

export function getV2LogsIdEvalsContentToJSON(
  getV2LogsIdEvalsContent: GetV2LogsIdEvalsContent,
): string {
  return JSON.stringify(
    GetV2LogsIdEvalsContent$outboundSchema.parse(getV2LogsIdEvalsContent),
  );
}

export function getV2LogsIdEvalsContentFromJSON(
  jsonString: string,
): SafeParseResult<GetV2LogsIdEvalsContent, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetV2LogsIdEvalsContent$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetV2LogsIdEvalsContent' from JSON`,
  );
}

/** @internal */
export const GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody27WorkflowRunDataType$inboundSchema:
  z.ZodNativeEnum<
    typeof GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody27WorkflowRunDataType
  > = z.nativeEnum(
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody27WorkflowRunDataType,
  );

/** @internal */
export const GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody27WorkflowRunDataType$outboundSchema:
  z.ZodNativeEnum<
    typeof GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody27WorkflowRunDataType
  > =
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody27WorkflowRunDataType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody27WorkflowRunDataType$ {
  /** @deprecated use `GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody27WorkflowRunDataType$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody27WorkflowRunDataType$inboundSchema;
  /** @deprecated use `GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody27WorkflowRunDataType$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody27WorkflowRunDataType$outboundSchema;
}

/** @internal */
export const GetV2LogsIdEvalsResponse200ApplicationJSONResponseBodyFunction$inboundSchema:
  z.ZodType<
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBodyFunction,
    z.ZodTypeDef,
    unknown
  > = z.object({
    name: z.string(),
    arguments: z.string(),
  });

/** @internal */
export type GetV2LogsIdEvalsResponse200ApplicationJSONResponseBodyFunction$Outbound =
  {
    name: string;
    arguments: string;
  };

/** @internal */
export const GetV2LogsIdEvalsResponse200ApplicationJSONResponseBodyFunction$outboundSchema:
  z.ZodType<
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBodyFunction$Outbound,
    z.ZodTypeDef,
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBodyFunction
  > = z.object({
    name: z.string(),
    arguments: z.string(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdEvalsResponse200ApplicationJSONResponseBodyFunction$ {
  /** @deprecated use `GetV2LogsIdEvalsResponse200ApplicationJSONResponseBodyFunction$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBodyFunction$inboundSchema;
  /** @deprecated use `GetV2LogsIdEvalsResponse200ApplicationJSONResponseBodyFunction$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBodyFunction$outboundSchema;
  /** @deprecated use `GetV2LogsIdEvalsResponse200ApplicationJSONResponseBodyFunction$Outbound` instead. */
  export type Outbound =
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBodyFunction$Outbound;
}

export function getV2LogsIdEvalsResponse200ApplicationJSONResponseBodyFunctionToJSON(
  getV2LogsIdEvalsResponse200ApplicationJSONResponseBodyFunction:
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBodyFunction,
): string {
  return JSON.stringify(
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBodyFunction$outboundSchema
      .parse(getV2LogsIdEvalsResponse200ApplicationJSONResponseBodyFunction),
  );
}

export function getV2LogsIdEvalsResponse200ApplicationJSONResponseBodyFunctionFromJSON(
  jsonString: string,
): SafeParseResult<
  GetV2LogsIdEvalsResponse200ApplicationJSONResponseBodyFunction,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetV2LogsIdEvalsResponse200ApplicationJSONResponseBodyFunction$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'GetV2LogsIdEvalsResponse200ApplicationJSONResponseBodyFunction' from JSON`,
  );
}

/** @internal */
export const GetV2LogsIdEvalsToolCalls$inboundSchema: z.ZodType<
  GetV2LogsIdEvalsToolCalls,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string().optional(),
  index: z.number().optional(),
  type:
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody27WorkflowRunDataType$inboundSchema,
  function: z.lazy(() =>
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBodyFunction$inboundSchema
  ),
});

/** @internal */
export type GetV2LogsIdEvalsToolCalls$Outbound = {
  id?: string | undefined;
  index?: number | undefined;
  type: string;
  function:
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBodyFunction$Outbound;
};

/** @internal */
export const GetV2LogsIdEvalsToolCalls$outboundSchema: z.ZodType<
  GetV2LogsIdEvalsToolCalls$Outbound,
  z.ZodTypeDef,
  GetV2LogsIdEvalsToolCalls
> = z.object({
  id: z.string().optional(),
  index: z.number().optional(),
  type:
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody27WorkflowRunDataType$outboundSchema,
  function: z.lazy(() =>
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBodyFunction$outboundSchema
  ),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdEvalsToolCalls$ {
  /** @deprecated use `GetV2LogsIdEvalsToolCalls$inboundSchema` instead. */
  export const inboundSchema = GetV2LogsIdEvalsToolCalls$inboundSchema;
  /** @deprecated use `GetV2LogsIdEvalsToolCalls$outboundSchema` instead. */
  export const outboundSchema = GetV2LogsIdEvalsToolCalls$outboundSchema;
  /** @deprecated use `GetV2LogsIdEvalsToolCalls$Outbound` instead. */
  export type Outbound = GetV2LogsIdEvalsToolCalls$Outbound;
}

export function getV2LogsIdEvalsToolCallsToJSON(
  getV2LogsIdEvalsToolCalls: GetV2LogsIdEvalsToolCalls,
): string {
  return JSON.stringify(
    GetV2LogsIdEvalsToolCalls$outboundSchema.parse(getV2LogsIdEvalsToolCalls),
  );
}

export function getV2LogsIdEvalsToolCallsFromJSON(
  jsonString: string,
): SafeParseResult<GetV2LogsIdEvalsToolCalls, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetV2LogsIdEvalsToolCalls$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetV2LogsIdEvalsToolCalls' from JSON`,
  );
}

/** @internal */
export const GetV2LogsIdEvalsMessages$inboundSchema: z.ZodType<
  GetV2LogsIdEvalsMessages,
  z.ZodTypeDef,
  unknown
> = z.object({
  role: GetV2LogsIdEvalsRole$inboundSchema,
  content: z.union([
    z.string(),
    z.array(z.union([
      z.lazy(() =>
        GetV2LogsId2Response200ApplicationJSONResponseBody1$inboundSchema
      ),
      z.lazy(() =>
        GetV2LogsId2Response200ApplicationJSONResponseBody2$inboundSchema
      ),
    ])),
  ]),
  tool_calls: z.array(z.lazy(() => GetV2LogsIdEvalsToolCalls$inboundSchema))
    .optional(),
  id: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "tool_calls": "toolCalls",
  });
});

/** @internal */
export type GetV2LogsIdEvalsMessages$Outbound = {
  role: string;
  content:
    | string
    | Array<
      | GetV2LogsId2Response200ApplicationJSONResponseBody1$Outbound
      | GetV2LogsId2Response200ApplicationJSONResponseBody2$Outbound
    >;
  tool_calls?: Array<GetV2LogsIdEvalsToolCalls$Outbound> | undefined;
  id?: string | undefined;
};

/** @internal */
export const GetV2LogsIdEvalsMessages$outboundSchema: z.ZodType<
  GetV2LogsIdEvalsMessages$Outbound,
  z.ZodTypeDef,
  GetV2LogsIdEvalsMessages
> = z.object({
  role: GetV2LogsIdEvalsRole$outboundSchema,
  content: z.union([
    z.string(),
    z.array(z.union([
      z.lazy(() =>
        GetV2LogsId2Response200ApplicationJSONResponseBody1$outboundSchema
      ),
      z.lazy(() =>
        GetV2LogsId2Response200ApplicationJSONResponseBody2$outboundSchema
      ),
    ])),
  ]),
  toolCalls: z.array(z.lazy(() => GetV2LogsIdEvalsToolCalls$outboundSchema))
    .optional(),
  id: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    toolCalls: "tool_calls",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdEvalsMessages$ {
  /** @deprecated use `GetV2LogsIdEvalsMessages$inboundSchema` instead. */
  export const inboundSchema = GetV2LogsIdEvalsMessages$inboundSchema;
  /** @deprecated use `GetV2LogsIdEvalsMessages$outboundSchema` instead. */
  export const outboundSchema = GetV2LogsIdEvalsMessages$outboundSchema;
  /** @deprecated use `GetV2LogsIdEvalsMessages$Outbound` instead. */
  export type Outbound = GetV2LogsIdEvalsMessages$Outbound;
}

export function getV2LogsIdEvalsMessagesToJSON(
  getV2LogsIdEvalsMessages: GetV2LogsIdEvalsMessages,
): string {
  return JSON.stringify(
    GetV2LogsIdEvalsMessages$outboundSchema.parse(getV2LogsIdEvalsMessages),
  );
}

export function getV2LogsIdEvalsMessagesFromJSON(
  jsonString: string,
): SafeParseResult<GetV2LogsIdEvalsMessages, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetV2LogsIdEvalsMessages$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetV2LogsIdEvalsMessages' from JSON`,
  );
}

/** @internal */
export const GetV2LogsIdEvalsPromptConfig$inboundSchema: z.ZodType<
  GetV2LogsIdEvalsPromptConfig,
  z.ZodTypeDef,
  unknown
> = z.object({
  stream: z.boolean(),
  model: z.string(),
  model_db_id: z.string(),
  model_type: GetV2LogsIdEvalsModelType$inboundSchema,
  model_parameters: z.lazy(() => GetV2LogsIdEvalsModelParameters$inboundSchema),
  provider: GetV2LogsIdEvalsProvider$inboundSchema,
  messages: z.array(z.lazy(() => GetV2LogsIdEvalsMessages$inboundSchema)),
  integration_id: z.nullable(z.string()).optional(),
  version: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "model_db_id": "modelDbId",
    "model_type": "modelType",
    "model_parameters": "modelParameters",
    "integration_id": "integrationId",
  });
});

/** @internal */
export type GetV2LogsIdEvalsPromptConfig$Outbound = {
  stream: boolean;
  model: string;
  model_db_id: string;
  model_type: string;
  model_parameters: GetV2LogsIdEvalsModelParameters$Outbound;
  provider: string;
  messages: Array<GetV2LogsIdEvalsMessages$Outbound>;
  integration_id?: string | null | undefined;
  version?: string | undefined;
};

/** @internal */
export const GetV2LogsIdEvalsPromptConfig$outboundSchema: z.ZodType<
  GetV2LogsIdEvalsPromptConfig$Outbound,
  z.ZodTypeDef,
  GetV2LogsIdEvalsPromptConfig
> = z.object({
  stream: z.boolean(),
  model: z.string(),
  modelDbId: z.string(),
  modelType: GetV2LogsIdEvalsModelType$outboundSchema,
  modelParameters: z.lazy(() => GetV2LogsIdEvalsModelParameters$outboundSchema),
  provider: GetV2LogsIdEvalsProvider$outboundSchema,
  messages: z.array(z.lazy(() => GetV2LogsIdEvalsMessages$outboundSchema)),
  integrationId: z.nullable(z.string()).optional(),
  version: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    modelDbId: "model_db_id",
    modelType: "model_type",
    modelParameters: "model_parameters",
    integrationId: "integration_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdEvalsPromptConfig$ {
  /** @deprecated use `GetV2LogsIdEvalsPromptConfig$inboundSchema` instead. */
  export const inboundSchema = GetV2LogsIdEvalsPromptConfig$inboundSchema;
  /** @deprecated use `GetV2LogsIdEvalsPromptConfig$outboundSchema` instead. */
  export const outboundSchema = GetV2LogsIdEvalsPromptConfig$outboundSchema;
  /** @deprecated use `GetV2LogsIdEvalsPromptConfig$Outbound` instead. */
  export type Outbound = GetV2LogsIdEvalsPromptConfig$Outbound;
}

export function getV2LogsIdEvalsPromptConfigToJSON(
  getV2LogsIdEvalsPromptConfig: GetV2LogsIdEvalsPromptConfig,
): string {
  return JSON.stringify(
    GetV2LogsIdEvalsPromptConfig$outboundSchema.parse(
      getV2LogsIdEvalsPromptConfig,
    ),
  );
}

export function getV2LogsIdEvalsPromptConfigFromJSON(
  jsonString: string,
): SafeParseResult<GetV2LogsIdEvalsPromptConfig, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetV2LogsIdEvalsPromptConfig$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetV2LogsIdEvalsPromptConfig' from JSON`,
  );
}

/** @internal */
export const GetV2LogsIdEvalsVariables$inboundSchema: z.ZodType<
  GetV2LogsIdEvalsVariables,
  z.ZodTypeDef,
  unknown
> = z.object({
  key: z.string(),
  value: z.any().optional(),
  is_pii: z.boolean().default(false),
}).transform((v) => {
  return remap$(v, {
    "is_pii": "isPii",
  });
});

/** @internal */
export type GetV2LogsIdEvalsVariables$Outbound = {
  key: string;
  value?: any | undefined;
  is_pii: boolean;
};

/** @internal */
export const GetV2LogsIdEvalsVariables$outboundSchema: z.ZodType<
  GetV2LogsIdEvalsVariables$Outbound,
  z.ZodTypeDef,
  GetV2LogsIdEvalsVariables
> = z.object({
  key: z.string(),
  value: z.any().optional(),
  isPii: z.boolean().default(false),
}).transform((v) => {
  return remap$(v, {
    isPii: "is_pii",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdEvalsVariables$ {
  /** @deprecated use `GetV2LogsIdEvalsVariables$inboundSchema` instead. */
  export const inboundSchema = GetV2LogsIdEvalsVariables$inboundSchema;
  /** @deprecated use `GetV2LogsIdEvalsVariables$outboundSchema` instead. */
  export const outboundSchema = GetV2LogsIdEvalsVariables$outboundSchema;
  /** @deprecated use `GetV2LogsIdEvalsVariables$Outbound` instead. */
  export type Outbound = GetV2LogsIdEvalsVariables$Outbound;
}

export function getV2LogsIdEvalsVariablesToJSON(
  getV2LogsIdEvalsVariables: GetV2LogsIdEvalsVariables,
): string {
  return JSON.stringify(
    GetV2LogsIdEvalsVariables$outboundSchema.parse(getV2LogsIdEvalsVariables),
  );
}

export function getV2LogsIdEvalsVariablesFromJSON(
  jsonString: string,
): SafeParseResult<GetV2LogsIdEvalsVariables, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetV2LogsIdEvalsVariables$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetV2LogsIdEvalsVariables' from JSON`,
  );
}

/** @internal */
export const GetV2LogsIdEvalsPerformance$inboundSchema: z.ZodType<
  GetV2LogsIdEvalsPerformance,
  z.ZodTypeDef,
  unknown
> = z.object({
  latency: z.number(),
  first_time_to_token: z.nullable(z.number()).optional(),
  tokens_per_second: z.nullable(z.number()).optional(),
}).transform((v) => {
  return remap$(v, {
    "first_time_to_token": "firstTimeToToken",
    "tokens_per_second": "tokensPerSecond",
  });
});

/** @internal */
export type GetV2LogsIdEvalsPerformance$Outbound = {
  latency: number;
  first_time_to_token?: number | null | undefined;
  tokens_per_second?: number | null | undefined;
};

/** @internal */
export const GetV2LogsIdEvalsPerformance$outboundSchema: z.ZodType<
  GetV2LogsIdEvalsPerformance$Outbound,
  z.ZodTypeDef,
  GetV2LogsIdEvalsPerformance
> = z.object({
  latency: z.number(),
  firstTimeToToken: z.nullable(z.number()).optional(),
  tokensPerSecond: z.nullable(z.number()).optional(),
}).transform((v) => {
  return remap$(v, {
    firstTimeToToken: "first_time_to_token",
    tokensPerSecond: "tokens_per_second",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdEvalsPerformance$ {
  /** @deprecated use `GetV2LogsIdEvalsPerformance$inboundSchema` instead. */
  export const inboundSchema = GetV2LogsIdEvalsPerformance$inboundSchema;
  /** @deprecated use `GetV2LogsIdEvalsPerformance$outboundSchema` instead. */
  export const outboundSchema = GetV2LogsIdEvalsPerformance$outboundSchema;
  /** @deprecated use `GetV2LogsIdEvalsPerformance$Outbound` instead. */
  export type Outbound = GetV2LogsIdEvalsPerformance$Outbound;
}

export function getV2LogsIdEvalsPerformanceToJSON(
  getV2LogsIdEvalsPerformance: GetV2LogsIdEvalsPerformance,
): string {
  return JSON.stringify(
    GetV2LogsIdEvalsPerformance$outboundSchema.parse(
      getV2LogsIdEvalsPerformance,
    ),
  );
}

export function getV2LogsIdEvalsPerformanceFromJSON(
  jsonString: string,
): SafeParseResult<GetV2LogsIdEvalsPerformance, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetV2LogsIdEvalsPerformance$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetV2LogsIdEvalsPerformance' from JSON`,
  );
}

/** @internal */
export const GetV2LogsIdEvalsPromptTokensDetails$inboundSchema: z.ZodType<
  GetV2LogsIdEvalsPromptTokensDetails,
  z.ZodTypeDef,
  unknown
> = z.object({
  cached_tokens: z.number().optional(),
}).transform((v) => {
  return remap$(v, {
    "cached_tokens": "cachedTokens",
  });
});

/** @internal */
export type GetV2LogsIdEvalsPromptTokensDetails$Outbound = {
  cached_tokens?: number | undefined;
};

/** @internal */
export const GetV2LogsIdEvalsPromptTokensDetails$outboundSchema: z.ZodType<
  GetV2LogsIdEvalsPromptTokensDetails$Outbound,
  z.ZodTypeDef,
  GetV2LogsIdEvalsPromptTokensDetails
> = z.object({
  cachedTokens: z.number().optional(),
}).transform((v) => {
  return remap$(v, {
    cachedTokens: "cached_tokens",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdEvalsPromptTokensDetails$ {
  /** @deprecated use `GetV2LogsIdEvalsPromptTokensDetails$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsIdEvalsPromptTokensDetails$inboundSchema;
  /** @deprecated use `GetV2LogsIdEvalsPromptTokensDetails$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdEvalsPromptTokensDetails$outboundSchema;
  /** @deprecated use `GetV2LogsIdEvalsPromptTokensDetails$Outbound` instead. */
  export type Outbound = GetV2LogsIdEvalsPromptTokensDetails$Outbound;
}

export function getV2LogsIdEvalsPromptTokensDetailsToJSON(
  getV2LogsIdEvalsPromptTokensDetails: GetV2LogsIdEvalsPromptTokensDetails,
): string {
  return JSON.stringify(
    GetV2LogsIdEvalsPromptTokensDetails$outboundSchema.parse(
      getV2LogsIdEvalsPromptTokensDetails,
    ),
  );
}

export function getV2LogsIdEvalsPromptTokensDetailsFromJSON(
  jsonString: string,
): SafeParseResult<GetV2LogsIdEvalsPromptTokensDetails, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      GetV2LogsIdEvalsPromptTokensDetails$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetV2LogsIdEvalsPromptTokensDetails' from JSON`,
  );
}

/** @internal */
export const GetV2LogsIdEvalsCompletionTokensDetails$inboundSchema: z.ZodType<
  GetV2LogsIdEvalsCompletionTokensDetails,
  z.ZodTypeDef,
  unknown
> = z.object({
  reasoning_tokens: z.number().optional(),
}).transform((v) => {
  return remap$(v, {
    "reasoning_tokens": "reasoningTokens",
  });
});

/** @internal */
export type GetV2LogsIdEvalsCompletionTokensDetails$Outbound = {
  reasoning_tokens?: number | undefined;
};

/** @internal */
export const GetV2LogsIdEvalsCompletionTokensDetails$outboundSchema: z.ZodType<
  GetV2LogsIdEvalsCompletionTokensDetails$Outbound,
  z.ZodTypeDef,
  GetV2LogsIdEvalsCompletionTokensDetails
> = z.object({
  reasoningTokens: z.number().optional(),
}).transform((v) => {
  return remap$(v, {
    reasoningTokens: "reasoning_tokens",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdEvalsCompletionTokensDetails$ {
  /** @deprecated use `GetV2LogsIdEvalsCompletionTokensDetails$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsIdEvalsCompletionTokensDetails$inboundSchema;
  /** @deprecated use `GetV2LogsIdEvalsCompletionTokensDetails$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdEvalsCompletionTokensDetails$outboundSchema;
  /** @deprecated use `GetV2LogsIdEvalsCompletionTokensDetails$Outbound` instead. */
  export type Outbound = GetV2LogsIdEvalsCompletionTokensDetails$Outbound;
}

export function getV2LogsIdEvalsCompletionTokensDetailsToJSON(
  getV2LogsIdEvalsCompletionTokensDetails:
    GetV2LogsIdEvalsCompletionTokensDetails,
): string {
  return JSON.stringify(
    GetV2LogsIdEvalsCompletionTokensDetails$outboundSchema.parse(
      getV2LogsIdEvalsCompletionTokensDetails,
    ),
  );
}

export function getV2LogsIdEvalsCompletionTokensDetailsFromJSON(
  jsonString: string,
): SafeParseResult<
  GetV2LogsIdEvalsCompletionTokensDetails,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetV2LogsIdEvalsCompletionTokensDetails$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'GetV2LogsIdEvalsCompletionTokensDetails' from JSON`,
  );
}

/** @internal */
export const GetV2LogsIdEvalsUsage$inboundSchema: z.ZodType<
  GetV2LogsIdEvalsUsage,
  z.ZodTypeDef,
  unknown
> = z.object({
  total_tokens: z.number().optional(),
  prompt_tokens: z.number().optional(),
  completion_tokens: z.number().optional(),
  prompt_tokens_details: z.lazy(() =>
    GetV2LogsIdEvalsPromptTokensDetails$inboundSchema
  ).optional(),
  completion_tokens_details: z.lazy(() =>
    GetV2LogsIdEvalsCompletionTokensDetails$inboundSchema
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    "total_tokens": "totalTokens",
    "prompt_tokens": "promptTokens",
    "completion_tokens": "completionTokens",
    "prompt_tokens_details": "promptTokensDetails",
    "completion_tokens_details": "completionTokensDetails",
  });
});

/** @internal */
export type GetV2LogsIdEvalsUsage$Outbound = {
  total_tokens?: number | undefined;
  prompt_tokens?: number | undefined;
  completion_tokens?: number | undefined;
  prompt_tokens_details?:
    | GetV2LogsIdEvalsPromptTokensDetails$Outbound
    | undefined;
  completion_tokens_details?:
    | GetV2LogsIdEvalsCompletionTokensDetails$Outbound
    | undefined;
};

/** @internal */
export const GetV2LogsIdEvalsUsage$outboundSchema: z.ZodType<
  GetV2LogsIdEvalsUsage$Outbound,
  z.ZodTypeDef,
  GetV2LogsIdEvalsUsage
> = z.object({
  totalTokens: z.number().optional(),
  promptTokens: z.number().optional(),
  completionTokens: z.number().optional(),
  promptTokensDetails: z.lazy(() =>
    GetV2LogsIdEvalsPromptTokensDetails$outboundSchema
  ).optional(),
  completionTokensDetails: z.lazy(() =>
    GetV2LogsIdEvalsCompletionTokensDetails$outboundSchema
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    totalTokens: "total_tokens",
    promptTokens: "prompt_tokens",
    completionTokens: "completion_tokens",
    promptTokensDetails: "prompt_tokens_details",
    completionTokensDetails: "completion_tokens_details",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdEvalsUsage$ {
  /** @deprecated use `GetV2LogsIdEvalsUsage$inboundSchema` instead. */
  export const inboundSchema = GetV2LogsIdEvalsUsage$inboundSchema;
  /** @deprecated use `GetV2LogsIdEvalsUsage$outboundSchema` instead. */
  export const outboundSchema = GetV2LogsIdEvalsUsage$outboundSchema;
  /** @deprecated use `GetV2LogsIdEvalsUsage$Outbound` instead. */
  export type Outbound = GetV2LogsIdEvalsUsage$Outbound;
}

export function getV2LogsIdEvalsUsageToJSON(
  getV2LogsIdEvalsUsage: GetV2LogsIdEvalsUsage,
): string {
  return JSON.stringify(
    GetV2LogsIdEvalsUsage$outboundSchema.parse(getV2LogsIdEvalsUsage),
  );
}

export function getV2LogsIdEvalsUsageFromJSON(
  jsonString: string,
): SafeParseResult<GetV2LogsIdEvalsUsage, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetV2LogsIdEvalsUsage$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetV2LogsIdEvalsUsage' from JSON`,
  );
}

/** @internal */
export const GetV2LogsIdEvalsBilling$inboundSchema: z.ZodType<
  GetV2LogsIdEvalsBilling,
  z.ZodTypeDef,
  unknown
> = z.object({
  total_cost: z.nullable(z.number()).optional(),
  input_cost: z.nullable(z.number()).optional(),
  output_cost: z.nullable(z.number()).optional(),
  billable: z.boolean(),
}).transform((v) => {
  return remap$(v, {
    "total_cost": "totalCost",
    "input_cost": "inputCost",
    "output_cost": "outputCost",
  });
});

/** @internal */
export type GetV2LogsIdEvalsBilling$Outbound = {
  total_cost?: number | null | undefined;
  input_cost?: number | null | undefined;
  output_cost?: number | null | undefined;
  billable: boolean;
};

/** @internal */
export const GetV2LogsIdEvalsBilling$outboundSchema: z.ZodType<
  GetV2LogsIdEvalsBilling$Outbound,
  z.ZodTypeDef,
  GetV2LogsIdEvalsBilling
> = z.object({
  totalCost: z.nullable(z.number()).optional(),
  inputCost: z.nullable(z.number()).optional(),
  outputCost: z.nullable(z.number()).optional(),
  billable: z.boolean(),
}).transform((v) => {
  return remap$(v, {
    totalCost: "total_cost",
    inputCost: "input_cost",
    outputCost: "output_cost",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdEvalsBilling$ {
  /** @deprecated use `GetV2LogsIdEvalsBilling$inboundSchema` instead. */
  export const inboundSchema = GetV2LogsIdEvalsBilling$inboundSchema;
  /** @deprecated use `GetV2LogsIdEvalsBilling$outboundSchema` instead. */
  export const outboundSchema = GetV2LogsIdEvalsBilling$outboundSchema;
  /** @deprecated use `GetV2LogsIdEvalsBilling$Outbound` instead. */
  export type Outbound = GetV2LogsIdEvalsBilling$Outbound;
}

export function getV2LogsIdEvalsBillingToJSON(
  getV2LogsIdEvalsBilling: GetV2LogsIdEvalsBilling,
): string {
  return JSON.stringify(
    GetV2LogsIdEvalsBilling$outboundSchema.parse(getV2LogsIdEvalsBilling),
  );
}

export function getV2LogsIdEvalsBillingFromJSON(
  jsonString: string,
): SafeParseResult<GetV2LogsIdEvalsBilling, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetV2LogsIdEvalsBilling$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetV2LogsIdEvalsBilling' from JSON`,
  );
}

/** @internal */
export const GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody27WorkflowRunType$inboundSchema:
  z.ZodNativeEnum<
    typeof GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody27WorkflowRunType
  > = z.nativeEnum(
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody27WorkflowRunType,
  );

/** @internal */
export const GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody27WorkflowRunType$outboundSchema:
  z.ZodNativeEnum<
    typeof GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody27WorkflowRunType
  > =
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody27WorkflowRunType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody27WorkflowRunType$ {
  /** @deprecated use `GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody27WorkflowRunType$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody27WorkflowRunType$inboundSchema;
  /** @deprecated use `GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody27WorkflowRunType$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody27WorkflowRunType$outboundSchema;
}

/** @internal */
export const GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody27WorkflowRunDataToolsType$inboundSchema:
  z.ZodNativeEnum<
    typeof GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody27WorkflowRunDataToolsType
  > = z.nativeEnum(
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody27WorkflowRunDataToolsType,
  );

/** @internal */
export const GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody27WorkflowRunDataToolsType$outboundSchema:
  z.ZodNativeEnum<
    typeof GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody27WorkflowRunDataToolsType
  > =
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody27WorkflowRunDataToolsType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody27WorkflowRunDataToolsType$ {
  /** @deprecated use `GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody27WorkflowRunDataToolsType$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody27WorkflowRunDataToolsType$inboundSchema;
  /** @deprecated use `GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody27WorkflowRunDataToolsType$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody27WorkflowRunDataToolsType$outboundSchema;
}

/** @internal */
export const GetV2LogsIdEvalsParameters$inboundSchema: z.ZodType<
  GetV2LogsIdEvalsParameters,
  z.ZodTypeDef,
  unknown
> = z.object({
  type:
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody27WorkflowRunDataToolsType$inboundSchema,
  properties: z.record(z.any()),
  required: z.array(z.string()).optional(),
  additionalProperties: z.boolean().optional(),
});

/** @internal */
export type GetV2LogsIdEvalsParameters$Outbound = {
  type: string;
  properties: { [k: string]: any };
  required?: Array<string> | undefined;
  additionalProperties?: boolean | undefined;
};

/** @internal */
export const GetV2LogsIdEvalsParameters$outboundSchema: z.ZodType<
  GetV2LogsIdEvalsParameters$Outbound,
  z.ZodTypeDef,
  GetV2LogsIdEvalsParameters
> = z.object({
  type:
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody27WorkflowRunDataToolsType$outboundSchema,
  properties: z.record(z.any()),
  required: z.array(z.string()).optional(),
  additionalProperties: z.boolean().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdEvalsParameters$ {
  /** @deprecated use `GetV2LogsIdEvalsParameters$inboundSchema` instead. */
  export const inboundSchema = GetV2LogsIdEvalsParameters$inboundSchema;
  /** @deprecated use `GetV2LogsIdEvalsParameters$outboundSchema` instead. */
  export const outboundSchema = GetV2LogsIdEvalsParameters$outboundSchema;
  /** @deprecated use `GetV2LogsIdEvalsParameters$Outbound` instead. */
  export type Outbound = GetV2LogsIdEvalsParameters$Outbound;
}

export function getV2LogsIdEvalsParametersToJSON(
  getV2LogsIdEvalsParameters: GetV2LogsIdEvalsParameters,
): string {
  return JSON.stringify(
    GetV2LogsIdEvalsParameters$outboundSchema.parse(getV2LogsIdEvalsParameters),
  );
}

export function getV2LogsIdEvalsParametersFromJSON(
  jsonString: string,
): SafeParseResult<GetV2LogsIdEvalsParameters, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetV2LogsIdEvalsParameters$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetV2LogsIdEvalsParameters' from JSON`,
  );
}

/** @internal */
export const GetV2LogsIdEvalsFunction$inboundSchema: z.ZodType<
  GetV2LogsIdEvalsFunction,
  z.ZodTypeDef,
  unknown
> = z.object({
  name: z.string(),
  description: z.string().optional(),
  strict: z.boolean().optional(),
  parameters: z.lazy(() => GetV2LogsIdEvalsParameters$inboundSchema),
});

/** @internal */
export type GetV2LogsIdEvalsFunction$Outbound = {
  name: string;
  description?: string | undefined;
  strict?: boolean | undefined;
  parameters: GetV2LogsIdEvalsParameters$Outbound;
};

/** @internal */
export const GetV2LogsIdEvalsFunction$outboundSchema: z.ZodType<
  GetV2LogsIdEvalsFunction$Outbound,
  z.ZodTypeDef,
  GetV2LogsIdEvalsFunction
> = z.object({
  name: z.string(),
  description: z.string().optional(),
  strict: z.boolean().optional(),
  parameters: z.lazy(() => GetV2LogsIdEvalsParameters$outboundSchema),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdEvalsFunction$ {
  /** @deprecated use `GetV2LogsIdEvalsFunction$inboundSchema` instead. */
  export const inboundSchema = GetV2LogsIdEvalsFunction$inboundSchema;
  /** @deprecated use `GetV2LogsIdEvalsFunction$outboundSchema` instead. */
  export const outboundSchema = GetV2LogsIdEvalsFunction$outboundSchema;
  /** @deprecated use `GetV2LogsIdEvalsFunction$Outbound` instead. */
  export type Outbound = GetV2LogsIdEvalsFunction$Outbound;
}

export function getV2LogsIdEvalsFunctionToJSON(
  getV2LogsIdEvalsFunction: GetV2LogsIdEvalsFunction,
): string {
  return JSON.stringify(
    GetV2LogsIdEvalsFunction$outboundSchema.parse(getV2LogsIdEvalsFunction),
  );
}

export function getV2LogsIdEvalsFunctionFromJSON(
  jsonString: string,
): SafeParseResult<GetV2LogsIdEvalsFunction, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetV2LogsIdEvalsFunction$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetV2LogsIdEvalsFunction' from JSON`,
  );
}

/** @internal */
export const GetV2LogsIdEvalsTools$inboundSchema: z.ZodType<
  GetV2LogsIdEvalsTools,
  z.ZodTypeDef,
  unknown
> = z.object({
  type:
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody27WorkflowRunType$inboundSchema,
  function: z.lazy(() => GetV2LogsIdEvalsFunction$inboundSchema),
});

/** @internal */
export type GetV2LogsIdEvalsTools$Outbound = {
  type: string;
  function: GetV2LogsIdEvalsFunction$Outbound;
};

/** @internal */
export const GetV2LogsIdEvalsTools$outboundSchema: z.ZodType<
  GetV2LogsIdEvalsTools$Outbound,
  z.ZodTypeDef,
  GetV2LogsIdEvalsTools
> = z.object({
  type:
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody27WorkflowRunType$outboundSchema,
  function: z.lazy(() => GetV2LogsIdEvalsFunction$outboundSchema),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdEvalsTools$ {
  /** @deprecated use `GetV2LogsIdEvalsTools$inboundSchema` instead. */
  export const inboundSchema = GetV2LogsIdEvalsTools$inboundSchema;
  /** @deprecated use `GetV2LogsIdEvalsTools$outboundSchema` instead. */
  export const outboundSchema = GetV2LogsIdEvalsTools$outboundSchema;
  /** @deprecated use `GetV2LogsIdEvalsTools$Outbound` instead. */
  export type Outbound = GetV2LogsIdEvalsTools$Outbound;
}

export function getV2LogsIdEvalsToolsToJSON(
  getV2LogsIdEvalsTools: GetV2LogsIdEvalsTools,
): string {
  return JSON.stringify(
    GetV2LogsIdEvalsTools$outboundSchema.parse(getV2LogsIdEvalsTools),
  );
}

export function getV2LogsIdEvalsToolsFromJSON(
  jsonString: string,
): SafeParseResult<GetV2LogsIdEvalsTools, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetV2LogsIdEvalsTools$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetV2LogsIdEvalsTools' from JSON`,
  );
}

/** @internal */
export const GetV2LogsIdEvalsPromptSnippets$inboundSchema: z.ZodType<
  GetV2LogsIdEvalsPromptSnippets,
  z.ZodTypeDef,
  unknown
> = z.object({
  _id: z.string(),
  key: z.string(),
  value: z.string(),
}).transform((v) => {
  return remap$(v, {
    "_id": "id",
  });
});

/** @internal */
export type GetV2LogsIdEvalsPromptSnippets$Outbound = {
  _id: string;
  key: string;
  value: string;
};

/** @internal */
export const GetV2LogsIdEvalsPromptSnippets$outboundSchema: z.ZodType<
  GetV2LogsIdEvalsPromptSnippets$Outbound,
  z.ZodTypeDef,
  GetV2LogsIdEvalsPromptSnippets
> = z.object({
  id: z.string(),
  key: z.string(),
  value: z.string(),
}).transform((v) => {
  return remap$(v, {
    id: "_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdEvalsPromptSnippets$ {
  /** @deprecated use `GetV2LogsIdEvalsPromptSnippets$inboundSchema` instead. */
  export const inboundSchema = GetV2LogsIdEvalsPromptSnippets$inboundSchema;
  /** @deprecated use `GetV2LogsIdEvalsPromptSnippets$outboundSchema` instead. */
  export const outboundSchema = GetV2LogsIdEvalsPromptSnippets$outboundSchema;
  /** @deprecated use `GetV2LogsIdEvalsPromptSnippets$Outbound` instead. */
  export type Outbound = GetV2LogsIdEvalsPromptSnippets$Outbound;
}

export function getV2LogsIdEvalsPromptSnippetsToJSON(
  getV2LogsIdEvalsPromptSnippets: GetV2LogsIdEvalsPromptSnippets,
): string {
  return JSON.stringify(
    GetV2LogsIdEvalsPromptSnippets$outboundSchema.parse(
      getV2LogsIdEvalsPromptSnippets,
    ),
  );
}

export function getV2LogsIdEvalsPromptSnippetsFromJSON(
  jsonString: string,
): SafeParseResult<GetV2LogsIdEvalsPromptSnippets, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetV2LogsIdEvalsPromptSnippets$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetV2LogsIdEvalsPromptSnippets' from JSON`,
  );
}

/** @internal */
export const GetV2LogsIdEvalsData$inboundSchema: z.ZodType<
  GetV2LogsIdEvalsData,
  z.ZodTypeDef,
  unknown
> = z.object({
  choices: z.array(z.lazy(() => GetV2LogsIdEvalsChoices$inboundSchema))
    .optional(),
  action: GetV2LogsIdEvalsAction$inboundSchema,
  prompt_config: z.lazy(() => GetV2LogsIdEvalsPromptConfig$inboundSchema),
  variables: z.array(z.lazy(() => GetV2LogsIdEvalsVariables$inboundSchema)),
  performance: z.lazy(() => GetV2LogsIdEvalsPerformance$inboundSchema)
    .optional(),
  usage: z.lazy(() => GetV2LogsIdEvalsUsage$inboundSchema).optional(),
  billing: z.lazy(() => GetV2LogsIdEvalsBilling$inboundSchema).optional(),
  tools: z.array(z.lazy(() => GetV2LogsIdEvalsTools$inboundSchema)).optional(),
  prompt_snippets: z.array(
    z.lazy(() => GetV2LogsIdEvalsPromptSnippets$inboundSchema),
  ),
}).transform((v) => {
  return remap$(v, {
    "prompt_config": "promptConfig",
    "prompt_snippets": "promptSnippets",
  });
});

/** @internal */
export type GetV2LogsIdEvalsData$Outbound = {
  choices?: Array<GetV2LogsIdEvalsChoices$Outbound> | undefined;
  action: string;
  prompt_config: GetV2LogsIdEvalsPromptConfig$Outbound;
  variables: Array<GetV2LogsIdEvalsVariables$Outbound>;
  performance?: GetV2LogsIdEvalsPerformance$Outbound | undefined;
  usage?: GetV2LogsIdEvalsUsage$Outbound | undefined;
  billing?: GetV2LogsIdEvalsBilling$Outbound | undefined;
  tools?: Array<GetV2LogsIdEvalsTools$Outbound> | undefined;
  prompt_snippets: Array<GetV2LogsIdEvalsPromptSnippets$Outbound>;
};

/** @internal */
export const GetV2LogsIdEvalsData$outboundSchema: z.ZodType<
  GetV2LogsIdEvalsData$Outbound,
  z.ZodTypeDef,
  GetV2LogsIdEvalsData
> = z.object({
  choices: z.array(z.lazy(() => GetV2LogsIdEvalsChoices$outboundSchema))
    .optional(),
  action: GetV2LogsIdEvalsAction$outboundSchema,
  promptConfig: z.lazy(() => GetV2LogsIdEvalsPromptConfig$outboundSchema),
  variables: z.array(z.lazy(() => GetV2LogsIdEvalsVariables$outboundSchema)),
  performance: z.lazy(() => GetV2LogsIdEvalsPerformance$outboundSchema)
    .optional(),
  usage: z.lazy(() => GetV2LogsIdEvalsUsage$outboundSchema).optional(),
  billing: z.lazy(() => GetV2LogsIdEvalsBilling$outboundSchema).optional(),
  tools: z.array(z.lazy(() => GetV2LogsIdEvalsTools$outboundSchema)).optional(),
  promptSnippets: z.array(
    z.lazy(() => GetV2LogsIdEvalsPromptSnippets$outboundSchema),
  ),
}).transform((v) => {
  return remap$(v, {
    promptConfig: "prompt_config",
    promptSnippets: "prompt_snippets",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdEvalsData$ {
  /** @deprecated use `GetV2LogsIdEvalsData$inboundSchema` instead. */
  export const inboundSchema = GetV2LogsIdEvalsData$inboundSchema;
  /** @deprecated use `GetV2LogsIdEvalsData$outboundSchema` instead. */
  export const outboundSchema = GetV2LogsIdEvalsData$outboundSchema;
  /** @deprecated use `GetV2LogsIdEvalsData$Outbound` instead. */
  export type Outbound = GetV2LogsIdEvalsData$Outbound;
}

export function getV2LogsIdEvalsDataToJSON(
  getV2LogsIdEvalsData: GetV2LogsIdEvalsData,
): string {
  return JSON.stringify(
    GetV2LogsIdEvalsData$outboundSchema.parse(getV2LogsIdEvalsData),
  );
}

export function getV2LogsIdEvalsDataFromJSON(
  jsonString: string,
): SafeParseResult<GetV2LogsIdEvalsData, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetV2LogsIdEvalsData$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetV2LogsIdEvalsData' from JSON`,
  );
}

/** @internal */
export const EvalsWorkflowRun$inboundSchema: z.ZodType<
  EvalsWorkflowRun,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  workflow_metadata: z.record(z.any()).optional(),
  workflow_input: z.record(z.any()).optional(),
  workflow_output: z.record(z.any()).optional(),
  request_properties: z.lazy(() =>
    GetV2LogsIdEvalsRequestProperties$inboundSchema
  ).optional(),
  started_at: z.string().datetime({ offset: true }).transform(v => new Date(v)),
  finished_at: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
  product_type: GetV2LogsIdEvalsProductType$inboundSchema,
  related_entities: z.array(
    z.lazy(() =>
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRun1$inboundSchema
    ),
  ),
  evals: z.array(
    z.union([
      z.lazy(() =>
        GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody21$inboundSchema
      ),
      z.lazy(() =>
        GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody22$inboundSchema
      ),
      z.lazy(() =>
        GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody23$inboundSchema
      ),
      z.lazy(() =>
        GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody24$inboundSchema
      ),
    ]),
  ),
  data: z.lazy(() => GetV2LogsIdEvalsData$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "workflow_metadata": "workflowMetadata",
    "workflow_input": "workflowInput",
    "workflow_output": "workflowOutput",
    "request_properties": "requestProperties",
    "started_at": "startedAt",
    "finished_at": "finishedAt",
    "product_type": "productType",
    "related_entities": "relatedEntities",
  });
});

/** @internal */
export type EvalsWorkflowRun$Outbound = {
  id: string;
  workflow_metadata?: { [k: string]: any } | undefined;
  workflow_input?: { [k: string]: any } | undefined;
  workflow_output?: { [k: string]: any } | undefined;
  request_properties?: GetV2LogsIdEvalsRequestProperties$Outbound | undefined;
  started_at: string;
  finished_at?: string | undefined;
  product_type: string;
  related_entities: Array<
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRun1$Outbound
  >;
  evals: Array<
    | GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody21$Outbound
    | GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody22$Outbound
    | GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody23$Outbound
    | GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody24$Outbound
  >;
  data: GetV2LogsIdEvalsData$Outbound;
};

/** @internal */
export const EvalsWorkflowRun$outboundSchema: z.ZodType<
  EvalsWorkflowRun$Outbound,
  z.ZodTypeDef,
  EvalsWorkflowRun
> = z.object({
  id: z.string(),
  workflowMetadata: z.record(z.any()).optional(),
  workflowInput: z.record(z.any()).optional(),
  workflowOutput: z.record(z.any()).optional(),
  requestProperties: z.lazy(() =>
    GetV2LogsIdEvalsRequestProperties$outboundSchema
  ).optional(),
  startedAt: z.date().transform(v => v.toISOString()),
  finishedAt: z.date().transform(v => v.toISOString()).optional(),
  productType: GetV2LogsIdEvalsProductType$outboundSchema,
  relatedEntities: z.array(
    z.lazy(() =>
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7WorkflowRun1$outboundSchema
    ),
  ),
  evals: z.array(
    z.union([
      z.lazy(() =>
        GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody21$outboundSchema
      ),
      z.lazy(() =>
        GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody22$outboundSchema
      ),
      z.lazy(() =>
        GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody23$outboundSchema
      ),
      z.lazy(() =>
        GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody24$outboundSchema
      ),
    ]),
  ),
  data: z.lazy(() => GetV2LogsIdEvalsData$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    workflowMetadata: "workflow_metadata",
    workflowInput: "workflow_input",
    workflowOutput: "workflow_output",
    requestProperties: "request_properties",
    startedAt: "started_at",
    finishedAt: "finished_at",
    productType: "product_type",
    relatedEntities: "related_entities",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EvalsWorkflowRun$ {
  /** @deprecated use `EvalsWorkflowRun$inboundSchema` instead. */
  export const inboundSchema = EvalsWorkflowRun$inboundSchema;
  /** @deprecated use `EvalsWorkflowRun$outboundSchema` instead. */
  export const outboundSchema = EvalsWorkflowRun$outboundSchema;
  /** @deprecated use `EvalsWorkflowRun$Outbound` instead. */
  export type Outbound = EvalsWorkflowRun$Outbound;
}

export function evalsWorkflowRunToJSON(
  evalsWorkflowRun: EvalsWorkflowRun,
): string {
  return JSON.stringify(
    EvalsWorkflowRun$outboundSchema.parse(evalsWorkflowRun),
  );
}

export function evalsWorkflowRunFromJSON(
  jsonString: string,
): SafeParseResult<EvalsWorkflowRun, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => EvalsWorkflowRun$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'EvalsWorkflowRun' from JSON`,
  );
}

/** @internal */
export const GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody27Status$inboundSchema:
  z.ZodNativeEnum<
    typeof GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody27Status
  > = z.nativeEnum(
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody27Status,
  );

/** @internal */
export const GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody27Status$outboundSchema:
  z.ZodNativeEnum<
    typeof GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody27Status
  > =
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody27Status$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody27Status$ {
  /** @deprecated use `GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody27Status$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody27Status$inboundSchema;
  /** @deprecated use `GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody27Status$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody27Status$outboundSchema;
}

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals74Type$inboundSchema:
  z.ZodNativeEnum<
    typeof GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals74Type
  > = z.nativeEnum(
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals74Type,
  );

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals74Type$outboundSchema:
  z.ZodNativeEnum<
    typeof GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals74Type
  > =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals74Type$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals74Type$ {
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals74Type$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals74Type$inboundSchema;
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals74Type$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals74Type$outboundSchema;
}

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals74$inboundSchema:
  z.ZodType<
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals74,
    z.ZodTypeDef,
    unknown
  > = z.object({
    type:
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals74Type$inboundSchema,
    evaluator_id: z.string(),
  }).transform((v) => {
    return remap$(v, {
      "evaluator_id": "evaluatorId",
    });
  });

/** @internal */
export type GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals74$Outbound =
  {
    type: string;
    evaluator_id: string;
  };

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals74$outboundSchema:
  z.ZodType<
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals74$Outbound,
    z.ZodTypeDef,
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals74
  > = z.object({
    type:
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals74Type$outboundSchema,
    evaluatorId: z.string(),
  }).transform((v) => {
    return remap$(v, {
      evaluatorId: "evaluator_id",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals74$ {
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals74$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals74$inboundSchema;
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals74$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals74$outboundSchema;
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals74$Outbound` instead. */
  export type Outbound =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals74$Outbound;
}

export function getV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals74ToJSON(
  getV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals74:
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals74,
): string {
  return JSON.stringify(
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals74$outboundSchema
      .parse(
        getV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals74,
      ),
  );
}

export function getV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals74FromJSON(
  jsonString: string,
): SafeParseResult<
  GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals74,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals74$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals74' from JSON`,
  );
}

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals73Type$inboundSchema:
  z.ZodNativeEnum<
    typeof GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals73Type
  > = z.nativeEnum(
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals73Type,
  );

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals73Type$outboundSchema:
  z.ZodNativeEnum<
    typeof GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals73Type
  > =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals73Type$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals73Type$ {
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals73Type$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals73Type$inboundSchema;
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals73Type$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals73Type$outboundSchema;
}

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals73$inboundSchema:
  z.ZodType<
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals73,
    z.ZodTypeDef,
    unknown
  > = z.object({
    type:
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals73Type$inboundSchema,
    human_eval_id: z.string(),
  }).transform((v) => {
    return remap$(v, {
      "human_eval_id": "humanEvalId",
    });
  });

/** @internal */
export type GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals73$Outbound =
  {
    type: string;
    human_eval_id: string;
  };

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals73$outboundSchema:
  z.ZodType<
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals73$Outbound,
    z.ZodTypeDef,
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals73
  > = z.object({
    type:
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals73Type$outboundSchema,
    humanEvalId: z.string(),
  }).transform((v) => {
    return remap$(v, {
      humanEvalId: "human_eval_id",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals73$ {
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals73$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals73$inboundSchema;
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals73$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals73$outboundSchema;
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals73$Outbound` instead. */
  export type Outbound =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals73$Outbound;
}

export function getV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals73ToJSON(
  getV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals73:
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals73,
): string {
  return JSON.stringify(
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals73$outboundSchema
      .parse(
        getV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals73,
      ),
  );
}

export function getV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals73FromJSON(
  jsonString: string,
): SafeParseResult<
  GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals73,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals73$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals73' from JSON`,
  );
}

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals72Type$inboundSchema:
  z.ZodNativeEnum<
    typeof GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals72Type
  > = z.nativeEnum(
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals72Type,
  );

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals72Type$outboundSchema:
  z.ZodNativeEnum<
    typeof GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals72Type
  > =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals72Type$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals72Type$ {
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals72Type$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals72Type$inboundSchema;
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals72Type$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals72Type$outboundSchema;
}

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals72$inboundSchema:
  z.ZodType<
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals72,
    z.ZodTypeDef,
    unknown
  > = z.object({
    type:
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals72Type$inboundSchema,
    contact_id: z.string(),
  }).transform((v) => {
    return remap$(v, {
      "contact_id": "contactId",
    });
  });

/** @internal */
export type GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals72$Outbound =
  {
    type: string;
    contact_id: string;
  };

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals72$outboundSchema:
  z.ZodType<
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals72$Outbound,
    z.ZodTypeDef,
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals72
  > = z.object({
    type:
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals72Type$outboundSchema,
    contactId: z.string(),
  }).transform((v) => {
    return remap$(v, {
      contactId: "contact_id",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals72$ {
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals72$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals72$inboundSchema;
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals72$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals72$outboundSchema;
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals72$Outbound` instead. */
  export type Outbound =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals72$Outbound;
}

export function getV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals72ToJSON(
  getV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals72:
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals72,
): string {
  return JSON.stringify(
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals72$outboundSchema
      .parse(
        getV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals72,
      ),
  );
}

export function getV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals72FromJSON(
  jsonString: string,
): SafeParseResult<
  GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals72,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals72$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals72' from JSON`,
  );
}

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7Type$inboundSchema:
  z.ZodNativeEnum<
    typeof GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7Type
  > = z.nativeEnum(
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7Type,
  );

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7Type$outboundSchema:
  z.ZodNativeEnum<
    typeof GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7Type
  > =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7Type$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7Type$ {
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7Type$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7Type$inboundSchema;
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7Type$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7Type$outboundSchema;
}

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals71$inboundSchema:
  z.ZodType<
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals71,
    z.ZodTypeDef,
    unknown
  > = z.object({
    type:
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7Type$inboundSchema,
    account_id: z.string(),
  }).transform((v) => {
    return remap$(v, {
      "account_id": "accountId",
    });
  });

/** @internal */
export type GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals71$Outbound =
  {
    type: string;
    account_id: string;
  };

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals71$outboundSchema:
  z.ZodType<
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals71$Outbound,
    z.ZodTypeDef,
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals71
  > = z.object({
    type:
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals7Type$outboundSchema,
    accountId: z.string(),
  }).transform((v) => {
    return remap$(v, {
      accountId: "account_id",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals71$ {
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals71$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals71$inboundSchema;
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals71$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals71$outboundSchema;
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals71$Outbound` instead. */
  export type Outbound =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals71$Outbound;
}

export function getV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals71ToJSON(
  getV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals71:
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals71,
): string {
  return JSON.stringify(
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals71$outboundSchema
      .parse(
        getV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals71,
      ),
  );
}

export function getV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals71FromJSON(
  jsonString: string,
): SafeParseResult<
  GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals71,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals71$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals71' from JSON`,
  );
}

/** @internal */
export const GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody27RelatedEntities$inboundSchema:
  z.ZodType<
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody27RelatedEntities,
    z.ZodTypeDef,
    unknown
  > = z.union([
    z.lazy(() =>
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals71$inboundSchema
    ),
    z.lazy(() =>
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals72$inboundSchema
    ),
    z.lazy(() =>
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals73$inboundSchema
    ),
    z.lazy(() =>
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals74$inboundSchema
    ),
  ]);

/** @internal */
export type GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody27RelatedEntities$Outbound =
  | GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals71$Outbound
  | GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals72$Outbound
  | GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals73$Outbound
  | GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals74$Outbound;

/** @internal */
export const GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody27RelatedEntities$outboundSchema:
  z.ZodType<
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody27RelatedEntities$Outbound,
    z.ZodTypeDef,
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody27RelatedEntities
  > = z.union([
    z.lazy(() =>
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals71$outboundSchema
    ),
    z.lazy(() =>
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals72$outboundSchema
    ),
    z.lazy(() =>
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals73$outboundSchema
    ),
    z.lazy(() =>
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals74$outboundSchema
    ),
  ]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody27RelatedEntities$ {
  /** @deprecated use `GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody27RelatedEntities$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody27RelatedEntities$inboundSchema;
  /** @deprecated use `GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody27RelatedEntities$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody27RelatedEntities$outboundSchema;
  /** @deprecated use `GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody27RelatedEntities$Outbound` instead. */
  export type Outbound =
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody27RelatedEntities$Outbound;
}

export function getV2LogsIdEvalsResponse200ApplicationJSONResponseBody27RelatedEntitiesToJSON(
  getV2LogsIdEvalsResponse200ApplicationJSONResponseBody27RelatedEntities:
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody27RelatedEntities,
): string {
  return JSON.stringify(
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody27RelatedEntities$outboundSchema
      .parse(
        getV2LogsIdEvalsResponse200ApplicationJSONResponseBody27RelatedEntities,
      ),
  );
}

export function getV2LogsIdEvalsResponse200ApplicationJSONResponseBody27RelatedEntitiesFromJSON(
  jsonString: string,
): SafeParseResult<
  GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody27RelatedEntities,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody27RelatedEntities$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody27RelatedEntities' from JSON`,
  );
}

/** @internal */
export const GetV2LogsIdEvals7$inboundSchema: z.ZodType<
  GetV2LogsIdEvals7,
  z.ZodTypeDef,
  unknown
> = z.object({
  type:
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody27Type$inboundSchema,
  workflow_run: z.lazy(() => EvalsWorkflowRun$inboundSchema),
  id: z.string(),
  status:
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody27Status$inboundSchema,
  timestamp: z.string().datetime({ offset: true }).transform(v => new Date(v)),
  related_entities: z.array(
    z.union([
      z.lazy(() =>
        GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals71$inboundSchema
      ),
      z.lazy(() =>
        GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals72$inboundSchema
      ),
      z.lazy(() =>
        GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals73$inboundSchema
      ),
      z.lazy(() =>
        GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals74$inboundSchema
      ),
    ]),
  ),
}).transform((v) => {
  return remap$(v, {
    "workflow_run": "workflowRun",
    "related_entities": "relatedEntities",
  });
});

/** @internal */
export type GetV2LogsIdEvals7$Outbound = {
  type: string;
  workflow_run: EvalsWorkflowRun$Outbound;
  id: string;
  status: string;
  timestamp: string;
  related_entities: Array<
    | GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals71$Outbound
    | GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals72$Outbound
    | GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals73$Outbound
    | GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals74$Outbound
  >;
};

/** @internal */
export const GetV2LogsIdEvals7$outboundSchema: z.ZodType<
  GetV2LogsIdEvals7$Outbound,
  z.ZodTypeDef,
  GetV2LogsIdEvals7
> = z.object({
  type:
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody27Type$outboundSchema,
  workflowRun: z.lazy(() => EvalsWorkflowRun$outboundSchema),
  id: z.string(),
  status:
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody27Status$outboundSchema,
  timestamp: z.date().transform(v => v.toISOString()),
  relatedEntities: z.array(
    z.union([
      z.lazy(() =>
        GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals71$outboundSchema
      ),
      z.lazy(() =>
        GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals72$outboundSchema
      ),
      z.lazy(() =>
        GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals73$outboundSchema
      ),
      z.lazy(() =>
        GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals74$outboundSchema
      ),
    ]),
  ),
}).transform((v) => {
  return remap$(v, {
    workflowRun: "workflow_run",
    relatedEntities: "related_entities",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdEvals7$ {
  /** @deprecated use `GetV2LogsIdEvals7$inboundSchema` instead. */
  export const inboundSchema = GetV2LogsIdEvals7$inboundSchema;
  /** @deprecated use `GetV2LogsIdEvals7$outboundSchema` instead. */
  export const outboundSchema = GetV2LogsIdEvals7$outboundSchema;
  /** @deprecated use `GetV2LogsIdEvals7$Outbound` instead. */
  export type Outbound = GetV2LogsIdEvals7$Outbound;
}

export function getV2LogsIdEvals7ToJSON(
  getV2LogsIdEvals7: GetV2LogsIdEvals7,
): string {
  return JSON.stringify(
    GetV2LogsIdEvals7$outboundSchema.parse(getV2LogsIdEvals7),
  );
}

export function getV2LogsIdEvals7FromJSON(
  jsonString: string,
): SafeParseResult<GetV2LogsIdEvals7, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetV2LogsIdEvals7$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetV2LogsIdEvals7' from JSON`,
  );
}

/** @internal */
export const GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody26Type$inboundSchema:
  z.ZodNativeEnum<
    typeof GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody26Type
  > = z.nativeEnum(
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody26Type,
  );

/** @internal */
export const GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody26Type$outboundSchema:
  z.ZodNativeEnum<
    typeof GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody26Type
  > =
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody26Type$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody26Type$ {
  /** @deprecated use `GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody26Type$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody26Type$inboundSchema;
  /** @deprecated use `GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody26Type$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody26Type$outboundSchema;
}

/** @internal */
export const GetV2LogsIdEvalsResponse200Value$inboundSchema: z.ZodType<
  GetV2LogsIdEvalsResponse200Value,
  z.ZodTypeDef,
  unknown
> = z.object({
  f1: z.number(),
  precision: z.number(),
  recall: z.number(),
});

/** @internal */
export type GetV2LogsIdEvalsResponse200Value$Outbound = {
  f1: number;
  precision: number;
  recall: number;
};

/** @internal */
export const GetV2LogsIdEvalsResponse200Value$outboundSchema: z.ZodType<
  GetV2LogsIdEvalsResponse200Value$Outbound,
  z.ZodTypeDef,
  GetV2LogsIdEvalsResponse200Value
> = z.object({
  f1: z.number(),
  precision: z.number(),
  recall: z.number(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdEvalsResponse200Value$ {
  /** @deprecated use `GetV2LogsIdEvalsResponse200Value$inboundSchema` instead. */
  export const inboundSchema = GetV2LogsIdEvalsResponse200Value$inboundSchema;
  /** @deprecated use `GetV2LogsIdEvalsResponse200Value$outboundSchema` instead. */
  export const outboundSchema = GetV2LogsIdEvalsResponse200Value$outboundSchema;
  /** @deprecated use `GetV2LogsIdEvalsResponse200Value$Outbound` instead. */
  export type Outbound = GetV2LogsIdEvalsResponse200Value$Outbound;
}

export function getV2LogsIdEvalsResponse200ValueToJSON(
  getV2LogsIdEvalsResponse200Value: GetV2LogsIdEvalsResponse200Value,
): string {
  return JSON.stringify(
    GetV2LogsIdEvalsResponse200Value$outboundSchema.parse(
      getV2LogsIdEvalsResponse200Value,
    ),
  );
}

export function getV2LogsIdEvalsResponse200ValueFromJSON(
  jsonString: string,
): SafeParseResult<GetV2LogsIdEvalsResponse200Value, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetV2LogsIdEvalsResponse200Value$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetV2LogsIdEvalsResponse200Value' from JSON`,
  );
}

/** @internal */
export const GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody26Status$inboundSchema:
  z.ZodNativeEnum<
    typeof GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody26Status
  > = z.nativeEnum(
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody26Status,
  );

/** @internal */
export const GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody26Status$outboundSchema:
  z.ZodNativeEnum<
    typeof GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody26Status
  > =
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody26Status$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody26Status$ {
  /** @deprecated use `GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody26Status$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody26Status$inboundSchema;
  /** @deprecated use `GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody26Status$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody26Status$outboundSchema;
}

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals64Type$inboundSchema:
  z.ZodNativeEnum<
    typeof GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals64Type
  > = z.nativeEnum(
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals64Type,
  );

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals64Type$outboundSchema:
  z.ZodNativeEnum<
    typeof GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals64Type
  > =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals64Type$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals64Type$ {
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals64Type$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals64Type$inboundSchema;
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals64Type$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals64Type$outboundSchema;
}

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals64$inboundSchema:
  z.ZodType<
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals64,
    z.ZodTypeDef,
    unknown
  > = z.object({
    type:
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals64Type$inboundSchema,
    evaluator_id: z.string(),
  }).transform((v) => {
    return remap$(v, {
      "evaluator_id": "evaluatorId",
    });
  });

/** @internal */
export type GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals64$Outbound =
  {
    type: string;
    evaluator_id: string;
  };

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals64$outboundSchema:
  z.ZodType<
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals64$Outbound,
    z.ZodTypeDef,
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals64
  > = z.object({
    type:
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals64Type$outboundSchema,
    evaluatorId: z.string(),
  }).transform((v) => {
    return remap$(v, {
      evaluatorId: "evaluator_id",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals64$ {
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals64$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals64$inboundSchema;
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals64$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals64$outboundSchema;
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals64$Outbound` instead. */
  export type Outbound =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals64$Outbound;
}

export function getV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals64ToJSON(
  getV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals64:
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals64,
): string {
  return JSON.stringify(
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals64$outboundSchema
      .parse(
        getV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals64,
      ),
  );
}

export function getV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals64FromJSON(
  jsonString: string,
): SafeParseResult<
  GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals64,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals64$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals64' from JSON`,
  );
}

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals63Type$inboundSchema:
  z.ZodNativeEnum<
    typeof GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals63Type
  > = z.nativeEnum(
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals63Type,
  );

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals63Type$outboundSchema:
  z.ZodNativeEnum<
    typeof GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals63Type
  > =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals63Type$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals63Type$ {
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals63Type$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals63Type$inboundSchema;
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals63Type$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals63Type$outboundSchema;
}

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals63$inboundSchema:
  z.ZodType<
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals63,
    z.ZodTypeDef,
    unknown
  > = z.object({
    type:
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals63Type$inboundSchema,
    human_eval_id: z.string(),
  }).transform((v) => {
    return remap$(v, {
      "human_eval_id": "humanEvalId",
    });
  });

/** @internal */
export type GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals63$Outbound =
  {
    type: string;
    human_eval_id: string;
  };

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals63$outboundSchema:
  z.ZodType<
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals63$Outbound,
    z.ZodTypeDef,
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals63
  > = z.object({
    type:
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals63Type$outboundSchema,
    humanEvalId: z.string(),
  }).transform((v) => {
    return remap$(v, {
      humanEvalId: "human_eval_id",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals63$ {
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals63$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals63$inboundSchema;
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals63$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals63$outboundSchema;
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals63$Outbound` instead. */
  export type Outbound =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals63$Outbound;
}

export function getV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals63ToJSON(
  getV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals63:
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals63,
): string {
  return JSON.stringify(
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals63$outboundSchema
      .parse(
        getV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals63,
      ),
  );
}

export function getV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals63FromJSON(
  jsonString: string,
): SafeParseResult<
  GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals63,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals63$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals63' from JSON`,
  );
}

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals62Type$inboundSchema:
  z.ZodNativeEnum<
    typeof GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals62Type
  > = z.nativeEnum(
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals62Type,
  );

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals62Type$outboundSchema:
  z.ZodNativeEnum<
    typeof GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals62Type
  > =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals62Type$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals62Type$ {
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals62Type$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals62Type$inboundSchema;
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals62Type$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals62Type$outboundSchema;
}

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals62$inboundSchema:
  z.ZodType<
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals62,
    z.ZodTypeDef,
    unknown
  > = z.object({
    type:
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals62Type$inboundSchema,
    contact_id: z.string(),
  }).transform((v) => {
    return remap$(v, {
      "contact_id": "contactId",
    });
  });

/** @internal */
export type GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals62$Outbound =
  {
    type: string;
    contact_id: string;
  };

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals62$outboundSchema:
  z.ZodType<
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals62$Outbound,
    z.ZodTypeDef,
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals62
  > = z.object({
    type:
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals62Type$outboundSchema,
    contactId: z.string(),
  }).transform((v) => {
    return remap$(v, {
      contactId: "contact_id",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals62$ {
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals62$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals62$inboundSchema;
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals62$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals62$outboundSchema;
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals62$Outbound` instead. */
  export type Outbound =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals62$Outbound;
}

export function getV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals62ToJSON(
  getV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals62:
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals62,
): string {
  return JSON.stringify(
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals62$outboundSchema
      .parse(
        getV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals62,
      ),
  );
}

export function getV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals62FromJSON(
  jsonString: string,
): SafeParseResult<
  GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals62,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals62$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals62' from JSON`,
  );
}

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals6Type$inboundSchema:
  z.ZodNativeEnum<
    typeof GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals6Type
  > = z.nativeEnum(
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals6Type,
  );

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals6Type$outboundSchema:
  z.ZodNativeEnum<
    typeof GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals6Type
  > =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals6Type$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals6Type$ {
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals6Type$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals6Type$inboundSchema;
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals6Type$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals6Type$outboundSchema;
}

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals61$inboundSchema:
  z.ZodType<
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals61,
    z.ZodTypeDef,
    unknown
  > = z.object({
    type:
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals6Type$inboundSchema,
    account_id: z.string(),
  }).transform((v) => {
    return remap$(v, {
      "account_id": "accountId",
    });
  });

/** @internal */
export type GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals61$Outbound =
  {
    type: string;
    account_id: string;
  };

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals61$outboundSchema:
  z.ZodType<
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals61$Outbound,
    z.ZodTypeDef,
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals61
  > = z.object({
    type:
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals6Type$outboundSchema,
    accountId: z.string(),
  }).transform((v) => {
    return remap$(v, {
      accountId: "account_id",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals61$ {
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals61$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals61$inboundSchema;
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals61$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals61$outboundSchema;
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals61$Outbound` instead. */
  export type Outbound =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals61$Outbound;
}

export function getV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals61ToJSON(
  getV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals61:
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals61,
): string {
  return JSON.stringify(
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals61$outboundSchema
      .parse(
        getV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals61,
      ),
  );
}

export function getV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals61FromJSON(
  jsonString: string,
): SafeParseResult<
  GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals61,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals61$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals61' from JSON`,
  );
}

/** @internal */
export const GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody26RelatedEntities$inboundSchema:
  z.ZodType<
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody26RelatedEntities,
    z.ZodTypeDef,
    unknown
  > = z.union([
    z.lazy(() =>
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals61$inboundSchema
    ),
    z.lazy(() =>
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals62$inboundSchema
    ),
    z.lazy(() =>
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals63$inboundSchema
    ),
    z.lazy(() =>
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals64$inboundSchema
    ),
  ]);

/** @internal */
export type GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody26RelatedEntities$Outbound =
  | GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals61$Outbound
  | GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals62$Outbound
  | GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals63$Outbound
  | GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals64$Outbound;

/** @internal */
export const GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody26RelatedEntities$outboundSchema:
  z.ZodType<
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody26RelatedEntities$Outbound,
    z.ZodTypeDef,
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody26RelatedEntities
  > = z.union([
    z.lazy(() =>
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals61$outboundSchema
    ),
    z.lazy(() =>
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals62$outboundSchema
    ),
    z.lazy(() =>
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals63$outboundSchema
    ),
    z.lazy(() =>
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals64$outboundSchema
    ),
  ]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody26RelatedEntities$ {
  /** @deprecated use `GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody26RelatedEntities$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody26RelatedEntities$inboundSchema;
  /** @deprecated use `GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody26RelatedEntities$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody26RelatedEntities$outboundSchema;
  /** @deprecated use `GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody26RelatedEntities$Outbound` instead. */
  export type Outbound =
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody26RelatedEntities$Outbound;
}

export function getV2LogsIdEvalsResponse200ApplicationJSONResponseBody26RelatedEntitiesToJSON(
  getV2LogsIdEvalsResponse200ApplicationJSONResponseBody26RelatedEntities:
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody26RelatedEntities,
): string {
  return JSON.stringify(
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody26RelatedEntities$outboundSchema
      .parse(
        getV2LogsIdEvalsResponse200ApplicationJSONResponseBody26RelatedEntities,
      ),
  );
}

export function getV2LogsIdEvalsResponse200ApplicationJSONResponseBody26RelatedEntitiesFromJSON(
  jsonString: string,
): SafeParseResult<
  GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody26RelatedEntities,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody26RelatedEntities$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody26RelatedEntities' from JSON`,
  );
}

/** @internal */
export const GetV2LogsIdEvals6$inboundSchema: z.ZodType<
  GetV2LogsIdEvals6,
  z.ZodTypeDef,
  unknown
> = z.object({
  type:
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody26Type$inboundSchema,
  value: z.lazy(() => GetV2LogsIdEvalsResponse200Value$inboundSchema),
  id: z.string(),
  status:
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody26Status$inboundSchema,
  timestamp: z.string().datetime({ offset: true }).transform(v => new Date(v)),
  related_entities: z.array(
    z.union([
      z.lazy(() =>
        GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals61$inboundSchema
      ),
      z.lazy(() =>
        GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals62$inboundSchema
      ),
      z.lazy(() =>
        GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals63$inboundSchema
      ),
      z.lazy(() =>
        GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals64$inboundSchema
      ),
    ]),
  ),
}).transform((v) => {
  return remap$(v, {
    "related_entities": "relatedEntities",
  });
});

/** @internal */
export type GetV2LogsIdEvals6$Outbound = {
  type: string;
  value: GetV2LogsIdEvalsResponse200Value$Outbound;
  id: string;
  status: string;
  timestamp: string;
  related_entities: Array<
    | GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals61$Outbound
    | GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals62$Outbound
    | GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals63$Outbound
    | GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals64$Outbound
  >;
};

/** @internal */
export const GetV2LogsIdEvals6$outboundSchema: z.ZodType<
  GetV2LogsIdEvals6$Outbound,
  z.ZodTypeDef,
  GetV2LogsIdEvals6
> = z.object({
  type:
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody26Type$outboundSchema,
  value: z.lazy(() => GetV2LogsIdEvalsResponse200Value$outboundSchema),
  id: z.string(),
  status:
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody26Status$outboundSchema,
  timestamp: z.date().transform(v => v.toISOString()),
  relatedEntities: z.array(
    z.union([
      z.lazy(() =>
        GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals61$outboundSchema
      ),
      z.lazy(() =>
        GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals62$outboundSchema
      ),
      z.lazy(() =>
        GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals63$outboundSchema
      ),
      z.lazy(() =>
        GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals64$outboundSchema
      ),
    ]),
  ),
}).transform((v) => {
  return remap$(v, {
    relatedEntities: "related_entities",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdEvals6$ {
  /** @deprecated use `GetV2LogsIdEvals6$inboundSchema` instead. */
  export const inboundSchema = GetV2LogsIdEvals6$inboundSchema;
  /** @deprecated use `GetV2LogsIdEvals6$outboundSchema` instead. */
  export const outboundSchema = GetV2LogsIdEvals6$outboundSchema;
  /** @deprecated use `GetV2LogsIdEvals6$Outbound` instead. */
  export type Outbound = GetV2LogsIdEvals6$Outbound;
}

export function getV2LogsIdEvals6ToJSON(
  getV2LogsIdEvals6: GetV2LogsIdEvals6,
): string {
  return JSON.stringify(
    GetV2LogsIdEvals6$outboundSchema.parse(getV2LogsIdEvals6),
  );
}

export function getV2LogsIdEvals6FromJSON(
  jsonString: string,
): SafeParseResult<GetV2LogsIdEvals6, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetV2LogsIdEvals6$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetV2LogsIdEvals6' from JSON`,
  );
}

/** @internal */
export const GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody25Type$inboundSchema:
  z.ZodNativeEnum<
    typeof GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody25Type
  > = z.nativeEnum(
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody25Type,
  );

/** @internal */
export const GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody25Type$outboundSchema:
  z.ZodNativeEnum<
    typeof GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody25Type
  > =
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody25Type$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody25Type$ {
  /** @deprecated use `GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody25Type$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody25Type$inboundSchema;
  /** @deprecated use `GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody25Type$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody25Type$outboundSchema;
}

/** @internal */
export const EvalsRouge1$inboundSchema: z.ZodType<
  EvalsRouge1,
  z.ZodTypeDef,
  unknown
> = z.object({
  f1: z.number(),
  precision: z.number(),
  recall: z.number(),
});

/** @internal */
export type EvalsRouge1$Outbound = {
  f1: number;
  precision: number;
  recall: number;
};

/** @internal */
export const EvalsRouge1$outboundSchema: z.ZodType<
  EvalsRouge1$Outbound,
  z.ZodTypeDef,
  EvalsRouge1
> = z.object({
  f1: z.number(),
  precision: z.number(),
  recall: z.number(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EvalsRouge1$ {
  /** @deprecated use `EvalsRouge1$inboundSchema` instead. */
  export const inboundSchema = EvalsRouge1$inboundSchema;
  /** @deprecated use `EvalsRouge1$outboundSchema` instead. */
  export const outboundSchema = EvalsRouge1$outboundSchema;
  /** @deprecated use `EvalsRouge1$Outbound` instead. */
  export type Outbound = EvalsRouge1$Outbound;
}

export function evalsRouge1ToJSON(evalsRouge1: EvalsRouge1): string {
  return JSON.stringify(EvalsRouge1$outboundSchema.parse(evalsRouge1));
}

export function evalsRouge1FromJSON(
  jsonString: string,
): SafeParseResult<EvalsRouge1, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => EvalsRouge1$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'EvalsRouge1' from JSON`,
  );
}

/** @internal */
export const EvalsRouge2$inboundSchema: z.ZodType<
  EvalsRouge2,
  z.ZodTypeDef,
  unknown
> = z.object({
  f1: z.number(),
  precision: z.number(),
  recall: z.number(),
});

/** @internal */
export type EvalsRouge2$Outbound = {
  f1: number;
  precision: number;
  recall: number;
};

/** @internal */
export const EvalsRouge2$outboundSchema: z.ZodType<
  EvalsRouge2$Outbound,
  z.ZodTypeDef,
  EvalsRouge2
> = z.object({
  f1: z.number(),
  precision: z.number(),
  recall: z.number(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EvalsRouge2$ {
  /** @deprecated use `EvalsRouge2$inboundSchema` instead. */
  export const inboundSchema = EvalsRouge2$inboundSchema;
  /** @deprecated use `EvalsRouge2$outboundSchema` instead. */
  export const outboundSchema = EvalsRouge2$outboundSchema;
  /** @deprecated use `EvalsRouge2$Outbound` instead. */
  export type Outbound = EvalsRouge2$Outbound;
}

export function evalsRouge2ToJSON(evalsRouge2: EvalsRouge2): string {
  return JSON.stringify(EvalsRouge2$outboundSchema.parse(evalsRouge2));
}

export function evalsRouge2FromJSON(
  jsonString: string,
): SafeParseResult<EvalsRouge2, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => EvalsRouge2$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'EvalsRouge2' from JSON`,
  );
}

/** @internal */
export const EvalsRougeL$inboundSchema: z.ZodType<
  EvalsRougeL,
  z.ZodTypeDef,
  unknown
> = z.object({
  f1: z.number(),
  precision: z.number(),
  recall: z.number(),
});

/** @internal */
export type EvalsRougeL$Outbound = {
  f1: number;
  precision: number;
  recall: number;
};

/** @internal */
export const EvalsRougeL$outboundSchema: z.ZodType<
  EvalsRougeL$Outbound,
  z.ZodTypeDef,
  EvalsRougeL
> = z.object({
  f1: z.number(),
  precision: z.number(),
  recall: z.number(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EvalsRougeL$ {
  /** @deprecated use `EvalsRougeL$inboundSchema` instead. */
  export const inboundSchema = EvalsRougeL$inboundSchema;
  /** @deprecated use `EvalsRougeL$outboundSchema` instead. */
  export const outboundSchema = EvalsRougeL$outboundSchema;
  /** @deprecated use `EvalsRougeL$Outbound` instead. */
  export type Outbound = EvalsRougeL$Outbound;
}

export function evalsRougeLToJSON(evalsRougeL: EvalsRougeL): string {
  return JSON.stringify(EvalsRougeL$outboundSchema.parse(evalsRougeL));
}

export function evalsRougeLFromJSON(
  jsonString: string,
): SafeParseResult<EvalsRougeL, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => EvalsRougeL$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'EvalsRougeL' from JSON`,
  );
}

/** @internal */
export const GetV2LogsIdEvalsResponseValue$inboundSchema: z.ZodType<
  GetV2LogsIdEvalsResponseValue,
  z.ZodTypeDef,
  unknown
> = z.object({
  rouge_1: z.lazy(() => EvalsRouge1$inboundSchema),
  rouge_2: z.lazy(() => EvalsRouge2$inboundSchema),
  rouge_l: z.lazy(() => EvalsRougeL$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "rouge_1": "rouge1",
    "rouge_2": "rouge2",
    "rouge_l": "rougeL",
  });
});

/** @internal */
export type GetV2LogsIdEvalsResponseValue$Outbound = {
  rouge_1: EvalsRouge1$Outbound;
  rouge_2: EvalsRouge2$Outbound;
  rouge_l: EvalsRougeL$Outbound;
};

/** @internal */
export const GetV2LogsIdEvalsResponseValue$outboundSchema: z.ZodType<
  GetV2LogsIdEvalsResponseValue$Outbound,
  z.ZodTypeDef,
  GetV2LogsIdEvalsResponseValue
> = z.object({
  rouge1: z.lazy(() => EvalsRouge1$outboundSchema),
  rouge2: z.lazy(() => EvalsRouge2$outboundSchema),
  rougeL: z.lazy(() => EvalsRougeL$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    rouge1: "rouge_1",
    rouge2: "rouge_2",
    rougeL: "rouge_l",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdEvalsResponseValue$ {
  /** @deprecated use `GetV2LogsIdEvalsResponseValue$inboundSchema` instead. */
  export const inboundSchema = GetV2LogsIdEvalsResponseValue$inboundSchema;
  /** @deprecated use `GetV2LogsIdEvalsResponseValue$outboundSchema` instead. */
  export const outboundSchema = GetV2LogsIdEvalsResponseValue$outboundSchema;
  /** @deprecated use `GetV2LogsIdEvalsResponseValue$Outbound` instead. */
  export type Outbound = GetV2LogsIdEvalsResponseValue$Outbound;
}

export function getV2LogsIdEvalsResponseValueToJSON(
  getV2LogsIdEvalsResponseValue: GetV2LogsIdEvalsResponseValue,
): string {
  return JSON.stringify(
    GetV2LogsIdEvalsResponseValue$outboundSchema.parse(
      getV2LogsIdEvalsResponseValue,
    ),
  );
}

export function getV2LogsIdEvalsResponseValueFromJSON(
  jsonString: string,
): SafeParseResult<GetV2LogsIdEvalsResponseValue, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetV2LogsIdEvalsResponseValue$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetV2LogsIdEvalsResponseValue' from JSON`,
  );
}

/** @internal */
export const GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody25Status$inboundSchema:
  z.ZodNativeEnum<
    typeof GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody25Status
  > = z.nativeEnum(
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody25Status,
  );

/** @internal */
export const GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody25Status$outboundSchema:
  z.ZodNativeEnum<
    typeof GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody25Status
  > =
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody25Status$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody25Status$ {
  /** @deprecated use `GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody25Status$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody25Status$inboundSchema;
  /** @deprecated use `GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody25Status$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody25Status$outboundSchema;
}

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals54Type$inboundSchema:
  z.ZodNativeEnum<
    typeof GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals54Type
  > = z.nativeEnum(
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals54Type,
  );

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals54Type$outboundSchema:
  z.ZodNativeEnum<
    typeof GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals54Type
  > =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals54Type$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals54Type$ {
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals54Type$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals54Type$inboundSchema;
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals54Type$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals54Type$outboundSchema;
}

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals54$inboundSchema:
  z.ZodType<
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals54,
    z.ZodTypeDef,
    unknown
  > = z.object({
    type:
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals54Type$inboundSchema,
    evaluator_id: z.string(),
  }).transform((v) => {
    return remap$(v, {
      "evaluator_id": "evaluatorId",
    });
  });

/** @internal */
export type GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals54$Outbound =
  {
    type: string;
    evaluator_id: string;
  };

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals54$outboundSchema:
  z.ZodType<
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals54$Outbound,
    z.ZodTypeDef,
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals54
  > = z.object({
    type:
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals54Type$outboundSchema,
    evaluatorId: z.string(),
  }).transform((v) => {
    return remap$(v, {
      evaluatorId: "evaluator_id",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals54$ {
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals54$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals54$inboundSchema;
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals54$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals54$outboundSchema;
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals54$Outbound` instead. */
  export type Outbound =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals54$Outbound;
}

export function getV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals54ToJSON(
  getV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals54:
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals54,
): string {
  return JSON.stringify(
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals54$outboundSchema
      .parse(
        getV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals54,
      ),
  );
}

export function getV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals54FromJSON(
  jsonString: string,
): SafeParseResult<
  GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals54,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals54$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals54' from JSON`,
  );
}

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals53Type$inboundSchema:
  z.ZodNativeEnum<
    typeof GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals53Type
  > = z.nativeEnum(
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals53Type,
  );

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals53Type$outboundSchema:
  z.ZodNativeEnum<
    typeof GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals53Type
  > =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals53Type$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals53Type$ {
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals53Type$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals53Type$inboundSchema;
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals53Type$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals53Type$outboundSchema;
}

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals53$inboundSchema:
  z.ZodType<
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals53,
    z.ZodTypeDef,
    unknown
  > = z.object({
    type:
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals53Type$inboundSchema,
    human_eval_id: z.string(),
  }).transform((v) => {
    return remap$(v, {
      "human_eval_id": "humanEvalId",
    });
  });

/** @internal */
export type GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals53$Outbound =
  {
    type: string;
    human_eval_id: string;
  };

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals53$outboundSchema:
  z.ZodType<
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals53$Outbound,
    z.ZodTypeDef,
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals53
  > = z.object({
    type:
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals53Type$outboundSchema,
    humanEvalId: z.string(),
  }).transform((v) => {
    return remap$(v, {
      humanEvalId: "human_eval_id",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals53$ {
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals53$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals53$inboundSchema;
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals53$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals53$outboundSchema;
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals53$Outbound` instead. */
  export type Outbound =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals53$Outbound;
}

export function getV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals53ToJSON(
  getV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals53:
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals53,
): string {
  return JSON.stringify(
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals53$outboundSchema
      .parse(
        getV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals53,
      ),
  );
}

export function getV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals53FromJSON(
  jsonString: string,
): SafeParseResult<
  GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals53,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals53$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals53' from JSON`,
  );
}

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals52Type$inboundSchema:
  z.ZodNativeEnum<
    typeof GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals52Type
  > = z.nativeEnum(
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals52Type,
  );

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals52Type$outboundSchema:
  z.ZodNativeEnum<
    typeof GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals52Type
  > =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals52Type$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals52Type$ {
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals52Type$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals52Type$inboundSchema;
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals52Type$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals52Type$outboundSchema;
}

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals52$inboundSchema:
  z.ZodType<
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals52,
    z.ZodTypeDef,
    unknown
  > = z.object({
    type:
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals52Type$inboundSchema,
    contact_id: z.string(),
  }).transform((v) => {
    return remap$(v, {
      "contact_id": "contactId",
    });
  });

/** @internal */
export type GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals52$Outbound =
  {
    type: string;
    contact_id: string;
  };

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals52$outboundSchema:
  z.ZodType<
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals52$Outbound,
    z.ZodTypeDef,
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals52
  > = z.object({
    type:
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals52Type$outboundSchema,
    contactId: z.string(),
  }).transform((v) => {
    return remap$(v, {
      contactId: "contact_id",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals52$ {
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals52$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals52$inboundSchema;
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals52$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals52$outboundSchema;
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals52$Outbound` instead. */
  export type Outbound =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals52$Outbound;
}

export function getV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals52ToJSON(
  getV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals52:
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals52,
): string {
  return JSON.stringify(
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals52$outboundSchema
      .parse(
        getV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals52,
      ),
  );
}

export function getV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals52FromJSON(
  jsonString: string,
): SafeParseResult<
  GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals52,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals52$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals52' from JSON`,
  );
}

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals5Type$inboundSchema:
  z.ZodNativeEnum<
    typeof GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals5Type
  > = z.nativeEnum(
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals5Type,
  );

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals5Type$outboundSchema:
  z.ZodNativeEnum<
    typeof GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals5Type
  > =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals5Type$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals5Type$ {
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals5Type$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals5Type$inboundSchema;
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals5Type$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals5Type$outboundSchema;
}

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals51$inboundSchema:
  z.ZodType<
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals51,
    z.ZodTypeDef,
    unknown
  > = z.object({
    type:
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals5Type$inboundSchema,
    account_id: z.string(),
  }).transform((v) => {
    return remap$(v, {
      "account_id": "accountId",
    });
  });

/** @internal */
export type GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals51$Outbound =
  {
    type: string;
    account_id: string;
  };

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals51$outboundSchema:
  z.ZodType<
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals51$Outbound,
    z.ZodTypeDef,
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals51
  > = z.object({
    type:
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals5Type$outboundSchema,
    accountId: z.string(),
  }).transform((v) => {
    return remap$(v, {
      accountId: "account_id",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals51$ {
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals51$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals51$inboundSchema;
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals51$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals51$outboundSchema;
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals51$Outbound` instead. */
  export type Outbound =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals51$Outbound;
}

export function getV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals51ToJSON(
  getV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals51:
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals51,
): string {
  return JSON.stringify(
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals51$outboundSchema
      .parse(
        getV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals51,
      ),
  );
}

export function getV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals51FromJSON(
  jsonString: string,
): SafeParseResult<
  GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals51,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals51$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals51' from JSON`,
  );
}

/** @internal */
export const GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody25RelatedEntities$inboundSchema:
  z.ZodType<
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody25RelatedEntities,
    z.ZodTypeDef,
    unknown
  > = z.union([
    z.lazy(() =>
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals51$inboundSchema
    ),
    z.lazy(() =>
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals52$inboundSchema
    ),
    z.lazy(() =>
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals53$inboundSchema
    ),
    z.lazy(() =>
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals54$inboundSchema
    ),
  ]);

/** @internal */
export type GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody25RelatedEntities$Outbound =
  | GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals51$Outbound
  | GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals52$Outbound
  | GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals53$Outbound
  | GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals54$Outbound;

/** @internal */
export const GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody25RelatedEntities$outboundSchema:
  z.ZodType<
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody25RelatedEntities$Outbound,
    z.ZodTypeDef,
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody25RelatedEntities
  > = z.union([
    z.lazy(() =>
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals51$outboundSchema
    ),
    z.lazy(() =>
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals52$outboundSchema
    ),
    z.lazy(() =>
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals53$outboundSchema
    ),
    z.lazy(() =>
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals54$outboundSchema
    ),
  ]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody25RelatedEntities$ {
  /** @deprecated use `GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody25RelatedEntities$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody25RelatedEntities$inboundSchema;
  /** @deprecated use `GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody25RelatedEntities$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody25RelatedEntities$outboundSchema;
  /** @deprecated use `GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody25RelatedEntities$Outbound` instead. */
  export type Outbound =
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody25RelatedEntities$Outbound;
}

export function getV2LogsIdEvalsResponse200ApplicationJSONResponseBody25RelatedEntitiesToJSON(
  getV2LogsIdEvalsResponse200ApplicationJSONResponseBody25RelatedEntities:
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody25RelatedEntities,
): string {
  return JSON.stringify(
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody25RelatedEntities$outboundSchema
      .parse(
        getV2LogsIdEvalsResponse200ApplicationJSONResponseBody25RelatedEntities,
      ),
  );
}

export function getV2LogsIdEvalsResponse200ApplicationJSONResponseBody25RelatedEntitiesFromJSON(
  jsonString: string,
): SafeParseResult<
  GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody25RelatedEntities,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody25RelatedEntities$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody25RelatedEntities' from JSON`,
  );
}

/** @internal */
export const GetV2LogsIdEvals5$inboundSchema: z.ZodType<
  GetV2LogsIdEvals5,
  z.ZodTypeDef,
  unknown
> = z.object({
  type:
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody25Type$inboundSchema,
  value: z.lazy(() => GetV2LogsIdEvalsResponseValue$inboundSchema),
  id: z.string(),
  status:
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody25Status$inboundSchema,
  timestamp: z.string().datetime({ offset: true }).transform(v => new Date(v)),
  related_entities: z.array(
    z.union([
      z.lazy(() =>
        GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals51$inboundSchema
      ),
      z.lazy(() =>
        GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals52$inboundSchema
      ),
      z.lazy(() =>
        GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals53$inboundSchema
      ),
      z.lazy(() =>
        GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals54$inboundSchema
      ),
    ]),
  ),
}).transform((v) => {
  return remap$(v, {
    "related_entities": "relatedEntities",
  });
});

/** @internal */
export type GetV2LogsIdEvals5$Outbound = {
  type: string;
  value: GetV2LogsIdEvalsResponseValue$Outbound;
  id: string;
  status: string;
  timestamp: string;
  related_entities: Array<
    | GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals51$Outbound
    | GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals52$Outbound
    | GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals53$Outbound
    | GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals54$Outbound
  >;
};

/** @internal */
export const GetV2LogsIdEvals5$outboundSchema: z.ZodType<
  GetV2LogsIdEvals5$Outbound,
  z.ZodTypeDef,
  GetV2LogsIdEvals5
> = z.object({
  type:
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody25Type$outboundSchema,
  value: z.lazy(() => GetV2LogsIdEvalsResponseValue$outboundSchema),
  id: z.string(),
  status:
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody25Status$outboundSchema,
  timestamp: z.date().transform(v => v.toISOString()),
  relatedEntities: z.array(
    z.union([
      z.lazy(() =>
        GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals51$outboundSchema
      ),
      z.lazy(() =>
        GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals52$outboundSchema
      ),
      z.lazy(() =>
        GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals53$outboundSchema
      ),
      z.lazy(() =>
        GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals54$outboundSchema
      ),
    ]),
  ),
}).transform((v) => {
  return remap$(v, {
    relatedEntities: "related_entities",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdEvals5$ {
  /** @deprecated use `GetV2LogsIdEvals5$inboundSchema` instead. */
  export const inboundSchema = GetV2LogsIdEvals5$inboundSchema;
  /** @deprecated use `GetV2LogsIdEvals5$outboundSchema` instead. */
  export const outboundSchema = GetV2LogsIdEvals5$outboundSchema;
  /** @deprecated use `GetV2LogsIdEvals5$Outbound` instead. */
  export type Outbound = GetV2LogsIdEvals5$Outbound;
}

export function getV2LogsIdEvals5ToJSON(
  getV2LogsIdEvals5: GetV2LogsIdEvals5,
): string {
  return JSON.stringify(
    GetV2LogsIdEvals5$outboundSchema.parse(getV2LogsIdEvals5),
  );
}

export function getV2LogsIdEvals5FromJSON(
  jsonString: string,
): SafeParseResult<GetV2LogsIdEvals5, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetV2LogsIdEvals5$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetV2LogsIdEvals5' from JSON`,
  );
}

/** @internal */
export const GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody24Type$inboundSchema:
  z.ZodNativeEnum<
    typeof GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody24Type
  > = z.nativeEnum(
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody24Type,
  );

/** @internal */
export const GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody24Type$outboundSchema:
  z.ZodNativeEnum<
    typeof GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody24Type
  > =
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody24Type$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody24Type$ {
  /** @deprecated use `GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody24Type$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody24Type$inboundSchema;
  /** @deprecated use `GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody24Type$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody24Type$outboundSchema;
}

/** @internal */
export const GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody24Status$inboundSchema:
  z.ZodNativeEnum<
    typeof GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody24Status
  > = z.nativeEnum(
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody24Status,
  );

/** @internal */
export const GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody24Status$outboundSchema:
  z.ZodNativeEnum<
    typeof GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody24Status
  > =
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody24Status$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody24Status$ {
  /** @deprecated use `GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody24Status$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody24Status$inboundSchema;
  /** @deprecated use `GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody24Status$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody24Status$outboundSchema;
}

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals44Type$inboundSchema:
  z.ZodNativeEnum<
    typeof GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals44Type
  > = z.nativeEnum(
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals44Type,
  );

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals44Type$outboundSchema:
  z.ZodNativeEnum<
    typeof GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals44Type
  > =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals44Type$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals44Type$ {
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals44Type$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals44Type$inboundSchema;
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals44Type$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals44Type$outboundSchema;
}

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals44$inboundSchema:
  z.ZodType<
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals44,
    z.ZodTypeDef,
    unknown
  > = z.object({
    type:
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals44Type$inboundSchema,
    evaluator_id: z.string(),
  }).transform((v) => {
    return remap$(v, {
      "evaluator_id": "evaluatorId",
    });
  });

/** @internal */
export type GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals44$Outbound =
  {
    type: string;
    evaluator_id: string;
  };

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals44$outboundSchema:
  z.ZodType<
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals44$Outbound,
    z.ZodTypeDef,
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals44
  > = z.object({
    type:
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals44Type$outboundSchema,
    evaluatorId: z.string(),
  }).transform((v) => {
    return remap$(v, {
      evaluatorId: "evaluator_id",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals44$ {
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals44$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals44$inboundSchema;
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals44$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals44$outboundSchema;
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals44$Outbound` instead. */
  export type Outbound =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals44$Outbound;
}

export function getV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals44ToJSON(
  getV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals44:
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals44,
): string {
  return JSON.stringify(
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals44$outboundSchema
      .parse(
        getV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals44,
      ),
  );
}

export function getV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals44FromJSON(
  jsonString: string,
): SafeParseResult<
  GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals44,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals44$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals44' from JSON`,
  );
}

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals43Type$inboundSchema:
  z.ZodNativeEnum<
    typeof GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals43Type
  > = z.nativeEnum(
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals43Type,
  );

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals43Type$outboundSchema:
  z.ZodNativeEnum<
    typeof GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals43Type
  > =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals43Type$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals43Type$ {
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals43Type$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals43Type$inboundSchema;
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals43Type$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals43Type$outboundSchema;
}

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals43$inboundSchema:
  z.ZodType<
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals43,
    z.ZodTypeDef,
    unknown
  > = z.object({
    type:
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals43Type$inboundSchema,
    human_eval_id: z.string(),
  }).transform((v) => {
    return remap$(v, {
      "human_eval_id": "humanEvalId",
    });
  });

/** @internal */
export type GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals43$Outbound =
  {
    type: string;
    human_eval_id: string;
  };

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals43$outboundSchema:
  z.ZodType<
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals43$Outbound,
    z.ZodTypeDef,
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals43
  > = z.object({
    type:
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals43Type$outboundSchema,
    humanEvalId: z.string(),
  }).transform((v) => {
    return remap$(v, {
      humanEvalId: "human_eval_id",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals43$ {
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals43$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals43$inboundSchema;
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals43$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals43$outboundSchema;
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals43$Outbound` instead. */
  export type Outbound =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals43$Outbound;
}

export function getV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals43ToJSON(
  getV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals43:
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals43,
): string {
  return JSON.stringify(
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals43$outboundSchema
      .parse(
        getV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals43,
      ),
  );
}

export function getV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals43FromJSON(
  jsonString: string,
): SafeParseResult<
  GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals43,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals43$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals43' from JSON`,
  );
}

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals42Type$inboundSchema:
  z.ZodNativeEnum<
    typeof GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals42Type
  > = z.nativeEnum(
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals42Type,
  );

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals42Type$outboundSchema:
  z.ZodNativeEnum<
    typeof GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals42Type
  > =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals42Type$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals42Type$ {
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals42Type$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals42Type$inboundSchema;
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals42Type$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals42Type$outboundSchema;
}

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals42$inboundSchema:
  z.ZodType<
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals42,
    z.ZodTypeDef,
    unknown
  > = z.object({
    type:
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals42Type$inboundSchema,
    contact_id: z.string(),
  }).transform((v) => {
    return remap$(v, {
      "contact_id": "contactId",
    });
  });

/** @internal */
export type GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals42$Outbound =
  {
    type: string;
    contact_id: string;
  };

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals42$outboundSchema:
  z.ZodType<
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals42$Outbound,
    z.ZodTypeDef,
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals42
  > = z.object({
    type:
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals42Type$outboundSchema,
    contactId: z.string(),
  }).transform((v) => {
    return remap$(v, {
      contactId: "contact_id",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals42$ {
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals42$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals42$inboundSchema;
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals42$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals42$outboundSchema;
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals42$Outbound` instead. */
  export type Outbound =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals42$Outbound;
}

export function getV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals42ToJSON(
  getV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals42:
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals42,
): string {
  return JSON.stringify(
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals42$outboundSchema
      .parse(
        getV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals42,
      ),
  );
}

export function getV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals42FromJSON(
  jsonString: string,
): SafeParseResult<
  GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals42,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals42$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals42' from JSON`,
  );
}

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals4Type$inboundSchema:
  z.ZodNativeEnum<
    typeof GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals4Type
  > = z.nativeEnum(
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals4Type,
  );

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals4Type$outboundSchema:
  z.ZodNativeEnum<
    typeof GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals4Type
  > =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals4Type$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals4Type$ {
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals4Type$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals4Type$inboundSchema;
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals4Type$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals4Type$outboundSchema;
}

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals41$inboundSchema:
  z.ZodType<
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals41,
    z.ZodTypeDef,
    unknown
  > = z.object({
    type:
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals4Type$inboundSchema,
    account_id: z.string(),
  }).transform((v) => {
    return remap$(v, {
      "account_id": "accountId",
    });
  });

/** @internal */
export type GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals41$Outbound =
  {
    type: string;
    account_id: string;
  };

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals41$outboundSchema:
  z.ZodType<
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals41$Outbound,
    z.ZodTypeDef,
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals41
  > = z.object({
    type:
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals4Type$outboundSchema,
    accountId: z.string(),
  }).transform((v) => {
    return remap$(v, {
      accountId: "account_id",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals41$ {
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals41$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals41$inboundSchema;
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals41$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals41$outboundSchema;
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals41$Outbound` instead. */
  export type Outbound =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals41$Outbound;
}

export function getV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals41ToJSON(
  getV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals41:
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals41,
): string {
  return JSON.stringify(
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals41$outboundSchema
      .parse(
        getV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals41,
      ),
  );
}

export function getV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals41FromJSON(
  jsonString: string,
): SafeParseResult<
  GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals41,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals41$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals41' from JSON`,
  );
}

/** @internal */
export const GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody24RelatedEntities$inboundSchema:
  z.ZodType<
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody24RelatedEntities,
    z.ZodTypeDef,
    unknown
  > = z.union([
    z.lazy(() =>
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals41$inboundSchema
    ),
    z.lazy(() =>
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals42$inboundSchema
    ),
    z.lazy(() =>
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals43$inboundSchema
    ),
    z.lazy(() =>
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals44$inboundSchema
    ),
  ]);

/** @internal */
export type GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody24RelatedEntities$Outbound =
  | GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals41$Outbound
  | GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals42$Outbound
  | GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals43$Outbound
  | GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals44$Outbound;

/** @internal */
export const GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody24RelatedEntities$outboundSchema:
  z.ZodType<
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody24RelatedEntities$Outbound,
    z.ZodTypeDef,
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody24RelatedEntities
  > = z.union([
    z.lazy(() =>
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals41$outboundSchema
    ),
    z.lazy(() =>
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals42$outboundSchema
    ),
    z.lazy(() =>
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals43$outboundSchema
    ),
    z.lazy(() =>
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals44$outboundSchema
    ),
  ]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody24RelatedEntities$ {
  /** @deprecated use `GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody24RelatedEntities$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody24RelatedEntities$inboundSchema;
  /** @deprecated use `GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody24RelatedEntities$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody24RelatedEntities$outboundSchema;
  /** @deprecated use `GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody24RelatedEntities$Outbound` instead. */
  export type Outbound =
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody24RelatedEntities$Outbound;
}

export function getV2LogsIdEvalsResponse200ApplicationJSONResponseBody24RelatedEntitiesToJSON(
  getV2LogsIdEvalsResponse200ApplicationJSONResponseBody24RelatedEntities:
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody24RelatedEntities,
): string {
  return JSON.stringify(
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody24RelatedEntities$outboundSchema
      .parse(
        getV2LogsIdEvalsResponse200ApplicationJSONResponseBody24RelatedEntities,
      ),
  );
}

export function getV2LogsIdEvalsResponse200ApplicationJSONResponseBody24RelatedEntitiesFromJSON(
  jsonString: string,
): SafeParseResult<
  GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody24RelatedEntities,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody24RelatedEntities$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody24RelatedEntities' from JSON`,
  );
}

/** @internal */
export const GetV2LogsIdEvals4$inboundSchema: z.ZodType<
  GetV2LogsIdEvals4,
  z.ZodTypeDef,
  unknown
> = z.object({
  type:
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody24Type$inboundSchema,
  values: z.array(z.string()),
  id: z.string(),
  status:
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody24Status$inboundSchema,
  timestamp: z.string().datetime({ offset: true }).transform(v => new Date(v)),
  related_entities: z.array(
    z.union([
      z.lazy(() =>
        GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals41$inboundSchema
      ),
      z.lazy(() =>
        GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals42$inboundSchema
      ),
      z.lazy(() =>
        GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals43$inboundSchema
      ),
      z.lazy(() =>
        GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals44$inboundSchema
      ),
    ]),
  ),
}).transform((v) => {
  return remap$(v, {
    "related_entities": "relatedEntities",
  });
});

/** @internal */
export type GetV2LogsIdEvals4$Outbound = {
  type: string;
  values: Array<string>;
  id: string;
  status: string;
  timestamp: string;
  related_entities: Array<
    | GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals41$Outbound
    | GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals42$Outbound
    | GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals43$Outbound
    | GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals44$Outbound
  >;
};

/** @internal */
export const GetV2LogsIdEvals4$outboundSchema: z.ZodType<
  GetV2LogsIdEvals4$Outbound,
  z.ZodTypeDef,
  GetV2LogsIdEvals4
> = z.object({
  type:
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody24Type$outboundSchema,
  values: z.array(z.string()),
  id: z.string(),
  status:
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody24Status$outboundSchema,
  timestamp: z.date().transform(v => v.toISOString()),
  relatedEntities: z.array(
    z.union([
      z.lazy(() =>
        GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals41$outboundSchema
      ),
      z.lazy(() =>
        GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals42$outboundSchema
      ),
      z.lazy(() =>
        GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals43$outboundSchema
      ),
      z.lazy(() =>
        GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals44$outboundSchema
      ),
    ]),
  ),
}).transform((v) => {
  return remap$(v, {
    relatedEntities: "related_entities",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdEvals4$ {
  /** @deprecated use `GetV2LogsIdEvals4$inboundSchema` instead. */
  export const inboundSchema = GetV2LogsIdEvals4$inboundSchema;
  /** @deprecated use `GetV2LogsIdEvals4$outboundSchema` instead. */
  export const outboundSchema = GetV2LogsIdEvals4$outboundSchema;
  /** @deprecated use `GetV2LogsIdEvals4$Outbound` instead. */
  export type Outbound = GetV2LogsIdEvals4$Outbound;
}

export function getV2LogsIdEvals4ToJSON(
  getV2LogsIdEvals4: GetV2LogsIdEvals4,
): string {
  return JSON.stringify(
    GetV2LogsIdEvals4$outboundSchema.parse(getV2LogsIdEvals4),
  );
}

export function getV2LogsIdEvals4FromJSON(
  jsonString: string,
): SafeParseResult<GetV2LogsIdEvals4, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetV2LogsIdEvals4$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetV2LogsIdEvals4' from JSON`,
  );
}

/** @internal */
export const GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody23Type$inboundSchema:
  z.ZodNativeEnum<
    typeof GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody23Type
  > = z.nativeEnum(
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody23Type,
  );

/** @internal */
export const GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody23Type$outboundSchema:
  z.ZodNativeEnum<
    typeof GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody23Type
  > =
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody23Type$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody23Type$ {
  /** @deprecated use `GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody23Type$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody23Type$inboundSchema;
  /** @deprecated use `GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody23Type$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody23Type$outboundSchema;
}

/** @internal */
export const GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody23Status$inboundSchema:
  z.ZodNativeEnum<
    typeof GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody23Status
  > = z.nativeEnum(
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody23Status,
  );

/** @internal */
export const GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody23Status$outboundSchema:
  z.ZodNativeEnum<
    typeof GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody23Status
  > =
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody23Status$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody23Status$ {
  /** @deprecated use `GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody23Status$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody23Status$inboundSchema;
  /** @deprecated use `GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody23Status$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody23Status$outboundSchema;
}

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals34Type$inboundSchema:
  z.ZodNativeEnum<
    typeof GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals34Type
  > = z.nativeEnum(
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals34Type,
  );

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals34Type$outboundSchema:
  z.ZodNativeEnum<
    typeof GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals34Type
  > =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals34Type$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals34Type$ {
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals34Type$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals34Type$inboundSchema;
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals34Type$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals34Type$outboundSchema;
}

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals34$inboundSchema:
  z.ZodType<
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals34,
    z.ZodTypeDef,
    unknown
  > = z.object({
    type:
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals34Type$inboundSchema,
    evaluator_id: z.string(),
  }).transform((v) => {
    return remap$(v, {
      "evaluator_id": "evaluatorId",
    });
  });

/** @internal */
export type GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals34$Outbound =
  {
    type: string;
    evaluator_id: string;
  };

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals34$outboundSchema:
  z.ZodType<
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals34$Outbound,
    z.ZodTypeDef,
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals34
  > = z.object({
    type:
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals34Type$outboundSchema,
    evaluatorId: z.string(),
  }).transform((v) => {
    return remap$(v, {
      evaluatorId: "evaluator_id",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals34$ {
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals34$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals34$inboundSchema;
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals34$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals34$outboundSchema;
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals34$Outbound` instead. */
  export type Outbound =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals34$Outbound;
}

export function getV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals34ToJSON(
  getV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals34:
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals34,
): string {
  return JSON.stringify(
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals34$outboundSchema
      .parse(
        getV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals34,
      ),
  );
}

export function getV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals34FromJSON(
  jsonString: string,
): SafeParseResult<
  GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals34,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals34$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals34' from JSON`,
  );
}

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals33Type$inboundSchema:
  z.ZodNativeEnum<
    typeof GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals33Type
  > = z.nativeEnum(
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals33Type,
  );

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals33Type$outboundSchema:
  z.ZodNativeEnum<
    typeof GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals33Type
  > =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals33Type$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals33Type$ {
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals33Type$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals33Type$inboundSchema;
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals33Type$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals33Type$outboundSchema;
}

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals33$inboundSchema:
  z.ZodType<
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals33,
    z.ZodTypeDef,
    unknown
  > = z.object({
    type:
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals33Type$inboundSchema,
    human_eval_id: z.string(),
  }).transform((v) => {
    return remap$(v, {
      "human_eval_id": "humanEvalId",
    });
  });

/** @internal */
export type GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals33$Outbound =
  {
    type: string;
    human_eval_id: string;
  };

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals33$outboundSchema:
  z.ZodType<
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals33$Outbound,
    z.ZodTypeDef,
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals33
  > = z.object({
    type:
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals33Type$outboundSchema,
    humanEvalId: z.string(),
  }).transform((v) => {
    return remap$(v, {
      humanEvalId: "human_eval_id",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals33$ {
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals33$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals33$inboundSchema;
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals33$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals33$outboundSchema;
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals33$Outbound` instead. */
  export type Outbound =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals33$Outbound;
}

export function getV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals33ToJSON(
  getV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals33:
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals33,
): string {
  return JSON.stringify(
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals33$outboundSchema
      .parse(
        getV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals33,
      ),
  );
}

export function getV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals33FromJSON(
  jsonString: string,
): SafeParseResult<
  GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals33,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals33$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals33' from JSON`,
  );
}

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals32Type$inboundSchema:
  z.ZodNativeEnum<
    typeof GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals32Type
  > = z.nativeEnum(
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals32Type,
  );

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals32Type$outboundSchema:
  z.ZodNativeEnum<
    typeof GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals32Type
  > =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals32Type$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals32Type$ {
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals32Type$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals32Type$inboundSchema;
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals32Type$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals32Type$outboundSchema;
}

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals32$inboundSchema:
  z.ZodType<
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals32,
    z.ZodTypeDef,
    unknown
  > = z.object({
    type:
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals32Type$inboundSchema,
    contact_id: z.string(),
  }).transform((v) => {
    return remap$(v, {
      "contact_id": "contactId",
    });
  });

/** @internal */
export type GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals32$Outbound =
  {
    type: string;
    contact_id: string;
  };

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals32$outboundSchema:
  z.ZodType<
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals32$Outbound,
    z.ZodTypeDef,
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals32
  > = z.object({
    type:
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals32Type$outboundSchema,
    contactId: z.string(),
  }).transform((v) => {
    return remap$(v, {
      contactId: "contact_id",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals32$ {
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals32$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals32$inboundSchema;
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals32$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals32$outboundSchema;
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals32$Outbound` instead. */
  export type Outbound =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals32$Outbound;
}

export function getV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals32ToJSON(
  getV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals32:
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals32,
): string {
  return JSON.stringify(
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals32$outboundSchema
      .parse(
        getV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals32,
      ),
  );
}

export function getV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals32FromJSON(
  jsonString: string,
): SafeParseResult<
  GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals32,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals32$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals32' from JSON`,
  );
}

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals3Type$inboundSchema:
  z.ZodNativeEnum<
    typeof GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals3Type
  > = z.nativeEnum(
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals3Type,
  );

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals3Type$outboundSchema:
  z.ZodNativeEnum<
    typeof GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals3Type
  > =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals3Type$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals3Type$ {
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals3Type$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals3Type$inboundSchema;
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals3Type$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals3Type$outboundSchema;
}

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals31$inboundSchema:
  z.ZodType<
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals31,
    z.ZodTypeDef,
    unknown
  > = z.object({
    type:
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals3Type$inboundSchema,
    account_id: z.string(),
  }).transform((v) => {
    return remap$(v, {
      "account_id": "accountId",
    });
  });

/** @internal */
export type GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals31$Outbound =
  {
    type: string;
    account_id: string;
  };

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals31$outboundSchema:
  z.ZodType<
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals31$Outbound,
    z.ZodTypeDef,
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals31
  > = z.object({
    type:
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals3Type$outboundSchema,
    accountId: z.string(),
  }).transform((v) => {
    return remap$(v, {
      accountId: "account_id",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals31$ {
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals31$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals31$inboundSchema;
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals31$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals31$outboundSchema;
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals31$Outbound` instead. */
  export type Outbound =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals31$Outbound;
}

export function getV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals31ToJSON(
  getV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals31:
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals31,
): string {
  return JSON.stringify(
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals31$outboundSchema
      .parse(
        getV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals31,
      ),
  );
}

export function getV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals31FromJSON(
  jsonString: string,
): SafeParseResult<
  GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals31,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals31$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals31' from JSON`,
  );
}

/** @internal */
export const GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody23RelatedEntities$inboundSchema:
  z.ZodType<
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody23RelatedEntities,
    z.ZodTypeDef,
    unknown
  > = z.union([
    z.lazy(() =>
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals31$inboundSchema
    ),
    z.lazy(() =>
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals32$inboundSchema
    ),
    z.lazy(() =>
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals33$inboundSchema
    ),
    z.lazy(() =>
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals34$inboundSchema
    ),
  ]);

/** @internal */
export type GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody23RelatedEntities$Outbound =
  | GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals31$Outbound
  | GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals32$Outbound
  | GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals33$Outbound
  | GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals34$Outbound;

/** @internal */
export const GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody23RelatedEntities$outboundSchema:
  z.ZodType<
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody23RelatedEntities$Outbound,
    z.ZodTypeDef,
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody23RelatedEntities
  > = z.union([
    z.lazy(() =>
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals31$outboundSchema
    ),
    z.lazy(() =>
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals32$outboundSchema
    ),
    z.lazy(() =>
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals33$outboundSchema
    ),
    z.lazy(() =>
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals34$outboundSchema
    ),
  ]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody23RelatedEntities$ {
  /** @deprecated use `GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody23RelatedEntities$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody23RelatedEntities$inboundSchema;
  /** @deprecated use `GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody23RelatedEntities$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody23RelatedEntities$outboundSchema;
  /** @deprecated use `GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody23RelatedEntities$Outbound` instead. */
  export type Outbound =
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody23RelatedEntities$Outbound;
}

export function getV2LogsIdEvalsResponse200ApplicationJSONResponseBody23RelatedEntitiesToJSON(
  getV2LogsIdEvalsResponse200ApplicationJSONResponseBody23RelatedEntities:
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody23RelatedEntities,
): string {
  return JSON.stringify(
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody23RelatedEntities$outboundSchema
      .parse(
        getV2LogsIdEvalsResponse200ApplicationJSONResponseBody23RelatedEntities,
      ),
  );
}

export function getV2LogsIdEvalsResponse200ApplicationJSONResponseBody23RelatedEntitiesFromJSON(
  jsonString: string,
): SafeParseResult<
  GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody23RelatedEntities,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody23RelatedEntities$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody23RelatedEntities' from JSON`,
  );
}

/** @internal */
export const GetV2LogsIdEvals3$inboundSchema: z.ZodType<
  GetV2LogsIdEvals3,
  z.ZodTypeDef,
  unknown
> = z.object({
  type:
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody23Type$inboundSchema,
  value: z.boolean(),
  id: z.string(),
  status:
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody23Status$inboundSchema,
  timestamp: z.string().datetime({ offset: true }).transform(v => new Date(v)),
  related_entities: z.array(
    z.union([
      z.lazy(() =>
        GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals31$inboundSchema
      ),
      z.lazy(() =>
        GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals32$inboundSchema
      ),
      z.lazy(() =>
        GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals33$inboundSchema
      ),
      z.lazy(() =>
        GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals34$inboundSchema
      ),
    ]),
  ),
}).transform((v) => {
  return remap$(v, {
    "related_entities": "relatedEntities",
  });
});

/** @internal */
export type GetV2LogsIdEvals3$Outbound = {
  type: string;
  value: boolean;
  id: string;
  status: string;
  timestamp: string;
  related_entities: Array<
    | GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals31$Outbound
    | GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals32$Outbound
    | GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals33$Outbound
    | GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals34$Outbound
  >;
};

/** @internal */
export const GetV2LogsIdEvals3$outboundSchema: z.ZodType<
  GetV2LogsIdEvals3$Outbound,
  z.ZodTypeDef,
  GetV2LogsIdEvals3
> = z.object({
  type:
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody23Type$outboundSchema,
  value: z.boolean(),
  id: z.string(),
  status:
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody23Status$outboundSchema,
  timestamp: z.date().transform(v => v.toISOString()),
  relatedEntities: z.array(
    z.union([
      z.lazy(() =>
        GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals31$outboundSchema
      ),
      z.lazy(() =>
        GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals32$outboundSchema
      ),
      z.lazy(() =>
        GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals33$outboundSchema
      ),
      z.lazy(() =>
        GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals34$outboundSchema
      ),
    ]),
  ),
}).transform((v) => {
  return remap$(v, {
    relatedEntities: "related_entities",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdEvals3$ {
  /** @deprecated use `GetV2LogsIdEvals3$inboundSchema` instead. */
  export const inboundSchema = GetV2LogsIdEvals3$inboundSchema;
  /** @deprecated use `GetV2LogsIdEvals3$outboundSchema` instead. */
  export const outboundSchema = GetV2LogsIdEvals3$outboundSchema;
  /** @deprecated use `GetV2LogsIdEvals3$Outbound` instead. */
  export type Outbound = GetV2LogsIdEvals3$Outbound;
}

export function getV2LogsIdEvals3ToJSON(
  getV2LogsIdEvals3: GetV2LogsIdEvals3,
): string {
  return JSON.stringify(
    GetV2LogsIdEvals3$outboundSchema.parse(getV2LogsIdEvals3),
  );
}

export function getV2LogsIdEvals3FromJSON(
  jsonString: string,
): SafeParseResult<GetV2LogsIdEvals3, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetV2LogsIdEvals3$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetV2LogsIdEvals3' from JSON`,
  );
}

/** @internal */
export const GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody22Type$inboundSchema:
  z.ZodNativeEnum<
    typeof GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody22Type
  > = z.nativeEnum(
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody22Type,
  );

/** @internal */
export const GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody22Type$outboundSchema:
  z.ZodNativeEnum<
    typeof GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody22Type
  > =
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody22Type$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody22Type$ {
  /** @deprecated use `GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody22Type$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody22Type$inboundSchema;
  /** @deprecated use `GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody22Type$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody22Type$outboundSchema;
}

/** @internal */
export const GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody22Status$inboundSchema:
  z.ZodNativeEnum<
    typeof GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody22Status
  > = z.nativeEnum(
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody22Status,
  );

/** @internal */
export const GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody22Status$outboundSchema:
  z.ZodNativeEnum<
    typeof GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody22Status
  > =
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody22Status$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody22Status$ {
  /** @deprecated use `GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody22Status$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody22Status$inboundSchema;
  /** @deprecated use `GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody22Status$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody22Status$outboundSchema;
}

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals24Type$inboundSchema:
  z.ZodNativeEnum<
    typeof GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals24Type
  > = z.nativeEnum(
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals24Type,
  );

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals24Type$outboundSchema:
  z.ZodNativeEnum<
    typeof GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals24Type
  > =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals24Type$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals24Type$ {
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals24Type$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals24Type$inboundSchema;
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals24Type$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals24Type$outboundSchema;
}

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals4$inboundSchema:
  z.ZodType<
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals4,
    z.ZodTypeDef,
    unknown
  > = z.object({
    type:
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals24Type$inboundSchema,
    evaluator_id: z.string(),
  }).transform((v) => {
    return remap$(v, {
      "evaluator_id": "evaluatorId",
    });
  });

/** @internal */
export type GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals4$Outbound =
  {
    type: string;
    evaluator_id: string;
  };

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals4$outboundSchema:
  z.ZodType<
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals4$Outbound,
    z.ZodTypeDef,
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals4
  > = z.object({
    type:
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals24Type$outboundSchema,
    evaluatorId: z.string(),
  }).transform((v) => {
    return remap$(v, {
      evaluatorId: "evaluator_id",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals4$ {
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals4$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals4$inboundSchema;
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals4$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals4$outboundSchema;
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals4$Outbound` instead. */
  export type Outbound =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals4$Outbound;
}

export function getV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals4ToJSON(
  getV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals4:
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals4,
): string {
  return JSON.stringify(
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals4$outboundSchema
      .parse(
        getV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals4,
      ),
  );
}

export function getV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals4FromJSON(
  jsonString: string,
): SafeParseResult<
  GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals4,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals4$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals4' from JSON`,
  );
}

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals23Type$inboundSchema:
  z.ZodNativeEnum<
    typeof GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals23Type
  > = z.nativeEnum(
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals23Type,
  );

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals23Type$outboundSchema:
  z.ZodNativeEnum<
    typeof GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals23Type
  > =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals23Type$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals23Type$ {
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals23Type$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals23Type$inboundSchema;
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals23Type$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals23Type$outboundSchema;
}

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals3$inboundSchema:
  z.ZodType<
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals3,
    z.ZodTypeDef,
    unknown
  > = z.object({
    type:
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals23Type$inboundSchema,
    human_eval_id: z.string(),
  }).transform((v) => {
    return remap$(v, {
      "human_eval_id": "humanEvalId",
    });
  });

/** @internal */
export type GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals3$Outbound =
  {
    type: string;
    human_eval_id: string;
  };

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals3$outboundSchema:
  z.ZodType<
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals3$Outbound,
    z.ZodTypeDef,
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals3
  > = z.object({
    type:
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals23Type$outboundSchema,
    humanEvalId: z.string(),
  }).transform((v) => {
    return remap$(v, {
      humanEvalId: "human_eval_id",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals3$ {
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals3$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals3$inboundSchema;
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals3$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals3$outboundSchema;
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals3$Outbound` instead. */
  export type Outbound =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals3$Outbound;
}

export function getV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals3ToJSON(
  getV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals3:
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals3,
): string {
  return JSON.stringify(
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals3$outboundSchema
      .parse(
        getV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals3,
      ),
  );
}

export function getV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals3FromJSON(
  jsonString: string,
): SafeParseResult<
  GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals3,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals3$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals3' from JSON`,
  );
}

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals22Type$inboundSchema:
  z.ZodNativeEnum<
    typeof GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals22Type
  > = z.nativeEnum(
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals22Type,
  );

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals22Type$outboundSchema:
  z.ZodNativeEnum<
    typeof GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals22Type
  > =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals22Type$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals22Type$ {
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals22Type$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals22Type$inboundSchema;
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals22Type$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals22Type$outboundSchema;
}

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals2$inboundSchema:
  z.ZodType<
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals2,
    z.ZodTypeDef,
    unknown
  > = z.object({
    type:
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals22Type$inboundSchema,
    contact_id: z.string(),
  }).transform((v) => {
    return remap$(v, {
      "contact_id": "contactId",
    });
  });

/** @internal */
export type GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals2$Outbound =
  {
    type: string;
    contact_id: string;
  };

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals2$outboundSchema:
  z.ZodType<
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals2$Outbound,
    z.ZodTypeDef,
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals2
  > = z.object({
    type:
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals22Type$outboundSchema,
    contactId: z.string(),
  }).transform((v) => {
    return remap$(v, {
      contactId: "contact_id",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals2$ {
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals2$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals2$inboundSchema;
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals2$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals2$outboundSchema;
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals2$Outbound` instead. */
  export type Outbound =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals2$Outbound;
}

export function getV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals2ToJSON(
  getV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals2:
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals2,
): string {
  return JSON.stringify(
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals2$outboundSchema
      .parse(
        getV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals2,
      ),
  );
}

export function getV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals2FromJSON(
  jsonString: string,
): SafeParseResult<
  GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals2,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals2$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals2' from JSON`,
  );
}

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals2Type$inboundSchema:
  z.ZodNativeEnum<
    typeof GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals2Type
  > = z.nativeEnum(
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals2Type,
  );

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals2Type$outboundSchema:
  z.ZodNativeEnum<
    typeof GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals2Type
  > =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals2Type$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals2Type$ {
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals2Type$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals2Type$inboundSchema;
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals2Type$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals2Type$outboundSchema;
}

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals1$inboundSchema:
  z.ZodType<
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals1,
    z.ZodTypeDef,
    unknown
  > = z.object({
    type:
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals2Type$inboundSchema,
    account_id: z.string(),
  }).transform((v) => {
    return remap$(v, {
      "account_id": "accountId",
    });
  });

/** @internal */
export type GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals1$Outbound =
  {
    type: string;
    account_id: string;
  };

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals1$outboundSchema:
  z.ZodType<
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals1$Outbound,
    z.ZodTypeDef,
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals1
  > = z.object({
    type:
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals2Type$outboundSchema,
    accountId: z.string(),
  }).transform((v) => {
    return remap$(v, {
      accountId: "account_id",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals1$ {
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals1$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals1$inboundSchema;
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals1$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals1$outboundSchema;
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals1$Outbound` instead. */
  export type Outbound =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals1$Outbound;
}

export function getV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals1ToJSON(
  getV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals1:
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals1,
): string {
  return JSON.stringify(
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals1$outboundSchema
      .parse(
        getV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals1,
      ),
  );
}

export function getV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals1FromJSON(
  jsonString: string,
): SafeParseResult<
  GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals1,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals1$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals1' from JSON`,
  );
}

/** @internal */
export const GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody22RelatedEntities$inboundSchema:
  z.ZodType<
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody22RelatedEntities,
    z.ZodTypeDef,
    unknown
  > = z.union([
    z.lazy(() =>
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals1$inboundSchema
    ),
    z.lazy(() =>
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals2$inboundSchema
    ),
    z.lazy(() =>
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals3$inboundSchema
    ),
    z.lazy(() =>
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals4$inboundSchema
    ),
  ]);

/** @internal */
export type GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody22RelatedEntities$Outbound =
  | GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals1$Outbound
  | GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals2$Outbound
  | GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals3$Outbound
  | GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals4$Outbound;

/** @internal */
export const GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody22RelatedEntities$outboundSchema:
  z.ZodType<
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody22RelatedEntities$Outbound,
    z.ZodTypeDef,
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody22RelatedEntities
  > = z.union([
    z.lazy(() =>
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals1$outboundSchema
    ),
    z.lazy(() =>
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals2$outboundSchema
    ),
    z.lazy(() =>
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals3$outboundSchema
    ),
    z.lazy(() =>
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals4$outboundSchema
    ),
  ]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody22RelatedEntities$ {
  /** @deprecated use `GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody22RelatedEntities$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody22RelatedEntities$inboundSchema;
  /** @deprecated use `GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody22RelatedEntities$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody22RelatedEntities$outboundSchema;
  /** @deprecated use `GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody22RelatedEntities$Outbound` instead. */
  export type Outbound =
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody22RelatedEntities$Outbound;
}

export function getV2LogsIdEvalsResponse200ApplicationJSONResponseBody22RelatedEntitiesToJSON(
  getV2LogsIdEvalsResponse200ApplicationJSONResponseBody22RelatedEntities:
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody22RelatedEntities,
): string {
  return JSON.stringify(
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody22RelatedEntities$outboundSchema
      .parse(
        getV2LogsIdEvalsResponse200ApplicationJSONResponseBody22RelatedEntities,
      ),
  );
}

export function getV2LogsIdEvalsResponse200ApplicationJSONResponseBody22RelatedEntitiesFromJSON(
  jsonString: string,
): SafeParseResult<
  GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody22RelatedEntities,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody22RelatedEntities$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody22RelatedEntities' from JSON`,
  );
}

/** @internal */
export const GetV2LogsIdEvals2$inboundSchema: z.ZodType<
  GetV2LogsIdEvals2,
  z.ZodTypeDef,
  unknown
> = z.object({
  type:
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody22Type$inboundSchema,
  value: z.number(),
  id: z.string(),
  status:
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody22Status$inboundSchema,
  timestamp: z.string().datetime({ offset: true }).transform(v => new Date(v)),
  related_entities: z.array(
    z.union([
      z.lazy(() =>
        GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals1$inboundSchema
      ),
      z.lazy(() =>
        GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals2$inboundSchema
      ),
      z.lazy(() =>
        GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals3$inboundSchema
      ),
      z.lazy(() =>
        GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals4$inboundSchema
      ),
    ]),
  ),
}).transform((v) => {
  return remap$(v, {
    "related_entities": "relatedEntities",
  });
});

/** @internal */
export type GetV2LogsIdEvals2$Outbound = {
  type: string;
  value: number;
  id: string;
  status: string;
  timestamp: string;
  related_entities: Array<
    | GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals1$Outbound
    | GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals2$Outbound
    | GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals3$Outbound
    | GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals4$Outbound
  >;
};

/** @internal */
export const GetV2LogsIdEvals2$outboundSchema: z.ZodType<
  GetV2LogsIdEvals2$Outbound,
  z.ZodTypeDef,
  GetV2LogsIdEvals2
> = z.object({
  type:
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody22Type$outboundSchema,
  value: z.number(),
  id: z.string(),
  status:
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody22Status$outboundSchema,
  timestamp: z.date().transform(v => v.toISOString()),
  relatedEntities: z.array(
    z.union([
      z.lazy(() =>
        GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals1$outboundSchema
      ),
      z.lazy(() =>
        GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals2$outboundSchema
      ),
      z.lazy(() =>
        GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals3$outboundSchema
      ),
      z.lazy(() =>
        GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals4$outboundSchema
      ),
    ]),
  ),
}).transform((v) => {
  return remap$(v, {
    relatedEntities: "related_entities",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdEvals2$ {
  /** @deprecated use `GetV2LogsIdEvals2$inboundSchema` instead. */
  export const inboundSchema = GetV2LogsIdEvals2$inboundSchema;
  /** @deprecated use `GetV2LogsIdEvals2$outboundSchema` instead. */
  export const outboundSchema = GetV2LogsIdEvals2$outboundSchema;
  /** @deprecated use `GetV2LogsIdEvals2$Outbound` instead. */
  export type Outbound = GetV2LogsIdEvals2$Outbound;
}

export function getV2LogsIdEvals2ToJSON(
  getV2LogsIdEvals2: GetV2LogsIdEvals2,
): string {
  return JSON.stringify(
    GetV2LogsIdEvals2$outboundSchema.parse(getV2LogsIdEvals2),
  );
}

export function getV2LogsIdEvals2FromJSON(
  jsonString: string,
): SafeParseResult<GetV2LogsIdEvals2, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetV2LogsIdEvals2$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetV2LogsIdEvals2' from JSON`,
  );
}

/** @internal */
export const GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody2Type$inboundSchema:
  z.ZodNativeEnum<
    typeof GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody2Type
  > = z.nativeEnum(GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody2Type);

/** @internal */
export const GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody2Type$outboundSchema:
  z.ZodNativeEnum<
    typeof GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody2Type
  > = GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody2Type$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody2Type$ {
  /** @deprecated use `GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody2Type$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody2Type$inboundSchema;
  /** @deprecated use `GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody2Type$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody2Type$outboundSchema;
}

/** @internal */
export const GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody2Status$inboundSchema:
  z.ZodNativeEnum<
    typeof GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody2Status
  > = z.nativeEnum(
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody2Status,
  );

/** @internal */
export const GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody2Status$outboundSchema:
  z.ZodNativeEnum<
    typeof GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody2Status
  > =
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody2Status$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody2Status$ {
  /** @deprecated use `GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody2Status$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody2Status$inboundSchema;
  /** @deprecated use `GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody2Status$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody2Status$outboundSchema;
}

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals14Type$inboundSchema:
  z.ZodNativeEnum<
    typeof GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals14Type
  > = z.nativeEnum(
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals14Type,
  );

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals14Type$outboundSchema:
  z.ZodNativeEnum<
    typeof GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals14Type
  > =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals14Type$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals14Type$ {
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals14Type$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals14Type$inboundSchema;
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals14Type$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals14Type$outboundSchema;
}

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody24$inboundSchema:
  z.ZodType<
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody24,
    z.ZodTypeDef,
    unknown
  > = z.object({
    type:
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals14Type$inboundSchema,
    evaluator_id: z.string(),
  }).transform((v) => {
    return remap$(v, {
      "evaluator_id": "evaluatorId",
    });
  });

/** @internal */
export type GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody24$Outbound =
  {
    type: string;
    evaluator_id: string;
  };

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody24$outboundSchema:
  z.ZodType<
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody24$Outbound,
    z.ZodTypeDef,
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody24
  > = z.object({
    type:
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals14Type$outboundSchema,
    evaluatorId: z.string(),
  }).transform((v) => {
    return remap$(v, {
      evaluatorId: "evaluator_id",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody24$ {
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody24$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody24$inboundSchema;
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody24$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody24$outboundSchema;
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody24$Outbound` instead. */
  export type Outbound =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody24$Outbound;
}

export function getV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody24ToJSON(
  getV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody24:
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody24,
): string {
  return JSON.stringify(
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody24$outboundSchema
      .parse(
        getV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody24,
      ),
  );
}

export function getV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody24FromJSON(
  jsonString: string,
): SafeParseResult<
  GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody24,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody24$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody24' from JSON`,
  );
}

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals1Type$inboundSchema:
  z.ZodNativeEnum<
    typeof GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals1Type
  > = z.nativeEnum(
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals1Type,
  );

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals1Type$outboundSchema:
  z.ZodNativeEnum<
    typeof GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals1Type
  > =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals1Type$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals1Type$ {
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals1Type$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals1Type$inboundSchema;
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals1Type$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals1Type$outboundSchema;
}

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody23$inboundSchema:
  z.ZodType<
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody23,
    z.ZodTypeDef,
    unknown
  > = z.object({
    type:
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals1Type$inboundSchema,
    human_eval_id: z.string(),
  }).transform((v) => {
    return remap$(v, {
      "human_eval_id": "humanEvalId",
    });
  });

/** @internal */
export type GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody23$Outbound =
  {
    type: string;
    human_eval_id: string;
  };

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody23$outboundSchema:
  z.ZodType<
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody23$Outbound,
    z.ZodTypeDef,
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody23
  > = z.object({
    type:
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals1Type$outboundSchema,
    humanEvalId: z.string(),
  }).transform((v) => {
    return remap$(v, {
      humanEvalId: "human_eval_id",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody23$ {
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody23$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody23$inboundSchema;
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody23$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody23$outboundSchema;
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody23$Outbound` instead. */
  export type Outbound =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody23$Outbound;
}

export function getV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody23ToJSON(
  getV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody23:
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody23,
): string {
  return JSON.stringify(
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody23$outboundSchema
      .parse(
        getV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody23,
      ),
  );
}

export function getV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody23FromJSON(
  jsonString: string,
): SafeParseResult<
  GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody23,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody23$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody23' from JSON`,
  );
}

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2EvalsType$inboundSchema:
  z.ZodNativeEnum<
    typeof GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2EvalsType
  > = z.nativeEnum(
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2EvalsType,
  );

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2EvalsType$outboundSchema:
  z.ZodNativeEnum<
    typeof GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2EvalsType
  > =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2EvalsType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2EvalsType$ {
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2EvalsType$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2EvalsType$inboundSchema;
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2EvalsType$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2EvalsType$outboundSchema;
}

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody22$inboundSchema:
  z.ZodType<
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody22,
    z.ZodTypeDef,
    unknown
  > = z.object({
    type:
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2EvalsType$inboundSchema,
    contact_id: z.string(),
  }).transform((v) => {
    return remap$(v, {
      "contact_id": "contactId",
    });
  });

/** @internal */
export type GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody22$Outbound =
  {
    type: string;
    contact_id: string;
  };

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody22$outboundSchema:
  z.ZodType<
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody22$Outbound,
    z.ZodTypeDef,
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody22
  > = z.object({
    type:
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2EvalsType$outboundSchema,
    contactId: z.string(),
  }).transform((v) => {
    return remap$(v, {
      contactId: "contact_id",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody22$ {
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody22$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody22$inboundSchema;
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody22$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody22$outboundSchema;
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody22$Outbound` instead. */
  export type Outbound =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody22$Outbound;
}

export function getV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody22ToJSON(
  getV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody22:
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody22,
): string {
  return JSON.stringify(
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody22$outboundSchema
      .parse(
        getV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody22,
      ),
  );
}

export function getV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody22FromJSON(
  jsonString: string,
): SafeParseResult<
  GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody22,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody22$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody22' from JSON`,
  );
}

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals11Type$inboundSchema:
  z.ZodNativeEnum<
    typeof GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals11Type
  > = z.nativeEnum(
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals11Type,
  );

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals11Type$outboundSchema:
  z.ZodNativeEnum<
    typeof GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals11Type
  > =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals11Type$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals11Type$ {
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals11Type$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals11Type$inboundSchema;
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals11Type$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals11Type$outboundSchema;
}

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody21$inboundSchema:
  z.ZodType<
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody21,
    z.ZodTypeDef,
    unknown
  > = z.object({
    type:
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals11Type$inboundSchema,
    account_id: z.string(),
  }).transform((v) => {
    return remap$(v, {
      "account_id": "accountId",
    });
  });

/** @internal */
export type GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody21$Outbound =
  {
    type: string;
    account_id: string;
  };

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody21$outboundSchema:
  z.ZodType<
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody21$Outbound,
    z.ZodTypeDef,
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody21
  > = z.object({
    type:
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Evals11Type$outboundSchema,
    accountId: z.string(),
  }).transform((v) => {
    return remap$(v, {
      accountId: "account_id",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody21$ {
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody21$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody21$inboundSchema;
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody21$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody21$outboundSchema;
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody21$Outbound` instead. */
  export type Outbound =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody21$Outbound;
}

export function getV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody21ToJSON(
  getV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody21:
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody21,
): string {
  return JSON.stringify(
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody21$outboundSchema
      .parse(
        getV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody21,
      ),
  );
}

export function getV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody21FromJSON(
  jsonString: string,
): SafeParseResult<
  GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody21,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody21$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody21' from JSON`,
  );
}

/** @internal */
export const GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody2RelatedEntities$inboundSchema:
  z.ZodType<
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody2RelatedEntities,
    z.ZodTypeDef,
    unknown
  > = z.union([
    z.lazy(() =>
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody21$inboundSchema
    ),
    z.lazy(() =>
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody22$inboundSchema
    ),
    z.lazy(() =>
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody23$inboundSchema
    ),
    z.lazy(() =>
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody24$inboundSchema
    ),
  ]);

/** @internal */
export type GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody2RelatedEntities$Outbound =
  | GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody21$Outbound
  | GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody22$Outbound
  | GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody23$Outbound
  | GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody24$Outbound;

/** @internal */
export const GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody2RelatedEntities$outboundSchema:
  z.ZodType<
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody2RelatedEntities$Outbound,
    z.ZodTypeDef,
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody2RelatedEntities
  > = z.union([
    z.lazy(() =>
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody21$outboundSchema
    ),
    z.lazy(() =>
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody22$outboundSchema
    ),
    z.lazy(() =>
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody23$outboundSchema
    ),
    z.lazy(() =>
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody24$outboundSchema
    ),
  ]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody2RelatedEntities$ {
  /** @deprecated use `GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody2RelatedEntities$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody2RelatedEntities$inboundSchema;
  /** @deprecated use `GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody2RelatedEntities$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody2RelatedEntities$outboundSchema;
  /** @deprecated use `GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody2RelatedEntities$Outbound` instead. */
  export type Outbound =
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody2RelatedEntities$Outbound;
}

export function getV2LogsIdEvalsResponse200ApplicationJSONResponseBody2RelatedEntitiesToJSON(
  getV2LogsIdEvalsResponse200ApplicationJSONResponseBody2RelatedEntities:
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody2RelatedEntities,
): string {
  return JSON.stringify(
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody2RelatedEntities$outboundSchema
      .parse(
        getV2LogsIdEvalsResponse200ApplicationJSONResponseBody2RelatedEntities,
      ),
  );
}

export function getV2LogsIdEvalsResponse200ApplicationJSONResponseBody2RelatedEntitiesFromJSON(
  jsonString: string,
): SafeParseResult<
  GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody2RelatedEntities,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody2RelatedEntities$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody2RelatedEntities' from JSON`,
  );
}

/** @internal */
export const GetV2LogsIdEvals1$inboundSchema: z.ZodType<
  GetV2LogsIdEvals1,
  z.ZodTypeDef,
  unknown
> = z.object({
  type:
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody2Type$inboundSchema,
  value: z.string(),
  id: z.string(),
  status:
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody2Status$inboundSchema,
  timestamp: z.string().datetime({ offset: true }).transform(v => new Date(v)),
  related_entities: z.array(
    z.union([
      z.lazy(() =>
        GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody21$inboundSchema
      ),
      z.lazy(() =>
        GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody22$inboundSchema
      ),
      z.lazy(() =>
        GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody23$inboundSchema
      ),
      z.lazy(() =>
        GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody24$inboundSchema
      ),
    ]),
  ),
}).transform((v) => {
  return remap$(v, {
    "related_entities": "relatedEntities",
  });
});

/** @internal */
export type GetV2LogsIdEvals1$Outbound = {
  type: string;
  value: string;
  id: string;
  status: string;
  timestamp: string;
  related_entities: Array<
    | GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody21$Outbound
    | GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody22$Outbound
    | GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody23$Outbound
    | GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody24$Outbound
  >;
};

/** @internal */
export const GetV2LogsIdEvals1$outboundSchema: z.ZodType<
  GetV2LogsIdEvals1$Outbound,
  z.ZodTypeDef,
  GetV2LogsIdEvals1
> = z.object({
  type:
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody2Type$outboundSchema,
  value: z.string(),
  id: z.string(),
  status:
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody2Status$outboundSchema,
  timestamp: z.date().transform(v => v.toISOString()),
  relatedEntities: z.array(
    z.union([
      z.lazy(() =>
        GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody21$outboundSchema
      ),
      z.lazy(() =>
        GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody22$outboundSchema
      ),
      z.lazy(() =>
        GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody23$outboundSchema
      ),
      z.lazy(() =>
        GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody24$outboundSchema
      ),
    ]),
  ),
}).transform((v) => {
  return remap$(v, {
    relatedEntities: "related_entities",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdEvals1$ {
  /** @deprecated use `GetV2LogsIdEvals1$inboundSchema` instead. */
  export const inboundSchema = GetV2LogsIdEvals1$inboundSchema;
  /** @deprecated use `GetV2LogsIdEvals1$outboundSchema` instead. */
  export const outboundSchema = GetV2LogsIdEvals1$outboundSchema;
  /** @deprecated use `GetV2LogsIdEvals1$Outbound` instead. */
  export type Outbound = GetV2LogsIdEvals1$Outbound;
}

export function getV2LogsIdEvals1ToJSON(
  getV2LogsIdEvals1: GetV2LogsIdEvals1,
): string {
  return JSON.stringify(
    GetV2LogsIdEvals1$outboundSchema.parse(getV2LogsIdEvals1),
  );
}

export function getV2LogsIdEvals1FromJSON(
  jsonString: string,
): SafeParseResult<GetV2LogsIdEvals1, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetV2LogsIdEvals1$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetV2LogsIdEvals1' from JSON`,
  );
}

/** @internal */
export const ResponseBodyEvals$inboundSchema: z.ZodType<
  ResponseBodyEvals,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => GetV2LogsIdEvals1$inboundSchema),
  z.lazy(() => GetV2LogsIdEvals2$inboundSchema),
  z.lazy(() => GetV2LogsIdEvals3$inboundSchema),
  z.lazy(() => GetV2LogsIdEvals4$inboundSchema),
  z.lazy(() => GetV2LogsIdEvals5$inboundSchema),
  z.lazy(() => GetV2LogsIdEvals6$inboundSchema),
  z.lazy(() => GetV2LogsIdEvals7$inboundSchema),
]);

/** @internal */
export type ResponseBodyEvals$Outbound =
  | GetV2LogsIdEvals1$Outbound
  | GetV2LogsIdEvals2$Outbound
  | GetV2LogsIdEvals3$Outbound
  | GetV2LogsIdEvals4$Outbound
  | GetV2LogsIdEvals5$Outbound
  | GetV2LogsIdEvals6$Outbound
  | GetV2LogsIdEvals7$Outbound;

/** @internal */
export const ResponseBodyEvals$outboundSchema: z.ZodType<
  ResponseBodyEvals$Outbound,
  z.ZodTypeDef,
  ResponseBodyEvals
> = z.union([
  z.lazy(() => GetV2LogsIdEvals1$outboundSchema),
  z.lazy(() => GetV2LogsIdEvals2$outboundSchema),
  z.lazy(() => GetV2LogsIdEvals3$outboundSchema),
  z.lazy(() => GetV2LogsIdEvals4$outboundSchema),
  z.lazy(() => GetV2LogsIdEvals5$outboundSchema),
  z.lazy(() => GetV2LogsIdEvals6$outboundSchema),
  z.lazy(() => GetV2LogsIdEvals7$outboundSchema),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ResponseBodyEvals$ {
  /** @deprecated use `ResponseBodyEvals$inboundSchema` instead. */
  export const inboundSchema = ResponseBodyEvals$inboundSchema;
  /** @deprecated use `ResponseBodyEvals$outboundSchema` instead. */
  export const outboundSchema = ResponseBodyEvals$outboundSchema;
  /** @deprecated use `ResponseBodyEvals$Outbound` instead. */
  export type Outbound = ResponseBodyEvals$Outbound;
}

export function responseBodyEvalsToJSON(
  responseBodyEvals: ResponseBodyEvals,
): string {
  return JSON.stringify(
    ResponseBodyEvals$outboundSchema.parse(responseBodyEvals),
  );
}

export function responseBodyEvalsFromJSON(
  jsonString: string,
): SafeParseResult<ResponseBodyEvals, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ResponseBodyEvals$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ResponseBodyEvals' from JSON`,
  );
}

/** @internal */
export const ResponseBodyProductType$inboundSchema: z.ZodNativeEnum<
  typeof ResponseBodyProductType
> = z.nativeEnum(ResponseBodyProductType);

/** @internal */
export const ResponseBodyProductType$outboundSchema: z.ZodNativeEnum<
  typeof ResponseBodyProductType
> = ResponseBodyProductType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ResponseBodyProductType$ {
  /** @deprecated use `ResponseBodyProductType$inboundSchema` instead. */
  export const inboundSchema = ResponseBodyProductType$inboundSchema;
  /** @deprecated use `ResponseBodyProductType$outboundSchema` instead. */
  export const outboundSchema = ResponseBodyProductType$outboundSchema;
}

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody27Type$inboundSchema:
  z.ZodNativeEnum<
    typeof GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody27Type
  > = z.nativeEnum(
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody27Type,
  );

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody27Type$outboundSchema:
  z.ZodNativeEnum<
    typeof GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody27Type
  > =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody27Type$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody27Type$ {
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody27Type$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody27Type$inboundSchema;
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody27Type$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody27Type$outboundSchema;
}

/** @internal */
export const RelatedEntities7$inboundSchema: z.ZodType<
  RelatedEntities7,
  z.ZodTypeDef,
  unknown
> = z.object({
  type:
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody27Type$inboundSchema,
  conversation_id: z.string(),
}).transform((v) => {
  return remap$(v, {
    "conversation_id": "conversationId",
  });
});

/** @internal */
export type RelatedEntities7$Outbound = {
  type: string;
  conversation_id: string;
};

/** @internal */
export const RelatedEntities7$outboundSchema: z.ZodType<
  RelatedEntities7$Outbound,
  z.ZodTypeDef,
  RelatedEntities7
> = z.object({
  type:
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody27Type$outboundSchema,
  conversationId: z.string(),
}).transform((v) => {
  return remap$(v, {
    conversationId: "conversation_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RelatedEntities7$ {
  /** @deprecated use `RelatedEntities7$inboundSchema` instead. */
  export const inboundSchema = RelatedEntities7$inboundSchema;
  /** @deprecated use `RelatedEntities7$outboundSchema` instead. */
  export const outboundSchema = RelatedEntities7$outboundSchema;
  /** @deprecated use `RelatedEntities7$Outbound` instead. */
  export type Outbound = RelatedEntities7$Outbound;
}

export function relatedEntities7ToJSON(
  relatedEntities7: RelatedEntities7,
): string {
  return JSON.stringify(
    RelatedEntities7$outboundSchema.parse(relatedEntities7),
  );
}

export function relatedEntities7FromJSON(
  jsonString: string,
): SafeParseResult<RelatedEntities7, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => RelatedEntities7$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RelatedEntities7' from JSON`,
  );
}

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody26Type$inboundSchema:
  z.ZodNativeEnum<
    typeof GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody26Type
  > = z.nativeEnum(
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody26Type,
  );

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody26Type$outboundSchema:
  z.ZodNativeEnum<
    typeof GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody26Type
  > =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody26Type$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody26Type$ {
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody26Type$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody26Type$inboundSchema;
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody26Type$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody26Type$outboundSchema;
}

/** @internal */
export const RelatedEntities6$inboundSchema: z.ZodType<
  RelatedEntities6,
  z.ZodTypeDef,
  unknown
> = z.object({
  type:
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody26Type$inboundSchema,
  chain_id: z.string(),
}).transform((v) => {
  return remap$(v, {
    "chain_id": "chainId",
  });
});

/** @internal */
export type RelatedEntities6$Outbound = {
  type: string;
  chain_id: string;
};

/** @internal */
export const RelatedEntities6$outboundSchema: z.ZodType<
  RelatedEntities6$Outbound,
  z.ZodTypeDef,
  RelatedEntities6
> = z.object({
  type:
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody26Type$outboundSchema,
  chainId: z.string(),
}).transform((v) => {
  return remap$(v, {
    chainId: "chain_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RelatedEntities6$ {
  /** @deprecated use `RelatedEntities6$inboundSchema` instead. */
  export const inboundSchema = RelatedEntities6$inboundSchema;
  /** @deprecated use `RelatedEntities6$outboundSchema` instead. */
  export const outboundSchema = RelatedEntities6$outboundSchema;
  /** @deprecated use `RelatedEntities6$Outbound` instead. */
  export type Outbound = RelatedEntities6$Outbound;
}

export function relatedEntities6ToJSON(
  relatedEntities6: RelatedEntities6,
): string {
  return JSON.stringify(
    RelatedEntities6$outboundSchema.parse(relatedEntities6),
  );
}

export function relatedEntities6FromJSON(
  jsonString: string,
): SafeParseResult<RelatedEntities6, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => RelatedEntities6$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RelatedEntities6' from JSON`,
  );
}

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody25Type$inboundSchema:
  z.ZodNativeEnum<
    typeof GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody25Type
  > = z.nativeEnum(
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody25Type,
  );

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody25Type$outboundSchema:
  z.ZodNativeEnum<
    typeof GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody25Type
  > =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody25Type$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody25Type$ {
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody25Type$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody25Type$inboundSchema;
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody25Type$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody25Type$outboundSchema;
}

/** @internal */
export const RelatedEntities5$inboundSchema: z.ZodType<
  RelatedEntities5,
  z.ZodTypeDef,
  unknown
> = z.object({
  type:
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody25Type$inboundSchema,
  contact_id: z.string(),
}).transform((v) => {
  return remap$(v, {
    "contact_id": "contactId",
  });
});

/** @internal */
export type RelatedEntities5$Outbound = {
  type: string;
  contact_id: string;
};

/** @internal */
export const RelatedEntities5$outboundSchema: z.ZodType<
  RelatedEntities5$Outbound,
  z.ZodTypeDef,
  RelatedEntities5
> = z.object({
  type:
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody25Type$outboundSchema,
  contactId: z.string(),
}).transform((v) => {
  return remap$(v, {
    contactId: "contact_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RelatedEntities5$ {
  /** @deprecated use `RelatedEntities5$inboundSchema` instead. */
  export const inboundSchema = RelatedEntities5$inboundSchema;
  /** @deprecated use `RelatedEntities5$outboundSchema` instead. */
  export const outboundSchema = RelatedEntities5$outboundSchema;
  /** @deprecated use `RelatedEntities5$Outbound` instead. */
  export type Outbound = RelatedEntities5$Outbound;
}

export function relatedEntities5ToJSON(
  relatedEntities5: RelatedEntities5,
): string {
  return JSON.stringify(
    RelatedEntities5$outboundSchema.parse(relatedEntities5),
  );
}

export function relatedEntities5FromJSON(
  jsonString: string,
): SafeParseResult<RelatedEntities5, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => RelatedEntities5$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RelatedEntities5' from JSON`,
  );
}

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Type$inboundSchema:
  z.ZodNativeEnum<
    typeof GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Type
  > = z.nativeEnum(
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Type,
  );

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Type$outboundSchema:
  z.ZodNativeEnum<
    typeof GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Type
  > =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Type$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Type$ {
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Type$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Type$inboundSchema;
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Type$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Type$outboundSchema;
}

/** @internal */
export const RelatedEntities4$inboundSchema: z.ZodType<
  RelatedEntities4,
  z.ZodTypeDef,
  unknown
> = z.object({
  type:
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Type$inboundSchema,
  deployment_completion_id: z.string(),
}).transform((v) => {
  return remap$(v, {
    "deployment_completion_id": "deploymentCompletionId",
  });
});

/** @internal */
export type RelatedEntities4$Outbound = {
  type: string;
  deployment_completion_id: string;
};

/** @internal */
export const RelatedEntities4$outboundSchema: z.ZodType<
  RelatedEntities4$Outbound,
  z.ZodTypeDef,
  RelatedEntities4
> = z.object({
  type:
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2Type$outboundSchema,
  deploymentCompletionId: z.string(),
}).transform((v) => {
  return remap$(v, {
    deploymentCompletionId: "deployment_completion_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RelatedEntities4$ {
  /** @deprecated use `RelatedEntities4$inboundSchema` instead. */
  export const inboundSchema = RelatedEntities4$inboundSchema;
  /** @deprecated use `RelatedEntities4$outboundSchema` instead. */
  export const outboundSchema = RelatedEntities4$outboundSchema;
  /** @deprecated use `RelatedEntities4$Outbound` instead. */
  export type Outbound = RelatedEntities4$Outbound;
}

export function relatedEntities4ToJSON(
  relatedEntities4: RelatedEntities4,
): string {
  return JSON.stringify(
    RelatedEntities4$outboundSchema.parse(relatedEntities4),
  );
}

export function relatedEntities4FromJSON(
  jsonString: string,
): SafeParseResult<RelatedEntities4, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => RelatedEntities4$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RelatedEntities4' from JSON`,
  );
}

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBodyType$inboundSchema:
  z.ZodNativeEnum<
    typeof GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBodyType
  > = z.nativeEnum(
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBodyType,
  );

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBodyType$outboundSchema:
  z.ZodNativeEnum<
    typeof GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBodyType
  > =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBodyType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBodyType$ {
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBodyType$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBodyType$inboundSchema;
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBodyType$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBodyType$outboundSchema;
}

/** @internal */
export const GetV2LogsIdRelatedEntities3$inboundSchema: z.ZodType<
  GetV2LogsIdRelatedEntities3,
  z.ZodTypeDef,
  unknown
> = z.object({
  type:
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBodyType$inboundSchema,
  deployment_variant_id: z.string(),
}).transform((v) => {
  return remap$(v, {
    "deployment_variant_id": "deploymentVariantId",
  });
});

/** @internal */
export type GetV2LogsIdRelatedEntities3$Outbound = {
  type: string;
  deployment_variant_id: string;
};

/** @internal */
export const GetV2LogsIdRelatedEntities3$outboundSchema: z.ZodType<
  GetV2LogsIdRelatedEntities3$Outbound,
  z.ZodTypeDef,
  GetV2LogsIdRelatedEntities3
> = z.object({
  type:
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBodyType$outboundSchema,
  deploymentVariantId: z.string(),
}).transform((v) => {
  return remap$(v, {
    deploymentVariantId: "deployment_variant_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdRelatedEntities3$ {
  /** @deprecated use `GetV2LogsIdRelatedEntities3$inboundSchema` instead. */
  export const inboundSchema = GetV2LogsIdRelatedEntities3$inboundSchema;
  /** @deprecated use `GetV2LogsIdRelatedEntities3$outboundSchema` instead. */
  export const outboundSchema = GetV2LogsIdRelatedEntities3$outboundSchema;
  /** @deprecated use `GetV2LogsIdRelatedEntities3$Outbound` instead. */
  export type Outbound = GetV2LogsIdRelatedEntities3$Outbound;
}

export function getV2LogsIdRelatedEntities3ToJSON(
  getV2LogsIdRelatedEntities3: GetV2LogsIdRelatedEntities3,
): string {
  return JSON.stringify(
    GetV2LogsIdRelatedEntities3$outboundSchema.parse(
      getV2LogsIdRelatedEntities3,
    ),
  );
}

export function getV2LogsIdRelatedEntities3FromJSON(
  jsonString: string,
): SafeParseResult<GetV2LogsIdRelatedEntities3, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetV2LogsIdRelatedEntities3$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetV2LogsIdRelatedEntities3' from JSON`,
  );
}

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONType$inboundSchema:
  z.ZodNativeEnum<
    typeof GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONType
  > = z.nativeEnum(GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONType);

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONType$outboundSchema:
  z.ZodNativeEnum<
    typeof GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONType
  > = GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONType$ {
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONType$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONType$inboundSchema;
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONType$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONType$outboundSchema;
}

/** @internal */
export const GetV2LogsIdRelatedEntities2$inboundSchema: z.ZodType<
  GetV2LogsIdRelatedEntities2,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONType$inboundSchema,
  deployment_id: z.string(),
}).transform((v) => {
  return remap$(v, {
    "deployment_id": "deploymentId",
  });
});

/** @internal */
export type GetV2LogsIdRelatedEntities2$Outbound = {
  type: string;
  deployment_id: string;
};

/** @internal */
export const GetV2LogsIdRelatedEntities2$outboundSchema: z.ZodType<
  GetV2LogsIdRelatedEntities2$Outbound,
  z.ZodTypeDef,
  GetV2LogsIdRelatedEntities2
> = z.object({
  type: GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONType$outboundSchema,
  deploymentId: z.string(),
}).transform((v) => {
  return remap$(v, {
    deploymentId: "deployment_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdRelatedEntities2$ {
  /** @deprecated use `GetV2LogsIdRelatedEntities2$inboundSchema` instead. */
  export const inboundSchema = GetV2LogsIdRelatedEntities2$inboundSchema;
  /** @deprecated use `GetV2LogsIdRelatedEntities2$outboundSchema` instead. */
  export const outboundSchema = GetV2LogsIdRelatedEntities2$outboundSchema;
  /** @deprecated use `GetV2LogsIdRelatedEntities2$Outbound` instead. */
  export type Outbound = GetV2LogsIdRelatedEntities2$Outbound;
}

export function getV2LogsIdRelatedEntities2ToJSON(
  getV2LogsIdRelatedEntities2: GetV2LogsIdRelatedEntities2,
): string {
  return JSON.stringify(
    GetV2LogsIdRelatedEntities2$outboundSchema.parse(
      getV2LogsIdRelatedEntities2,
    ),
  );
}

export function getV2LogsIdRelatedEntities2FromJSON(
  jsonString: string,
): SafeParseResult<GetV2LogsIdRelatedEntities2, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetV2LogsIdRelatedEntities2$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetV2LogsIdRelatedEntities2' from JSON`,
  );
}

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse200Type$inboundSchema:
  z.ZodNativeEnum<typeof GetV2LogsIdRelatedEntitiesResponse200Type> = z
    .nativeEnum(GetV2LogsIdRelatedEntitiesResponse200Type);

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse200Type$outboundSchema:
  z.ZodNativeEnum<typeof GetV2LogsIdRelatedEntitiesResponse200Type> =
    GetV2LogsIdRelatedEntitiesResponse200Type$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdRelatedEntitiesResponse200Type$ {
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200Type$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsIdRelatedEntitiesResponse200Type$inboundSchema;
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200Type$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdRelatedEntitiesResponse200Type$outboundSchema;
}

/** @internal */
export const GetV2LogsIdRelatedEntities1$inboundSchema: z.ZodType<
  GetV2LogsIdRelatedEntities1,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: GetV2LogsIdRelatedEntitiesResponse200Type$inboundSchema,
  deployment_key: z.string(),
}).transform((v) => {
  return remap$(v, {
    "deployment_key": "deploymentKey",
  });
});

/** @internal */
export type GetV2LogsIdRelatedEntities1$Outbound = {
  type: string;
  deployment_key: string;
};

/** @internal */
export const GetV2LogsIdRelatedEntities1$outboundSchema: z.ZodType<
  GetV2LogsIdRelatedEntities1$Outbound,
  z.ZodTypeDef,
  GetV2LogsIdRelatedEntities1
> = z.object({
  type: GetV2LogsIdRelatedEntitiesResponse200Type$outboundSchema,
  deploymentKey: z.string(),
}).transform((v) => {
  return remap$(v, {
    deploymentKey: "deployment_key",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdRelatedEntities1$ {
  /** @deprecated use `GetV2LogsIdRelatedEntities1$inboundSchema` instead. */
  export const inboundSchema = GetV2LogsIdRelatedEntities1$inboundSchema;
  /** @deprecated use `GetV2LogsIdRelatedEntities1$outboundSchema` instead. */
  export const outboundSchema = GetV2LogsIdRelatedEntities1$outboundSchema;
  /** @deprecated use `GetV2LogsIdRelatedEntities1$Outbound` instead. */
  export type Outbound = GetV2LogsIdRelatedEntities1$Outbound;
}

export function getV2LogsIdRelatedEntities1ToJSON(
  getV2LogsIdRelatedEntities1: GetV2LogsIdRelatedEntities1,
): string {
  return JSON.stringify(
    GetV2LogsIdRelatedEntities1$outboundSchema.parse(
      getV2LogsIdRelatedEntities1,
    ),
  );
}

export function getV2LogsIdRelatedEntities1FromJSON(
  jsonString: string,
): SafeParseResult<GetV2LogsIdRelatedEntities1, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetV2LogsIdRelatedEntities1$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetV2LogsIdRelatedEntities1' from JSON`,
  );
}

/** @internal */
export const ResponseBodyRelatedEntities$inboundSchema: z.ZodType<
  ResponseBodyRelatedEntities,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => GetV2LogsIdRelatedEntities1$inboundSchema),
  z.lazy(() => GetV2LogsIdRelatedEntities2$inboundSchema),
  z.lazy(() => GetV2LogsIdRelatedEntities3$inboundSchema),
  z.lazy(() => RelatedEntities4$inboundSchema),
  z.lazy(() => RelatedEntities5$inboundSchema),
  z.lazy(() => RelatedEntities6$inboundSchema),
  z.lazy(() => RelatedEntities7$inboundSchema),
]);

/** @internal */
export type ResponseBodyRelatedEntities$Outbound =
  | GetV2LogsIdRelatedEntities1$Outbound
  | GetV2LogsIdRelatedEntities2$Outbound
  | GetV2LogsIdRelatedEntities3$Outbound
  | RelatedEntities4$Outbound
  | RelatedEntities5$Outbound
  | RelatedEntities6$Outbound
  | RelatedEntities7$Outbound;

/** @internal */
export const ResponseBodyRelatedEntities$outboundSchema: z.ZodType<
  ResponseBodyRelatedEntities$Outbound,
  z.ZodTypeDef,
  ResponseBodyRelatedEntities
> = z.union([
  z.lazy(() => GetV2LogsIdRelatedEntities1$outboundSchema),
  z.lazy(() => GetV2LogsIdRelatedEntities2$outboundSchema),
  z.lazy(() => GetV2LogsIdRelatedEntities3$outboundSchema),
  z.lazy(() => RelatedEntities4$outboundSchema),
  z.lazy(() => RelatedEntities5$outboundSchema),
  z.lazy(() => RelatedEntities6$outboundSchema),
  z.lazy(() => RelatedEntities7$outboundSchema),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ResponseBodyRelatedEntities$ {
  /** @deprecated use `ResponseBodyRelatedEntities$inboundSchema` instead. */
  export const inboundSchema = ResponseBodyRelatedEntities$inboundSchema;
  /** @deprecated use `ResponseBodyRelatedEntities$outboundSchema` instead. */
  export const outboundSchema = ResponseBodyRelatedEntities$outboundSchema;
  /** @deprecated use `ResponseBodyRelatedEntities$Outbound` instead. */
  export type Outbound = ResponseBodyRelatedEntities$Outbound;
}

export function responseBodyRelatedEntitiesToJSON(
  responseBodyRelatedEntities: ResponseBodyRelatedEntities,
): string {
  return JSON.stringify(
    ResponseBodyRelatedEntities$outboundSchema.parse(
      responseBodyRelatedEntities,
    ),
  );
}

export function responseBodyRelatedEntitiesFromJSON(
  jsonString: string,
): SafeParseResult<ResponseBodyRelatedEntities, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ResponseBodyRelatedEntities$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ResponseBodyRelatedEntities' from JSON`,
  );
}

/** @internal */
export const GetV2LogsIdMessageResponse200Role$inboundSchema: z.ZodNativeEnum<
  typeof GetV2LogsIdMessageResponse200Role
> = z.nativeEnum(GetV2LogsIdMessageResponse200Role);

/** @internal */
export const GetV2LogsIdMessageResponse200Role$outboundSchema: z.ZodNativeEnum<
  typeof GetV2LogsIdMessageResponse200Role
> = GetV2LogsIdMessageResponse200Role$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdMessageResponse200Role$ {
  /** @deprecated use `GetV2LogsIdMessageResponse200Role$inboundSchema` instead. */
  export const inboundSchema = GetV2LogsIdMessageResponse200Role$inboundSchema;
  /** @deprecated use `GetV2LogsIdMessageResponse200Role$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdMessageResponse200Role$outboundSchema;
}

/** @internal */
export const GetV2LogsIdMessage3$inboundSchema: z.ZodType<
  GetV2LogsIdMessage3,
  z.ZodTypeDef,
  unknown
> = z.object({
  role: GetV2LogsIdMessageResponse200Role$inboundSchema,
  url: z.string(),
});

/** @internal */
export type GetV2LogsIdMessage3$Outbound = {
  role: string;
  url: string;
};

/** @internal */
export const GetV2LogsIdMessage3$outboundSchema: z.ZodType<
  GetV2LogsIdMessage3$Outbound,
  z.ZodTypeDef,
  GetV2LogsIdMessage3
> = z.object({
  role: GetV2LogsIdMessageResponse200Role$outboundSchema,
  url: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdMessage3$ {
  /** @deprecated use `GetV2LogsIdMessage3$inboundSchema` instead. */
  export const inboundSchema = GetV2LogsIdMessage3$inboundSchema;
  /** @deprecated use `GetV2LogsIdMessage3$outboundSchema` instead. */
  export const outboundSchema = GetV2LogsIdMessage3$outboundSchema;
  /** @deprecated use `GetV2LogsIdMessage3$Outbound` instead. */
  export type Outbound = GetV2LogsIdMessage3$Outbound;
}

export function getV2LogsIdMessage3ToJSON(
  getV2LogsIdMessage3: GetV2LogsIdMessage3,
): string {
  return JSON.stringify(
    GetV2LogsIdMessage3$outboundSchema.parse(getV2LogsIdMessage3),
  );
}

export function getV2LogsIdMessage3FromJSON(
  jsonString: string,
): SafeParseResult<GetV2LogsIdMessage3, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetV2LogsIdMessage3$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetV2LogsIdMessage3' from JSON`,
  );
}

/** @internal */
export const GetV2LogsIdMessageResponseRole$inboundSchema: z.ZodNativeEnum<
  typeof GetV2LogsIdMessageResponseRole
> = z.nativeEnum(GetV2LogsIdMessageResponseRole);

/** @internal */
export const GetV2LogsIdMessageResponseRole$outboundSchema: z.ZodNativeEnum<
  typeof GetV2LogsIdMessageResponseRole
> = GetV2LogsIdMessageResponseRole$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdMessageResponseRole$ {
  /** @deprecated use `GetV2LogsIdMessageResponseRole$inboundSchema` instead. */
  export const inboundSchema = GetV2LogsIdMessageResponseRole$inboundSchema;
  /** @deprecated use `GetV2LogsIdMessageResponseRole$outboundSchema` instead. */
  export const outboundSchema = GetV2LogsIdMessageResponseRole$outboundSchema;
}

/** @internal */
export const GetV2LogsIdMessage2$inboundSchema: z.ZodType<
  GetV2LogsIdMessage2,
  z.ZodTypeDef,
  unknown
> = z.object({
  role: GetV2LogsIdMessageResponseRole$inboundSchema,
  content: z.nullable(z.string()),
});

/** @internal */
export type GetV2LogsIdMessage2$Outbound = {
  role: string;
  content: string | null;
};

/** @internal */
export const GetV2LogsIdMessage2$outboundSchema: z.ZodType<
  GetV2LogsIdMessage2$Outbound,
  z.ZodTypeDef,
  GetV2LogsIdMessage2
> = z.object({
  role: GetV2LogsIdMessageResponseRole$outboundSchema,
  content: z.nullable(z.string()),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdMessage2$ {
  /** @deprecated use `GetV2LogsIdMessage2$inboundSchema` instead. */
  export const inboundSchema = GetV2LogsIdMessage2$inboundSchema;
  /** @deprecated use `GetV2LogsIdMessage2$outboundSchema` instead. */
  export const outboundSchema = GetV2LogsIdMessage2$outboundSchema;
  /** @deprecated use `GetV2LogsIdMessage2$Outbound` instead. */
  export type Outbound = GetV2LogsIdMessage2$Outbound;
}

export function getV2LogsIdMessage2ToJSON(
  getV2LogsIdMessage2: GetV2LogsIdMessage2,
): string {
  return JSON.stringify(
    GetV2LogsIdMessage2$outboundSchema.parse(getV2LogsIdMessage2),
  );
}

export function getV2LogsIdMessage2FromJSON(
  jsonString: string,
): SafeParseResult<GetV2LogsIdMessage2, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetV2LogsIdMessage2$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetV2LogsIdMessage2' from JSON`,
  );
}

/** @internal */
export const GetV2LogsIdMessageRole$inboundSchema: z.ZodNativeEnum<
  typeof GetV2LogsIdMessageRole
> = z.nativeEnum(GetV2LogsIdMessageRole);

/** @internal */
export const GetV2LogsIdMessageRole$outboundSchema: z.ZodNativeEnum<
  typeof GetV2LogsIdMessageRole
> = GetV2LogsIdMessageRole$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdMessageRole$ {
  /** @deprecated use `GetV2LogsIdMessageRole$inboundSchema` instead. */
  export const inboundSchema = GetV2LogsIdMessageRole$inboundSchema;
  /** @deprecated use `GetV2LogsIdMessageRole$outboundSchema` instead. */
  export const outboundSchema = GetV2LogsIdMessageRole$outboundSchema;
}

/** @internal */
export const GetV2LogsIdMessageType$inboundSchema: z.ZodNativeEnum<
  typeof GetV2LogsIdMessageType
> = z.nativeEnum(GetV2LogsIdMessageType);

/** @internal */
export const GetV2LogsIdMessageType$outboundSchema: z.ZodNativeEnum<
  typeof GetV2LogsIdMessageType
> = GetV2LogsIdMessageType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdMessageType$ {
  /** @deprecated use `GetV2LogsIdMessageType$inboundSchema` instead. */
  export const inboundSchema = GetV2LogsIdMessageType$inboundSchema;
  /** @deprecated use `GetV2LogsIdMessageType$outboundSchema` instead. */
  export const outboundSchema = GetV2LogsIdMessageType$outboundSchema;
}

/** @internal */
export const GetV2LogsIdMessageFunction$inboundSchema: z.ZodType<
  GetV2LogsIdMessageFunction,
  z.ZodTypeDef,
  unknown
> = z.object({
  name: z.string(),
  arguments: z.string(),
});

/** @internal */
export type GetV2LogsIdMessageFunction$Outbound = {
  name: string;
  arguments: string;
};

/** @internal */
export const GetV2LogsIdMessageFunction$outboundSchema: z.ZodType<
  GetV2LogsIdMessageFunction$Outbound,
  z.ZodTypeDef,
  GetV2LogsIdMessageFunction
> = z.object({
  name: z.string(),
  arguments: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdMessageFunction$ {
  /** @deprecated use `GetV2LogsIdMessageFunction$inboundSchema` instead. */
  export const inboundSchema = GetV2LogsIdMessageFunction$inboundSchema;
  /** @deprecated use `GetV2LogsIdMessageFunction$outboundSchema` instead. */
  export const outboundSchema = GetV2LogsIdMessageFunction$outboundSchema;
  /** @deprecated use `GetV2LogsIdMessageFunction$Outbound` instead. */
  export type Outbound = GetV2LogsIdMessageFunction$Outbound;
}

export function getV2LogsIdMessageFunctionToJSON(
  getV2LogsIdMessageFunction: GetV2LogsIdMessageFunction,
): string {
  return JSON.stringify(
    GetV2LogsIdMessageFunction$outboundSchema.parse(getV2LogsIdMessageFunction),
  );
}

export function getV2LogsIdMessageFunctionFromJSON(
  jsonString: string,
): SafeParseResult<GetV2LogsIdMessageFunction, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetV2LogsIdMessageFunction$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetV2LogsIdMessageFunction' from JSON`,
  );
}

/** @internal */
export const GetV2LogsIdMessageToolCalls$inboundSchema: z.ZodType<
  GetV2LogsIdMessageToolCalls,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string().optional(),
  index: z.number().optional(),
  type: GetV2LogsIdMessageType$inboundSchema,
  function: z.lazy(() => GetV2LogsIdMessageFunction$inboundSchema),
});

/** @internal */
export type GetV2LogsIdMessageToolCalls$Outbound = {
  id?: string | undefined;
  index?: number | undefined;
  type: string;
  function: GetV2LogsIdMessageFunction$Outbound;
};

/** @internal */
export const GetV2LogsIdMessageToolCalls$outboundSchema: z.ZodType<
  GetV2LogsIdMessageToolCalls$Outbound,
  z.ZodTypeDef,
  GetV2LogsIdMessageToolCalls
> = z.object({
  id: z.string().optional(),
  index: z.number().optional(),
  type: GetV2LogsIdMessageType$outboundSchema,
  function: z.lazy(() => GetV2LogsIdMessageFunction$outboundSchema),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdMessageToolCalls$ {
  /** @deprecated use `GetV2LogsIdMessageToolCalls$inboundSchema` instead. */
  export const inboundSchema = GetV2LogsIdMessageToolCalls$inboundSchema;
  /** @deprecated use `GetV2LogsIdMessageToolCalls$outboundSchema` instead. */
  export const outboundSchema = GetV2LogsIdMessageToolCalls$outboundSchema;
  /** @deprecated use `GetV2LogsIdMessageToolCalls$Outbound` instead. */
  export type Outbound = GetV2LogsIdMessageToolCalls$Outbound;
}

export function getV2LogsIdMessageToolCallsToJSON(
  getV2LogsIdMessageToolCalls: GetV2LogsIdMessageToolCalls,
): string {
  return JSON.stringify(
    GetV2LogsIdMessageToolCalls$outboundSchema.parse(
      getV2LogsIdMessageToolCalls,
    ),
  );
}

export function getV2LogsIdMessageToolCallsFromJSON(
  jsonString: string,
): SafeParseResult<GetV2LogsIdMessageToolCalls, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetV2LogsIdMessageToolCalls$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetV2LogsIdMessageToolCalls' from JSON`,
  );
}

/** @internal */
export const GetV2LogsIdMessage1$inboundSchema: z.ZodType<
  GetV2LogsIdMessage1,
  z.ZodTypeDef,
  unknown
> = z.object({
  role: GetV2LogsIdMessageRole$inboundSchema,
  content: z.nullable(z.string()).optional(),
  tool_calls: z.array(z.lazy(() => GetV2LogsIdMessageToolCalls$inboundSchema)),
}).transform((v) => {
  return remap$(v, {
    "tool_calls": "toolCalls",
  });
});

/** @internal */
export type GetV2LogsIdMessage1$Outbound = {
  role: string;
  content?: string | null | undefined;
  tool_calls: Array<GetV2LogsIdMessageToolCalls$Outbound>;
};

/** @internal */
export const GetV2LogsIdMessage1$outboundSchema: z.ZodType<
  GetV2LogsIdMessage1$Outbound,
  z.ZodTypeDef,
  GetV2LogsIdMessage1
> = z.object({
  role: GetV2LogsIdMessageRole$outboundSchema,
  content: z.nullable(z.string()).optional(),
  toolCalls: z.array(z.lazy(() => GetV2LogsIdMessageToolCalls$outboundSchema)),
}).transform((v) => {
  return remap$(v, {
    toolCalls: "tool_calls",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdMessage1$ {
  /** @deprecated use `GetV2LogsIdMessage1$inboundSchema` instead. */
  export const inboundSchema = GetV2LogsIdMessage1$inboundSchema;
  /** @deprecated use `GetV2LogsIdMessage1$outboundSchema` instead. */
  export const outboundSchema = GetV2LogsIdMessage1$outboundSchema;
  /** @deprecated use `GetV2LogsIdMessage1$Outbound` instead. */
  export type Outbound = GetV2LogsIdMessage1$Outbound;
}

export function getV2LogsIdMessage1ToJSON(
  getV2LogsIdMessage1: GetV2LogsIdMessage1,
): string {
  return JSON.stringify(
    GetV2LogsIdMessage1$outboundSchema.parse(getV2LogsIdMessage1),
  );
}

export function getV2LogsIdMessage1FromJSON(
  jsonString: string,
): SafeParseResult<GetV2LogsIdMessage1, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetV2LogsIdMessage1$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetV2LogsIdMessage1' from JSON`,
  );
}

/** @internal */
export const ResponseBodyMessage$inboundSchema: z.ZodType<
  ResponseBodyMessage,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => GetV2LogsIdMessage2$inboundSchema),
  z.lazy(() => GetV2LogsIdMessage3$inboundSchema),
  z.lazy(() => GetV2LogsIdMessage1$inboundSchema),
]);

/** @internal */
export type ResponseBodyMessage$Outbound =
  | GetV2LogsIdMessage2$Outbound
  | GetV2LogsIdMessage3$Outbound
  | GetV2LogsIdMessage1$Outbound;

/** @internal */
export const ResponseBodyMessage$outboundSchema: z.ZodType<
  ResponseBodyMessage$Outbound,
  z.ZodTypeDef,
  ResponseBodyMessage
> = z.union([
  z.lazy(() => GetV2LogsIdMessage2$outboundSchema),
  z.lazy(() => GetV2LogsIdMessage3$outboundSchema),
  z.lazy(() => GetV2LogsIdMessage1$outboundSchema),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ResponseBodyMessage$ {
  /** @deprecated use `ResponseBodyMessage$inboundSchema` instead. */
  export const inboundSchema = ResponseBodyMessage$inboundSchema;
  /** @deprecated use `ResponseBodyMessage$outboundSchema` instead. */
  export const outboundSchema = ResponseBodyMessage$outboundSchema;
  /** @deprecated use `ResponseBodyMessage$Outbound` instead. */
  export type Outbound = ResponseBodyMessage$Outbound;
}

export function responseBodyMessageToJSON(
  responseBodyMessage: ResponseBodyMessage,
): string {
  return JSON.stringify(
    ResponseBodyMessage$outboundSchema.parse(responseBodyMessage),
  );
}

export function responseBodyMessageFromJSON(
  jsonString: string,
): SafeParseResult<ResponseBodyMessage, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ResponseBodyMessage$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ResponseBodyMessage' from JSON`,
  );
}

/** @internal */
export const ResponseBodyChoices$inboundSchema: z.ZodType<
  ResponseBodyChoices,
  z.ZodTypeDef,
  unknown
> = z.object({
  index: z.number(),
  message: z.union([
    z.lazy(() => GetV2LogsIdMessage2$inboundSchema),
    z.lazy(() => GetV2LogsIdMessage3$inboundSchema),
    z.lazy(() => GetV2LogsIdMessage1$inboundSchema),
  ]).optional(),
  finish_reason: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    "finish_reason": "finishReason",
  });
});

/** @internal */
export type ResponseBodyChoices$Outbound = {
  index: number;
  message?:
    | GetV2LogsIdMessage2$Outbound
    | GetV2LogsIdMessage3$Outbound
    | GetV2LogsIdMessage1$Outbound
    | undefined;
  finish_reason?: string | null | undefined;
};

/** @internal */
export const ResponseBodyChoices$outboundSchema: z.ZodType<
  ResponseBodyChoices$Outbound,
  z.ZodTypeDef,
  ResponseBodyChoices
> = z.object({
  index: z.number(),
  message: z.union([
    z.lazy(() => GetV2LogsIdMessage2$outboundSchema),
    z.lazy(() => GetV2LogsIdMessage3$outboundSchema),
    z.lazy(() => GetV2LogsIdMessage1$outboundSchema),
  ]).optional(),
  finishReason: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    finishReason: "finish_reason",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ResponseBodyChoices$ {
  /** @deprecated use `ResponseBodyChoices$inboundSchema` instead. */
  export const inboundSchema = ResponseBodyChoices$inboundSchema;
  /** @deprecated use `ResponseBodyChoices$outboundSchema` instead. */
  export const outboundSchema = ResponseBodyChoices$outboundSchema;
  /** @deprecated use `ResponseBodyChoices$Outbound` instead. */
  export type Outbound = ResponseBodyChoices$Outbound;
}

export function responseBodyChoicesToJSON(
  responseBodyChoices: ResponseBodyChoices,
): string {
  return JSON.stringify(
    ResponseBodyChoices$outboundSchema.parse(responseBodyChoices),
  );
}

export function responseBodyChoicesFromJSON(
  jsonString: string,
): SafeParseResult<ResponseBodyChoices, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ResponseBodyChoices$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ResponseBodyChoices' from JSON`,
  );
}

/** @internal */
export const ResponseBodyAction$inboundSchema: z.ZodNativeEnum<
  typeof ResponseBodyAction
> = z.nativeEnum(ResponseBodyAction);

/** @internal */
export const ResponseBodyAction$outboundSchema: z.ZodNativeEnum<
  typeof ResponseBodyAction
> = ResponseBodyAction$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ResponseBodyAction$ {
  /** @deprecated use `ResponseBodyAction$inboundSchema` instead. */
  export const inboundSchema = ResponseBodyAction$inboundSchema;
  /** @deprecated use `ResponseBodyAction$outboundSchema` instead. */
  export const outboundSchema = ResponseBodyAction$outboundSchema;
}

/** @internal */
export const ResponseBodyModelType$inboundSchema: z.ZodNativeEnum<
  typeof ResponseBodyModelType
> = z.nativeEnum(ResponseBodyModelType);

/** @internal */
export const ResponseBodyModelType$outboundSchema: z.ZodNativeEnum<
  typeof ResponseBodyModelType
> = ResponseBodyModelType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ResponseBodyModelType$ {
  /** @deprecated use `ResponseBodyModelType$inboundSchema` instead. */
  export const inboundSchema = ResponseBodyModelType$inboundSchema;
  /** @deprecated use `ResponseBodyModelType$outboundSchema` instead. */
  export const outboundSchema = ResponseBodyModelType$outboundSchema;
}

/** @internal */
export const ResponseBodyFormat$inboundSchema: z.ZodNativeEnum<
  typeof ResponseBodyFormat
> = z.nativeEnum(ResponseBodyFormat);

/** @internal */
export const ResponseBodyFormat$outboundSchema: z.ZodNativeEnum<
  typeof ResponseBodyFormat
> = ResponseBodyFormat$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ResponseBodyFormat$ {
  /** @deprecated use `ResponseBodyFormat$inboundSchema` instead. */
  export const inboundSchema = ResponseBodyFormat$inboundSchema;
  /** @deprecated use `ResponseBodyFormat$outboundSchema` instead. */
  export const outboundSchema = ResponseBodyFormat$outboundSchema;
}

/** @internal */
export const ResponseBodyQuality$inboundSchema: z.ZodNativeEnum<
  typeof ResponseBodyQuality
> = z.nativeEnum(ResponseBodyQuality);

/** @internal */
export const ResponseBodyQuality$outboundSchema: z.ZodNativeEnum<
  typeof ResponseBodyQuality
> = ResponseBodyQuality$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ResponseBodyQuality$ {
  /** @deprecated use `ResponseBodyQuality$inboundSchema` instead. */
  export const inboundSchema = ResponseBodyQuality$inboundSchema;
  /** @deprecated use `ResponseBodyQuality$outboundSchema` instead. */
  export const outboundSchema = ResponseBodyQuality$outboundSchema;
}

/** @internal */
export const GetV2LogsIdResponseFormatResponseType$inboundSchema:
  z.ZodNativeEnum<typeof GetV2LogsIdResponseFormatResponseType> = z.nativeEnum(
    GetV2LogsIdResponseFormatResponseType,
  );

/** @internal */
export const GetV2LogsIdResponseFormatResponseType$outboundSchema:
  z.ZodNativeEnum<typeof GetV2LogsIdResponseFormatResponseType> =
    GetV2LogsIdResponseFormatResponseType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdResponseFormatResponseType$ {
  /** @deprecated use `GetV2LogsIdResponseFormatResponseType$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsIdResponseFormatResponseType$inboundSchema;
  /** @deprecated use `GetV2LogsIdResponseFormatResponseType$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdResponseFormatResponseType$outboundSchema;
}

/** @internal */
export const GetV2LogsIdResponseFormat2$inboundSchema: z.ZodType<
  GetV2LogsIdResponseFormat2,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: GetV2LogsIdResponseFormatResponseType$inboundSchema,
});

/** @internal */
export type GetV2LogsIdResponseFormat2$Outbound = {
  type: string;
};

/** @internal */
export const GetV2LogsIdResponseFormat2$outboundSchema: z.ZodType<
  GetV2LogsIdResponseFormat2$Outbound,
  z.ZodTypeDef,
  GetV2LogsIdResponseFormat2
> = z.object({
  type: GetV2LogsIdResponseFormatResponseType$outboundSchema,
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdResponseFormat2$ {
  /** @deprecated use `GetV2LogsIdResponseFormat2$inboundSchema` instead. */
  export const inboundSchema = GetV2LogsIdResponseFormat2$inboundSchema;
  /** @deprecated use `GetV2LogsIdResponseFormat2$outboundSchema` instead. */
  export const outboundSchema = GetV2LogsIdResponseFormat2$outboundSchema;
  /** @deprecated use `GetV2LogsIdResponseFormat2$Outbound` instead. */
  export type Outbound = GetV2LogsIdResponseFormat2$Outbound;
}

export function getV2LogsIdResponseFormat2ToJSON(
  getV2LogsIdResponseFormat2: GetV2LogsIdResponseFormat2,
): string {
  return JSON.stringify(
    GetV2LogsIdResponseFormat2$outboundSchema.parse(getV2LogsIdResponseFormat2),
  );
}

export function getV2LogsIdResponseFormat2FromJSON(
  jsonString: string,
): SafeParseResult<GetV2LogsIdResponseFormat2, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetV2LogsIdResponseFormat2$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetV2LogsIdResponseFormat2' from JSON`,
  );
}

/** @internal */
export const GetV2LogsIdResponseFormatType$inboundSchema: z.ZodNativeEnum<
  typeof GetV2LogsIdResponseFormatType
> = z.nativeEnum(GetV2LogsIdResponseFormatType);

/** @internal */
export const GetV2LogsIdResponseFormatType$outboundSchema: z.ZodNativeEnum<
  typeof GetV2LogsIdResponseFormatType
> = GetV2LogsIdResponseFormatType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdResponseFormatType$ {
  /** @deprecated use `GetV2LogsIdResponseFormatType$inboundSchema` instead. */
  export const inboundSchema = GetV2LogsIdResponseFormatType$inboundSchema;
  /** @deprecated use `GetV2LogsIdResponseFormatType$outboundSchema` instead. */
  export const outboundSchema = GetV2LogsIdResponseFormatType$outboundSchema;
}

/** @internal */
export const GetV2LogsIdResponseFormatJsonSchema$inboundSchema: z.ZodType<
  GetV2LogsIdResponseFormatJsonSchema,
  z.ZodTypeDef,
  unknown
> = z.object({
  name: z.string(),
  strict: z.boolean(),
  schema: z.record(z.any()),
});

/** @internal */
export type GetV2LogsIdResponseFormatJsonSchema$Outbound = {
  name: string;
  strict: boolean;
  schema: { [k: string]: any };
};

/** @internal */
export const GetV2LogsIdResponseFormatJsonSchema$outboundSchema: z.ZodType<
  GetV2LogsIdResponseFormatJsonSchema$Outbound,
  z.ZodTypeDef,
  GetV2LogsIdResponseFormatJsonSchema
> = z.object({
  name: z.string(),
  strict: z.boolean(),
  schema: z.record(z.any()),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdResponseFormatJsonSchema$ {
  /** @deprecated use `GetV2LogsIdResponseFormatJsonSchema$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsIdResponseFormatJsonSchema$inboundSchema;
  /** @deprecated use `GetV2LogsIdResponseFormatJsonSchema$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdResponseFormatJsonSchema$outboundSchema;
  /** @deprecated use `GetV2LogsIdResponseFormatJsonSchema$Outbound` instead. */
  export type Outbound = GetV2LogsIdResponseFormatJsonSchema$Outbound;
}

export function getV2LogsIdResponseFormatJsonSchemaToJSON(
  getV2LogsIdResponseFormatJsonSchema: GetV2LogsIdResponseFormatJsonSchema,
): string {
  return JSON.stringify(
    GetV2LogsIdResponseFormatJsonSchema$outboundSchema.parse(
      getV2LogsIdResponseFormatJsonSchema,
    ),
  );
}

export function getV2LogsIdResponseFormatJsonSchemaFromJSON(
  jsonString: string,
): SafeParseResult<GetV2LogsIdResponseFormatJsonSchema, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      GetV2LogsIdResponseFormatJsonSchema$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetV2LogsIdResponseFormatJsonSchema' from JSON`,
  );
}

/** @internal */
export const GetV2LogsIdResponseFormat1$inboundSchema: z.ZodType<
  GetV2LogsIdResponseFormat1,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: GetV2LogsIdResponseFormatType$inboundSchema,
  json_schema: z.lazy(() => GetV2LogsIdResponseFormatJsonSchema$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "json_schema": "jsonSchema",
  });
});

/** @internal */
export type GetV2LogsIdResponseFormat1$Outbound = {
  type: string;
  json_schema: GetV2LogsIdResponseFormatJsonSchema$Outbound;
};

/** @internal */
export const GetV2LogsIdResponseFormat1$outboundSchema: z.ZodType<
  GetV2LogsIdResponseFormat1$Outbound,
  z.ZodTypeDef,
  GetV2LogsIdResponseFormat1
> = z.object({
  type: GetV2LogsIdResponseFormatType$outboundSchema,
  jsonSchema: z.lazy(() => GetV2LogsIdResponseFormatJsonSchema$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    jsonSchema: "json_schema",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdResponseFormat1$ {
  /** @deprecated use `GetV2LogsIdResponseFormat1$inboundSchema` instead. */
  export const inboundSchema = GetV2LogsIdResponseFormat1$inboundSchema;
  /** @deprecated use `GetV2LogsIdResponseFormat1$outboundSchema` instead. */
  export const outboundSchema = GetV2LogsIdResponseFormat1$outboundSchema;
  /** @deprecated use `GetV2LogsIdResponseFormat1$Outbound` instead. */
  export type Outbound = GetV2LogsIdResponseFormat1$Outbound;
}

export function getV2LogsIdResponseFormat1ToJSON(
  getV2LogsIdResponseFormat1: GetV2LogsIdResponseFormat1,
): string {
  return JSON.stringify(
    GetV2LogsIdResponseFormat1$outboundSchema.parse(getV2LogsIdResponseFormat1),
  );
}

export function getV2LogsIdResponseFormat1FromJSON(
  jsonString: string,
): SafeParseResult<GetV2LogsIdResponseFormat1, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetV2LogsIdResponseFormat1$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetV2LogsIdResponseFormat1' from JSON`,
  );
}

/** @internal */
export const ResponseBodyResponseFormat$inboundSchema: z.ZodType<
  ResponseBodyResponseFormat,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => GetV2LogsIdResponseFormat2$inboundSchema),
  z.lazy(() => GetV2LogsIdResponseFormat1$inboundSchema),
]);

/** @internal */
export type ResponseBodyResponseFormat$Outbound =
  | GetV2LogsIdResponseFormat2$Outbound
  | GetV2LogsIdResponseFormat1$Outbound;

/** @internal */
export const ResponseBodyResponseFormat$outboundSchema: z.ZodType<
  ResponseBodyResponseFormat$Outbound,
  z.ZodTypeDef,
  ResponseBodyResponseFormat
> = z.union([
  z.lazy(() => GetV2LogsIdResponseFormat2$outboundSchema),
  z.lazy(() => GetV2LogsIdResponseFormat1$outboundSchema),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ResponseBodyResponseFormat$ {
  /** @deprecated use `ResponseBodyResponseFormat$inboundSchema` instead. */
  export const inboundSchema = ResponseBodyResponseFormat$inboundSchema;
  /** @deprecated use `ResponseBodyResponseFormat$outboundSchema` instead. */
  export const outboundSchema = ResponseBodyResponseFormat$outboundSchema;
  /** @deprecated use `ResponseBodyResponseFormat$Outbound` instead. */
  export type Outbound = ResponseBodyResponseFormat$Outbound;
}

export function responseBodyResponseFormatToJSON(
  responseBodyResponseFormat: ResponseBodyResponseFormat,
): string {
  return JSON.stringify(
    ResponseBodyResponseFormat$outboundSchema.parse(responseBodyResponseFormat),
  );
}

export function responseBodyResponseFormatFromJSON(
  jsonString: string,
): SafeParseResult<ResponseBodyResponseFormat, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ResponseBodyResponseFormat$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ResponseBodyResponseFormat' from JSON`,
  );
}

/** @internal */
export const ResponseBodyPhotoRealVersion$inboundSchema: z.ZodNativeEnum<
  typeof ResponseBodyPhotoRealVersion
> = z.nativeEnum(ResponseBodyPhotoRealVersion);

/** @internal */
export const ResponseBodyPhotoRealVersion$outboundSchema: z.ZodNativeEnum<
  typeof ResponseBodyPhotoRealVersion
> = ResponseBodyPhotoRealVersion$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ResponseBodyPhotoRealVersion$ {
  /** @deprecated use `ResponseBodyPhotoRealVersion$inboundSchema` instead. */
  export const inboundSchema = ResponseBodyPhotoRealVersion$inboundSchema;
  /** @deprecated use `ResponseBodyPhotoRealVersion$outboundSchema` instead. */
  export const outboundSchema = ResponseBodyPhotoRealVersion$outboundSchema;
}

/** @internal */
export const ResponseBodyEncodingFormat$inboundSchema: z.ZodNativeEnum<
  typeof ResponseBodyEncodingFormat
> = z.nativeEnum(ResponseBodyEncodingFormat);

/** @internal */
export const ResponseBodyEncodingFormat$outboundSchema: z.ZodNativeEnum<
  typeof ResponseBodyEncodingFormat
> = ResponseBodyEncodingFormat$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ResponseBodyEncodingFormat$ {
  /** @deprecated use `ResponseBodyEncodingFormat$inboundSchema` instead. */
  export const inboundSchema = ResponseBodyEncodingFormat$inboundSchema;
  /** @deprecated use `ResponseBodyEncodingFormat$outboundSchema` instead. */
  export const outboundSchema = ResponseBodyEncodingFormat$outboundSchema;
}

/** @internal */
export const ResponseBodyModelParameters$inboundSchema: z.ZodType<
  ResponseBodyModelParameters,
  z.ZodTypeDef,
  unknown
> = z.object({
  temperature: z.number().optional(),
  maxTokens: z.number().optional(),
  topK: z.number().optional(),
  topP: z.number().optional(),
  frequencyPenalty: z.number().optional(),
  presencePenalty: z.number().optional(),
  numImages: z.number().optional(),
  seed: z.number().optional(),
  format: ResponseBodyFormat$inboundSchema.optional(),
  dimensions: z.string().optional(),
  quality: ResponseBodyQuality$inboundSchema.optional(),
  style: z.string().optional(),
  responseFormat: z.nullable(
    z.union([
      z.lazy(() => GetV2LogsIdResponseFormat2$inboundSchema),
      z.lazy(() => GetV2LogsIdResponseFormat1$inboundSchema),
    ]),
  ).optional(),
  photoRealVersion: ResponseBodyPhotoRealVersion$inboundSchema.optional(),
  encoding_format: ResponseBodyEncodingFormat$inboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    "encoding_format": "encodingFormat",
  });
});

/** @internal */
export type ResponseBodyModelParameters$Outbound = {
  temperature?: number | undefined;
  maxTokens?: number | undefined;
  topK?: number | undefined;
  topP?: number | undefined;
  frequencyPenalty?: number | undefined;
  presencePenalty?: number | undefined;
  numImages?: number | undefined;
  seed?: number | undefined;
  format?: string | undefined;
  dimensions?: string | undefined;
  quality?: string | undefined;
  style?: string | undefined;
  responseFormat?:
    | GetV2LogsIdResponseFormat2$Outbound
    | GetV2LogsIdResponseFormat1$Outbound
    | null
    | undefined;
  photoRealVersion?: string | undefined;
  encoding_format?: string | undefined;
};

/** @internal */
export const ResponseBodyModelParameters$outboundSchema: z.ZodType<
  ResponseBodyModelParameters$Outbound,
  z.ZodTypeDef,
  ResponseBodyModelParameters
> = z.object({
  temperature: z.number().optional(),
  maxTokens: z.number().optional(),
  topK: z.number().optional(),
  topP: z.number().optional(),
  frequencyPenalty: z.number().optional(),
  presencePenalty: z.number().optional(),
  numImages: z.number().optional(),
  seed: z.number().optional(),
  format: ResponseBodyFormat$outboundSchema.optional(),
  dimensions: z.string().optional(),
  quality: ResponseBodyQuality$outboundSchema.optional(),
  style: z.string().optional(),
  responseFormat: z.nullable(
    z.union([
      z.lazy(() => GetV2LogsIdResponseFormat2$outboundSchema),
      z.lazy(() => GetV2LogsIdResponseFormat1$outboundSchema),
    ]),
  ).optional(),
  photoRealVersion: ResponseBodyPhotoRealVersion$outboundSchema.optional(),
  encodingFormat: ResponseBodyEncodingFormat$outboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    encodingFormat: "encoding_format",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ResponseBodyModelParameters$ {
  /** @deprecated use `ResponseBodyModelParameters$inboundSchema` instead. */
  export const inboundSchema = ResponseBodyModelParameters$inboundSchema;
  /** @deprecated use `ResponseBodyModelParameters$outboundSchema` instead. */
  export const outboundSchema = ResponseBodyModelParameters$outboundSchema;
  /** @deprecated use `ResponseBodyModelParameters$Outbound` instead. */
  export type Outbound = ResponseBodyModelParameters$Outbound;
}

export function responseBodyModelParametersToJSON(
  responseBodyModelParameters: ResponseBodyModelParameters,
): string {
  return JSON.stringify(
    ResponseBodyModelParameters$outboundSchema.parse(
      responseBodyModelParameters,
    ),
  );
}

export function responseBodyModelParametersFromJSON(
  jsonString: string,
): SafeParseResult<ResponseBodyModelParameters, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ResponseBodyModelParameters$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ResponseBodyModelParameters' from JSON`,
  );
}

/** @internal */
export const ResponseBodyProvider$inboundSchema: z.ZodNativeEnum<
  typeof ResponseBodyProvider
> = z.nativeEnum(ResponseBodyProvider);

/** @internal */
export const ResponseBodyProvider$outboundSchema: z.ZodNativeEnum<
  typeof ResponseBodyProvider
> = ResponseBodyProvider$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ResponseBodyProvider$ {
  /** @deprecated use `ResponseBodyProvider$inboundSchema` instead. */
  export const inboundSchema = ResponseBodyProvider$inboundSchema;
  /** @deprecated use `ResponseBodyProvider$outboundSchema` instead. */
  export const outboundSchema = ResponseBodyProvider$outboundSchema;
}

/** @internal */
export const ResponseBodyRole$inboundSchema: z.ZodNativeEnum<
  typeof ResponseBodyRole
> = z.nativeEnum(ResponseBodyRole);

/** @internal */
export const ResponseBodyRole$outboundSchema: z.ZodNativeEnum<
  typeof ResponseBodyRole
> = ResponseBodyRole$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ResponseBodyRole$ {
  /** @deprecated use `ResponseBodyRole$inboundSchema` instead. */
  export const inboundSchema = ResponseBodyRole$inboundSchema;
  /** @deprecated use `ResponseBodyRole$outboundSchema` instead. */
  export const outboundSchema = ResponseBodyRole$outboundSchema;
}

/** @internal */
export const GetV2LogsId2ResponseType$inboundSchema: z.ZodNativeEnum<
  typeof GetV2LogsId2ResponseType
> = z.nativeEnum(GetV2LogsId2ResponseType);

/** @internal */
export const GetV2LogsId2ResponseType$outboundSchema: z.ZodNativeEnum<
  typeof GetV2LogsId2ResponseType
> = GetV2LogsId2ResponseType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsId2ResponseType$ {
  /** @deprecated use `GetV2LogsId2ResponseType$inboundSchema` instead. */
  export const inboundSchema = GetV2LogsId2ResponseType$inboundSchema;
  /** @deprecated use `GetV2LogsId2ResponseType$outboundSchema` instead. */
  export const outboundSchema = GetV2LogsId2ResponseType$outboundSchema;
}

/** @internal */
export const GetV2LogsId2ImageUrl$inboundSchema: z.ZodType<
  GetV2LogsId2ImageUrl,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string().optional(),
  url: z.string(),
  detail: z.string().optional(),
});

/** @internal */
export type GetV2LogsId2ImageUrl$Outbound = {
  id?: string | undefined;
  url: string;
  detail?: string | undefined;
};

/** @internal */
export const GetV2LogsId2ImageUrl$outboundSchema: z.ZodType<
  GetV2LogsId2ImageUrl$Outbound,
  z.ZodTypeDef,
  GetV2LogsId2ImageUrl
> = z.object({
  id: z.string().optional(),
  url: z.string(),
  detail: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsId2ImageUrl$ {
  /** @deprecated use `GetV2LogsId2ImageUrl$inboundSchema` instead. */
  export const inboundSchema = GetV2LogsId2ImageUrl$inboundSchema;
  /** @deprecated use `GetV2LogsId2ImageUrl$outboundSchema` instead. */
  export const outboundSchema = GetV2LogsId2ImageUrl$outboundSchema;
  /** @deprecated use `GetV2LogsId2ImageUrl$Outbound` instead. */
  export type Outbound = GetV2LogsId2ImageUrl$Outbound;
}

export function getV2LogsId2ImageUrlToJSON(
  getV2LogsId2ImageUrl: GetV2LogsId2ImageUrl,
): string {
  return JSON.stringify(
    GetV2LogsId2ImageUrl$outboundSchema.parse(getV2LogsId2ImageUrl),
  );
}

export function getV2LogsId2ImageUrlFromJSON(
  jsonString: string,
): SafeParseResult<GetV2LogsId2ImageUrl, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetV2LogsId2ImageUrl$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetV2LogsId2ImageUrl' from JSON`,
  );
}

/** @internal */
export const GetV2LogsId22$inboundSchema: z.ZodType<
  GetV2LogsId22,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: GetV2LogsId2ResponseType$inboundSchema,
  image_url: z.lazy(() => GetV2LogsId2ImageUrl$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "image_url": "imageUrl",
  });
});

/** @internal */
export type GetV2LogsId22$Outbound = {
  type: string;
  image_url: GetV2LogsId2ImageUrl$Outbound;
};

/** @internal */
export const GetV2LogsId22$outboundSchema: z.ZodType<
  GetV2LogsId22$Outbound,
  z.ZodTypeDef,
  GetV2LogsId22
> = z.object({
  type: GetV2LogsId2ResponseType$outboundSchema,
  imageUrl: z.lazy(() => GetV2LogsId2ImageUrl$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    imageUrl: "image_url",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsId22$ {
  /** @deprecated use `GetV2LogsId22$inboundSchema` instead. */
  export const inboundSchema = GetV2LogsId22$inboundSchema;
  /** @deprecated use `GetV2LogsId22$outboundSchema` instead. */
  export const outboundSchema = GetV2LogsId22$outboundSchema;
  /** @deprecated use `GetV2LogsId22$Outbound` instead. */
  export type Outbound = GetV2LogsId22$Outbound;
}

export function getV2LogsId22ToJSON(getV2LogsId22: GetV2LogsId22): string {
  return JSON.stringify(GetV2LogsId22$outboundSchema.parse(getV2LogsId22));
}

export function getV2LogsId22FromJSON(
  jsonString: string,
): SafeParseResult<GetV2LogsId22, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetV2LogsId22$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetV2LogsId22' from JSON`,
  );
}

/** @internal */
export const GetV2LogsId2Type$inboundSchema: z.ZodNativeEnum<
  typeof GetV2LogsId2Type
> = z.nativeEnum(GetV2LogsId2Type);

/** @internal */
export const GetV2LogsId2Type$outboundSchema: z.ZodNativeEnum<
  typeof GetV2LogsId2Type
> = GetV2LogsId2Type$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsId2Type$ {
  /** @deprecated use `GetV2LogsId2Type$inboundSchema` instead. */
  export const inboundSchema = GetV2LogsId2Type$inboundSchema;
  /** @deprecated use `GetV2LogsId2Type$outboundSchema` instead. */
  export const outboundSchema = GetV2LogsId2Type$outboundSchema;
}

/** @internal */
export const GetV2LogsId21$inboundSchema: z.ZodType<
  GetV2LogsId21,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: GetV2LogsId2Type$inboundSchema,
  text: z.string(),
});

/** @internal */
export type GetV2LogsId21$Outbound = {
  type: string;
  text: string;
};

/** @internal */
export const GetV2LogsId21$outboundSchema: z.ZodType<
  GetV2LogsId21$Outbound,
  z.ZodTypeDef,
  GetV2LogsId21
> = z.object({
  type: GetV2LogsId2Type$outboundSchema,
  text: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsId21$ {
  /** @deprecated use `GetV2LogsId21$inboundSchema` instead. */
  export const inboundSchema = GetV2LogsId21$inboundSchema;
  /** @deprecated use `GetV2LogsId21$outboundSchema` instead. */
  export const outboundSchema = GetV2LogsId21$outboundSchema;
  /** @deprecated use `GetV2LogsId21$Outbound` instead. */
  export type Outbound = GetV2LogsId21$Outbound;
}

export function getV2LogsId21ToJSON(getV2LogsId21: GetV2LogsId21): string {
  return JSON.stringify(GetV2LogsId21$outboundSchema.parse(getV2LogsId21));
}

export function getV2LogsId21FromJSON(
  jsonString: string,
): SafeParseResult<GetV2LogsId21, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetV2LogsId21$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetV2LogsId21' from JSON`,
  );
}

/** @internal */
export const GetV2LogsIdContent2$inboundSchema: z.ZodType<
  GetV2LogsIdContent2,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => GetV2LogsId21$inboundSchema),
  z.lazy(() => GetV2LogsId22$inboundSchema),
]);

/** @internal */
export type GetV2LogsIdContent2$Outbound =
  | GetV2LogsId21$Outbound
  | GetV2LogsId22$Outbound;

/** @internal */
export const GetV2LogsIdContent2$outboundSchema: z.ZodType<
  GetV2LogsIdContent2$Outbound,
  z.ZodTypeDef,
  GetV2LogsIdContent2
> = z.union([
  z.lazy(() => GetV2LogsId21$outboundSchema),
  z.lazy(() => GetV2LogsId22$outboundSchema),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdContent2$ {
  /** @deprecated use `GetV2LogsIdContent2$inboundSchema` instead. */
  export const inboundSchema = GetV2LogsIdContent2$inboundSchema;
  /** @deprecated use `GetV2LogsIdContent2$outboundSchema` instead. */
  export const outboundSchema = GetV2LogsIdContent2$outboundSchema;
  /** @deprecated use `GetV2LogsIdContent2$Outbound` instead. */
  export type Outbound = GetV2LogsIdContent2$Outbound;
}

export function getV2LogsIdContent2ToJSON(
  getV2LogsIdContent2: GetV2LogsIdContent2,
): string {
  return JSON.stringify(
    GetV2LogsIdContent2$outboundSchema.parse(getV2LogsIdContent2),
  );
}

export function getV2LogsIdContent2FromJSON(
  jsonString: string,
): SafeParseResult<GetV2LogsIdContent2, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetV2LogsIdContent2$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetV2LogsIdContent2' from JSON`,
  );
}

/** @internal */
export const ResponseBodyContent$inboundSchema: z.ZodType<
  ResponseBodyContent,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.string(),
  z.array(z.union([
    z.lazy(() => GetV2LogsId21$inboundSchema),
    z.lazy(() => GetV2LogsId22$inboundSchema),
  ])),
]);

/** @internal */
export type ResponseBodyContent$Outbound =
  | string
  | Array<GetV2LogsId21$Outbound | GetV2LogsId22$Outbound>;

/** @internal */
export const ResponseBodyContent$outboundSchema: z.ZodType<
  ResponseBodyContent$Outbound,
  z.ZodTypeDef,
  ResponseBodyContent
> = z.union([
  z.string(),
  z.array(z.union([
    z.lazy(() => GetV2LogsId21$outboundSchema),
    z.lazy(() => GetV2LogsId22$outboundSchema),
  ])),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ResponseBodyContent$ {
  /** @deprecated use `ResponseBodyContent$inboundSchema` instead. */
  export const inboundSchema = ResponseBodyContent$inboundSchema;
  /** @deprecated use `ResponseBodyContent$outboundSchema` instead. */
  export const outboundSchema = ResponseBodyContent$outboundSchema;
  /** @deprecated use `ResponseBodyContent$Outbound` instead. */
  export type Outbound = ResponseBodyContent$Outbound;
}

export function responseBodyContentToJSON(
  responseBodyContent: ResponseBodyContent,
): string {
  return JSON.stringify(
    ResponseBodyContent$outboundSchema.parse(responseBodyContent),
  );
}

export function responseBodyContentFromJSON(
  jsonString: string,
): SafeParseResult<ResponseBodyContent, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ResponseBodyContent$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ResponseBodyContent' from JSON`,
  );
}

/** @internal */
export const GetV2LogsIdResponseBodyResponse200ApplicationJSONType$inboundSchema:
  z.ZodNativeEnum<
    typeof GetV2LogsIdResponseBodyResponse200ApplicationJSONType
  > = z.nativeEnum(GetV2LogsIdResponseBodyResponse200ApplicationJSONType);

/** @internal */
export const GetV2LogsIdResponseBodyResponse200ApplicationJSONType$outboundSchema:
  z.ZodNativeEnum<
    typeof GetV2LogsIdResponseBodyResponse200ApplicationJSONType
  > = GetV2LogsIdResponseBodyResponse200ApplicationJSONType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdResponseBodyResponse200ApplicationJSONType$ {
  /** @deprecated use `GetV2LogsIdResponseBodyResponse200ApplicationJSONType$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsIdResponseBodyResponse200ApplicationJSONType$inboundSchema;
  /** @deprecated use `GetV2LogsIdResponseBodyResponse200ApplicationJSONType$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdResponseBodyResponse200ApplicationJSONType$outboundSchema;
}

/** @internal */
export const GetV2LogsIdResponseBodyResponse200Function$inboundSchema:
  z.ZodType<GetV2LogsIdResponseBodyResponse200Function, z.ZodTypeDef, unknown> =
    z.object({
      name: z.string(),
      arguments: z.string(),
    });

/** @internal */
export type GetV2LogsIdResponseBodyResponse200Function$Outbound = {
  name: string;
  arguments: string;
};

/** @internal */
export const GetV2LogsIdResponseBodyResponse200Function$outboundSchema:
  z.ZodType<
    GetV2LogsIdResponseBodyResponse200Function$Outbound,
    z.ZodTypeDef,
    GetV2LogsIdResponseBodyResponse200Function
  > = z.object({
    name: z.string(),
    arguments: z.string(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdResponseBodyResponse200Function$ {
  /** @deprecated use `GetV2LogsIdResponseBodyResponse200Function$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsIdResponseBodyResponse200Function$inboundSchema;
  /** @deprecated use `GetV2LogsIdResponseBodyResponse200Function$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdResponseBodyResponse200Function$outboundSchema;
  /** @deprecated use `GetV2LogsIdResponseBodyResponse200Function$Outbound` instead. */
  export type Outbound = GetV2LogsIdResponseBodyResponse200Function$Outbound;
}

export function getV2LogsIdResponseBodyResponse200FunctionToJSON(
  getV2LogsIdResponseBodyResponse200Function:
    GetV2LogsIdResponseBodyResponse200Function,
): string {
  return JSON.stringify(
    GetV2LogsIdResponseBodyResponse200Function$outboundSchema.parse(
      getV2LogsIdResponseBodyResponse200Function,
    ),
  );
}

export function getV2LogsIdResponseBodyResponse200FunctionFromJSON(
  jsonString: string,
): SafeParseResult<
  GetV2LogsIdResponseBodyResponse200Function,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetV2LogsIdResponseBodyResponse200Function$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'GetV2LogsIdResponseBodyResponse200Function' from JSON`,
  );
}

/** @internal */
export const ResponseBodyToolCalls$inboundSchema: z.ZodType<
  ResponseBodyToolCalls,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string().optional(),
  index: z.number().optional(),
  type: GetV2LogsIdResponseBodyResponse200ApplicationJSONType$inboundSchema,
  function: z.lazy(() =>
    GetV2LogsIdResponseBodyResponse200Function$inboundSchema
  ),
});

/** @internal */
export type ResponseBodyToolCalls$Outbound = {
  id?: string | undefined;
  index?: number | undefined;
  type: string;
  function: GetV2LogsIdResponseBodyResponse200Function$Outbound;
};

/** @internal */
export const ResponseBodyToolCalls$outboundSchema: z.ZodType<
  ResponseBodyToolCalls$Outbound,
  z.ZodTypeDef,
  ResponseBodyToolCalls
> = z.object({
  id: z.string().optional(),
  index: z.number().optional(),
  type: GetV2LogsIdResponseBodyResponse200ApplicationJSONType$outboundSchema,
  function: z.lazy(() =>
    GetV2LogsIdResponseBodyResponse200Function$outboundSchema
  ),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ResponseBodyToolCalls$ {
  /** @deprecated use `ResponseBodyToolCalls$inboundSchema` instead. */
  export const inboundSchema = ResponseBodyToolCalls$inboundSchema;
  /** @deprecated use `ResponseBodyToolCalls$outboundSchema` instead. */
  export const outboundSchema = ResponseBodyToolCalls$outboundSchema;
  /** @deprecated use `ResponseBodyToolCalls$Outbound` instead. */
  export type Outbound = ResponseBodyToolCalls$Outbound;
}

export function responseBodyToolCallsToJSON(
  responseBodyToolCalls: ResponseBodyToolCalls,
): string {
  return JSON.stringify(
    ResponseBodyToolCalls$outboundSchema.parse(responseBodyToolCalls),
  );
}

export function responseBodyToolCallsFromJSON(
  jsonString: string,
): SafeParseResult<ResponseBodyToolCalls, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ResponseBodyToolCalls$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ResponseBodyToolCalls' from JSON`,
  );
}

/** @internal */
export const ResponseBodyMessages$inboundSchema: z.ZodType<
  ResponseBodyMessages,
  z.ZodTypeDef,
  unknown
> = z.object({
  role: ResponseBodyRole$inboundSchema,
  content: z.union([
    z.string(),
    z.array(z.union([
      z.lazy(() => GetV2LogsId21$inboundSchema),
      z.lazy(() => GetV2LogsId22$inboundSchema),
    ])),
  ]),
  tool_calls: z.array(z.lazy(() => ResponseBodyToolCalls$inboundSchema))
    .optional(),
  id: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "tool_calls": "toolCalls",
  });
});

/** @internal */
export type ResponseBodyMessages$Outbound = {
  role: string;
  content: string | Array<GetV2LogsId21$Outbound | GetV2LogsId22$Outbound>;
  tool_calls?: Array<ResponseBodyToolCalls$Outbound> | undefined;
  id?: string | undefined;
};

/** @internal */
export const ResponseBodyMessages$outboundSchema: z.ZodType<
  ResponseBodyMessages$Outbound,
  z.ZodTypeDef,
  ResponseBodyMessages
> = z.object({
  role: ResponseBodyRole$outboundSchema,
  content: z.union([
    z.string(),
    z.array(z.union([
      z.lazy(() => GetV2LogsId21$outboundSchema),
      z.lazy(() => GetV2LogsId22$outboundSchema),
    ])),
  ]),
  toolCalls: z.array(z.lazy(() => ResponseBodyToolCalls$outboundSchema))
    .optional(),
  id: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    toolCalls: "tool_calls",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ResponseBodyMessages$ {
  /** @deprecated use `ResponseBodyMessages$inboundSchema` instead. */
  export const inboundSchema = ResponseBodyMessages$inboundSchema;
  /** @deprecated use `ResponseBodyMessages$outboundSchema` instead. */
  export const outboundSchema = ResponseBodyMessages$outboundSchema;
  /** @deprecated use `ResponseBodyMessages$Outbound` instead. */
  export type Outbound = ResponseBodyMessages$Outbound;
}

export function responseBodyMessagesToJSON(
  responseBodyMessages: ResponseBodyMessages,
): string {
  return JSON.stringify(
    ResponseBodyMessages$outboundSchema.parse(responseBodyMessages),
  );
}

export function responseBodyMessagesFromJSON(
  jsonString: string,
): SafeParseResult<ResponseBodyMessages, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ResponseBodyMessages$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ResponseBodyMessages' from JSON`,
  );
}

/** @internal */
export const ResponseBodyPromptConfig$inboundSchema: z.ZodType<
  ResponseBodyPromptConfig,
  z.ZodTypeDef,
  unknown
> = z.object({
  stream: z.boolean(),
  model: z.string(),
  model_db_id: z.string(),
  model_type: ResponseBodyModelType$inboundSchema,
  model_parameters: z.lazy(() => ResponseBodyModelParameters$inboundSchema),
  provider: ResponseBodyProvider$inboundSchema,
  messages: z.array(z.lazy(() => ResponseBodyMessages$inboundSchema)),
  integration_id: z.nullable(z.string()).optional(),
  version: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "model_db_id": "modelDbId",
    "model_type": "modelType",
    "model_parameters": "modelParameters",
    "integration_id": "integrationId",
  });
});

/** @internal */
export type ResponseBodyPromptConfig$Outbound = {
  stream: boolean;
  model: string;
  model_db_id: string;
  model_type: string;
  model_parameters: ResponseBodyModelParameters$Outbound;
  provider: string;
  messages: Array<ResponseBodyMessages$Outbound>;
  integration_id?: string | null | undefined;
  version?: string | undefined;
};

/** @internal */
export const ResponseBodyPromptConfig$outboundSchema: z.ZodType<
  ResponseBodyPromptConfig$Outbound,
  z.ZodTypeDef,
  ResponseBodyPromptConfig
> = z.object({
  stream: z.boolean(),
  model: z.string(),
  modelDbId: z.string(),
  modelType: ResponseBodyModelType$outboundSchema,
  modelParameters: z.lazy(() => ResponseBodyModelParameters$outboundSchema),
  provider: ResponseBodyProvider$outboundSchema,
  messages: z.array(z.lazy(() => ResponseBodyMessages$outboundSchema)),
  integrationId: z.nullable(z.string()).optional(),
  version: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    modelDbId: "model_db_id",
    modelType: "model_type",
    modelParameters: "model_parameters",
    integrationId: "integration_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ResponseBodyPromptConfig$ {
  /** @deprecated use `ResponseBodyPromptConfig$inboundSchema` instead. */
  export const inboundSchema = ResponseBodyPromptConfig$inboundSchema;
  /** @deprecated use `ResponseBodyPromptConfig$outboundSchema` instead. */
  export const outboundSchema = ResponseBodyPromptConfig$outboundSchema;
  /** @deprecated use `ResponseBodyPromptConfig$Outbound` instead. */
  export type Outbound = ResponseBodyPromptConfig$Outbound;
}

export function responseBodyPromptConfigToJSON(
  responseBodyPromptConfig: ResponseBodyPromptConfig,
): string {
  return JSON.stringify(
    ResponseBodyPromptConfig$outboundSchema.parse(responseBodyPromptConfig),
  );
}

export function responseBodyPromptConfigFromJSON(
  jsonString: string,
): SafeParseResult<ResponseBodyPromptConfig, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ResponseBodyPromptConfig$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ResponseBodyPromptConfig' from JSON`,
  );
}

/** @internal */
export const Variables$inboundSchema: z.ZodType<
  Variables,
  z.ZodTypeDef,
  unknown
> = z.object({
  key: z.string(),
  value: z.any().optional(),
  is_pii: z.boolean().default(false),
}).transform((v) => {
  return remap$(v, {
    "is_pii": "isPii",
  });
});

/** @internal */
export type Variables$Outbound = {
  key: string;
  value?: any | undefined;
  is_pii: boolean;
};

/** @internal */
export const Variables$outboundSchema: z.ZodType<
  Variables$Outbound,
  z.ZodTypeDef,
  Variables
> = z.object({
  key: z.string(),
  value: z.any().optional(),
  isPii: z.boolean().default(false),
}).transform((v) => {
  return remap$(v, {
    isPii: "is_pii",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Variables$ {
  /** @deprecated use `Variables$inboundSchema` instead. */
  export const inboundSchema = Variables$inboundSchema;
  /** @deprecated use `Variables$outboundSchema` instead. */
  export const outboundSchema = Variables$outboundSchema;
  /** @deprecated use `Variables$Outbound` instead. */
  export type Outbound = Variables$Outbound;
}

export function variablesToJSON(variables: Variables): string {
  return JSON.stringify(Variables$outboundSchema.parse(variables));
}

export function variablesFromJSON(
  jsonString: string,
): SafeParseResult<Variables, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Variables$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Variables' from JSON`,
  );
}

/** @internal */
export const ResponseBodyPerformance$inboundSchema: z.ZodType<
  ResponseBodyPerformance,
  z.ZodTypeDef,
  unknown
> = z.object({
  latency: z.number(),
  first_time_to_token: z.nullable(z.number()).optional(),
  tokens_per_second: z.nullable(z.number()).optional(),
}).transform((v) => {
  return remap$(v, {
    "first_time_to_token": "firstTimeToToken",
    "tokens_per_second": "tokensPerSecond",
  });
});

/** @internal */
export type ResponseBodyPerformance$Outbound = {
  latency: number;
  first_time_to_token?: number | null | undefined;
  tokens_per_second?: number | null | undefined;
};

/** @internal */
export const ResponseBodyPerformance$outboundSchema: z.ZodType<
  ResponseBodyPerformance$Outbound,
  z.ZodTypeDef,
  ResponseBodyPerformance
> = z.object({
  latency: z.number(),
  firstTimeToToken: z.nullable(z.number()).optional(),
  tokensPerSecond: z.nullable(z.number()).optional(),
}).transform((v) => {
  return remap$(v, {
    firstTimeToToken: "first_time_to_token",
    tokensPerSecond: "tokens_per_second",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ResponseBodyPerformance$ {
  /** @deprecated use `ResponseBodyPerformance$inboundSchema` instead. */
  export const inboundSchema = ResponseBodyPerformance$inboundSchema;
  /** @deprecated use `ResponseBodyPerformance$outboundSchema` instead. */
  export const outboundSchema = ResponseBodyPerformance$outboundSchema;
  /** @deprecated use `ResponseBodyPerformance$Outbound` instead. */
  export type Outbound = ResponseBodyPerformance$Outbound;
}

export function responseBodyPerformanceToJSON(
  responseBodyPerformance: ResponseBodyPerformance,
): string {
  return JSON.stringify(
    ResponseBodyPerformance$outboundSchema.parse(responseBodyPerformance),
  );
}

export function responseBodyPerformanceFromJSON(
  jsonString: string,
): SafeParseResult<ResponseBodyPerformance, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ResponseBodyPerformance$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ResponseBodyPerformance' from JSON`,
  );
}

/** @internal */
export const PromptTokensDetails$inboundSchema: z.ZodType<
  PromptTokensDetails,
  z.ZodTypeDef,
  unknown
> = z.object({
  cached_tokens: z.number().optional(),
}).transform((v) => {
  return remap$(v, {
    "cached_tokens": "cachedTokens",
  });
});

/** @internal */
export type PromptTokensDetails$Outbound = {
  cached_tokens?: number | undefined;
};

/** @internal */
export const PromptTokensDetails$outboundSchema: z.ZodType<
  PromptTokensDetails$Outbound,
  z.ZodTypeDef,
  PromptTokensDetails
> = z.object({
  cachedTokens: z.number().optional(),
}).transform((v) => {
  return remap$(v, {
    cachedTokens: "cached_tokens",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PromptTokensDetails$ {
  /** @deprecated use `PromptTokensDetails$inboundSchema` instead. */
  export const inboundSchema = PromptTokensDetails$inboundSchema;
  /** @deprecated use `PromptTokensDetails$outboundSchema` instead. */
  export const outboundSchema = PromptTokensDetails$outboundSchema;
  /** @deprecated use `PromptTokensDetails$Outbound` instead. */
  export type Outbound = PromptTokensDetails$Outbound;
}

export function promptTokensDetailsToJSON(
  promptTokensDetails: PromptTokensDetails,
): string {
  return JSON.stringify(
    PromptTokensDetails$outboundSchema.parse(promptTokensDetails),
  );
}

export function promptTokensDetailsFromJSON(
  jsonString: string,
): SafeParseResult<PromptTokensDetails, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PromptTokensDetails$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PromptTokensDetails' from JSON`,
  );
}

/** @internal */
export const CompletionTokensDetails$inboundSchema: z.ZodType<
  CompletionTokensDetails,
  z.ZodTypeDef,
  unknown
> = z.object({
  reasoning_tokens: z.number().optional(),
}).transform((v) => {
  return remap$(v, {
    "reasoning_tokens": "reasoningTokens",
  });
});

/** @internal */
export type CompletionTokensDetails$Outbound = {
  reasoning_tokens?: number | undefined;
};

/** @internal */
export const CompletionTokensDetails$outboundSchema: z.ZodType<
  CompletionTokensDetails$Outbound,
  z.ZodTypeDef,
  CompletionTokensDetails
> = z.object({
  reasoningTokens: z.number().optional(),
}).transform((v) => {
  return remap$(v, {
    reasoningTokens: "reasoning_tokens",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CompletionTokensDetails$ {
  /** @deprecated use `CompletionTokensDetails$inboundSchema` instead. */
  export const inboundSchema = CompletionTokensDetails$inboundSchema;
  /** @deprecated use `CompletionTokensDetails$outboundSchema` instead. */
  export const outboundSchema = CompletionTokensDetails$outboundSchema;
  /** @deprecated use `CompletionTokensDetails$Outbound` instead. */
  export type Outbound = CompletionTokensDetails$Outbound;
}

export function completionTokensDetailsToJSON(
  completionTokensDetails: CompletionTokensDetails,
): string {
  return JSON.stringify(
    CompletionTokensDetails$outboundSchema.parse(completionTokensDetails),
  );
}

export function completionTokensDetailsFromJSON(
  jsonString: string,
): SafeParseResult<CompletionTokensDetails, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CompletionTokensDetails$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CompletionTokensDetails' from JSON`,
  );
}

/** @internal */
export const ResponseBodyUsage$inboundSchema: z.ZodType<
  ResponseBodyUsage,
  z.ZodTypeDef,
  unknown
> = z.object({
  total_tokens: z.number().optional(),
  prompt_tokens: z.number().optional(),
  completion_tokens: z.number().optional(),
  prompt_tokens_details: z.lazy(() => PromptTokensDetails$inboundSchema)
    .optional(),
  completion_tokens_details: z.lazy(() => CompletionTokensDetails$inboundSchema)
    .optional(),
}).transform((v) => {
  return remap$(v, {
    "total_tokens": "totalTokens",
    "prompt_tokens": "promptTokens",
    "completion_tokens": "completionTokens",
    "prompt_tokens_details": "promptTokensDetails",
    "completion_tokens_details": "completionTokensDetails",
  });
});

/** @internal */
export type ResponseBodyUsage$Outbound = {
  total_tokens?: number | undefined;
  prompt_tokens?: number | undefined;
  completion_tokens?: number | undefined;
  prompt_tokens_details?: PromptTokensDetails$Outbound | undefined;
  completion_tokens_details?: CompletionTokensDetails$Outbound | undefined;
};

/** @internal */
export const ResponseBodyUsage$outboundSchema: z.ZodType<
  ResponseBodyUsage$Outbound,
  z.ZodTypeDef,
  ResponseBodyUsage
> = z.object({
  totalTokens: z.number().optional(),
  promptTokens: z.number().optional(),
  completionTokens: z.number().optional(),
  promptTokensDetails: z.lazy(() => PromptTokensDetails$outboundSchema)
    .optional(),
  completionTokensDetails: z.lazy(() => CompletionTokensDetails$outboundSchema)
    .optional(),
}).transform((v) => {
  return remap$(v, {
    totalTokens: "total_tokens",
    promptTokens: "prompt_tokens",
    completionTokens: "completion_tokens",
    promptTokensDetails: "prompt_tokens_details",
    completionTokensDetails: "completion_tokens_details",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ResponseBodyUsage$ {
  /** @deprecated use `ResponseBodyUsage$inboundSchema` instead. */
  export const inboundSchema = ResponseBodyUsage$inboundSchema;
  /** @deprecated use `ResponseBodyUsage$outboundSchema` instead. */
  export const outboundSchema = ResponseBodyUsage$outboundSchema;
  /** @deprecated use `ResponseBodyUsage$Outbound` instead. */
  export type Outbound = ResponseBodyUsage$Outbound;
}

export function responseBodyUsageToJSON(
  responseBodyUsage: ResponseBodyUsage,
): string {
  return JSON.stringify(
    ResponseBodyUsage$outboundSchema.parse(responseBodyUsage),
  );
}

export function responseBodyUsageFromJSON(
  jsonString: string,
): SafeParseResult<ResponseBodyUsage, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ResponseBodyUsage$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ResponseBodyUsage' from JSON`,
  );
}

/** @internal */
export const Billing$inboundSchema: z.ZodType<Billing, z.ZodTypeDef, unknown> =
  z.object({
    total_cost: z.nullable(z.number()).optional(),
    input_cost: z.nullable(z.number()).optional(),
    output_cost: z.nullable(z.number()).optional(),
    billable: z.boolean(),
  }).transform((v) => {
    return remap$(v, {
      "total_cost": "totalCost",
      "input_cost": "inputCost",
      "output_cost": "outputCost",
    });
  });

/** @internal */
export type Billing$Outbound = {
  total_cost?: number | null | undefined;
  input_cost?: number | null | undefined;
  output_cost?: number | null | undefined;
  billable: boolean;
};

/** @internal */
export const Billing$outboundSchema: z.ZodType<
  Billing$Outbound,
  z.ZodTypeDef,
  Billing
> = z.object({
  totalCost: z.nullable(z.number()).optional(),
  inputCost: z.nullable(z.number()).optional(),
  outputCost: z.nullable(z.number()).optional(),
  billable: z.boolean(),
}).transform((v) => {
  return remap$(v, {
    totalCost: "total_cost",
    inputCost: "input_cost",
    outputCost: "output_cost",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Billing$ {
  /** @deprecated use `Billing$inboundSchema` instead. */
  export const inboundSchema = Billing$inboundSchema;
  /** @deprecated use `Billing$outboundSchema` instead. */
  export const outboundSchema = Billing$outboundSchema;
  /** @deprecated use `Billing$Outbound` instead. */
  export type Outbound = Billing$Outbound;
}

export function billingToJSON(billing: Billing): string {
  return JSON.stringify(Billing$outboundSchema.parse(billing));
}

export function billingFromJSON(
  jsonString: string,
): SafeParseResult<Billing, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Billing$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Billing' from JSON`,
  );
}

/** @internal */
export const Retries$inboundSchema: z.ZodType<Retries, z.ZodTypeDef, unknown> =
  z.object({
    retry_attempt: z.number(),
    status: z.number(),
    message: z.string().optional(),
    is_fallback: z.boolean().optional(),
  }).transform((v) => {
    return remap$(v, {
      "retry_attempt": "retryAttempt",
      "is_fallback": "isFallback",
    });
  });

/** @internal */
export type Retries$Outbound = {
  retry_attempt: number;
  status: number;
  message?: string | undefined;
  is_fallback?: boolean | undefined;
};

/** @internal */
export const Retries$outboundSchema: z.ZodType<
  Retries$Outbound,
  z.ZodTypeDef,
  Retries
> = z.object({
  retryAttempt: z.number(),
  status: z.number(),
  message: z.string().optional(),
  isFallback: z.boolean().optional(),
}).transform((v) => {
  return remap$(v, {
    retryAttempt: "retry_attempt",
    isFallback: "is_fallback",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Retries$ {
  /** @deprecated use `Retries$inboundSchema` instead. */
  export const inboundSchema = Retries$inboundSchema;
  /** @deprecated use `Retries$outboundSchema` instead. */
  export const outboundSchema = Retries$outboundSchema;
  /** @deprecated use `Retries$Outbound` instead. */
  export type Outbound = Retries$Outbound;
}

export function retriesToJSON(retries: Retries): string {
  return JSON.stringify(Retries$outboundSchema.parse(retries));
}

export function retriesFromJSON(
  jsonString: string,
): SafeParseResult<Retries, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Retries$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Retries' from JSON`,
  );
}

/** @internal */
export const GetV2LogsIdResponseBodyMetadata$inboundSchema: z.ZodType<
  GetV2LogsIdResponseBodyMetadata,
  z.ZodTypeDef,
  unknown
> = z.object({
  datasource_id: z.string(),
  chunk_id: z.string(),
  file_name: z.string(),
  page_number: z.nullable(z.number()).optional(),
  file_type: z.string(),
}).transform((v) => {
  return remap$(v, {
    "datasource_id": "datasourceId",
    "chunk_id": "chunkId",
    "file_name": "fileName",
    "page_number": "pageNumber",
    "file_type": "fileType",
  });
});

/** @internal */
export type GetV2LogsIdResponseBodyMetadata$Outbound = {
  datasource_id: string;
  chunk_id: string;
  file_name: string;
  page_number?: number | null | undefined;
  file_type: string;
};

/** @internal */
export const GetV2LogsIdResponseBodyMetadata$outboundSchema: z.ZodType<
  GetV2LogsIdResponseBodyMetadata$Outbound,
  z.ZodTypeDef,
  GetV2LogsIdResponseBodyMetadata
> = z.object({
  datasourceId: z.string(),
  chunkId: z.string(),
  fileName: z.string(),
  pageNumber: z.nullable(z.number()).optional(),
  fileType: z.string(),
}).transform((v) => {
  return remap$(v, {
    datasourceId: "datasource_id",
    chunkId: "chunk_id",
    fileName: "file_name",
    pageNumber: "page_number",
    fileType: "file_type",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdResponseBodyMetadata$ {
  /** @deprecated use `GetV2LogsIdResponseBodyMetadata$inboundSchema` instead. */
  export const inboundSchema = GetV2LogsIdResponseBodyMetadata$inboundSchema;
  /** @deprecated use `GetV2LogsIdResponseBodyMetadata$outboundSchema` instead. */
  export const outboundSchema = GetV2LogsIdResponseBodyMetadata$outboundSchema;
  /** @deprecated use `GetV2LogsIdResponseBodyMetadata$Outbound` instead. */
  export type Outbound = GetV2LogsIdResponseBodyMetadata$Outbound;
}

export function getV2LogsIdResponseBodyMetadataToJSON(
  getV2LogsIdResponseBodyMetadata: GetV2LogsIdResponseBodyMetadata,
): string {
  return JSON.stringify(
    GetV2LogsIdResponseBodyMetadata$outboundSchema.parse(
      getV2LogsIdResponseBodyMetadata,
    ),
  );
}

export function getV2LogsIdResponseBodyMetadataFromJSON(
  jsonString: string,
): SafeParseResult<GetV2LogsIdResponseBodyMetadata, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetV2LogsIdResponseBodyMetadata$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetV2LogsIdResponseBodyMetadata' from JSON`,
  );
}

/** @internal */
export const Documents$inboundSchema: z.ZodType<
  Documents,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  text: z.string(),
  metadata: z.lazy(() => GetV2LogsIdResponseBodyMetadata$inboundSchema),
  score: z.number(),
  rerank_score: z.number().optional(),
}).transform((v) => {
  return remap$(v, {
    "rerank_score": "rerankScore",
  });
});

/** @internal */
export type Documents$Outbound = {
  id: string;
  text: string;
  metadata: GetV2LogsIdResponseBodyMetadata$Outbound;
  score: number;
  rerank_score?: number | undefined;
};

/** @internal */
export const Documents$outboundSchema: z.ZodType<
  Documents$Outbound,
  z.ZodTypeDef,
  Documents
> = z.object({
  id: z.string(),
  text: z.string(),
  metadata: z.lazy(() => GetV2LogsIdResponseBodyMetadata$outboundSchema),
  score: z.number(),
  rerankScore: z.number().optional(),
}).transform((v) => {
  return remap$(v, {
    rerankScore: "rerank_score",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Documents$ {
  /** @deprecated use `Documents$inboundSchema` instead. */
  export const inboundSchema = Documents$inboundSchema;
  /** @deprecated use `Documents$outboundSchema` instead. */
  export const outboundSchema = Documents$outboundSchema;
  /** @deprecated use `Documents$Outbound` instead. */
  export type Outbound = Documents$Outbound;
}

export function documentsToJSON(documents: Documents): string {
  return JSON.stringify(Documents$outboundSchema.parse(documents));
}

export function documentsFromJSON(
  jsonString: string,
): SafeParseResult<Documents, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Documents$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Documents' from JSON`,
  );
}

/** @internal */
export const ResponseBodyRetrievals$inboundSchema: z.ZodType<
  ResponseBodyRetrievals,
  z.ZodTypeDef,
  unknown
> = z.object({
  knowledge_id: z.string(),
  documents: z.array(z.lazy(() => Documents$inboundSchema)),
  knowledge_key: z.string(),
  query: z.string(),
}).transform((v) => {
  return remap$(v, {
    "knowledge_id": "knowledgeId",
    "knowledge_key": "knowledgeKey",
  });
});

/** @internal */
export type ResponseBodyRetrievals$Outbound = {
  knowledge_id: string;
  documents: Array<Documents$Outbound>;
  knowledge_key: string;
  query: string;
};

/** @internal */
export const ResponseBodyRetrievals$outboundSchema: z.ZodType<
  ResponseBodyRetrievals$Outbound,
  z.ZodTypeDef,
  ResponseBodyRetrievals
> = z.object({
  knowledgeId: z.string(),
  documents: z.array(z.lazy(() => Documents$outboundSchema)),
  knowledgeKey: z.string(),
  query: z.string(),
}).transform((v) => {
  return remap$(v, {
    knowledgeId: "knowledge_id",
    knowledgeKey: "knowledge_key",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ResponseBodyRetrievals$ {
  /** @deprecated use `ResponseBodyRetrievals$inboundSchema` instead. */
  export const inboundSchema = ResponseBodyRetrievals$inboundSchema;
  /** @deprecated use `ResponseBodyRetrievals$outboundSchema` instead. */
  export const outboundSchema = ResponseBodyRetrievals$outboundSchema;
  /** @deprecated use `ResponseBodyRetrievals$Outbound` instead. */
  export type Outbound = ResponseBodyRetrievals$Outbound;
}

export function responseBodyRetrievalsToJSON(
  responseBodyRetrievals: ResponseBodyRetrievals,
): string {
  return JSON.stringify(
    ResponseBodyRetrievals$outboundSchema.parse(responseBodyRetrievals),
  );
}

export function responseBodyRetrievalsFromJSON(
  jsonString: string,
): SafeParseResult<ResponseBodyRetrievals, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ResponseBodyRetrievals$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ResponseBodyRetrievals' from JSON`,
  );
}

/** @internal */
export const GetV2LogsIdConfigurationType$inboundSchema: z.ZodNativeEnum<
  typeof GetV2LogsIdConfigurationType
> = z.nativeEnum(GetV2LogsIdConfigurationType);

/** @internal */
export const GetV2LogsIdConfigurationType$outboundSchema: z.ZodNativeEnum<
  typeof GetV2LogsIdConfigurationType
> = GetV2LogsIdConfigurationType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdConfigurationType$ {
  /** @deprecated use `GetV2LogsIdConfigurationType$inboundSchema` instead. */
  export const inboundSchema = GetV2LogsIdConfigurationType$inboundSchema;
  /** @deprecated use `GetV2LogsIdConfigurationType$outboundSchema` instead. */
  export const outboundSchema = GetV2LogsIdConfigurationType$outboundSchema;
}

/** @internal */
export const Configuration2$inboundSchema: z.ZodType<
  Configuration2,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: GetV2LogsIdConfigurationType$inboundSchema,
  query: z.string(),
});

/** @internal */
export type Configuration2$Outbound = {
  type: string;
  query: string;
};

/** @internal */
export const Configuration2$outboundSchema: z.ZodType<
  Configuration2$Outbound,
  z.ZodTypeDef,
  Configuration2
> = z.object({
  type: GetV2LogsIdConfigurationType$outboundSchema,
  query: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Configuration2$ {
  /** @deprecated use `Configuration2$inboundSchema` instead. */
  export const inboundSchema = Configuration2$inboundSchema;
  /** @deprecated use `Configuration2$outboundSchema` instead. */
  export const outboundSchema = Configuration2$outboundSchema;
  /** @deprecated use `Configuration2$Outbound` instead. */
  export type Outbound = Configuration2$Outbound;
}

export function configuration2ToJSON(configuration2: Configuration2): string {
  return JSON.stringify(Configuration2$outboundSchema.parse(configuration2));
}

export function configuration2FromJSON(
  jsonString: string,
): SafeParseResult<Configuration2, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Configuration2$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Configuration2' from JSON`,
  );
}

/** @internal */
export const ConfigurationType$inboundSchema: z.ZodNativeEnum<
  typeof ConfigurationType
> = z.nativeEnum(ConfigurationType);

/** @internal */
export const ConfigurationType$outboundSchema: z.ZodNativeEnum<
  typeof ConfigurationType
> = ConfigurationType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ConfigurationType$ {
  /** @deprecated use `ConfigurationType$inboundSchema` instead. */
  export const inboundSchema = ConfigurationType$inboundSchema;
  /** @deprecated use `ConfigurationType$outboundSchema` instead. */
  export const outboundSchema = ConfigurationType$outboundSchema;
}

/** @internal */
export const Configuration1$inboundSchema: z.ZodType<
  Configuration1,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: ConfigurationType$inboundSchema,
});

/** @internal */
export type Configuration1$Outbound = {
  type: string;
};

/** @internal */
export const Configuration1$outboundSchema: z.ZodType<
  Configuration1$Outbound,
  z.ZodTypeDef,
  Configuration1
> = z.object({
  type: ConfigurationType$outboundSchema,
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Configuration1$ {
  /** @deprecated use `Configuration1$inboundSchema` instead. */
  export const inboundSchema = Configuration1$inboundSchema;
  /** @deprecated use `Configuration1$outboundSchema` instead. */
  export const outboundSchema = Configuration1$outboundSchema;
  /** @deprecated use `Configuration1$Outbound` instead. */
  export type Outbound = Configuration1$Outbound;
}

export function configuration1ToJSON(configuration1: Configuration1): string {
  return JSON.stringify(Configuration1$outboundSchema.parse(configuration1));
}

export function configuration1FromJSON(
  jsonString: string,
): SafeParseResult<Configuration1, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Configuration1$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Configuration1' from JSON`,
  );
}

/** @internal */
export const Configuration$inboundSchema: z.ZodType<
  Configuration,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => Configuration1$inboundSchema),
  z.lazy(() => Configuration2$inboundSchema),
]);

/** @internal */
export type Configuration$Outbound =
  | Configuration1$Outbound
  | Configuration2$Outbound;

/** @internal */
export const Configuration$outboundSchema: z.ZodType<
  Configuration$Outbound,
  z.ZodTypeDef,
  Configuration
> = z.union([
  z.lazy(() => Configuration1$outboundSchema),
  z.lazy(() => Configuration2$outboundSchema),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Configuration$ {
  /** @deprecated use `Configuration$inboundSchema` instead. */
  export const inboundSchema = Configuration$inboundSchema;
  /** @deprecated use `Configuration$outboundSchema` instead. */
  export const outboundSchema = Configuration$outboundSchema;
  /** @deprecated use `Configuration$Outbound` instead. */
  export type Outbound = Configuration$Outbound;
}

export function configurationToJSON(configuration: Configuration): string {
  return JSON.stringify(Configuration$outboundSchema.parse(configuration));
}

export function configurationFromJSON(
  jsonString: string,
): SafeParseResult<Configuration, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Configuration$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Configuration' from JSON`,
  );
}

/** @internal */
export const KnowledgeBases$inboundSchema: z.ZodType<
  KnowledgeBases,
  z.ZodTypeDef,
  unknown
> = z.object({
  knowledge_id: z.string(),
  configuration: z.union([
    z.lazy(() => Configuration1$inboundSchema),
    z.lazy(() => Configuration2$inboundSchema),
  ]),
}).transform((v) => {
  return remap$(v, {
    "knowledge_id": "knowledgeId",
  });
});

/** @internal */
export type KnowledgeBases$Outbound = {
  knowledge_id: string;
  configuration: Configuration1$Outbound | Configuration2$Outbound;
};

/** @internal */
export const KnowledgeBases$outboundSchema: z.ZodType<
  KnowledgeBases$Outbound,
  z.ZodTypeDef,
  KnowledgeBases
> = z.object({
  knowledgeId: z.string(),
  configuration: z.union([
    z.lazy(() => Configuration1$outboundSchema),
    z.lazy(() => Configuration2$outboundSchema),
  ]),
}).transform((v) => {
  return remap$(v, {
    knowledgeId: "knowledge_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace KnowledgeBases$ {
  /** @deprecated use `KnowledgeBases$inboundSchema` instead. */
  export const inboundSchema = KnowledgeBases$inboundSchema;
  /** @deprecated use `KnowledgeBases$outboundSchema` instead. */
  export const outboundSchema = KnowledgeBases$outboundSchema;
  /** @deprecated use `KnowledgeBases$Outbound` instead. */
  export type Outbound = KnowledgeBases$Outbound;
}

export function knowledgeBasesToJSON(knowledgeBases: KnowledgeBases): string {
  return JSON.stringify(KnowledgeBases$outboundSchema.parse(knowledgeBases));
}

export function knowledgeBasesFromJSON(
  jsonString: string,
): SafeParseResult<KnowledgeBases, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => KnowledgeBases$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'KnowledgeBases' from JSON`,
  );
}

/** @internal */
export const ResponseBodyType$inboundSchema: z.ZodNativeEnum<
  typeof ResponseBodyType
> = z.nativeEnum(ResponseBodyType);

/** @internal */
export const ResponseBodyType$outboundSchema: z.ZodNativeEnum<
  typeof ResponseBodyType
> = ResponseBodyType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ResponseBodyType$ {
  /** @deprecated use `ResponseBodyType$inboundSchema` instead. */
  export const inboundSchema = ResponseBodyType$inboundSchema;
  /** @deprecated use `ResponseBodyType$outboundSchema` instead. */
  export const outboundSchema = ResponseBodyType$outboundSchema;
}

/** @internal */
export const GetV2LogsIdResponseBodyResponse200ApplicationJson2Type$inboundSchema:
  z.ZodNativeEnum<
    typeof GetV2LogsIdResponseBodyResponse200ApplicationJson2Type
  > = z.nativeEnum(GetV2LogsIdResponseBodyResponse200ApplicationJson2Type);

/** @internal */
export const GetV2LogsIdResponseBodyResponse200ApplicationJson2Type$outboundSchema:
  z.ZodNativeEnum<
    typeof GetV2LogsIdResponseBodyResponse200ApplicationJson2Type
  > = GetV2LogsIdResponseBodyResponse200ApplicationJson2Type$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdResponseBodyResponse200ApplicationJson2Type$ {
  /** @deprecated use `GetV2LogsIdResponseBodyResponse200ApplicationJson2Type$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsIdResponseBodyResponse200ApplicationJson2Type$inboundSchema;
  /** @deprecated use `GetV2LogsIdResponseBodyResponse200ApplicationJson2Type$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdResponseBodyResponse200ApplicationJson2Type$outboundSchema;
}

/** @internal */
export const ResponseBodyParameters$inboundSchema: z.ZodType<
  ResponseBodyParameters,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: GetV2LogsIdResponseBodyResponse200ApplicationJson2Type$inboundSchema,
  properties: z.record(z.any()),
  required: z.array(z.string()).optional(),
  additionalProperties: z.boolean().optional(),
});

/** @internal */
export type ResponseBodyParameters$Outbound = {
  type: string;
  properties: { [k: string]: any };
  required?: Array<string> | undefined;
  additionalProperties?: boolean | undefined;
};

/** @internal */
export const ResponseBodyParameters$outboundSchema: z.ZodType<
  ResponseBodyParameters$Outbound,
  z.ZodTypeDef,
  ResponseBodyParameters
> = z.object({
  type: GetV2LogsIdResponseBodyResponse200ApplicationJson2Type$outboundSchema,
  properties: z.record(z.any()),
  required: z.array(z.string()).optional(),
  additionalProperties: z.boolean().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ResponseBodyParameters$ {
  /** @deprecated use `ResponseBodyParameters$inboundSchema` instead. */
  export const inboundSchema = ResponseBodyParameters$inboundSchema;
  /** @deprecated use `ResponseBodyParameters$outboundSchema` instead. */
  export const outboundSchema = ResponseBodyParameters$outboundSchema;
  /** @deprecated use `ResponseBodyParameters$Outbound` instead. */
  export type Outbound = ResponseBodyParameters$Outbound;
}

export function responseBodyParametersToJSON(
  responseBodyParameters: ResponseBodyParameters,
): string {
  return JSON.stringify(
    ResponseBodyParameters$outboundSchema.parse(responseBodyParameters),
  );
}

export function responseBodyParametersFromJSON(
  jsonString: string,
): SafeParseResult<ResponseBodyParameters, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ResponseBodyParameters$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ResponseBodyParameters' from JSON`,
  );
}

/** @internal */
export const ResponseBodyFunction$inboundSchema: z.ZodType<
  ResponseBodyFunction,
  z.ZodTypeDef,
  unknown
> = z.object({
  name: z.string(),
  description: z.string().optional(),
  strict: z.boolean().optional(),
  parameters: z.lazy(() => ResponseBodyParameters$inboundSchema),
});

/** @internal */
export type ResponseBodyFunction$Outbound = {
  name: string;
  description?: string | undefined;
  strict?: boolean | undefined;
  parameters: ResponseBodyParameters$Outbound;
};

/** @internal */
export const ResponseBodyFunction$outboundSchema: z.ZodType<
  ResponseBodyFunction$Outbound,
  z.ZodTypeDef,
  ResponseBodyFunction
> = z.object({
  name: z.string(),
  description: z.string().optional(),
  strict: z.boolean().optional(),
  parameters: z.lazy(() => ResponseBodyParameters$outboundSchema),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ResponseBodyFunction$ {
  /** @deprecated use `ResponseBodyFunction$inboundSchema` instead. */
  export const inboundSchema = ResponseBodyFunction$inboundSchema;
  /** @deprecated use `ResponseBodyFunction$outboundSchema` instead. */
  export const outboundSchema = ResponseBodyFunction$outboundSchema;
  /** @deprecated use `ResponseBodyFunction$Outbound` instead. */
  export type Outbound = ResponseBodyFunction$Outbound;
}

export function responseBodyFunctionToJSON(
  responseBodyFunction: ResponseBodyFunction,
): string {
  return JSON.stringify(
    ResponseBodyFunction$outboundSchema.parse(responseBodyFunction),
  );
}

export function responseBodyFunctionFromJSON(
  jsonString: string,
): SafeParseResult<ResponseBodyFunction, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ResponseBodyFunction$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ResponseBodyFunction' from JSON`,
  );
}

/** @internal */
export const ResponseBodyTools$inboundSchema: z.ZodType<
  ResponseBodyTools,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: ResponseBodyType$inboundSchema,
  function: z.lazy(() => ResponseBodyFunction$inboundSchema),
});

/** @internal */
export type ResponseBodyTools$Outbound = {
  type: string;
  function: ResponseBodyFunction$Outbound;
};

/** @internal */
export const ResponseBodyTools$outboundSchema: z.ZodType<
  ResponseBodyTools$Outbound,
  z.ZodTypeDef,
  ResponseBodyTools
> = z.object({
  type: ResponseBodyType$outboundSchema,
  function: z.lazy(() => ResponseBodyFunction$outboundSchema),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ResponseBodyTools$ {
  /** @deprecated use `ResponseBodyTools$inboundSchema` instead. */
  export const inboundSchema = ResponseBodyTools$inboundSchema;
  /** @deprecated use `ResponseBodyTools$outboundSchema` instead. */
  export const outboundSchema = ResponseBodyTools$outboundSchema;
  /** @deprecated use `ResponseBodyTools$Outbound` instead. */
  export type Outbound = ResponseBodyTools$Outbound;
}

export function responseBodyToolsToJSON(
  responseBodyTools: ResponseBodyTools,
): string {
  return JSON.stringify(
    ResponseBodyTools$outboundSchema.parse(responseBodyTools),
  );
}

export function responseBodyToolsFromJSON(
  jsonString: string,
): SafeParseResult<ResponseBodyTools, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ResponseBodyTools$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ResponseBodyTools' from JSON`,
  );
}

/** @internal */
export const GetV2LogsIdCacheConfigResponseType$inboundSchema: z.ZodNativeEnum<
  typeof GetV2LogsIdCacheConfigResponseType
> = z.nativeEnum(GetV2LogsIdCacheConfigResponseType);

/** @internal */
export const GetV2LogsIdCacheConfigResponseType$outboundSchema: z.ZodNativeEnum<
  typeof GetV2LogsIdCacheConfigResponseType
> = GetV2LogsIdCacheConfigResponseType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdCacheConfigResponseType$ {
  /** @deprecated use `GetV2LogsIdCacheConfigResponseType$inboundSchema` instead. */
  export const inboundSchema = GetV2LogsIdCacheConfigResponseType$inboundSchema;
  /** @deprecated use `GetV2LogsIdCacheConfigResponseType$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdCacheConfigResponseType$outboundSchema;
}

/** @internal */
export const GetV2LogsIdCacheConfigModelType$inboundSchema: z.ZodNativeEnum<
  typeof GetV2LogsIdCacheConfigModelType
> = z.nativeEnum(GetV2LogsIdCacheConfigModelType);

/** @internal */
export const GetV2LogsIdCacheConfigModelType$outboundSchema: z.ZodNativeEnum<
  typeof GetV2LogsIdCacheConfigModelType
> = GetV2LogsIdCacheConfigModelType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdCacheConfigModelType$ {
  /** @deprecated use `GetV2LogsIdCacheConfigModelType$inboundSchema` instead. */
  export const inboundSchema = GetV2LogsIdCacheConfigModelType$inboundSchema;
  /** @deprecated use `GetV2LogsIdCacheConfigModelType$outboundSchema` instead. */
  export const outboundSchema = GetV2LogsIdCacheConfigModelType$outboundSchema;
}

/** @internal */
export const GetV2LogsIdCacheConfigFormat$inboundSchema: z.ZodNativeEnum<
  typeof GetV2LogsIdCacheConfigFormat
> = z.nativeEnum(GetV2LogsIdCacheConfigFormat);

/** @internal */
export const GetV2LogsIdCacheConfigFormat$outboundSchema: z.ZodNativeEnum<
  typeof GetV2LogsIdCacheConfigFormat
> = GetV2LogsIdCacheConfigFormat$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdCacheConfigFormat$ {
  /** @deprecated use `GetV2LogsIdCacheConfigFormat$inboundSchema` instead. */
  export const inboundSchema = GetV2LogsIdCacheConfigFormat$inboundSchema;
  /** @deprecated use `GetV2LogsIdCacheConfigFormat$outboundSchema` instead. */
  export const outboundSchema = GetV2LogsIdCacheConfigFormat$outboundSchema;
}

/** @internal */
export const GetV2LogsIdCacheConfigQuality$inboundSchema: z.ZodNativeEnum<
  typeof GetV2LogsIdCacheConfigQuality
> = z.nativeEnum(GetV2LogsIdCacheConfigQuality);

/** @internal */
export const GetV2LogsIdCacheConfigQuality$outboundSchema: z.ZodNativeEnum<
  typeof GetV2LogsIdCacheConfigQuality
> = GetV2LogsIdCacheConfigQuality$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdCacheConfigQuality$ {
  /** @deprecated use `GetV2LogsIdCacheConfigQuality$inboundSchema` instead. */
  export const inboundSchema = GetV2LogsIdCacheConfigQuality$inboundSchema;
  /** @deprecated use `GetV2LogsIdCacheConfigQuality$outboundSchema` instead. */
  export const outboundSchema = GetV2LogsIdCacheConfigQuality$outboundSchema;
}

/** @internal */
export const GetV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody2DataMetadataCacheConfigType$inboundSchema:
  z.ZodNativeEnum<
    typeof GetV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody2DataMetadataCacheConfigType
  > = z.nativeEnum(
    GetV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody2DataMetadataCacheConfigType,
  );

/** @internal */
export const GetV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody2DataMetadataCacheConfigType$outboundSchema:
  z.ZodNativeEnum<
    typeof GetV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody2DataMetadataCacheConfigType
  > =
    GetV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody2DataMetadataCacheConfigType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody2DataMetadataCacheConfigType$ {
  /** @deprecated use `GetV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody2DataMetadataCacheConfigType$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody2DataMetadataCacheConfigType$inboundSchema;
  /** @deprecated use `GetV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody2DataMetadataCacheConfigType$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody2DataMetadataCacheConfigType$outboundSchema;
}

/** @internal */
export const GetV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody2Data2$inboundSchema:
  z.ZodType<
    GetV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody2Data2,
    z.ZodTypeDef,
    unknown
  > = z.object({
    type:
      GetV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody2DataMetadataCacheConfigType$inboundSchema,
  });

/** @internal */
export type GetV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody2Data2$Outbound =
  {
    type: string;
  };

/** @internal */
export const GetV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody2Data2$outboundSchema:
  z.ZodType<
    GetV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody2Data2$Outbound,
    z.ZodTypeDef,
    GetV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody2Data2
  > = z.object({
    type:
      GetV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody2DataMetadataCacheConfigType$outboundSchema,
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody2Data2$ {
  /** @deprecated use `GetV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody2Data2$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody2Data2$inboundSchema;
  /** @deprecated use `GetV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody2Data2$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody2Data2$outboundSchema;
  /** @deprecated use `GetV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody2Data2$Outbound` instead. */
  export type Outbound =
    GetV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody2Data2$Outbound;
}

export function getV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody2Data2ToJSON(
  getV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody2Data2:
    GetV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody2Data2,
): string {
  return JSON.stringify(
    GetV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody2Data2$outboundSchema
      .parse(
        getV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody2Data2,
      ),
  );
}

export function getV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody2Data2FromJSON(
  jsonString: string,
): SafeParseResult<
  GetV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody2Data2,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody2Data2$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'GetV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody2Data2' from JSON`,
  );
}

/** @internal */
export const GetV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody2DataMetadataType$inboundSchema:
  z.ZodNativeEnum<
    typeof GetV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody2DataMetadataType
  > = z.nativeEnum(
    GetV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody2DataMetadataType,
  );

/** @internal */
export const GetV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody2DataMetadataType$outboundSchema:
  z.ZodNativeEnum<
    typeof GetV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody2DataMetadataType
  > =
    GetV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody2DataMetadataType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody2DataMetadataType$ {
  /** @deprecated use `GetV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody2DataMetadataType$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody2DataMetadataType$inboundSchema;
  /** @deprecated use `GetV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody2DataMetadataType$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody2DataMetadataType$outboundSchema;
}

/** @internal */
export const GetV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody2DataJSONSchema$inboundSchema:
  z.ZodType<
    GetV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody2DataJSONSchema,
    z.ZodTypeDef,
    unknown
  > = z.object({
    name: z.string(),
    strict: z.boolean(),
    schema: z.record(z.any()),
  });

/** @internal */
export type GetV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody2DataJSONSchema$Outbound =
  {
    name: string;
    strict: boolean;
    schema: { [k: string]: any };
  };

/** @internal */
export const GetV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody2DataJSONSchema$outboundSchema:
  z.ZodType<
    GetV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody2DataJSONSchema$Outbound,
    z.ZodTypeDef,
    GetV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody2DataJSONSchema
  > = z.object({
    name: z.string(),
    strict: z.boolean(),
    schema: z.record(z.any()),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody2DataJSONSchema$ {
  /** @deprecated use `GetV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody2DataJSONSchema$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody2DataJSONSchema$inboundSchema;
  /** @deprecated use `GetV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody2DataJSONSchema$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody2DataJSONSchema$outboundSchema;
  /** @deprecated use `GetV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody2DataJSONSchema$Outbound` instead. */
  export type Outbound =
    GetV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody2DataJSONSchema$Outbound;
}

export function getV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody2DataJSONSchemaToJSON(
  getV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody2DataJSONSchema:
    GetV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody2DataJSONSchema,
): string {
  return JSON.stringify(
    GetV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody2DataJSONSchema$outboundSchema
      .parse(
        getV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody2DataJSONSchema,
      ),
  );
}

export function getV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody2DataJSONSchemaFromJSON(
  jsonString: string,
): SafeParseResult<
  GetV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody2DataJSONSchema,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody2DataJSONSchema$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'GetV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody2DataJSONSchema' from JSON`,
  );
}

/** @internal */
export const GetV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody2Data1$inboundSchema:
  z.ZodType<
    GetV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody2Data1,
    z.ZodTypeDef,
    unknown
  > = z.object({
    type:
      GetV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody2DataMetadataType$inboundSchema,
    json_schema: z.lazy(() =>
      GetV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody2DataJSONSchema$inboundSchema
    ),
  }).transform((v) => {
    return remap$(v, {
      "json_schema": "jsonSchema",
    });
  });

/** @internal */
export type GetV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody2Data1$Outbound =
  {
    type: string;
    json_schema:
      GetV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody2DataJSONSchema$Outbound;
  };

/** @internal */
export const GetV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody2Data1$outboundSchema:
  z.ZodType<
    GetV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody2Data1$Outbound,
    z.ZodTypeDef,
    GetV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody2Data1
  > = z.object({
    type:
      GetV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody2DataMetadataType$outboundSchema,
    jsonSchema: z.lazy(() =>
      GetV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody2DataJSONSchema$outboundSchema
    ),
  }).transform((v) => {
    return remap$(v, {
      jsonSchema: "json_schema",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody2Data1$ {
  /** @deprecated use `GetV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody2Data1$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody2Data1$inboundSchema;
  /** @deprecated use `GetV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody2Data1$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody2Data1$outboundSchema;
  /** @deprecated use `GetV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody2Data1$Outbound` instead. */
  export type Outbound =
    GetV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody2Data1$Outbound;
}

export function getV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody2Data1ToJSON(
  getV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody2Data1:
    GetV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody2Data1,
): string {
  return JSON.stringify(
    GetV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody2Data1$outboundSchema
      .parse(
        getV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody2Data1,
      ),
  );
}

export function getV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody2Data1FromJSON(
  jsonString: string,
): SafeParseResult<
  GetV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody2Data1,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody2Data1$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'GetV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody2Data1' from JSON`,
  );
}

/** @internal */
export const GetV2LogsIdCacheConfigResponseFormat$inboundSchema: z.ZodType<
  GetV2LogsIdCacheConfigResponseFormat,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() =>
    GetV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody2Data2$inboundSchema
  ),
  z.lazy(() =>
    GetV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody2Data1$inboundSchema
  ),
]);

/** @internal */
export type GetV2LogsIdCacheConfigResponseFormat$Outbound =
  | GetV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody2Data2$Outbound
  | GetV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody2Data1$Outbound;

/** @internal */
export const GetV2LogsIdCacheConfigResponseFormat$outboundSchema: z.ZodType<
  GetV2LogsIdCacheConfigResponseFormat$Outbound,
  z.ZodTypeDef,
  GetV2LogsIdCacheConfigResponseFormat
> = z.union([
  z.lazy(() =>
    GetV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody2Data2$outboundSchema
  ),
  z.lazy(() =>
    GetV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody2Data1$outboundSchema
  ),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdCacheConfigResponseFormat$ {
  /** @deprecated use `GetV2LogsIdCacheConfigResponseFormat$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsIdCacheConfigResponseFormat$inboundSchema;
  /** @deprecated use `GetV2LogsIdCacheConfigResponseFormat$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdCacheConfigResponseFormat$outboundSchema;
  /** @deprecated use `GetV2LogsIdCacheConfigResponseFormat$Outbound` instead. */
  export type Outbound = GetV2LogsIdCacheConfigResponseFormat$Outbound;
}

export function getV2LogsIdCacheConfigResponseFormatToJSON(
  getV2LogsIdCacheConfigResponseFormat: GetV2LogsIdCacheConfigResponseFormat,
): string {
  return JSON.stringify(
    GetV2LogsIdCacheConfigResponseFormat$outboundSchema.parse(
      getV2LogsIdCacheConfigResponseFormat,
    ),
  );
}

export function getV2LogsIdCacheConfigResponseFormatFromJSON(
  jsonString: string,
): SafeParseResult<GetV2LogsIdCacheConfigResponseFormat, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      GetV2LogsIdCacheConfigResponseFormat$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetV2LogsIdCacheConfigResponseFormat' from JSON`,
  );
}

/** @internal */
export const GetV2LogsIdCacheConfigPhotoRealVersion$inboundSchema:
  z.ZodNativeEnum<typeof GetV2LogsIdCacheConfigPhotoRealVersion> = z.nativeEnum(
    GetV2LogsIdCacheConfigPhotoRealVersion,
  );

/** @internal */
export const GetV2LogsIdCacheConfigPhotoRealVersion$outboundSchema:
  z.ZodNativeEnum<typeof GetV2LogsIdCacheConfigPhotoRealVersion> =
    GetV2LogsIdCacheConfigPhotoRealVersion$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdCacheConfigPhotoRealVersion$ {
  /** @deprecated use `GetV2LogsIdCacheConfigPhotoRealVersion$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsIdCacheConfigPhotoRealVersion$inboundSchema;
  /** @deprecated use `GetV2LogsIdCacheConfigPhotoRealVersion$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdCacheConfigPhotoRealVersion$outboundSchema;
}

/** @internal */
export const GetV2LogsIdCacheConfigEncodingFormat$inboundSchema:
  z.ZodNativeEnum<typeof GetV2LogsIdCacheConfigEncodingFormat> = z.nativeEnum(
    GetV2LogsIdCacheConfigEncodingFormat,
  );

/** @internal */
export const GetV2LogsIdCacheConfigEncodingFormat$outboundSchema:
  z.ZodNativeEnum<typeof GetV2LogsIdCacheConfigEncodingFormat> =
    GetV2LogsIdCacheConfigEncodingFormat$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdCacheConfigEncodingFormat$ {
  /** @deprecated use `GetV2LogsIdCacheConfigEncodingFormat$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsIdCacheConfigEncodingFormat$inboundSchema;
  /** @deprecated use `GetV2LogsIdCacheConfigEncodingFormat$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdCacheConfigEncodingFormat$outboundSchema;
}

/** @internal */
export const GetV2LogsIdCacheConfigModelParameters$inboundSchema: z.ZodType<
  GetV2LogsIdCacheConfigModelParameters,
  z.ZodTypeDef,
  unknown
> = z.object({
  temperature: z.number().optional(),
  maxTokens: z.number().optional(),
  topK: z.number().optional(),
  topP: z.number().optional(),
  frequencyPenalty: z.number().optional(),
  presencePenalty: z.number().optional(),
  numImages: z.number().optional(),
  seed: z.number().optional(),
  format: GetV2LogsIdCacheConfigFormat$inboundSchema.optional(),
  dimensions: z.string().optional(),
  quality: GetV2LogsIdCacheConfigQuality$inboundSchema.optional(),
  style: z.string().optional(),
  responseFormat: z.nullable(
    z.union([
      z.lazy(() =>
        GetV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody2Data2$inboundSchema
      ),
      z.lazy(() =>
        GetV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody2Data1$inboundSchema
      ),
    ]),
  ).optional(),
  photoRealVersion: GetV2LogsIdCacheConfigPhotoRealVersion$inboundSchema
    .optional(),
  encoding_format: GetV2LogsIdCacheConfigEncodingFormat$inboundSchema
    .optional(),
}).transform((v) => {
  return remap$(v, {
    "encoding_format": "encodingFormat",
  });
});

/** @internal */
export type GetV2LogsIdCacheConfigModelParameters$Outbound = {
  temperature?: number | undefined;
  maxTokens?: number | undefined;
  topK?: number | undefined;
  topP?: number | undefined;
  frequencyPenalty?: number | undefined;
  presencePenalty?: number | undefined;
  numImages?: number | undefined;
  seed?: number | undefined;
  format?: string | undefined;
  dimensions?: string | undefined;
  quality?: string | undefined;
  style?: string | undefined;
  responseFormat?:
    | GetV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody2Data2$Outbound
    | GetV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody2Data1$Outbound
    | null
    | undefined;
  photoRealVersion?: string | undefined;
  encoding_format?: string | undefined;
};

/** @internal */
export const GetV2LogsIdCacheConfigModelParameters$outboundSchema: z.ZodType<
  GetV2LogsIdCacheConfigModelParameters$Outbound,
  z.ZodTypeDef,
  GetV2LogsIdCacheConfigModelParameters
> = z.object({
  temperature: z.number().optional(),
  maxTokens: z.number().optional(),
  topK: z.number().optional(),
  topP: z.number().optional(),
  frequencyPenalty: z.number().optional(),
  presencePenalty: z.number().optional(),
  numImages: z.number().optional(),
  seed: z.number().optional(),
  format: GetV2LogsIdCacheConfigFormat$outboundSchema.optional(),
  dimensions: z.string().optional(),
  quality: GetV2LogsIdCacheConfigQuality$outboundSchema.optional(),
  style: z.string().optional(),
  responseFormat: z.nullable(
    z.union([
      z.lazy(() =>
        GetV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody2Data2$outboundSchema
      ),
      z.lazy(() =>
        GetV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody2Data1$outboundSchema
      ),
    ]),
  ).optional(),
  photoRealVersion: GetV2LogsIdCacheConfigPhotoRealVersion$outboundSchema
    .optional(),
  encodingFormat: GetV2LogsIdCacheConfigEncodingFormat$outboundSchema
    .optional(),
}).transform((v) => {
  return remap$(v, {
    encodingFormat: "encoding_format",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdCacheConfigModelParameters$ {
  /** @deprecated use `GetV2LogsIdCacheConfigModelParameters$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsIdCacheConfigModelParameters$inboundSchema;
  /** @deprecated use `GetV2LogsIdCacheConfigModelParameters$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdCacheConfigModelParameters$outboundSchema;
  /** @deprecated use `GetV2LogsIdCacheConfigModelParameters$Outbound` instead. */
  export type Outbound = GetV2LogsIdCacheConfigModelParameters$Outbound;
}

export function getV2LogsIdCacheConfigModelParametersToJSON(
  getV2LogsIdCacheConfigModelParameters: GetV2LogsIdCacheConfigModelParameters,
): string {
  return JSON.stringify(
    GetV2LogsIdCacheConfigModelParameters$outboundSchema.parse(
      getV2LogsIdCacheConfigModelParameters,
    ),
  );
}

export function getV2LogsIdCacheConfigModelParametersFromJSON(
  jsonString: string,
): SafeParseResult<GetV2LogsIdCacheConfigModelParameters, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      GetV2LogsIdCacheConfigModelParameters$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetV2LogsIdCacheConfigModelParameters' from JSON`,
  );
}

/** @internal */
export const GetV2LogsIdCacheConfigProvider$inboundSchema: z.ZodNativeEnum<
  typeof GetV2LogsIdCacheConfigProvider
> = z.nativeEnum(GetV2LogsIdCacheConfigProvider);

/** @internal */
export const GetV2LogsIdCacheConfigProvider$outboundSchema: z.ZodNativeEnum<
  typeof GetV2LogsIdCacheConfigProvider
> = GetV2LogsIdCacheConfigProvider$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdCacheConfigProvider$ {
  /** @deprecated use `GetV2LogsIdCacheConfigProvider$inboundSchema` instead. */
  export const inboundSchema = GetV2LogsIdCacheConfigProvider$inboundSchema;
  /** @deprecated use `GetV2LogsIdCacheConfigProvider$outboundSchema` instead. */
  export const outboundSchema = GetV2LogsIdCacheConfigProvider$outboundSchema;
}

/** @internal */
export const CacheConfigModelConfig$inboundSchema: z.ZodType<
  CacheConfigModelConfig,
  z.ZodTypeDef,
  unknown
> = z.object({
  model: z.string(),
  model_db_id: z.string(),
  model_type: GetV2LogsIdCacheConfigModelType$inboundSchema,
  model_parameters: z.lazy(() =>
    GetV2LogsIdCacheConfigModelParameters$inboundSchema
  ),
  provider: GetV2LogsIdCacheConfigProvider$inboundSchema,
  integration_id: z.nullable(z.string()).optional(),
  version: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "model_db_id": "modelDbId",
    "model_type": "modelType",
    "model_parameters": "modelParameters",
    "integration_id": "integrationId",
  });
});

/** @internal */
export type CacheConfigModelConfig$Outbound = {
  model: string;
  model_db_id: string;
  model_type: string;
  model_parameters: GetV2LogsIdCacheConfigModelParameters$Outbound;
  provider: string;
  integration_id?: string | null | undefined;
  version?: string | undefined;
};

/** @internal */
export const CacheConfigModelConfig$outboundSchema: z.ZodType<
  CacheConfigModelConfig$Outbound,
  z.ZodTypeDef,
  CacheConfigModelConfig
> = z.object({
  model: z.string(),
  modelDbId: z.string(),
  modelType: GetV2LogsIdCacheConfigModelType$outboundSchema,
  modelParameters: z.lazy(() =>
    GetV2LogsIdCacheConfigModelParameters$outboundSchema
  ),
  provider: GetV2LogsIdCacheConfigProvider$outboundSchema,
  integrationId: z.nullable(z.string()).optional(),
  version: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    modelDbId: "model_db_id",
    modelType: "model_type",
    modelParameters: "model_parameters",
    integrationId: "integration_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CacheConfigModelConfig$ {
  /** @deprecated use `CacheConfigModelConfig$inboundSchema` instead. */
  export const inboundSchema = CacheConfigModelConfig$inboundSchema;
  /** @deprecated use `CacheConfigModelConfig$outboundSchema` instead. */
  export const outboundSchema = CacheConfigModelConfig$outboundSchema;
  /** @deprecated use `CacheConfigModelConfig$Outbound` instead. */
  export type Outbound = CacheConfigModelConfig$Outbound;
}

export function cacheConfigModelConfigToJSON(
  cacheConfigModelConfig: CacheConfigModelConfig,
): string {
  return JSON.stringify(
    CacheConfigModelConfig$outboundSchema.parse(cacheConfigModelConfig),
  );
}

export function cacheConfigModelConfigFromJSON(
  jsonString: string,
): SafeParseResult<CacheConfigModelConfig, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CacheConfigModelConfig$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CacheConfigModelConfig' from JSON`,
  );
}

/** @internal */
export const GetV2LogsIdCacheConfig2$inboundSchema: z.ZodType<
  GetV2LogsIdCacheConfig2,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: GetV2LogsIdCacheConfigResponseType$inboundSchema,
  model_config: z.lazy(() => CacheConfigModelConfig$inboundSchema),
  ttl: z.number().default(0),
  similarity_score_threshold: z.number().default(0),
}).transform((v) => {
  return remap$(v, {
    "model_config": "modelConfig",
    "similarity_score_threshold": "similarityScoreThreshold",
  });
});

/** @internal */
export type GetV2LogsIdCacheConfig2$Outbound = {
  type: string;
  model_config: CacheConfigModelConfig$Outbound;
  ttl: number;
  similarity_score_threshold: number;
};

/** @internal */
export const GetV2LogsIdCacheConfig2$outboundSchema: z.ZodType<
  GetV2LogsIdCacheConfig2$Outbound,
  z.ZodTypeDef,
  GetV2LogsIdCacheConfig2
> = z.object({
  type: GetV2LogsIdCacheConfigResponseType$outboundSchema,
  modelConfig: z.lazy(() => CacheConfigModelConfig$outboundSchema),
  ttl: z.number().default(0),
  similarityScoreThreshold: z.number().default(0),
}).transform((v) => {
  return remap$(v, {
    modelConfig: "model_config",
    similarityScoreThreshold: "similarity_score_threshold",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdCacheConfig2$ {
  /** @deprecated use `GetV2LogsIdCacheConfig2$inboundSchema` instead. */
  export const inboundSchema = GetV2LogsIdCacheConfig2$inboundSchema;
  /** @deprecated use `GetV2LogsIdCacheConfig2$outboundSchema` instead. */
  export const outboundSchema = GetV2LogsIdCacheConfig2$outboundSchema;
  /** @deprecated use `GetV2LogsIdCacheConfig2$Outbound` instead. */
  export type Outbound = GetV2LogsIdCacheConfig2$Outbound;
}

export function getV2LogsIdCacheConfig2ToJSON(
  getV2LogsIdCacheConfig2: GetV2LogsIdCacheConfig2,
): string {
  return JSON.stringify(
    GetV2LogsIdCacheConfig2$outboundSchema.parse(getV2LogsIdCacheConfig2),
  );
}

export function getV2LogsIdCacheConfig2FromJSON(
  jsonString: string,
): SafeParseResult<GetV2LogsIdCacheConfig2, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetV2LogsIdCacheConfig2$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetV2LogsIdCacheConfig2' from JSON`,
  );
}

/** @internal */
export const GetV2LogsIdCacheConfigResponse200ApplicationJSONResponseBodyType$inboundSchema:
  z.ZodNativeEnum<
    typeof GetV2LogsIdCacheConfigResponse200ApplicationJSONResponseBodyType
  > = z.nativeEnum(
    GetV2LogsIdCacheConfigResponse200ApplicationJSONResponseBodyType,
  );

/** @internal */
export const GetV2LogsIdCacheConfigResponse200ApplicationJSONResponseBodyType$outboundSchema:
  z.ZodNativeEnum<
    typeof GetV2LogsIdCacheConfigResponse200ApplicationJSONResponseBodyType
  > =
    GetV2LogsIdCacheConfigResponse200ApplicationJSONResponseBodyType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdCacheConfigResponse200ApplicationJSONResponseBodyType$ {
  /** @deprecated use `GetV2LogsIdCacheConfigResponse200ApplicationJSONResponseBodyType$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsIdCacheConfigResponse200ApplicationJSONResponseBodyType$inboundSchema;
  /** @deprecated use `GetV2LogsIdCacheConfigResponse200ApplicationJSONResponseBodyType$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdCacheConfigResponse200ApplicationJSONResponseBodyType$outboundSchema;
}

/** @internal */
export const GetV2LogsIdCacheConfig1$inboundSchema: z.ZodType<
  GetV2LogsIdCacheConfig1,
  z.ZodTypeDef,
  unknown
> = z.object({
  type:
    GetV2LogsIdCacheConfigResponse200ApplicationJSONResponseBodyType$inboundSchema,
  ttl: z.number().default(0),
});

/** @internal */
export type GetV2LogsIdCacheConfig1$Outbound = {
  type: string;
  ttl: number;
};

/** @internal */
export const GetV2LogsIdCacheConfig1$outboundSchema: z.ZodType<
  GetV2LogsIdCacheConfig1$Outbound,
  z.ZodTypeDef,
  GetV2LogsIdCacheConfig1
> = z.object({
  type:
    GetV2LogsIdCacheConfigResponse200ApplicationJSONResponseBodyType$outboundSchema,
  ttl: z.number().default(0),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdCacheConfig1$ {
  /** @deprecated use `GetV2LogsIdCacheConfig1$inboundSchema` instead. */
  export const inboundSchema = GetV2LogsIdCacheConfig1$inboundSchema;
  /** @deprecated use `GetV2LogsIdCacheConfig1$outboundSchema` instead. */
  export const outboundSchema = GetV2LogsIdCacheConfig1$outboundSchema;
  /** @deprecated use `GetV2LogsIdCacheConfig1$Outbound` instead. */
  export type Outbound = GetV2LogsIdCacheConfig1$Outbound;
}

export function getV2LogsIdCacheConfig1ToJSON(
  getV2LogsIdCacheConfig1: GetV2LogsIdCacheConfig1,
): string {
  return JSON.stringify(
    GetV2LogsIdCacheConfig1$outboundSchema.parse(getV2LogsIdCacheConfig1),
  );
}

export function getV2LogsIdCacheConfig1FromJSON(
  jsonString: string,
): SafeParseResult<GetV2LogsIdCacheConfig1, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetV2LogsIdCacheConfig1$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetV2LogsIdCacheConfig1' from JSON`,
  );
}

/** @internal */
export const ResponseBodyCacheConfig$inboundSchema: z.ZodType<
  ResponseBodyCacheConfig,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => GetV2LogsIdCacheConfig1$inboundSchema),
  z.lazy(() => GetV2LogsIdCacheConfig2$inboundSchema),
]);

/** @internal */
export type ResponseBodyCacheConfig$Outbound =
  | GetV2LogsIdCacheConfig1$Outbound
  | GetV2LogsIdCacheConfig2$Outbound;

/** @internal */
export const ResponseBodyCacheConfig$outboundSchema: z.ZodType<
  ResponseBodyCacheConfig$Outbound,
  z.ZodTypeDef,
  ResponseBodyCacheConfig
> = z.union([
  z.lazy(() => GetV2LogsIdCacheConfig1$outboundSchema),
  z.lazy(() => GetV2LogsIdCacheConfig2$outboundSchema),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ResponseBodyCacheConfig$ {
  /** @deprecated use `ResponseBodyCacheConfig$inboundSchema` instead. */
  export const inboundSchema = ResponseBodyCacheConfig$inboundSchema;
  /** @deprecated use `ResponseBodyCacheConfig$outboundSchema` instead. */
  export const outboundSchema = ResponseBodyCacheConfig$outboundSchema;
  /** @deprecated use `ResponseBodyCacheConfig$Outbound` instead. */
  export type Outbound = ResponseBodyCacheConfig$Outbound;
}

export function responseBodyCacheConfigToJSON(
  responseBodyCacheConfig: ResponseBodyCacheConfig,
): string {
  return JSON.stringify(
    ResponseBodyCacheConfig$outboundSchema.parse(responseBodyCacheConfig),
  );
}

export function responseBodyCacheConfigFromJSON(
  jsonString: string,
): SafeParseResult<ResponseBodyCacheConfig, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ResponseBodyCacheConfig$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ResponseBodyCacheConfig' from JSON`,
  );
}

/** @internal */
export const EvaluatorsConfigType$inboundSchema: z.ZodNativeEnum<
  typeof EvaluatorsConfigType
> = z.nativeEnum(EvaluatorsConfigType);

/** @internal */
export const EvaluatorsConfigType$outboundSchema: z.ZodNativeEnum<
  typeof EvaluatorsConfigType
> = EvaluatorsConfigType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EvaluatorsConfigType$ {
  /** @deprecated use `EvaluatorsConfigType$inboundSchema` instead. */
  export const inboundSchema = EvaluatorsConfigType$inboundSchema;
  /** @deprecated use `EvaluatorsConfigType$outboundSchema` instead. */
  export const outboundSchema = EvaluatorsConfigType$outboundSchema;
}

/** @internal */
export const GetV2LogsIdEvaluatorsType$inboundSchema: z.ZodNativeEnum<
  typeof GetV2LogsIdEvaluatorsType
> = z.nativeEnum(GetV2LogsIdEvaluatorsType);

/** @internal */
export const GetV2LogsIdEvaluatorsType$outboundSchema: z.ZodNativeEnum<
  typeof GetV2LogsIdEvaluatorsType
> = GetV2LogsIdEvaluatorsType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdEvaluatorsType$ {
  /** @deprecated use `GetV2LogsIdEvaluatorsType$inboundSchema` instead. */
  export const inboundSchema = GetV2LogsIdEvaluatorsType$inboundSchema;
  /** @deprecated use `GetV2LogsIdEvaluatorsType$outboundSchema` instead. */
  export const outboundSchema = GetV2LogsIdEvaluatorsType$outboundSchema;
}

/** @internal */
export const Evaluators2$inboundSchema: z.ZodType<
  Evaluators2,
  z.ZodTypeDef,
  unknown
> = z.object({
  _id: z.string(),
  config_type: EvaluatorsConfigType$inboundSchema,
  evaluator_id: z.string(),
  enabled: z.boolean().default(true),
  type: GetV2LogsIdEvaluatorsType$inboundSchema,
  sample_rate: z.number().optional(),
}).transform((v) => {
  return remap$(v, {
    "_id": "id",
    "config_type": "configType",
    "evaluator_id": "evaluatorId",
    "sample_rate": "sampleRate",
  });
});

/** @internal */
export type Evaluators2$Outbound = {
  _id: string;
  config_type: string;
  evaluator_id: string;
  enabled: boolean;
  type: string;
  sample_rate?: number | undefined;
};

/** @internal */
export const Evaluators2$outboundSchema: z.ZodType<
  Evaluators2$Outbound,
  z.ZodTypeDef,
  Evaluators2
> = z.object({
  id: z.string(),
  configType: EvaluatorsConfigType$outboundSchema,
  evaluatorId: z.string(),
  enabled: z.boolean().default(true),
  type: GetV2LogsIdEvaluatorsType$outboundSchema,
  sampleRate: z.number().optional(),
}).transform((v) => {
  return remap$(v, {
    id: "_id",
    configType: "config_type",
    evaluatorId: "evaluator_id",
    sampleRate: "sample_rate",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Evaluators2$ {
  /** @deprecated use `Evaluators2$inboundSchema` instead. */
  export const inboundSchema = Evaluators2$inboundSchema;
  /** @deprecated use `Evaluators2$outboundSchema` instead. */
  export const outboundSchema = Evaluators2$outboundSchema;
  /** @deprecated use `Evaluators2$Outbound` instead. */
  export type Outbound = Evaluators2$Outbound;
}

export function evaluators2ToJSON(evaluators2: Evaluators2): string {
  return JSON.stringify(Evaluators2$outboundSchema.parse(evaluators2));
}

export function evaluators2FromJSON(
  jsonString: string,
): SafeParseResult<Evaluators2, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Evaluators2$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Evaluators2' from JSON`,
  );
}

/** @internal */
export const ConfigType$inboundSchema: z.ZodNativeEnum<typeof ConfigType> = z
  .nativeEnum(ConfigType);

/** @internal */
export const ConfigType$outboundSchema: z.ZodNativeEnum<typeof ConfigType> =
  ConfigType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ConfigType$ {
  /** @deprecated use `ConfigType$inboundSchema` instead. */
  export const inboundSchema = ConfigType$inboundSchema;
  /** @deprecated use `ConfigType$outboundSchema` instead. */
  export const outboundSchema = ConfigType$outboundSchema;
}

/** @internal */
export const EvaluatorsType$inboundSchema: z.ZodNativeEnum<
  typeof EvaluatorsType
> = z.nativeEnum(EvaluatorsType);

/** @internal */
export const EvaluatorsType$outboundSchema: z.ZodNativeEnum<
  typeof EvaluatorsType
> = EvaluatorsType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EvaluatorsType$ {
  /** @deprecated use `EvaluatorsType$inboundSchema` instead. */
  export const inboundSchema = EvaluatorsType$inboundSchema;
  /** @deprecated use `EvaluatorsType$outboundSchema` instead. */
  export const outboundSchema = EvaluatorsType$outboundSchema;
}

/** @internal */
export const Evaluators1$inboundSchema: z.ZodType<
  Evaluators1,
  z.ZodTypeDef,
  unknown
> = z.object({
  _id: z.string(),
  config_type: ConfigType$inboundSchema,
  evaluator_id: z.string(),
  enabled: z.boolean().default(true),
  type: EvaluatorsType$inboundSchema,
  sample_rate: z.number().optional(),
}).transform((v) => {
  return remap$(v, {
    "_id": "id",
    "config_type": "configType",
    "evaluator_id": "evaluatorId",
    "sample_rate": "sampleRate",
  });
});

/** @internal */
export type Evaluators1$Outbound = {
  _id: string;
  config_type: string;
  evaluator_id: string;
  enabled: boolean;
  type: string;
  sample_rate?: number | undefined;
};

/** @internal */
export const Evaluators1$outboundSchema: z.ZodType<
  Evaluators1$Outbound,
  z.ZodTypeDef,
  Evaluators1
> = z.object({
  id: z.string(),
  configType: ConfigType$outboundSchema,
  evaluatorId: z.string(),
  enabled: z.boolean().default(true),
  type: EvaluatorsType$outboundSchema,
  sampleRate: z.number().optional(),
}).transform((v) => {
  return remap$(v, {
    id: "_id",
    configType: "config_type",
    evaluatorId: "evaluator_id",
    sampleRate: "sample_rate",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Evaluators1$ {
  /** @deprecated use `Evaluators1$inboundSchema` instead. */
  export const inboundSchema = Evaluators1$inboundSchema;
  /** @deprecated use `Evaluators1$outboundSchema` instead. */
  export const outboundSchema = Evaluators1$outboundSchema;
  /** @deprecated use `Evaluators1$Outbound` instead. */
  export type Outbound = Evaluators1$Outbound;
}

export function evaluators1ToJSON(evaluators1: Evaluators1): string {
  return JSON.stringify(Evaluators1$outboundSchema.parse(evaluators1));
}

export function evaluators1FromJSON(
  jsonString: string,
): SafeParseResult<Evaluators1, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Evaluators1$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Evaluators1' from JSON`,
  );
}

/** @internal */
export const Evaluators$inboundSchema: z.ZodType<
  Evaluators,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => Evaluators1$inboundSchema),
  z.lazy(() => Evaluators2$inboundSchema),
]);

/** @internal */
export type Evaluators$Outbound = Evaluators1$Outbound | Evaluators2$Outbound;

/** @internal */
export const Evaluators$outboundSchema: z.ZodType<
  Evaluators$Outbound,
  z.ZodTypeDef,
  Evaluators
> = z.union([
  z.lazy(() => Evaluators1$outboundSchema),
  z.lazy(() => Evaluators2$outboundSchema),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Evaluators$ {
  /** @deprecated use `Evaluators$inboundSchema` instead. */
  export const inboundSchema = Evaluators$inboundSchema;
  /** @deprecated use `Evaluators$outboundSchema` instead. */
  export const outboundSchema = Evaluators$outboundSchema;
  /** @deprecated use `Evaluators$Outbound` instead. */
  export type Outbound = Evaluators$Outbound;
}

export function evaluatorsToJSON(evaluators: Evaluators): string {
  return JSON.stringify(Evaluators$outboundSchema.parse(evaluators));
}

export function evaluatorsFromJSON(
  jsonString: string,
): SafeParseResult<Evaluators, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Evaluators$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Evaluators' from JSON`,
  );
}

/** @internal */
export const GuardrailsBehavior$inboundSchema: z.ZodNativeEnum<
  typeof GuardrailsBehavior
> = z.nativeEnum(GuardrailsBehavior);

/** @internal */
export const GuardrailsBehavior$outboundSchema: z.ZodNativeEnum<
  typeof GuardrailsBehavior
> = GuardrailsBehavior$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GuardrailsBehavior$ {
  /** @deprecated use `GuardrailsBehavior$inboundSchema` instead. */
  export const inboundSchema = GuardrailsBehavior$inboundSchema;
  /** @deprecated use `GuardrailsBehavior$outboundSchema` instead. */
  export const outboundSchema = GuardrailsBehavior$outboundSchema;
}

/** @internal */
export const ResponseBodyMetadata$inboundSchema: z.ZodType<
  ResponseBodyMetadata,
  z.ZodTypeDef,
  unknown
> = z.object({
  output_masking: z.boolean().default(false),
  is_caching_enabled: z.boolean().default(false),
  cache_config: z.nullable(
    z.union([
      z.lazy(() => GetV2LogsIdCacheConfig1$inboundSchema),
      z.lazy(() => GetV2LogsIdCacheConfig2$inboundSchema),
    ]),
  ).optional(),
  evaluators: z.array(
    z.union([
      z.lazy(() => Evaluators1$inboundSchema),
      z.lazy(() => Evaluators2$inboundSchema),
    ]),
  ).optional(),
  guardrails_behavior: GuardrailsBehavior$inboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    "output_masking": "outputMasking",
    "is_caching_enabled": "isCachingEnabled",
    "cache_config": "cacheConfig",
    "guardrails_behavior": "guardrailsBehavior",
  });
});

/** @internal */
export type ResponseBodyMetadata$Outbound = {
  output_masking: boolean;
  is_caching_enabled: boolean;
  cache_config?:
    | GetV2LogsIdCacheConfig1$Outbound
    | GetV2LogsIdCacheConfig2$Outbound
    | null
    | undefined;
  evaluators?: Array<Evaluators1$Outbound | Evaluators2$Outbound> | undefined;
  guardrails_behavior?: string | undefined;
};

/** @internal */
export const ResponseBodyMetadata$outboundSchema: z.ZodType<
  ResponseBodyMetadata$Outbound,
  z.ZodTypeDef,
  ResponseBodyMetadata
> = z.object({
  outputMasking: z.boolean().default(false),
  isCachingEnabled: z.boolean().default(false),
  cacheConfig: z.nullable(
    z.union([
      z.lazy(() => GetV2LogsIdCacheConfig1$outboundSchema),
      z.lazy(() => GetV2LogsIdCacheConfig2$outboundSchema),
    ]),
  ).optional(),
  evaluators: z.array(
    z.union([
      z.lazy(() => Evaluators1$outboundSchema),
      z.lazy(() => Evaluators2$outboundSchema),
    ]),
  ).optional(),
  guardrailsBehavior: GuardrailsBehavior$outboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    outputMasking: "output_masking",
    isCachingEnabled: "is_caching_enabled",
    cacheConfig: "cache_config",
    guardrailsBehavior: "guardrails_behavior",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ResponseBodyMetadata$ {
  /** @deprecated use `ResponseBodyMetadata$inboundSchema` instead. */
  export const inboundSchema = ResponseBodyMetadata$inboundSchema;
  /** @deprecated use `ResponseBodyMetadata$outboundSchema` instead. */
  export const outboundSchema = ResponseBodyMetadata$outboundSchema;
  /** @deprecated use `ResponseBodyMetadata$Outbound` instead. */
  export type Outbound = ResponseBodyMetadata$Outbound;
}

export function responseBodyMetadataToJSON(
  responseBodyMetadata: ResponseBodyMetadata,
): string {
  return JSON.stringify(
    ResponseBodyMetadata$outboundSchema.parse(responseBodyMetadata),
  );
}

export function responseBodyMetadataFromJSON(
  jsonString: string,
): SafeParseResult<ResponseBodyMetadata, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ResponseBodyMetadata$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ResponseBodyMetadata' from JSON`,
  );
}

/** @internal */
export const GetV2LogsIdCacheConfigResponse200ApplicationJSONType$inboundSchema:
  z.ZodNativeEnum<typeof GetV2LogsIdCacheConfigResponse200ApplicationJSONType> =
    z.nativeEnum(GetV2LogsIdCacheConfigResponse200ApplicationJSONType);

/** @internal */
export const GetV2LogsIdCacheConfigResponse200ApplicationJSONType$outboundSchema:
  z.ZodNativeEnum<typeof GetV2LogsIdCacheConfigResponse200ApplicationJSONType> =
    GetV2LogsIdCacheConfigResponse200ApplicationJSONType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdCacheConfigResponse200ApplicationJSONType$ {
  /** @deprecated use `GetV2LogsIdCacheConfigResponse200ApplicationJSONType$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsIdCacheConfigResponse200ApplicationJSONType$inboundSchema;
  /** @deprecated use `GetV2LogsIdCacheConfigResponse200ApplicationJSONType$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdCacheConfigResponse200ApplicationJSONType$outboundSchema;
}

/** @internal */
export const GetV2LogsIdCacheConfigResponseModelType$inboundSchema:
  z.ZodNativeEnum<typeof GetV2LogsIdCacheConfigResponseModelType> = z
    .nativeEnum(GetV2LogsIdCacheConfigResponseModelType);

/** @internal */
export const GetV2LogsIdCacheConfigResponseModelType$outboundSchema:
  z.ZodNativeEnum<typeof GetV2LogsIdCacheConfigResponseModelType> =
    GetV2LogsIdCacheConfigResponseModelType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdCacheConfigResponseModelType$ {
  /** @deprecated use `GetV2LogsIdCacheConfigResponseModelType$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsIdCacheConfigResponseModelType$inboundSchema;
  /** @deprecated use `GetV2LogsIdCacheConfigResponseModelType$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdCacheConfigResponseModelType$outboundSchema;
}

/** @internal */
export const GetV2LogsIdCacheConfigResponse200Format$inboundSchema:
  z.ZodNativeEnum<typeof GetV2LogsIdCacheConfigResponse200Format> = z
    .nativeEnum(GetV2LogsIdCacheConfigResponse200Format);

/** @internal */
export const GetV2LogsIdCacheConfigResponse200Format$outboundSchema:
  z.ZodNativeEnum<typeof GetV2LogsIdCacheConfigResponse200Format> =
    GetV2LogsIdCacheConfigResponse200Format$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdCacheConfigResponse200Format$ {
  /** @deprecated use `GetV2LogsIdCacheConfigResponse200Format$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsIdCacheConfigResponse200Format$inboundSchema;
  /** @deprecated use `GetV2LogsIdCacheConfigResponse200Format$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdCacheConfigResponse200Format$outboundSchema;
}

/** @internal */
export const GetV2LogsIdCacheConfigResponseQuality$inboundSchema:
  z.ZodNativeEnum<typeof GetV2LogsIdCacheConfigResponseQuality> = z.nativeEnum(
    GetV2LogsIdCacheConfigResponseQuality,
  );

/** @internal */
export const GetV2LogsIdCacheConfigResponseQuality$outboundSchema:
  z.ZodNativeEnum<typeof GetV2LogsIdCacheConfigResponseQuality> =
    GetV2LogsIdCacheConfigResponseQuality$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdCacheConfigResponseQuality$ {
  /** @deprecated use `GetV2LogsIdCacheConfigResponseQuality$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsIdCacheConfigResponseQuality$inboundSchema;
  /** @deprecated use `GetV2LogsIdCacheConfigResponseQuality$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdCacheConfigResponseQuality$outboundSchema;
}

/** @internal */
export const GetV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody2DataSettingsCacheConfigType$inboundSchema:
  z.ZodNativeEnum<
    typeof GetV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody2DataSettingsCacheConfigType
  > = z.nativeEnum(
    GetV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody2DataSettingsCacheConfigType,
  );

/** @internal */
export const GetV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody2DataSettingsCacheConfigType$outboundSchema:
  z.ZodNativeEnum<
    typeof GetV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody2DataSettingsCacheConfigType
  > =
    GetV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody2DataSettingsCacheConfigType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody2DataSettingsCacheConfigType$ {
  /** @deprecated use `GetV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody2DataSettingsCacheConfigType$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody2DataSettingsCacheConfigType$inboundSchema;
  /** @deprecated use `GetV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody2DataSettingsCacheConfigType$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody2DataSettingsCacheConfigType$outboundSchema;
}

/** @internal */
export const GetV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody2$inboundSchema:
  z.ZodType<
    GetV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody2,
    z.ZodTypeDef,
    unknown
  > = z.object({
    type:
      GetV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody2DataSettingsCacheConfigType$inboundSchema,
  });

/** @internal */
export type GetV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody2$Outbound =
  {
    type: string;
  };

/** @internal */
export const GetV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody2$outboundSchema:
  z.ZodType<
    GetV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody2$Outbound,
    z.ZodTypeDef,
    GetV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody2
  > = z.object({
    type:
      GetV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody2DataSettingsCacheConfigType$outboundSchema,
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody2$ {
  /** @deprecated use `GetV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody2$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody2$inboundSchema;
  /** @deprecated use `GetV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody2$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody2$outboundSchema;
  /** @deprecated use `GetV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody2$Outbound` instead. */
  export type Outbound =
    GetV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody2$Outbound;
}

export function getV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody2ToJSON(
  getV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody2:
    GetV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody2,
): string {
  return JSON.stringify(
    GetV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody2$outboundSchema
      .parse(getV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody2),
  );
}

export function getV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody2FromJSON(
  jsonString: string,
): SafeParseResult<
  GetV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody2,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody2$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'GetV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody2' from JSON`,
  );
}

/** @internal */
export const GetV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody2DataSettingsType$inboundSchema:
  z.ZodNativeEnum<
    typeof GetV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody2DataSettingsType
  > = z.nativeEnum(
    GetV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody2DataSettingsType,
  );

/** @internal */
export const GetV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody2DataSettingsType$outboundSchema:
  z.ZodNativeEnum<
    typeof GetV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody2DataSettingsType
  > =
    GetV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody2DataSettingsType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody2DataSettingsType$ {
  /** @deprecated use `GetV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody2DataSettingsType$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody2DataSettingsType$inboundSchema;
  /** @deprecated use `GetV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody2DataSettingsType$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody2DataSettingsType$outboundSchema;
}

/** @internal */
export const GetV2LogsIdResponseFormatResponse200ApplicationJSONResponseBodyJSONSchema$inboundSchema:
  z.ZodType<
    GetV2LogsIdResponseFormatResponse200ApplicationJSONResponseBodyJSONSchema,
    z.ZodTypeDef,
    unknown
  > = z.object({
    name: z.string(),
    strict: z.boolean(),
    schema: z.record(z.any()),
  });

/** @internal */
export type GetV2LogsIdResponseFormatResponse200ApplicationJSONResponseBodyJSONSchema$Outbound =
  {
    name: string;
    strict: boolean;
    schema: { [k: string]: any };
  };

/** @internal */
export const GetV2LogsIdResponseFormatResponse200ApplicationJSONResponseBodyJSONSchema$outboundSchema:
  z.ZodType<
    GetV2LogsIdResponseFormatResponse200ApplicationJSONResponseBodyJSONSchema$Outbound,
    z.ZodTypeDef,
    GetV2LogsIdResponseFormatResponse200ApplicationJSONResponseBodyJSONSchema
  > = z.object({
    name: z.string(),
    strict: z.boolean(),
    schema: z.record(z.any()),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdResponseFormatResponse200ApplicationJSONResponseBodyJSONSchema$ {
  /** @deprecated use `GetV2LogsIdResponseFormatResponse200ApplicationJSONResponseBodyJSONSchema$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsIdResponseFormatResponse200ApplicationJSONResponseBodyJSONSchema$inboundSchema;
  /** @deprecated use `GetV2LogsIdResponseFormatResponse200ApplicationJSONResponseBodyJSONSchema$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdResponseFormatResponse200ApplicationJSONResponseBodyJSONSchema$outboundSchema;
  /** @deprecated use `GetV2LogsIdResponseFormatResponse200ApplicationJSONResponseBodyJSONSchema$Outbound` instead. */
  export type Outbound =
    GetV2LogsIdResponseFormatResponse200ApplicationJSONResponseBodyJSONSchema$Outbound;
}

export function getV2LogsIdResponseFormatResponse200ApplicationJSONResponseBodyJSONSchemaToJSON(
  getV2LogsIdResponseFormatResponse200ApplicationJSONResponseBodyJSONSchema:
    GetV2LogsIdResponseFormatResponse200ApplicationJSONResponseBodyJSONSchema,
): string {
  return JSON.stringify(
    GetV2LogsIdResponseFormatResponse200ApplicationJSONResponseBodyJSONSchema$outboundSchema
      .parse(
        getV2LogsIdResponseFormatResponse200ApplicationJSONResponseBodyJSONSchema,
      ),
  );
}

export function getV2LogsIdResponseFormatResponse200ApplicationJSONResponseBodyJSONSchemaFromJSON(
  jsonString: string,
): SafeParseResult<
  GetV2LogsIdResponseFormatResponse200ApplicationJSONResponseBodyJSONSchema,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetV2LogsIdResponseFormatResponse200ApplicationJSONResponseBodyJSONSchema$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'GetV2LogsIdResponseFormatResponse200ApplicationJSONResponseBodyJSONSchema' from JSON`,
  );
}

/** @internal */
export const GetV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody1$inboundSchema:
  z.ZodType<
    GetV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody1,
    z.ZodTypeDef,
    unknown
  > = z.object({
    type:
      GetV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody2DataSettingsType$inboundSchema,
    json_schema: z.lazy(() =>
      GetV2LogsIdResponseFormatResponse200ApplicationJSONResponseBodyJSONSchema$inboundSchema
    ),
  }).transform((v) => {
    return remap$(v, {
      "json_schema": "jsonSchema",
    });
  });

/** @internal */
export type GetV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody1$Outbound =
  {
    type: string;
    json_schema:
      GetV2LogsIdResponseFormatResponse200ApplicationJSONResponseBodyJSONSchema$Outbound;
  };

/** @internal */
export const GetV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody1$outboundSchema:
  z.ZodType<
    GetV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody1$Outbound,
    z.ZodTypeDef,
    GetV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody1
  > = z.object({
    type:
      GetV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody2DataSettingsType$outboundSchema,
    jsonSchema: z.lazy(() =>
      GetV2LogsIdResponseFormatResponse200ApplicationJSONResponseBodyJSONSchema$outboundSchema
    ),
  }).transform((v) => {
    return remap$(v, {
      jsonSchema: "json_schema",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody1$ {
  /** @deprecated use `GetV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody1$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody1$inboundSchema;
  /** @deprecated use `GetV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody1$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody1$outboundSchema;
  /** @deprecated use `GetV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody1$Outbound` instead. */
  export type Outbound =
    GetV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody1$Outbound;
}

export function getV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody1ToJSON(
  getV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody1:
    GetV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody1,
): string {
  return JSON.stringify(
    GetV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody1$outboundSchema
      .parse(getV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody1),
  );
}

export function getV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody1FromJSON(
  jsonString: string,
): SafeParseResult<
  GetV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody1,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody1$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'GetV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody1' from JSON`,
  );
}

/** @internal */
export const GetV2LogsIdCacheConfigResponseResponseFormat$inboundSchema:
  z.ZodType<
    GetV2LogsIdCacheConfigResponseResponseFormat,
    z.ZodTypeDef,
    unknown
  > = z.union([
    z.lazy(() =>
      GetV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody2$inboundSchema
    ),
    z.lazy(() =>
      GetV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody1$inboundSchema
    ),
  ]);

/** @internal */
export type GetV2LogsIdCacheConfigResponseResponseFormat$Outbound =
  | GetV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody2$Outbound
  | GetV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody1$Outbound;

/** @internal */
export const GetV2LogsIdCacheConfigResponseResponseFormat$outboundSchema:
  z.ZodType<
    GetV2LogsIdCacheConfigResponseResponseFormat$Outbound,
    z.ZodTypeDef,
    GetV2LogsIdCacheConfigResponseResponseFormat
  > = z.union([
    z.lazy(() =>
      GetV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody2$outboundSchema
    ),
    z.lazy(() =>
      GetV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody1$outboundSchema
    ),
  ]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdCacheConfigResponseResponseFormat$ {
  /** @deprecated use `GetV2LogsIdCacheConfigResponseResponseFormat$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsIdCacheConfigResponseResponseFormat$inboundSchema;
  /** @deprecated use `GetV2LogsIdCacheConfigResponseResponseFormat$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdCacheConfigResponseResponseFormat$outboundSchema;
  /** @deprecated use `GetV2LogsIdCacheConfigResponseResponseFormat$Outbound` instead. */
  export type Outbound = GetV2LogsIdCacheConfigResponseResponseFormat$Outbound;
}

export function getV2LogsIdCacheConfigResponseResponseFormatToJSON(
  getV2LogsIdCacheConfigResponseResponseFormat:
    GetV2LogsIdCacheConfigResponseResponseFormat,
): string {
  return JSON.stringify(
    GetV2LogsIdCacheConfigResponseResponseFormat$outboundSchema.parse(
      getV2LogsIdCacheConfigResponseResponseFormat,
    ),
  );
}

export function getV2LogsIdCacheConfigResponseResponseFormatFromJSON(
  jsonString: string,
): SafeParseResult<
  GetV2LogsIdCacheConfigResponseResponseFormat,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetV2LogsIdCacheConfigResponseResponseFormat$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'GetV2LogsIdCacheConfigResponseResponseFormat' from JSON`,
  );
}

/** @internal */
export const GetV2LogsIdCacheConfigResponsePhotoRealVersion$inboundSchema:
  z.ZodNativeEnum<typeof GetV2LogsIdCacheConfigResponsePhotoRealVersion> = z
    .nativeEnum(GetV2LogsIdCacheConfigResponsePhotoRealVersion);

/** @internal */
export const GetV2LogsIdCacheConfigResponsePhotoRealVersion$outboundSchema:
  z.ZodNativeEnum<typeof GetV2LogsIdCacheConfigResponsePhotoRealVersion> =
    GetV2LogsIdCacheConfigResponsePhotoRealVersion$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdCacheConfigResponsePhotoRealVersion$ {
  /** @deprecated use `GetV2LogsIdCacheConfigResponsePhotoRealVersion$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsIdCacheConfigResponsePhotoRealVersion$inboundSchema;
  /** @deprecated use `GetV2LogsIdCacheConfigResponsePhotoRealVersion$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdCacheConfigResponsePhotoRealVersion$outboundSchema;
}

/** @internal */
export const GetV2LogsIdCacheConfigResponseEncodingFormat$inboundSchema:
  z.ZodNativeEnum<typeof GetV2LogsIdCacheConfigResponseEncodingFormat> = z
    .nativeEnum(GetV2LogsIdCacheConfigResponseEncodingFormat);

/** @internal */
export const GetV2LogsIdCacheConfigResponseEncodingFormat$outboundSchema:
  z.ZodNativeEnum<typeof GetV2LogsIdCacheConfigResponseEncodingFormat> =
    GetV2LogsIdCacheConfigResponseEncodingFormat$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdCacheConfigResponseEncodingFormat$ {
  /** @deprecated use `GetV2LogsIdCacheConfigResponseEncodingFormat$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsIdCacheConfigResponseEncodingFormat$inboundSchema;
  /** @deprecated use `GetV2LogsIdCacheConfigResponseEncodingFormat$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdCacheConfigResponseEncodingFormat$outboundSchema;
}

/** @internal */
export const GetV2LogsIdCacheConfigResponseModelParameters$inboundSchema:
  z.ZodType<
    GetV2LogsIdCacheConfigResponseModelParameters,
    z.ZodTypeDef,
    unknown
  > = z.object({
    temperature: z.number().optional(),
    maxTokens: z.number().optional(),
    topK: z.number().optional(),
    topP: z.number().optional(),
    frequencyPenalty: z.number().optional(),
    presencePenalty: z.number().optional(),
    numImages: z.number().optional(),
    seed: z.number().optional(),
    format: GetV2LogsIdCacheConfigResponse200Format$inboundSchema.optional(),
    dimensions: z.string().optional(),
    quality: GetV2LogsIdCacheConfigResponseQuality$inboundSchema.optional(),
    style: z.string().optional(),
    responseFormat: z.nullable(
      z.union([
        z.lazy(() =>
          GetV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody2$inboundSchema
        ),
        z.lazy(() =>
          GetV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody1$inboundSchema
        ),
      ]),
    ).optional(),
    photoRealVersion:
      GetV2LogsIdCacheConfigResponsePhotoRealVersion$inboundSchema.optional(),
    encoding_format: GetV2LogsIdCacheConfigResponseEncodingFormat$inboundSchema
      .optional(),
  }).transform((v) => {
    return remap$(v, {
      "encoding_format": "encodingFormat",
    });
  });

/** @internal */
export type GetV2LogsIdCacheConfigResponseModelParameters$Outbound = {
  temperature?: number | undefined;
  maxTokens?: number | undefined;
  topK?: number | undefined;
  topP?: number | undefined;
  frequencyPenalty?: number | undefined;
  presencePenalty?: number | undefined;
  numImages?: number | undefined;
  seed?: number | undefined;
  format?: string | undefined;
  dimensions?: string | undefined;
  quality?: string | undefined;
  style?: string | undefined;
  responseFormat?:
    | GetV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody2$Outbound
    | GetV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody1$Outbound
    | null
    | undefined;
  photoRealVersion?: string | undefined;
  encoding_format?: string | undefined;
};

/** @internal */
export const GetV2LogsIdCacheConfigResponseModelParameters$outboundSchema:
  z.ZodType<
    GetV2LogsIdCacheConfigResponseModelParameters$Outbound,
    z.ZodTypeDef,
    GetV2LogsIdCacheConfigResponseModelParameters
  > = z.object({
    temperature: z.number().optional(),
    maxTokens: z.number().optional(),
    topK: z.number().optional(),
    topP: z.number().optional(),
    frequencyPenalty: z.number().optional(),
    presencePenalty: z.number().optional(),
    numImages: z.number().optional(),
    seed: z.number().optional(),
    format: GetV2LogsIdCacheConfigResponse200Format$outboundSchema.optional(),
    dimensions: z.string().optional(),
    quality: GetV2LogsIdCacheConfigResponseQuality$outboundSchema.optional(),
    style: z.string().optional(),
    responseFormat: z.nullable(
      z.union([
        z.lazy(() =>
          GetV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody2$outboundSchema
        ),
        z.lazy(() =>
          GetV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody1$outboundSchema
        ),
      ]),
    ).optional(),
    photoRealVersion:
      GetV2LogsIdCacheConfigResponsePhotoRealVersion$outboundSchema.optional(),
    encodingFormat: GetV2LogsIdCacheConfigResponseEncodingFormat$outboundSchema
      .optional(),
  }).transform((v) => {
    return remap$(v, {
      encodingFormat: "encoding_format",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdCacheConfigResponseModelParameters$ {
  /** @deprecated use `GetV2LogsIdCacheConfigResponseModelParameters$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsIdCacheConfigResponseModelParameters$inboundSchema;
  /** @deprecated use `GetV2LogsIdCacheConfigResponseModelParameters$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdCacheConfigResponseModelParameters$outboundSchema;
  /** @deprecated use `GetV2LogsIdCacheConfigResponseModelParameters$Outbound` instead. */
  export type Outbound = GetV2LogsIdCacheConfigResponseModelParameters$Outbound;
}

export function getV2LogsIdCacheConfigResponseModelParametersToJSON(
  getV2LogsIdCacheConfigResponseModelParameters:
    GetV2LogsIdCacheConfigResponseModelParameters,
): string {
  return JSON.stringify(
    GetV2LogsIdCacheConfigResponseModelParameters$outboundSchema.parse(
      getV2LogsIdCacheConfigResponseModelParameters,
    ),
  );
}

export function getV2LogsIdCacheConfigResponseModelParametersFromJSON(
  jsonString: string,
): SafeParseResult<
  GetV2LogsIdCacheConfigResponseModelParameters,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetV2LogsIdCacheConfigResponseModelParameters$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'GetV2LogsIdCacheConfigResponseModelParameters' from JSON`,
  );
}

/** @internal */
export const GetV2LogsIdCacheConfigResponseProvider$inboundSchema:
  z.ZodNativeEnum<typeof GetV2LogsIdCacheConfigResponseProvider> = z.nativeEnum(
    GetV2LogsIdCacheConfigResponseProvider,
  );

/** @internal */
export const GetV2LogsIdCacheConfigResponseProvider$outboundSchema:
  z.ZodNativeEnum<typeof GetV2LogsIdCacheConfigResponseProvider> =
    GetV2LogsIdCacheConfigResponseProvider$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdCacheConfigResponseProvider$ {
  /** @deprecated use `GetV2LogsIdCacheConfigResponseProvider$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsIdCacheConfigResponseProvider$inboundSchema;
  /** @deprecated use `GetV2LogsIdCacheConfigResponseProvider$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdCacheConfigResponseProvider$outboundSchema;
}

/** @internal */
export const GetV2LogsIdCacheConfigModelConfig$inboundSchema: z.ZodType<
  GetV2LogsIdCacheConfigModelConfig,
  z.ZodTypeDef,
  unknown
> = z.object({
  model: z.string(),
  model_db_id: z.string(),
  model_type: GetV2LogsIdCacheConfigResponseModelType$inboundSchema,
  model_parameters: z.lazy(() =>
    GetV2LogsIdCacheConfigResponseModelParameters$inboundSchema
  ),
  provider: GetV2LogsIdCacheConfigResponseProvider$inboundSchema,
  integration_id: z.nullable(z.string()).optional(),
  version: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "model_db_id": "modelDbId",
    "model_type": "modelType",
    "model_parameters": "modelParameters",
    "integration_id": "integrationId",
  });
});

/** @internal */
export type GetV2LogsIdCacheConfigModelConfig$Outbound = {
  model: string;
  model_db_id: string;
  model_type: string;
  model_parameters: GetV2LogsIdCacheConfigResponseModelParameters$Outbound;
  provider: string;
  integration_id?: string | null | undefined;
  version?: string | undefined;
};

/** @internal */
export const GetV2LogsIdCacheConfigModelConfig$outboundSchema: z.ZodType<
  GetV2LogsIdCacheConfigModelConfig$Outbound,
  z.ZodTypeDef,
  GetV2LogsIdCacheConfigModelConfig
> = z.object({
  model: z.string(),
  modelDbId: z.string(),
  modelType: GetV2LogsIdCacheConfigResponseModelType$outboundSchema,
  modelParameters: z.lazy(() =>
    GetV2LogsIdCacheConfigResponseModelParameters$outboundSchema
  ),
  provider: GetV2LogsIdCacheConfigResponseProvider$outboundSchema,
  integrationId: z.nullable(z.string()).optional(),
  version: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    modelDbId: "model_db_id",
    modelType: "model_type",
    modelParameters: "model_parameters",
    integrationId: "integration_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdCacheConfigModelConfig$ {
  /** @deprecated use `GetV2LogsIdCacheConfigModelConfig$inboundSchema` instead. */
  export const inboundSchema = GetV2LogsIdCacheConfigModelConfig$inboundSchema;
  /** @deprecated use `GetV2LogsIdCacheConfigModelConfig$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdCacheConfigModelConfig$outboundSchema;
  /** @deprecated use `GetV2LogsIdCacheConfigModelConfig$Outbound` instead. */
  export type Outbound = GetV2LogsIdCacheConfigModelConfig$Outbound;
}

export function getV2LogsIdCacheConfigModelConfigToJSON(
  getV2LogsIdCacheConfigModelConfig: GetV2LogsIdCacheConfigModelConfig,
): string {
  return JSON.stringify(
    GetV2LogsIdCacheConfigModelConfig$outboundSchema.parse(
      getV2LogsIdCacheConfigModelConfig,
    ),
  );
}

export function getV2LogsIdCacheConfigModelConfigFromJSON(
  jsonString: string,
): SafeParseResult<GetV2LogsIdCacheConfigModelConfig, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetV2LogsIdCacheConfigModelConfig$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetV2LogsIdCacheConfigModelConfig' from JSON`,
  );
}

/** @internal */
export const GetV2LogsIdCacheConfigResponse2$inboundSchema: z.ZodType<
  GetV2LogsIdCacheConfigResponse2,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: GetV2LogsIdCacheConfigResponse200ApplicationJSONType$inboundSchema,
  model_config: z.lazy(() => GetV2LogsIdCacheConfigModelConfig$inboundSchema),
  ttl: z.number().default(0),
  similarity_score_threshold: z.number().default(0),
}).transform((v) => {
  return remap$(v, {
    "model_config": "modelConfig",
    "similarity_score_threshold": "similarityScoreThreshold",
  });
});

/** @internal */
export type GetV2LogsIdCacheConfigResponse2$Outbound = {
  type: string;
  model_config: GetV2LogsIdCacheConfigModelConfig$Outbound;
  ttl: number;
  similarity_score_threshold: number;
};

/** @internal */
export const GetV2LogsIdCacheConfigResponse2$outboundSchema: z.ZodType<
  GetV2LogsIdCacheConfigResponse2$Outbound,
  z.ZodTypeDef,
  GetV2LogsIdCacheConfigResponse2
> = z.object({
  type: GetV2LogsIdCacheConfigResponse200ApplicationJSONType$outboundSchema,
  modelConfig: z.lazy(() => GetV2LogsIdCacheConfigModelConfig$outboundSchema),
  ttl: z.number().default(0),
  similarityScoreThreshold: z.number().default(0),
}).transform((v) => {
  return remap$(v, {
    modelConfig: "model_config",
    similarityScoreThreshold: "similarity_score_threshold",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdCacheConfigResponse2$ {
  /** @deprecated use `GetV2LogsIdCacheConfigResponse2$inboundSchema` instead. */
  export const inboundSchema = GetV2LogsIdCacheConfigResponse2$inboundSchema;
  /** @deprecated use `GetV2LogsIdCacheConfigResponse2$outboundSchema` instead. */
  export const outboundSchema = GetV2LogsIdCacheConfigResponse2$outboundSchema;
  /** @deprecated use `GetV2LogsIdCacheConfigResponse2$Outbound` instead. */
  export type Outbound = GetV2LogsIdCacheConfigResponse2$Outbound;
}

export function getV2LogsIdCacheConfigResponse2ToJSON(
  getV2LogsIdCacheConfigResponse2: GetV2LogsIdCacheConfigResponse2,
): string {
  return JSON.stringify(
    GetV2LogsIdCacheConfigResponse2$outboundSchema.parse(
      getV2LogsIdCacheConfigResponse2,
    ),
  );
}

export function getV2LogsIdCacheConfigResponse2FromJSON(
  jsonString: string,
): SafeParseResult<GetV2LogsIdCacheConfigResponse2, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetV2LogsIdCacheConfigResponse2$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetV2LogsIdCacheConfigResponse2' from JSON`,
  );
}

/** @internal */
export const GetV2LogsIdCacheConfigResponse200Type$inboundSchema:
  z.ZodNativeEnum<typeof GetV2LogsIdCacheConfigResponse200Type> = z.nativeEnum(
    GetV2LogsIdCacheConfigResponse200Type,
  );

/** @internal */
export const GetV2LogsIdCacheConfigResponse200Type$outboundSchema:
  z.ZodNativeEnum<typeof GetV2LogsIdCacheConfigResponse200Type> =
    GetV2LogsIdCacheConfigResponse200Type$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdCacheConfigResponse200Type$ {
  /** @deprecated use `GetV2LogsIdCacheConfigResponse200Type$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsIdCacheConfigResponse200Type$inboundSchema;
  /** @deprecated use `GetV2LogsIdCacheConfigResponse200Type$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdCacheConfigResponse200Type$outboundSchema;
}

/** @internal */
export const GetV2LogsIdCacheConfigResponse1$inboundSchema: z.ZodType<
  GetV2LogsIdCacheConfigResponse1,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: GetV2LogsIdCacheConfigResponse200Type$inboundSchema,
  ttl: z.number().default(0),
});

/** @internal */
export type GetV2LogsIdCacheConfigResponse1$Outbound = {
  type: string;
  ttl: number;
};

/** @internal */
export const GetV2LogsIdCacheConfigResponse1$outboundSchema: z.ZodType<
  GetV2LogsIdCacheConfigResponse1$Outbound,
  z.ZodTypeDef,
  GetV2LogsIdCacheConfigResponse1
> = z.object({
  type: GetV2LogsIdCacheConfigResponse200Type$outboundSchema,
  ttl: z.number().default(0),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdCacheConfigResponse1$ {
  /** @deprecated use `GetV2LogsIdCacheConfigResponse1$inboundSchema` instead. */
  export const inboundSchema = GetV2LogsIdCacheConfigResponse1$inboundSchema;
  /** @deprecated use `GetV2LogsIdCacheConfigResponse1$outboundSchema` instead. */
  export const outboundSchema = GetV2LogsIdCacheConfigResponse1$outboundSchema;
  /** @deprecated use `GetV2LogsIdCacheConfigResponse1$Outbound` instead. */
  export type Outbound = GetV2LogsIdCacheConfigResponse1$Outbound;
}

export function getV2LogsIdCacheConfigResponse1ToJSON(
  getV2LogsIdCacheConfigResponse1: GetV2LogsIdCacheConfigResponse1,
): string {
  return JSON.stringify(
    GetV2LogsIdCacheConfigResponse1$outboundSchema.parse(
      getV2LogsIdCacheConfigResponse1,
    ),
  );
}

export function getV2LogsIdCacheConfigResponse1FromJSON(
  jsonString: string,
): SafeParseResult<GetV2LogsIdCacheConfigResponse1, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetV2LogsIdCacheConfigResponse1$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetV2LogsIdCacheConfigResponse1' from JSON`,
  );
}

/** @internal */
export const GetV2LogsIdResponseBodyCacheConfig$inboundSchema: z.ZodType<
  GetV2LogsIdResponseBodyCacheConfig,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => GetV2LogsIdCacheConfigResponse1$inboundSchema),
  z.lazy(() => GetV2LogsIdCacheConfigResponse2$inboundSchema),
]);

/** @internal */
export type GetV2LogsIdResponseBodyCacheConfig$Outbound =
  | GetV2LogsIdCacheConfigResponse1$Outbound
  | GetV2LogsIdCacheConfigResponse2$Outbound;

/** @internal */
export const GetV2LogsIdResponseBodyCacheConfig$outboundSchema: z.ZodType<
  GetV2LogsIdResponseBodyCacheConfig$Outbound,
  z.ZodTypeDef,
  GetV2LogsIdResponseBodyCacheConfig
> = z.union([
  z.lazy(() => GetV2LogsIdCacheConfigResponse1$outboundSchema),
  z.lazy(() => GetV2LogsIdCacheConfigResponse2$outboundSchema),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdResponseBodyCacheConfig$ {
  /** @deprecated use `GetV2LogsIdResponseBodyCacheConfig$inboundSchema` instead. */
  export const inboundSchema = GetV2LogsIdResponseBodyCacheConfig$inboundSchema;
  /** @deprecated use `GetV2LogsIdResponseBodyCacheConfig$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdResponseBodyCacheConfig$outboundSchema;
  /** @deprecated use `GetV2LogsIdResponseBodyCacheConfig$Outbound` instead. */
  export type Outbound = GetV2LogsIdResponseBodyCacheConfig$Outbound;
}

export function getV2LogsIdResponseBodyCacheConfigToJSON(
  getV2LogsIdResponseBodyCacheConfig: GetV2LogsIdResponseBodyCacheConfig,
): string {
  return JSON.stringify(
    GetV2LogsIdResponseBodyCacheConfig$outboundSchema.parse(
      getV2LogsIdResponseBodyCacheConfig,
    ),
  );
}

export function getV2LogsIdResponseBodyCacheConfigFromJSON(
  jsonString: string,
): SafeParseResult<GetV2LogsIdResponseBodyCacheConfig, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      GetV2LogsIdResponseBodyCacheConfig$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetV2LogsIdResponseBodyCacheConfig' from JSON`,
  );
}

/** @internal */
export const GetV2LogsIdEvaluatorsResponseConfigType$inboundSchema:
  z.ZodNativeEnum<typeof GetV2LogsIdEvaluatorsResponseConfigType> = z
    .nativeEnum(GetV2LogsIdEvaluatorsResponseConfigType);

/** @internal */
export const GetV2LogsIdEvaluatorsResponseConfigType$outboundSchema:
  z.ZodNativeEnum<typeof GetV2LogsIdEvaluatorsResponseConfigType> =
    GetV2LogsIdEvaluatorsResponseConfigType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdEvaluatorsResponseConfigType$ {
  /** @deprecated use `GetV2LogsIdEvaluatorsResponseConfigType$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsIdEvaluatorsResponseConfigType$inboundSchema;
  /** @deprecated use `GetV2LogsIdEvaluatorsResponseConfigType$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdEvaluatorsResponseConfigType$outboundSchema;
}

/** @internal */
export const GetV2LogsIdEvaluatorsResponse200Type$inboundSchema:
  z.ZodNativeEnum<typeof GetV2LogsIdEvaluatorsResponse200Type> = z.nativeEnum(
    GetV2LogsIdEvaluatorsResponse200Type,
  );

/** @internal */
export const GetV2LogsIdEvaluatorsResponse200Type$outboundSchema:
  z.ZodNativeEnum<typeof GetV2LogsIdEvaluatorsResponse200Type> =
    GetV2LogsIdEvaluatorsResponse200Type$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdEvaluatorsResponse200Type$ {
  /** @deprecated use `GetV2LogsIdEvaluatorsResponse200Type$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsIdEvaluatorsResponse200Type$inboundSchema;
  /** @deprecated use `GetV2LogsIdEvaluatorsResponse200Type$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdEvaluatorsResponse200Type$outboundSchema;
}

/** @internal */
export const GetV2LogsIdEvaluators2$inboundSchema: z.ZodType<
  GetV2LogsIdEvaluators2,
  z.ZodTypeDef,
  unknown
> = z.object({
  _id: z.string(),
  config_type: GetV2LogsIdEvaluatorsResponseConfigType$inboundSchema,
  evaluator_id: z.string(),
  enabled: z.boolean().default(true),
  type: GetV2LogsIdEvaluatorsResponse200Type$inboundSchema,
  sample_rate: z.number().optional(),
}).transform((v) => {
  return remap$(v, {
    "_id": "id",
    "config_type": "configType",
    "evaluator_id": "evaluatorId",
    "sample_rate": "sampleRate",
  });
});

/** @internal */
export type GetV2LogsIdEvaluators2$Outbound = {
  _id: string;
  config_type: string;
  evaluator_id: string;
  enabled: boolean;
  type: string;
  sample_rate?: number | undefined;
};

/** @internal */
export const GetV2LogsIdEvaluators2$outboundSchema: z.ZodType<
  GetV2LogsIdEvaluators2$Outbound,
  z.ZodTypeDef,
  GetV2LogsIdEvaluators2
> = z.object({
  id: z.string(),
  configType: GetV2LogsIdEvaluatorsResponseConfigType$outboundSchema,
  evaluatorId: z.string(),
  enabled: z.boolean().default(true),
  type: GetV2LogsIdEvaluatorsResponse200Type$outboundSchema,
  sampleRate: z.number().optional(),
}).transform((v) => {
  return remap$(v, {
    id: "_id",
    configType: "config_type",
    evaluatorId: "evaluator_id",
    sampleRate: "sample_rate",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdEvaluators2$ {
  /** @deprecated use `GetV2LogsIdEvaluators2$inboundSchema` instead. */
  export const inboundSchema = GetV2LogsIdEvaluators2$inboundSchema;
  /** @deprecated use `GetV2LogsIdEvaluators2$outboundSchema` instead. */
  export const outboundSchema = GetV2LogsIdEvaluators2$outboundSchema;
  /** @deprecated use `GetV2LogsIdEvaluators2$Outbound` instead. */
  export type Outbound = GetV2LogsIdEvaluators2$Outbound;
}

export function getV2LogsIdEvaluators2ToJSON(
  getV2LogsIdEvaluators2: GetV2LogsIdEvaluators2,
): string {
  return JSON.stringify(
    GetV2LogsIdEvaluators2$outboundSchema.parse(getV2LogsIdEvaluators2),
  );
}

export function getV2LogsIdEvaluators2FromJSON(
  jsonString: string,
): SafeParseResult<GetV2LogsIdEvaluators2, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetV2LogsIdEvaluators2$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetV2LogsIdEvaluators2' from JSON`,
  );
}

/** @internal */
export const GetV2LogsIdEvaluatorsConfigType$inboundSchema: z.ZodNativeEnum<
  typeof GetV2LogsIdEvaluatorsConfigType
> = z.nativeEnum(GetV2LogsIdEvaluatorsConfigType);

/** @internal */
export const GetV2LogsIdEvaluatorsConfigType$outboundSchema: z.ZodNativeEnum<
  typeof GetV2LogsIdEvaluatorsConfigType
> = GetV2LogsIdEvaluatorsConfigType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdEvaluatorsConfigType$ {
  /** @deprecated use `GetV2LogsIdEvaluatorsConfigType$inboundSchema` instead. */
  export const inboundSchema = GetV2LogsIdEvaluatorsConfigType$inboundSchema;
  /** @deprecated use `GetV2LogsIdEvaluatorsConfigType$outboundSchema` instead. */
  export const outboundSchema = GetV2LogsIdEvaluatorsConfigType$outboundSchema;
}

/** @internal */
export const GetV2LogsIdEvaluatorsResponseType$inboundSchema: z.ZodNativeEnum<
  typeof GetV2LogsIdEvaluatorsResponseType
> = z.nativeEnum(GetV2LogsIdEvaluatorsResponseType);

/** @internal */
export const GetV2LogsIdEvaluatorsResponseType$outboundSchema: z.ZodNativeEnum<
  typeof GetV2LogsIdEvaluatorsResponseType
> = GetV2LogsIdEvaluatorsResponseType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdEvaluatorsResponseType$ {
  /** @deprecated use `GetV2LogsIdEvaluatorsResponseType$inboundSchema` instead. */
  export const inboundSchema = GetV2LogsIdEvaluatorsResponseType$inboundSchema;
  /** @deprecated use `GetV2LogsIdEvaluatorsResponseType$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdEvaluatorsResponseType$outboundSchema;
}

/** @internal */
export const GetV2LogsIdEvaluators1$inboundSchema: z.ZodType<
  GetV2LogsIdEvaluators1,
  z.ZodTypeDef,
  unknown
> = z.object({
  _id: z.string(),
  config_type: GetV2LogsIdEvaluatorsConfigType$inboundSchema,
  evaluator_id: z.string(),
  enabled: z.boolean().default(true),
  type: GetV2LogsIdEvaluatorsResponseType$inboundSchema,
  sample_rate: z.number().optional(),
}).transform((v) => {
  return remap$(v, {
    "_id": "id",
    "config_type": "configType",
    "evaluator_id": "evaluatorId",
    "sample_rate": "sampleRate",
  });
});

/** @internal */
export type GetV2LogsIdEvaluators1$Outbound = {
  _id: string;
  config_type: string;
  evaluator_id: string;
  enabled: boolean;
  type: string;
  sample_rate?: number | undefined;
};

/** @internal */
export const GetV2LogsIdEvaluators1$outboundSchema: z.ZodType<
  GetV2LogsIdEvaluators1$Outbound,
  z.ZodTypeDef,
  GetV2LogsIdEvaluators1
> = z.object({
  id: z.string(),
  configType: GetV2LogsIdEvaluatorsConfigType$outboundSchema,
  evaluatorId: z.string(),
  enabled: z.boolean().default(true),
  type: GetV2LogsIdEvaluatorsResponseType$outboundSchema,
  sampleRate: z.number().optional(),
}).transform((v) => {
  return remap$(v, {
    id: "_id",
    configType: "config_type",
    evaluatorId: "evaluator_id",
    sampleRate: "sample_rate",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdEvaluators1$ {
  /** @deprecated use `GetV2LogsIdEvaluators1$inboundSchema` instead. */
  export const inboundSchema = GetV2LogsIdEvaluators1$inboundSchema;
  /** @deprecated use `GetV2LogsIdEvaluators1$outboundSchema` instead. */
  export const outboundSchema = GetV2LogsIdEvaluators1$outboundSchema;
  /** @deprecated use `GetV2LogsIdEvaluators1$Outbound` instead. */
  export type Outbound = GetV2LogsIdEvaluators1$Outbound;
}

export function getV2LogsIdEvaluators1ToJSON(
  getV2LogsIdEvaluators1: GetV2LogsIdEvaluators1,
): string {
  return JSON.stringify(
    GetV2LogsIdEvaluators1$outboundSchema.parse(getV2LogsIdEvaluators1),
  );
}

export function getV2LogsIdEvaluators1FromJSON(
  jsonString: string,
): SafeParseResult<GetV2LogsIdEvaluators1, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetV2LogsIdEvaluators1$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetV2LogsIdEvaluators1' from JSON`,
  );
}

/** @internal */
export const ResponseBodyEvaluators$inboundSchema: z.ZodType<
  ResponseBodyEvaluators,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => GetV2LogsIdEvaluators1$inboundSchema),
  z.lazy(() => GetV2LogsIdEvaluators2$inboundSchema),
]);

/** @internal */
export type ResponseBodyEvaluators$Outbound =
  | GetV2LogsIdEvaluators1$Outbound
  | GetV2LogsIdEvaluators2$Outbound;

/** @internal */
export const ResponseBodyEvaluators$outboundSchema: z.ZodType<
  ResponseBodyEvaluators$Outbound,
  z.ZodTypeDef,
  ResponseBodyEvaluators
> = z.union([
  z.lazy(() => GetV2LogsIdEvaluators1$outboundSchema),
  z.lazy(() => GetV2LogsIdEvaluators2$outboundSchema),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ResponseBodyEvaluators$ {
  /** @deprecated use `ResponseBodyEvaluators$inboundSchema` instead. */
  export const inboundSchema = ResponseBodyEvaluators$inboundSchema;
  /** @deprecated use `ResponseBodyEvaluators$outboundSchema` instead. */
  export const outboundSchema = ResponseBodyEvaluators$outboundSchema;
  /** @deprecated use `ResponseBodyEvaluators$Outbound` instead. */
  export type Outbound = ResponseBodyEvaluators$Outbound;
}

export function responseBodyEvaluatorsToJSON(
  responseBodyEvaluators: ResponseBodyEvaluators,
): string {
  return JSON.stringify(
    ResponseBodyEvaluators$outboundSchema.parse(responseBodyEvaluators),
  );
}

export function responseBodyEvaluatorsFromJSON(
  jsonString: string,
): SafeParseResult<ResponseBodyEvaluators, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ResponseBodyEvaluators$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ResponseBodyEvaluators' from JSON`,
  );
}

/** @internal */
export const ResponseBodyGuardrailsBehavior$inboundSchema: z.ZodNativeEnum<
  typeof ResponseBodyGuardrailsBehavior
> = z.nativeEnum(ResponseBodyGuardrailsBehavior);

/** @internal */
export const ResponseBodyGuardrailsBehavior$outboundSchema: z.ZodNativeEnum<
  typeof ResponseBodyGuardrailsBehavior
> = ResponseBodyGuardrailsBehavior$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ResponseBodyGuardrailsBehavior$ {
  /** @deprecated use `ResponseBodyGuardrailsBehavior$inboundSchema` instead. */
  export const inboundSchema = ResponseBodyGuardrailsBehavior$inboundSchema;
  /** @deprecated use `ResponseBodyGuardrailsBehavior$outboundSchema` instead. */
  export const outboundSchema = ResponseBodyGuardrailsBehavior$outboundSchema;
}

/** @internal */
export const Settings$inboundSchema: z.ZodType<
  Settings,
  z.ZodTypeDef,
  unknown
> = z.object({
  output_masking: z.boolean().default(false),
  is_caching_enabled: z.boolean().default(false),
  cache_config: z.nullable(
    z.union([
      z.lazy(() => GetV2LogsIdCacheConfigResponse1$inboundSchema),
      z.lazy(() => GetV2LogsIdCacheConfigResponse2$inboundSchema),
    ]),
  ).optional(),
  evaluators: z.array(
    z.union([
      z.lazy(() => GetV2LogsIdEvaluators1$inboundSchema),
      z.lazy(() => GetV2LogsIdEvaluators2$inboundSchema),
    ]),
  ).optional(),
  guardrails_behavior: ResponseBodyGuardrailsBehavior$inboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    "output_masking": "outputMasking",
    "is_caching_enabled": "isCachingEnabled",
    "cache_config": "cacheConfig",
    "guardrails_behavior": "guardrailsBehavior",
  });
});

/** @internal */
export type Settings$Outbound = {
  output_masking: boolean;
  is_caching_enabled: boolean;
  cache_config?:
    | GetV2LogsIdCacheConfigResponse1$Outbound
    | GetV2LogsIdCacheConfigResponse2$Outbound
    | null
    | undefined;
  evaluators?:
    | Array<GetV2LogsIdEvaluators1$Outbound | GetV2LogsIdEvaluators2$Outbound>
    | undefined;
  guardrails_behavior?: string | undefined;
};

/** @internal */
export const Settings$outboundSchema: z.ZodType<
  Settings$Outbound,
  z.ZodTypeDef,
  Settings
> = z.object({
  outputMasking: z.boolean().default(false),
  isCachingEnabled: z.boolean().default(false),
  cacheConfig: z.nullable(
    z.union([
      z.lazy(() => GetV2LogsIdCacheConfigResponse1$outboundSchema),
      z.lazy(() => GetV2LogsIdCacheConfigResponse2$outboundSchema),
    ]),
  ).optional(),
  evaluators: z.array(
    z.union([
      z.lazy(() => GetV2LogsIdEvaluators1$outboundSchema),
      z.lazy(() => GetV2LogsIdEvaluators2$outboundSchema),
    ]),
  ).optional(),
  guardrailsBehavior: ResponseBodyGuardrailsBehavior$outboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    outputMasking: "output_masking",
    isCachingEnabled: "is_caching_enabled",
    cacheConfig: "cache_config",
    guardrailsBehavior: "guardrails_behavior",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Settings$ {
  /** @deprecated use `Settings$inboundSchema` instead. */
  export const inboundSchema = Settings$inboundSchema;
  /** @deprecated use `Settings$outboundSchema` instead. */
  export const outboundSchema = Settings$outboundSchema;
  /** @deprecated use `Settings$Outbound` instead. */
  export type Outbound = Settings$Outbound;
}

export function settingsToJSON(settings: Settings): string {
  return JSON.stringify(Settings$outboundSchema.parse(settings));
}

export function settingsFromJSON(
  jsonString: string,
): SafeParseResult<Settings, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Settings$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Settings' from JSON`,
  );
}

/** @internal */
export const Errors$inboundSchema: z.ZodType<Errors, z.ZodTypeDef, unknown> = z
  .object({
    code: z.number(),
    message: z.string(),
  });

/** @internal */
export type Errors$Outbound = {
  code: number;
  message: string;
};

/** @internal */
export const Errors$outboundSchema: z.ZodType<
  Errors$Outbound,
  z.ZodTypeDef,
  Errors
> = z.object({
  code: z.number(),
  message: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Errors$ {
  /** @deprecated use `Errors$inboundSchema` instead. */
  export const inboundSchema = Errors$inboundSchema;
  /** @deprecated use `Errors$outboundSchema` instead. */
  export const outboundSchema = Errors$outboundSchema;
  /** @deprecated use `Errors$Outbound` instead. */
  export type Outbound = Errors$Outbound;
}

export function errorsToJSON(errors: Errors): string {
  return JSON.stringify(Errors$outboundSchema.parse(errors));
}

export function errorsFromJSON(
  jsonString: string,
): SafeParseResult<Errors, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Errors$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Errors' from JSON`,
  );
}

/** @internal */
export const ProcessingAttempts$inboundSchema: z.ZodType<
  ProcessingAttempts,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  started_at: z.string(),
  queued_at: z.string().optional(),
  completed_at: z.string().optional(),
  errors: z.array(z.lazy(() => Errors$inboundSchema)).optional(),
}).transform((v) => {
  return remap$(v, {
    "started_at": "startedAt",
    "queued_at": "queuedAt",
    "completed_at": "completedAt",
  });
});

/** @internal */
export type ProcessingAttempts$Outbound = {
  id: string;
  started_at: string;
  queued_at?: string | undefined;
  completed_at?: string | undefined;
  errors?: Array<Errors$Outbound> | undefined;
};

/** @internal */
export const ProcessingAttempts$outboundSchema: z.ZodType<
  ProcessingAttempts$Outbound,
  z.ZodTypeDef,
  ProcessingAttempts
> = z.object({
  id: z.string(),
  startedAt: z.string(),
  queuedAt: z.string().optional(),
  completedAt: z.string().optional(),
  errors: z.array(z.lazy(() => Errors$outboundSchema)).optional(),
}).transform((v) => {
  return remap$(v, {
    startedAt: "started_at",
    queuedAt: "queued_at",
    completedAt: "completed_at",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ProcessingAttempts$ {
  /** @deprecated use `ProcessingAttempts$inboundSchema` instead. */
  export const inboundSchema = ProcessingAttempts$inboundSchema;
  /** @deprecated use `ProcessingAttempts$outboundSchema` instead. */
  export const outboundSchema = ProcessingAttempts$outboundSchema;
  /** @deprecated use `ProcessingAttempts$Outbound` instead. */
  export type Outbound = ProcessingAttempts$Outbound;
}

export function processingAttemptsToJSON(
  processingAttempts: ProcessingAttempts,
): string {
  return JSON.stringify(
    ProcessingAttempts$outboundSchema.parse(processingAttempts),
  );
}

export function processingAttemptsFromJSON(
  jsonString: string,
): SafeParseResult<ProcessingAttempts, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ProcessingAttempts$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ProcessingAttempts' from JSON`,
  );
}

/** @internal */
export const PromptSnippets$inboundSchema: z.ZodType<
  PromptSnippets,
  z.ZodTypeDef,
  unknown
> = z.object({
  _id: z.string(),
  key: z.string(),
  value: z.string(),
}).transform((v) => {
  return remap$(v, {
    "_id": "id",
  });
});

/** @internal */
export type PromptSnippets$Outbound = {
  _id: string;
  key: string;
  value: string;
};

/** @internal */
export const PromptSnippets$outboundSchema: z.ZodType<
  PromptSnippets$Outbound,
  z.ZodTypeDef,
  PromptSnippets
> = z.object({
  id: z.string(),
  key: z.string(),
  value: z.string(),
}).transform((v) => {
  return remap$(v, {
    id: "_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PromptSnippets$ {
  /** @deprecated use `PromptSnippets$inboundSchema` instead. */
  export const inboundSchema = PromptSnippets$inboundSchema;
  /** @deprecated use `PromptSnippets$outboundSchema` instead. */
  export const outboundSchema = PromptSnippets$outboundSchema;
  /** @deprecated use `PromptSnippets$Outbound` instead. */
  export type Outbound = PromptSnippets$Outbound;
}

export function promptSnippetsToJSON(promptSnippets: PromptSnippets): string {
  return JSON.stringify(PromptSnippets$outboundSchema.parse(promptSnippets));
}

export function promptSnippetsFromJSON(
  jsonString: string,
): SafeParseResult<PromptSnippets, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PromptSnippets$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PromptSnippets' from JSON`,
  );
}

/** @internal */
export const ResponseBodyFiles$inboundSchema: z.ZodType<
  ResponseBodyFiles,
  z.ZodTypeDef,
  unknown
> = z.object({
  file_id: z.string(),
  file_name: z.string(),
  object_name: z.string(),
  content: z.string(),
}).transform((v) => {
  return remap$(v, {
    "file_id": "fileId",
    "file_name": "fileName",
    "object_name": "objectName",
  });
});

/** @internal */
export type ResponseBodyFiles$Outbound = {
  file_id: string;
  file_name: string;
  object_name: string;
  content: string;
};

/** @internal */
export const ResponseBodyFiles$outboundSchema: z.ZodType<
  ResponseBodyFiles$Outbound,
  z.ZodTypeDef,
  ResponseBodyFiles
> = z.object({
  fileId: z.string(),
  fileName: z.string(),
  objectName: z.string(),
  content: z.string(),
}).transform((v) => {
  return remap$(v, {
    fileId: "file_id",
    fileName: "file_name",
    objectName: "object_name",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ResponseBodyFiles$ {
  /** @deprecated use `ResponseBodyFiles$inboundSchema` instead. */
  export const inboundSchema = ResponseBodyFiles$inboundSchema;
  /** @deprecated use `ResponseBodyFiles$outboundSchema` instead. */
  export const outboundSchema = ResponseBodyFiles$outboundSchema;
  /** @deprecated use `ResponseBodyFiles$Outbound` instead. */
  export type Outbound = ResponseBodyFiles$Outbound;
}

export function responseBodyFilesToJSON(
  responseBodyFiles: ResponseBodyFiles,
): string {
  return JSON.stringify(
    ResponseBodyFiles$outboundSchema.parse(responseBodyFiles),
  );
}

export function responseBodyFilesFromJSON(
  jsonString: string,
): SafeParseResult<ResponseBodyFiles, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ResponseBodyFiles$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ResponseBodyFiles' from JSON`,
  );
}

/** @internal */
export const GetV2LogsIdCacheConfigType$inboundSchema: z.ZodNativeEnum<
  typeof GetV2LogsIdCacheConfigType
> = z.nativeEnum(GetV2LogsIdCacheConfigType);

/** @internal */
export const GetV2LogsIdCacheConfigType$outboundSchema: z.ZodNativeEnum<
  typeof GetV2LogsIdCacheConfigType
> = GetV2LogsIdCacheConfigType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdCacheConfigType$ {
  /** @deprecated use `GetV2LogsIdCacheConfigType$inboundSchema` instead. */
  export const inboundSchema = GetV2LogsIdCacheConfigType$inboundSchema;
  /** @deprecated use `GetV2LogsIdCacheConfigType$outboundSchema` instead. */
  export const outboundSchema = GetV2LogsIdCacheConfigType$outboundSchema;
}

/** @internal */
export const CacheConfigModelType$inboundSchema: z.ZodNativeEnum<
  typeof CacheConfigModelType
> = z.nativeEnum(CacheConfigModelType);

/** @internal */
export const CacheConfigModelType$outboundSchema: z.ZodNativeEnum<
  typeof CacheConfigModelType
> = CacheConfigModelType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CacheConfigModelType$ {
  /** @deprecated use `CacheConfigModelType$inboundSchema` instead. */
  export const inboundSchema = CacheConfigModelType$inboundSchema;
  /** @deprecated use `CacheConfigModelType$outboundSchema` instead. */
  export const outboundSchema = CacheConfigModelType$outboundSchema;
}

/** @internal */
export const CacheConfigFormat$inboundSchema: z.ZodNativeEnum<
  typeof CacheConfigFormat
> = z.nativeEnum(CacheConfigFormat);

/** @internal */
export const CacheConfigFormat$outboundSchema: z.ZodNativeEnum<
  typeof CacheConfigFormat
> = CacheConfigFormat$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CacheConfigFormat$ {
  /** @deprecated use `CacheConfigFormat$inboundSchema` instead. */
  export const inboundSchema = CacheConfigFormat$inboundSchema;
  /** @deprecated use `CacheConfigFormat$outboundSchema` instead. */
  export const outboundSchema = CacheConfigFormat$outboundSchema;
}

/** @internal */
export const CacheConfigQuality$inboundSchema: z.ZodNativeEnum<
  typeof CacheConfigQuality
> = z.nativeEnum(CacheConfigQuality);

/** @internal */
export const CacheConfigQuality$outboundSchema: z.ZodNativeEnum<
  typeof CacheConfigQuality
> = CacheConfigQuality$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CacheConfigQuality$ {
  /** @deprecated use `CacheConfigQuality$inboundSchema` instead. */
  export const inboundSchema = CacheConfigQuality$inboundSchema;
  /** @deprecated use `CacheConfigQuality$outboundSchema` instead. */
  export const outboundSchema = CacheConfigQuality$outboundSchema;
}

/** @internal */
export const GetV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody2Type$inboundSchema:
  z.ZodNativeEnum<
    typeof GetV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody2Type
  > = z.nativeEnum(
    GetV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody2Type,
  );

/** @internal */
export const GetV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody2Type$outboundSchema:
  z.ZodNativeEnum<
    typeof GetV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody2Type
  > =
    GetV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody2Type$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody2Type$ {
  /** @deprecated use `GetV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody2Type$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody2Type$inboundSchema;
  /** @deprecated use `GetV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody2Type$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody2Type$outboundSchema;
}

/** @internal */
export const GetV2LogsIdResponseFormatResponse200ApplicationJson2$inboundSchema:
  z.ZodType<
    GetV2LogsIdResponseFormatResponse200ApplicationJson2,
    z.ZodTypeDef,
    unknown
  > = z.object({
    type:
      GetV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody2Type$inboundSchema,
  });

/** @internal */
export type GetV2LogsIdResponseFormatResponse200ApplicationJson2$Outbound = {
  type: string;
};

/** @internal */
export const GetV2LogsIdResponseFormatResponse200ApplicationJson2$outboundSchema:
  z.ZodType<
    GetV2LogsIdResponseFormatResponse200ApplicationJson2$Outbound,
    z.ZodTypeDef,
    GetV2LogsIdResponseFormatResponse200ApplicationJson2
  > = z.object({
    type:
      GetV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody2Type$outboundSchema,
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdResponseFormatResponse200ApplicationJson2$ {
  /** @deprecated use `GetV2LogsIdResponseFormatResponse200ApplicationJson2$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsIdResponseFormatResponse200ApplicationJson2$inboundSchema;
  /** @deprecated use `GetV2LogsIdResponseFormatResponse200ApplicationJson2$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdResponseFormatResponse200ApplicationJson2$outboundSchema;
  /** @deprecated use `GetV2LogsIdResponseFormatResponse200ApplicationJson2$Outbound` instead. */
  export type Outbound =
    GetV2LogsIdResponseFormatResponse200ApplicationJson2$Outbound;
}

export function getV2LogsIdResponseFormatResponse200ApplicationJson2ToJSON(
  getV2LogsIdResponseFormatResponse200ApplicationJson2:
    GetV2LogsIdResponseFormatResponse200ApplicationJson2,
): string {
  return JSON.stringify(
    GetV2LogsIdResponseFormatResponse200ApplicationJson2$outboundSchema.parse(
      getV2LogsIdResponseFormatResponse200ApplicationJson2,
    ),
  );
}

export function getV2LogsIdResponseFormatResponse200ApplicationJson2FromJSON(
  jsonString: string,
): SafeParseResult<
  GetV2LogsIdResponseFormatResponse200ApplicationJson2,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetV2LogsIdResponseFormatResponse200ApplicationJson2$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'GetV2LogsIdResponseFormatResponse200ApplicationJson2' from JSON`,
  );
}

/** @internal */
export const GetV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody2DataType$inboundSchema:
  z.ZodNativeEnum<
    typeof GetV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody2DataType
  > = z.nativeEnum(
    GetV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody2DataType,
  );

/** @internal */
export const GetV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody2DataType$outboundSchema:
  z.ZodNativeEnum<
    typeof GetV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody2DataType
  > =
    GetV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody2DataType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody2DataType$ {
  /** @deprecated use `GetV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody2DataType$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody2DataType$inboundSchema;
  /** @deprecated use `GetV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody2DataType$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody2DataType$outboundSchema;
}

/** @internal */
export const GetV2LogsIdResponseFormatResponse200ApplicationJSONJSONSchema$inboundSchema:
  z.ZodType<
    GetV2LogsIdResponseFormatResponse200ApplicationJSONJSONSchema,
    z.ZodTypeDef,
    unknown
  > = z.object({
    name: z.string(),
    strict: z.boolean(),
    schema: z.record(z.any()),
  });

/** @internal */
export type GetV2LogsIdResponseFormatResponse200ApplicationJSONJSONSchema$Outbound =
  {
    name: string;
    strict: boolean;
    schema: { [k: string]: any };
  };

/** @internal */
export const GetV2LogsIdResponseFormatResponse200ApplicationJSONJSONSchema$outboundSchema:
  z.ZodType<
    GetV2LogsIdResponseFormatResponse200ApplicationJSONJSONSchema$Outbound,
    z.ZodTypeDef,
    GetV2LogsIdResponseFormatResponse200ApplicationJSONJSONSchema
  > = z.object({
    name: z.string(),
    strict: z.boolean(),
    schema: z.record(z.any()),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdResponseFormatResponse200ApplicationJSONJSONSchema$ {
  /** @deprecated use `GetV2LogsIdResponseFormatResponse200ApplicationJSONJSONSchema$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsIdResponseFormatResponse200ApplicationJSONJSONSchema$inboundSchema;
  /** @deprecated use `GetV2LogsIdResponseFormatResponse200ApplicationJSONJSONSchema$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdResponseFormatResponse200ApplicationJSONJSONSchema$outboundSchema;
  /** @deprecated use `GetV2LogsIdResponseFormatResponse200ApplicationJSONJSONSchema$Outbound` instead. */
  export type Outbound =
    GetV2LogsIdResponseFormatResponse200ApplicationJSONJSONSchema$Outbound;
}

export function getV2LogsIdResponseFormatResponse200ApplicationJSONJSONSchemaToJSON(
  getV2LogsIdResponseFormatResponse200ApplicationJSONJSONSchema:
    GetV2LogsIdResponseFormatResponse200ApplicationJSONJSONSchema,
): string {
  return JSON.stringify(
    GetV2LogsIdResponseFormatResponse200ApplicationJSONJSONSchema$outboundSchema
      .parse(getV2LogsIdResponseFormatResponse200ApplicationJSONJSONSchema),
  );
}

export function getV2LogsIdResponseFormatResponse200ApplicationJSONJSONSchemaFromJSON(
  jsonString: string,
): SafeParseResult<
  GetV2LogsIdResponseFormatResponse200ApplicationJSONJSONSchema,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetV2LogsIdResponseFormatResponse200ApplicationJSONJSONSchema$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'GetV2LogsIdResponseFormatResponse200ApplicationJSONJSONSchema' from JSON`,
  );
}

/** @internal */
export const GetV2LogsIdResponseFormatResponse200ApplicationJson1$inboundSchema:
  z.ZodType<
    GetV2LogsIdResponseFormatResponse200ApplicationJson1,
    z.ZodTypeDef,
    unknown
  > = z.object({
    type:
      GetV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody2DataType$inboundSchema,
    json_schema: z.lazy(() =>
      GetV2LogsIdResponseFormatResponse200ApplicationJSONJSONSchema$inboundSchema
    ),
  }).transform((v) => {
    return remap$(v, {
      "json_schema": "jsonSchema",
    });
  });

/** @internal */
export type GetV2LogsIdResponseFormatResponse200ApplicationJson1$Outbound = {
  type: string;
  json_schema:
    GetV2LogsIdResponseFormatResponse200ApplicationJSONJSONSchema$Outbound;
};

/** @internal */
export const GetV2LogsIdResponseFormatResponse200ApplicationJson1$outboundSchema:
  z.ZodType<
    GetV2LogsIdResponseFormatResponse200ApplicationJson1$Outbound,
    z.ZodTypeDef,
    GetV2LogsIdResponseFormatResponse200ApplicationJson1
  > = z.object({
    type:
      GetV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody2DataType$outboundSchema,
    jsonSchema: z.lazy(() =>
      GetV2LogsIdResponseFormatResponse200ApplicationJSONJSONSchema$outboundSchema
    ),
  }).transform((v) => {
    return remap$(v, {
      jsonSchema: "json_schema",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdResponseFormatResponse200ApplicationJson1$ {
  /** @deprecated use `GetV2LogsIdResponseFormatResponse200ApplicationJson1$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsIdResponseFormatResponse200ApplicationJson1$inboundSchema;
  /** @deprecated use `GetV2LogsIdResponseFormatResponse200ApplicationJson1$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdResponseFormatResponse200ApplicationJson1$outboundSchema;
  /** @deprecated use `GetV2LogsIdResponseFormatResponse200ApplicationJson1$Outbound` instead. */
  export type Outbound =
    GetV2LogsIdResponseFormatResponse200ApplicationJson1$Outbound;
}

export function getV2LogsIdResponseFormatResponse200ApplicationJson1ToJSON(
  getV2LogsIdResponseFormatResponse200ApplicationJson1:
    GetV2LogsIdResponseFormatResponse200ApplicationJson1,
): string {
  return JSON.stringify(
    GetV2LogsIdResponseFormatResponse200ApplicationJson1$outboundSchema.parse(
      getV2LogsIdResponseFormatResponse200ApplicationJson1,
    ),
  );
}

export function getV2LogsIdResponseFormatResponse200ApplicationJson1FromJSON(
  jsonString: string,
): SafeParseResult<
  GetV2LogsIdResponseFormatResponse200ApplicationJson1,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetV2LogsIdResponseFormatResponse200ApplicationJson1$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'GetV2LogsIdResponseFormatResponse200ApplicationJson1' from JSON`,
  );
}

/** @internal */
export const CacheConfigResponseFormat$inboundSchema: z.ZodType<
  CacheConfigResponseFormat,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() =>
    GetV2LogsIdResponseFormatResponse200ApplicationJson2$inboundSchema
  ),
  z.lazy(() =>
    GetV2LogsIdResponseFormatResponse200ApplicationJson1$inboundSchema
  ),
]);

/** @internal */
export type CacheConfigResponseFormat$Outbound =
  | GetV2LogsIdResponseFormatResponse200ApplicationJson2$Outbound
  | GetV2LogsIdResponseFormatResponse200ApplicationJson1$Outbound;

/** @internal */
export const CacheConfigResponseFormat$outboundSchema: z.ZodType<
  CacheConfigResponseFormat$Outbound,
  z.ZodTypeDef,
  CacheConfigResponseFormat
> = z.union([
  z.lazy(() =>
    GetV2LogsIdResponseFormatResponse200ApplicationJson2$outboundSchema
  ),
  z.lazy(() =>
    GetV2LogsIdResponseFormatResponse200ApplicationJson1$outboundSchema
  ),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CacheConfigResponseFormat$ {
  /** @deprecated use `CacheConfigResponseFormat$inboundSchema` instead. */
  export const inboundSchema = CacheConfigResponseFormat$inboundSchema;
  /** @deprecated use `CacheConfigResponseFormat$outboundSchema` instead. */
  export const outboundSchema = CacheConfigResponseFormat$outboundSchema;
  /** @deprecated use `CacheConfigResponseFormat$Outbound` instead. */
  export type Outbound = CacheConfigResponseFormat$Outbound;
}

export function cacheConfigResponseFormatToJSON(
  cacheConfigResponseFormat: CacheConfigResponseFormat,
): string {
  return JSON.stringify(
    CacheConfigResponseFormat$outboundSchema.parse(cacheConfigResponseFormat),
  );
}

export function cacheConfigResponseFormatFromJSON(
  jsonString: string,
): SafeParseResult<CacheConfigResponseFormat, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CacheConfigResponseFormat$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CacheConfigResponseFormat' from JSON`,
  );
}

/** @internal */
export const CacheConfigPhotoRealVersion$inboundSchema: z.ZodNativeEnum<
  typeof CacheConfigPhotoRealVersion
> = z.nativeEnum(CacheConfigPhotoRealVersion);

/** @internal */
export const CacheConfigPhotoRealVersion$outboundSchema: z.ZodNativeEnum<
  typeof CacheConfigPhotoRealVersion
> = CacheConfigPhotoRealVersion$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CacheConfigPhotoRealVersion$ {
  /** @deprecated use `CacheConfigPhotoRealVersion$inboundSchema` instead. */
  export const inboundSchema = CacheConfigPhotoRealVersion$inboundSchema;
  /** @deprecated use `CacheConfigPhotoRealVersion$outboundSchema` instead. */
  export const outboundSchema = CacheConfigPhotoRealVersion$outboundSchema;
}

/** @internal */
export const CacheConfigEncodingFormat$inboundSchema: z.ZodNativeEnum<
  typeof CacheConfigEncodingFormat
> = z.nativeEnum(CacheConfigEncodingFormat);

/** @internal */
export const CacheConfigEncodingFormat$outboundSchema: z.ZodNativeEnum<
  typeof CacheConfigEncodingFormat
> = CacheConfigEncodingFormat$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CacheConfigEncodingFormat$ {
  /** @deprecated use `CacheConfigEncodingFormat$inboundSchema` instead. */
  export const inboundSchema = CacheConfigEncodingFormat$inboundSchema;
  /** @deprecated use `CacheConfigEncodingFormat$outboundSchema` instead. */
  export const outboundSchema = CacheConfigEncodingFormat$outboundSchema;
}

/** @internal */
export const CacheConfigModelParameters$inboundSchema: z.ZodType<
  CacheConfigModelParameters,
  z.ZodTypeDef,
  unknown
> = z.object({
  temperature: z.number().optional(),
  maxTokens: z.number().optional(),
  topK: z.number().optional(),
  topP: z.number().optional(),
  frequencyPenalty: z.number().optional(),
  presencePenalty: z.number().optional(),
  numImages: z.number().optional(),
  seed: z.number().optional(),
  format: CacheConfigFormat$inboundSchema.optional(),
  dimensions: z.string().optional(),
  quality: CacheConfigQuality$inboundSchema.optional(),
  style: z.string().optional(),
  responseFormat: z.nullable(
    z.union([
      z.lazy(() =>
        GetV2LogsIdResponseFormatResponse200ApplicationJson2$inboundSchema
      ),
      z.lazy(() =>
        GetV2LogsIdResponseFormatResponse200ApplicationJson1$inboundSchema
      ),
    ]),
  ).optional(),
  photoRealVersion: CacheConfigPhotoRealVersion$inboundSchema.optional(),
  encoding_format: CacheConfigEncodingFormat$inboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    "encoding_format": "encodingFormat",
  });
});

/** @internal */
export type CacheConfigModelParameters$Outbound = {
  temperature?: number | undefined;
  maxTokens?: number | undefined;
  topK?: number | undefined;
  topP?: number | undefined;
  frequencyPenalty?: number | undefined;
  presencePenalty?: number | undefined;
  numImages?: number | undefined;
  seed?: number | undefined;
  format?: string | undefined;
  dimensions?: string | undefined;
  quality?: string | undefined;
  style?: string | undefined;
  responseFormat?:
    | GetV2LogsIdResponseFormatResponse200ApplicationJson2$Outbound
    | GetV2LogsIdResponseFormatResponse200ApplicationJson1$Outbound
    | null
    | undefined;
  photoRealVersion?: string | undefined;
  encoding_format?: string | undefined;
};

/** @internal */
export const CacheConfigModelParameters$outboundSchema: z.ZodType<
  CacheConfigModelParameters$Outbound,
  z.ZodTypeDef,
  CacheConfigModelParameters
> = z.object({
  temperature: z.number().optional(),
  maxTokens: z.number().optional(),
  topK: z.number().optional(),
  topP: z.number().optional(),
  frequencyPenalty: z.number().optional(),
  presencePenalty: z.number().optional(),
  numImages: z.number().optional(),
  seed: z.number().optional(),
  format: CacheConfigFormat$outboundSchema.optional(),
  dimensions: z.string().optional(),
  quality: CacheConfigQuality$outboundSchema.optional(),
  style: z.string().optional(),
  responseFormat: z.nullable(
    z.union([
      z.lazy(() =>
        GetV2LogsIdResponseFormatResponse200ApplicationJson2$outboundSchema
      ),
      z.lazy(() =>
        GetV2LogsIdResponseFormatResponse200ApplicationJson1$outboundSchema
      ),
    ]),
  ).optional(),
  photoRealVersion: CacheConfigPhotoRealVersion$outboundSchema.optional(),
  encodingFormat: CacheConfigEncodingFormat$outboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    encodingFormat: "encoding_format",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CacheConfigModelParameters$ {
  /** @deprecated use `CacheConfigModelParameters$inboundSchema` instead. */
  export const inboundSchema = CacheConfigModelParameters$inboundSchema;
  /** @deprecated use `CacheConfigModelParameters$outboundSchema` instead. */
  export const outboundSchema = CacheConfigModelParameters$outboundSchema;
  /** @deprecated use `CacheConfigModelParameters$Outbound` instead. */
  export type Outbound = CacheConfigModelParameters$Outbound;
}

export function cacheConfigModelParametersToJSON(
  cacheConfigModelParameters: CacheConfigModelParameters,
): string {
  return JSON.stringify(
    CacheConfigModelParameters$outboundSchema.parse(cacheConfigModelParameters),
  );
}

export function cacheConfigModelParametersFromJSON(
  jsonString: string,
): SafeParseResult<CacheConfigModelParameters, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CacheConfigModelParameters$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CacheConfigModelParameters' from JSON`,
  );
}

/** @internal */
export const CacheConfigProvider$inboundSchema: z.ZodNativeEnum<
  typeof CacheConfigProvider
> = z.nativeEnum(CacheConfigProvider);

/** @internal */
export const CacheConfigProvider$outboundSchema: z.ZodNativeEnum<
  typeof CacheConfigProvider
> = CacheConfigProvider$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CacheConfigProvider$ {
  /** @deprecated use `CacheConfigProvider$inboundSchema` instead. */
  export const inboundSchema = CacheConfigProvider$inboundSchema;
  /** @deprecated use `CacheConfigProvider$outboundSchema` instead. */
  export const outboundSchema = CacheConfigProvider$outboundSchema;
}

/** @internal */
export const ModelConfig$inboundSchema: z.ZodType<
  ModelConfig,
  z.ZodTypeDef,
  unknown
> = z.object({
  model: z.string(),
  model_db_id: z.string(),
  model_type: CacheConfigModelType$inboundSchema,
  model_parameters: z.lazy(() => CacheConfigModelParameters$inboundSchema),
  provider: CacheConfigProvider$inboundSchema,
  integration_id: z.nullable(z.string()).optional(),
  version: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "model_db_id": "modelDbId",
    "model_type": "modelType",
    "model_parameters": "modelParameters",
    "integration_id": "integrationId",
  });
});

/** @internal */
export type ModelConfig$Outbound = {
  model: string;
  model_db_id: string;
  model_type: string;
  model_parameters: CacheConfigModelParameters$Outbound;
  provider: string;
  integration_id?: string | null | undefined;
  version?: string | undefined;
};

/** @internal */
export const ModelConfig$outboundSchema: z.ZodType<
  ModelConfig$Outbound,
  z.ZodTypeDef,
  ModelConfig
> = z.object({
  model: z.string(),
  modelDbId: z.string(),
  modelType: CacheConfigModelType$outboundSchema,
  modelParameters: z.lazy(() => CacheConfigModelParameters$outboundSchema),
  provider: CacheConfigProvider$outboundSchema,
  integrationId: z.nullable(z.string()).optional(),
  version: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    modelDbId: "model_db_id",
    modelType: "model_type",
    modelParameters: "model_parameters",
    integrationId: "integration_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ModelConfig$ {
  /** @deprecated use `ModelConfig$inboundSchema` instead. */
  export const inboundSchema = ModelConfig$inboundSchema;
  /** @deprecated use `ModelConfig$outboundSchema` instead. */
  export const outboundSchema = ModelConfig$outboundSchema;
  /** @deprecated use `ModelConfig$Outbound` instead. */
  export type Outbound = ModelConfig$Outbound;
}

export function modelConfigToJSON(modelConfig: ModelConfig): string {
  return JSON.stringify(ModelConfig$outboundSchema.parse(modelConfig));
}

export function modelConfigFromJSON(
  jsonString: string,
): SafeParseResult<ModelConfig, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ModelConfig$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ModelConfig' from JSON`,
  );
}

/** @internal */
export const CacheConfig2$inboundSchema: z.ZodType<
  CacheConfig2,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: GetV2LogsIdCacheConfigType$inboundSchema,
  model_config: z.lazy(() => ModelConfig$inboundSchema),
  ttl: z.number().default(0),
  similarity_score_threshold: z.number().default(0),
}).transform((v) => {
  return remap$(v, {
    "model_config": "modelConfig",
    "similarity_score_threshold": "similarityScoreThreshold",
  });
});

/** @internal */
export type CacheConfig2$Outbound = {
  type: string;
  model_config: ModelConfig$Outbound;
  ttl: number;
  similarity_score_threshold: number;
};

/** @internal */
export const CacheConfig2$outboundSchema: z.ZodType<
  CacheConfig2$Outbound,
  z.ZodTypeDef,
  CacheConfig2
> = z.object({
  type: GetV2LogsIdCacheConfigType$outboundSchema,
  modelConfig: z.lazy(() => ModelConfig$outboundSchema),
  ttl: z.number().default(0),
  similarityScoreThreshold: z.number().default(0),
}).transform((v) => {
  return remap$(v, {
    modelConfig: "model_config",
    similarityScoreThreshold: "similarity_score_threshold",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CacheConfig2$ {
  /** @deprecated use `CacheConfig2$inboundSchema` instead. */
  export const inboundSchema = CacheConfig2$inboundSchema;
  /** @deprecated use `CacheConfig2$outboundSchema` instead. */
  export const outboundSchema = CacheConfig2$outboundSchema;
  /** @deprecated use `CacheConfig2$Outbound` instead. */
  export type Outbound = CacheConfig2$Outbound;
}

export function cacheConfig2ToJSON(cacheConfig2: CacheConfig2): string {
  return JSON.stringify(CacheConfig2$outboundSchema.parse(cacheConfig2));
}

export function cacheConfig2FromJSON(
  jsonString: string,
): SafeParseResult<CacheConfig2, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CacheConfig2$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CacheConfig2' from JSON`,
  );
}

/** @internal */
export const CacheConfigType$inboundSchema: z.ZodNativeEnum<
  typeof CacheConfigType
> = z.nativeEnum(CacheConfigType);

/** @internal */
export const CacheConfigType$outboundSchema: z.ZodNativeEnum<
  typeof CacheConfigType
> = CacheConfigType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CacheConfigType$ {
  /** @deprecated use `CacheConfigType$inboundSchema` instead. */
  export const inboundSchema = CacheConfigType$inboundSchema;
  /** @deprecated use `CacheConfigType$outboundSchema` instead. */
  export const outboundSchema = CacheConfigType$outboundSchema;
}

/** @internal */
export const CacheConfig1$inboundSchema: z.ZodType<
  CacheConfig1,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: CacheConfigType$inboundSchema,
  ttl: z.number().default(0),
});

/** @internal */
export type CacheConfig1$Outbound = {
  type: string;
  ttl: number;
};

/** @internal */
export const CacheConfig1$outboundSchema: z.ZodType<
  CacheConfig1$Outbound,
  z.ZodTypeDef,
  CacheConfig1
> = z.object({
  type: CacheConfigType$outboundSchema,
  ttl: z.number().default(0),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CacheConfig1$ {
  /** @deprecated use `CacheConfig1$inboundSchema` instead. */
  export const inboundSchema = CacheConfig1$inboundSchema;
  /** @deprecated use `CacheConfig1$outboundSchema` instead. */
  export const outboundSchema = CacheConfig1$outboundSchema;
  /** @deprecated use `CacheConfig1$Outbound` instead. */
  export type Outbound = CacheConfig1$Outbound;
}

export function cacheConfig1ToJSON(cacheConfig1: CacheConfig1): string {
  return JSON.stringify(CacheConfig1$outboundSchema.parse(cacheConfig1));
}

export function cacheConfig1FromJSON(
  jsonString: string,
): SafeParseResult<CacheConfig1, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CacheConfig1$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CacheConfig1' from JSON`,
  );
}

/** @internal */
export const CacheConfig$inboundSchema: z.ZodType<
  CacheConfig,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => CacheConfig1$inboundSchema),
  z.lazy(() => CacheConfig2$inboundSchema),
]);

/** @internal */
export type CacheConfig$Outbound =
  | CacheConfig1$Outbound
  | CacheConfig2$Outbound;

/** @internal */
export const CacheConfig$outboundSchema: z.ZodType<
  CacheConfig$Outbound,
  z.ZodTypeDef,
  CacheConfig
> = z.union([
  z.lazy(() => CacheConfig1$outboundSchema),
  z.lazy(() => CacheConfig2$outboundSchema),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CacheConfig$ {
  /** @deprecated use `CacheConfig$inboundSchema` instead. */
  export const inboundSchema = CacheConfig$inboundSchema;
  /** @deprecated use `CacheConfig$outboundSchema` instead. */
  export const outboundSchema = CacheConfig$outboundSchema;
  /** @deprecated use `CacheConfig$Outbound` instead. */
  export type Outbound = CacheConfig$Outbound;
}

export function cacheConfigToJSON(cacheConfig: CacheConfig): string {
  return JSON.stringify(CacheConfig$outboundSchema.parse(cacheConfig));
}

export function cacheConfigFromJSON(
  jsonString: string,
): SafeParseResult<CacheConfig, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CacheConfig$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CacheConfig' from JSON`,
  );
}

/** @internal */
export const CacheStatus$inboundSchema: z.ZodNativeEnum<typeof CacheStatus> = z
  .nativeEnum(CacheStatus);

/** @internal */
export const CacheStatus$outboundSchema: z.ZodNativeEnum<typeof CacheStatus> =
  CacheStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CacheStatus$ {
  /** @deprecated use `CacheStatus$inboundSchema` instead. */
  export const inboundSchema = CacheStatus$inboundSchema;
  /** @deprecated use `CacheStatus$outboundSchema` instead. */
  export const outboundSchema = CacheStatus$outboundSchema;
}

/** @internal */
export const GetV2LogsIdResponseBodyData$inboundSchema: z.ZodType<
  GetV2LogsIdResponseBodyData,
  z.ZodTypeDef,
  unknown
> = z.object({
  deployment_id: z.string(),
  deployment_key: z.string(),
  deployment_variant_version: z.string(),
  deployment_variant_position: z.number(),
  deployment_variant_id: z.string(),
  is_default_matched: z.boolean(),
  choices: z.array(z.lazy(() => ResponseBodyChoices$inboundSchema)).optional(),
  integration_ids: z.array(z.string()).optional(),
  action: ResponseBodyAction$inboundSchema,
  prompt_config: z.lazy(() => ResponseBodyPromptConfig$inboundSchema),
  variables: z.array(z.lazy(() => Variables$inboundSchema)),
  performance: z.lazy(() => ResponseBodyPerformance$inboundSchema).optional(),
  usage: z.lazy(() => ResponseBodyUsage$inboundSchema).optional(),
  billing: z.lazy(() => Billing$inboundSchema).optional(),
  retries: z.array(z.lazy(() => Retries$inboundSchema)),
  provider_response: z.any().optional(),
  retrievals: z.array(z.lazy(() => ResponseBodyRetrievals$inboundSchema))
    .optional(),
  knowledge_bases: z.array(z.lazy(() => KnowledgeBases$inboundSchema))
    .optional(),
  tools: z.array(z.lazy(() => ResponseBodyTools$inboundSchema)).optional(),
  metadata: z.lazy(() => ResponseBodyMetadata$inboundSchema).optional(),
  settings: z.lazy(() => Settings$inboundSchema).optional(),
  processing_attempts: z.array(z.lazy(() => ProcessingAttempts$inboundSchema))
    .optional(),
  prompt_snippets: z.array(z.lazy(() => PromptSnippets$inboundSchema)),
  files: z.array(z.lazy(() => ResponseBodyFiles$inboundSchema)).optional(),
  cache_key: z.string().optional(),
  cache_config: z.union([
    z.lazy(() => CacheConfig1$inboundSchema),
    z.lazy(() => CacheConfig2$inboundSchema),
  ]).optional(),
  is_caching_enabled: z.boolean().optional(),
  cache_status: CacheStatus$inboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    "deployment_id": "deploymentId",
    "deployment_key": "deploymentKey",
    "deployment_variant_version": "deploymentVariantVersion",
    "deployment_variant_position": "deploymentVariantPosition",
    "deployment_variant_id": "deploymentVariantId",
    "is_default_matched": "isDefaultMatched",
    "integration_ids": "integrationIds",
    "prompt_config": "promptConfig",
    "provider_response": "providerResponse",
    "knowledge_bases": "knowledgeBases",
    "processing_attempts": "processingAttempts",
    "prompt_snippets": "promptSnippets",
    "cache_key": "cacheKey",
    "cache_config": "cacheConfig",
    "is_caching_enabled": "isCachingEnabled",
    "cache_status": "cacheStatus",
  });
});

/** @internal */
export type GetV2LogsIdResponseBodyData$Outbound = {
  deployment_id: string;
  deployment_key: string;
  deployment_variant_version: string;
  deployment_variant_position: number;
  deployment_variant_id: string;
  is_default_matched: boolean;
  choices?: Array<ResponseBodyChoices$Outbound> | undefined;
  integration_ids?: Array<string> | undefined;
  action: string;
  prompt_config: ResponseBodyPromptConfig$Outbound;
  variables: Array<Variables$Outbound>;
  performance?: ResponseBodyPerformance$Outbound | undefined;
  usage?: ResponseBodyUsage$Outbound | undefined;
  billing?: Billing$Outbound | undefined;
  retries: Array<Retries$Outbound>;
  provider_response?: any | undefined;
  retrievals?: Array<ResponseBodyRetrievals$Outbound> | undefined;
  knowledge_bases?: Array<KnowledgeBases$Outbound> | undefined;
  tools?: Array<ResponseBodyTools$Outbound> | undefined;
  metadata?: ResponseBodyMetadata$Outbound | undefined;
  settings?: Settings$Outbound | undefined;
  processing_attempts?: Array<ProcessingAttempts$Outbound> | undefined;
  prompt_snippets: Array<PromptSnippets$Outbound>;
  files?: Array<ResponseBodyFiles$Outbound> | undefined;
  cache_key?: string | undefined;
  cache_config?: CacheConfig1$Outbound | CacheConfig2$Outbound | undefined;
  is_caching_enabled?: boolean | undefined;
  cache_status?: string | undefined;
};

/** @internal */
export const GetV2LogsIdResponseBodyData$outboundSchema: z.ZodType<
  GetV2LogsIdResponseBodyData$Outbound,
  z.ZodTypeDef,
  GetV2LogsIdResponseBodyData
> = z.object({
  deploymentId: z.string(),
  deploymentKey: z.string(),
  deploymentVariantVersion: z.string(),
  deploymentVariantPosition: z.number(),
  deploymentVariantId: z.string(),
  isDefaultMatched: z.boolean(),
  choices: z.array(z.lazy(() => ResponseBodyChoices$outboundSchema)).optional(),
  integrationIds: z.array(z.string()).optional(),
  action: ResponseBodyAction$outboundSchema,
  promptConfig: z.lazy(() => ResponseBodyPromptConfig$outboundSchema),
  variables: z.array(z.lazy(() => Variables$outboundSchema)),
  performance: z.lazy(() => ResponseBodyPerformance$outboundSchema).optional(),
  usage: z.lazy(() => ResponseBodyUsage$outboundSchema).optional(),
  billing: z.lazy(() => Billing$outboundSchema).optional(),
  retries: z.array(z.lazy(() => Retries$outboundSchema)),
  providerResponse: z.any().optional(),
  retrievals: z.array(z.lazy(() => ResponseBodyRetrievals$outboundSchema))
    .optional(),
  knowledgeBases: z.array(z.lazy(() => KnowledgeBases$outboundSchema))
    .optional(),
  tools: z.array(z.lazy(() => ResponseBodyTools$outboundSchema)).optional(),
  metadata: z.lazy(() => ResponseBodyMetadata$outboundSchema).optional(),
  settings: z.lazy(() => Settings$outboundSchema).optional(),
  processingAttempts: z.array(z.lazy(() => ProcessingAttempts$outboundSchema))
    .optional(),
  promptSnippets: z.array(z.lazy(() => PromptSnippets$outboundSchema)),
  files: z.array(z.lazy(() => ResponseBodyFiles$outboundSchema)).optional(),
  cacheKey: z.string().optional(),
  cacheConfig: z.union([
    z.lazy(() => CacheConfig1$outboundSchema),
    z.lazy(() => CacheConfig2$outboundSchema),
  ]).optional(),
  isCachingEnabled: z.boolean().optional(),
  cacheStatus: CacheStatus$outboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    deploymentId: "deployment_id",
    deploymentKey: "deployment_key",
    deploymentVariantVersion: "deployment_variant_version",
    deploymentVariantPosition: "deployment_variant_position",
    deploymentVariantId: "deployment_variant_id",
    isDefaultMatched: "is_default_matched",
    integrationIds: "integration_ids",
    promptConfig: "prompt_config",
    providerResponse: "provider_response",
    knowledgeBases: "knowledge_bases",
    processingAttempts: "processing_attempts",
    promptSnippets: "prompt_snippets",
    cacheKey: "cache_key",
    cacheConfig: "cache_config",
    isCachingEnabled: "is_caching_enabled",
    cacheStatus: "cache_status",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdResponseBodyData$ {
  /** @deprecated use `GetV2LogsIdResponseBodyData$inboundSchema` instead. */
  export const inboundSchema = GetV2LogsIdResponseBodyData$inboundSchema;
  /** @deprecated use `GetV2LogsIdResponseBodyData$outboundSchema` instead. */
  export const outboundSchema = GetV2LogsIdResponseBodyData$outboundSchema;
  /** @deprecated use `GetV2LogsIdResponseBodyData$Outbound` instead. */
  export type Outbound = GetV2LogsIdResponseBodyData$Outbound;
}

export function getV2LogsIdResponseBodyDataToJSON(
  getV2LogsIdResponseBodyData: GetV2LogsIdResponseBodyData,
): string {
  return JSON.stringify(
    GetV2LogsIdResponseBodyData$outboundSchema.parse(
      getV2LogsIdResponseBodyData,
    ),
  );
}

export function getV2LogsIdResponseBodyDataFromJSON(
  jsonString: string,
): SafeParseResult<GetV2LogsIdResponseBodyData, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetV2LogsIdResponseBodyData$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetV2LogsIdResponseBodyData' from JSON`,
  );
}

/** @internal */
export const ResponseBody2$inboundSchema: z.ZodType<
  ResponseBody2,
  z.ZodTypeDef,
  unknown
> = z.object({
  _id: z.string(),
  workspace_id: z.string(),
  workflow_metadata: z.record(z.any()).optional(),
  workflow_input: z.record(z.any()).optional(),
  workflow_output: z.record(z.any()).optional(),
  project_id: z.string().optional(),
  request_properties: z.lazy(() => ResponseBodyRequestProperties$inboundSchema)
    .optional(),
  started_at: z.string().datetime({ offset: true }).transform(v => new Date(v)),
  finished_at: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
  evals: z.array(
    z.union([
      z.lazy(() => GetV2LogsIdEvals1$inboundSchema),
      z.lazy(() => GetV2LogsIdEvals2$inboundSchema),
      z.lazy(() => GetV2LogsIdEvals3$inboundSchema),
      z.lazy(() => GetV2LogsIdEvals4$inboundSchema),
      z.lazy(() => GetV2LogsIdEvals5$inboundSchema),
      z.lazy(() => GetV2LogsIdEvals6$inboundSchema),
      z.lazy(() => GetV2LogsIdEvals7$inboundSchema),
    ]),
  ),
  product_type: ResponseBodyProductType$inboundSchema,
  related_entities: z.array(
    z.union([
      z.lazy(() => GetV2LogsIdRelatedEntities1$inboundSchema),
      z.lazy(() => GetV2LogsIdRelatedEntities2$inboundSchema),
      z.lazy(() => GetV2LogsIdRelatedEntities3$inboundSchema),
      z.lazy(() => RelatedEntities4$inboundSchema),
      z.lazy(() => RelatedEntities5$inboundSchema),
      z.lazy(() => RelatedEntities6$inboundSchema),
      z.lazy(() => RelatedEntities7$inboundSchema),
    ]),
  ),
  data: z.lazy(() => GetV2LogsIdResponseBodyData$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "_id": "id",
    "workspace_id": "workspaceId",
    "workflow_metadata": "workflowMetadata",
    "workflow_input": "workflowInput",
    "workflow_output": "workflowOutput",
    "project_id": "projectId",
    "request_properties": "requestProperties",
    "started_at": "startedAt",
    "finished_at": "finishedAt",
    "product_type": "productType",
    "related_entities": "relatedEntities",
  });
});

/** @internal */
export type ResponseBody2$Outbound = {
  _id: string;
  workspace_id: string;
  workflow_metadata?: { [k: string]: any } | undefined;
  workflow_input?: { [k: string]: any } | undefined;
  workflow_output?: { [k: string]: any } | undefined;
  project_id?: string | undefined;
  request_properties?: ResponseBodyRequestProperties$Outbound | undefined;
  started_at: string;
  finished_at?: string | undefined;
  evals: Array<
    | GetV2LogsIdEvals1$Outbound
    | GetV2LogsIdEvals2$Outbound
    | GetV2LogsIdEvals3$Outbound
    | GetV2LogsIdEvals4$Outbound
    | GetV2LogsIdEvals5$Outbound
    | GetV2LogsIdEvals6$Outbound
    | GetV2LogsIdEvals7$Outbound
  >;
  product_type: string;
  related_entities: Array<
    | GetV2LogsIdRelatedEntities1$Outbound
    | GetV2LogsIdRelatedEntities2$Outbound
    | GetV2LogsIdRelatedEntities3$Outbound
    | RelatedEntities4$Outbound
    | RelatedEntities5$Outbound
    | RelatedEntities6$Outbound
    | RelatedEntities7$Outbound
  >;
  data: GetV2LogsIdResponseBodyData$Outbound;
};

/** @internal */
export const ResponseBody2$outboundSchema: z.ZodType<
  ResponseBody2$Outbound,
  z.ZodTypeDef,
  ResponseBody2
> = z.object({
  id: z.string(),
  workspaceId: z.string(),
  workflowMetadata: z.record(z.any()).optional(),
  workflowInput: z.record(z.any()).optional(),
  workflowOutput: z.record(z.any()).optional(),
  projectId: z.string().optional(),
  requestProperties: z.lazy(() => ResponseBodyRequestProperties$outboundSchema)
    .optional(),
  startedAt: z.date().transform(v => v.toISOString()),
  finishedAt: z.date().transform(v => v.toISOString()).optional(),
  evals: z.array(
    z.union([
      z.lazy(() => GetV2LogsIdEvals1$outboundSchema),
      z.lazy(() => GetV2LogsIdEvals2$outboundSchema),
      z.lazy(() => GetV2LogsIdEvals3$outboundSchema),
      z.lazy(() => GetV2LogsIdEvals4$outboundSchema),
      z.lazy(() => GetV2LogsIdEvals5$outboundSchema),
      z.lazy(() => GetV2LogsIdEvals6$outboundSchema),
      z.lazy(() => GetV2LogsIdEvals7$outboundSchema),
    ]),
  ),
  productType: ResponseBodyProductType$outboundSchema,
  relatedEntities: z.array(
    z.union([
      z.lazy(() => GetV2LogsIdRelatedEntities1$outboundSchema),
      z.lazy(() => GetV2LogsIdRelatedEntities2$outboundSchema),
      z.lazy(() => GetV2LogsIdRelatedEntities3$outboundSchema),
      z.lazy(() => RelatedEntities4$outboundSchema),
      z.lazy(() => RelatedEntities5$outboundSchema),
      z.lazy(() => RelatedEntities6$outboundSchema),
      z.lazy(() => RelatedEntities7$outboundSchema),
    ]),
  ),
  data: z.lazy(() => GetV2LogsIdResponseBodyData$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    id: "_id",
    workspaceId: "workspace_id",
    workflowMetadata: "workflow_metadata",
    workflowInput: "workflow_input",
    workflowOutput: "workflow_output",
    projectId: "project_id",
    requestProperties: "request_properties",
    startedAt: "started_at",
    finishedAt: "finished_at",
    productType: "product_type",
    relatedEntities: "related_entities",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ResponseBody2$ {
  /** @deprecated use `ResponseBody2$inboundSchema` instead. */
  export const inboundSchema = ResponseBody2$inboundSchema;
  /** @deprecated use `ResponseBody2$outboundSchema` instead. */
  export const outboundSchema = ResponseBody2$outboundSchema;
  /** @deprecated use `ResponseBody2$Outbound` instead. */
  export type Outbound = ResponseBody2$Outbound;
}

export function responseBody2ToJSON(responseBody2: ResponseBody2): string {
  return JSON.stringify(ResponseBody2$outboundSchema.parse(responseBody2));
}

export function responseBody2FromJSON(
  jsonString: string,
): SafeParseResult<ResponseBody2, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ResponseBody2$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ResponseBody2' from JSON`,
  );
}

/** @internal */
export const RequestProperties$inboundSchema: z.ZodType<
  RequestProperties,
  z.ZodTypeDef,
  unknown
> = z.object({
  source: z.string().optional(),
  location: z.string().optional(),
  latitude: z.string().optional(),
  longitude: z.string().optional(),
  response_time: z.number().optional(),
  metadata: z.record(z.any()).optional(),
  status: z.number().optional(),
  context: z.record(z.any()).optional(),
  extra_params: z.record(z.any()).optional(),
}).transform((v) => {
  return remap$(v, {
    "response_time": "responseTime",
    "extra_params": "extraParams",
  });
});

/** @internal */
export type RequestProperties$Outbound = {
  source?: string | undefined;
  location?: string | undefined;
  latitude?: string | undefined;
  longitude?: string | undefined;
  response_time?: number | undefined;
  metadata?: { [k: string]: any } | undefined;
  status?: number | undefined;
  context?: { [k: string]: any } | undefined;
  extra_params?: { [k: string]: any } | undefined;
};

/** @internal */
export const RequestProperties$outboundSchema: z.ZodType<
  RequestProperties$Outbound,
  z.ZodTypeDef,
  RequestProperties
> = z.object({
  source: z.string().optional(),
  location: z.string().optional(),
  latitude: z.string().optional(),
  longitude: z.string().optional(),
  responseTime: z.number().optional(),
  metadata: z.record(z.any()).optional(),
  status: z.number().optional(),
  context: z.record(z.any()).optional(),
  extraParams: z.record(z.any()).optional(),
}).transform((v) => {
  return remap$(v, {
    responseTime: "response_time",
    extraParams: "extra_params",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RequestProperties$ {
  /** @deprecated use `RequestProperties$inboundSchema` instead. */
  export const inboundSchema = RequestProperties$inboundSchema;
  /** @deprecated use `RequestProperties$outboundSchema` instead. */
  export const outboundSchema = RequestProperties$outboundSchema;
  /** @deprecated use `RequestProperties$Outbound` instead. */
  export type Outbound = RequestProperties$Outbound;
}

export function requestPropertiesToJSON(
  requestProperties: RequestProperties,
): string {
  return JSON.stringify(
    RequestProperties$outboundSchema.parse(requestProperties),
  );
}

export function requestPropertiesFromJSON(
  jsonString: string,
): SafeParseResult<RequestProperties, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => RequestProperties$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RequestProperties' from JSON`,
  );
}

/** @internal */
export const GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody1Type$inboundSchema:
  z.ZodNativeEnum<
    typeof GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody1Type
  > = z.nativeEnum(GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody1Type);

/** @internal */
export const GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody1Type$outboundSchema:
  z.ZodNativeEnum<
    typeof GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody1Type
  > = GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody1Type$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody1Type$ {
  /** @deprecated use `GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody1Type$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody1Type$inboundSchema;
  /** @deprecated use `GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody1Type$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody1Type$outboundSchema;
}

/** @internal */
export const EvalsRequestProperties$inboundSchema: z.ZodType<
  EvalsRequestProperties,
  z.ZodTypeDef,
  unknown
> = z.object({
  source: z.string().optional(),
  location: z.string().optional(),
  latitude: z.string().optional(),
  longitude: z.string().optional(),
  response_time: z.number().optional(),
  metadata: z.record(z.any()).optional(),
  status: z.number().optional(),
  context: z.record(z.any()).optional(),
  extra_params: z.record(z.any()).optional(),
}).transform((v) => {
  return remap$(v, {
    "response_time": "responseTime",
    "extra_params": "extraParams",
  });
});

/** @internal */
export type EvalsRequestProperties$Outbound = {
  source?: string | undefined;
  location?: string | undefined;
  latitude?: string | undefined;
  longitude?: string | undefined;
  response_time?: number | undefined;
  metadata?: { [k: string]: any } | undefined;
  status?: number | undefined;
  context?: { [k: string]: any } | undefined;
  extra_params?: { [k: string]: any } | undefined;
};

/** @internal */
export const EvalsRequestProperties$outboundSchema: z.ZodType<
  EvalsRequestProperties$Outbound,
  z.ZodTypeDef,
  EvalsRequestProperties
> = z.object({
  source: z.string().optional(),
  location: z.string().optional(),
  latitude: z.string().optional(),
  longitude: z.string().optional(),
  responseTime: z.number().optional(),
  metadata: z.record(z.any()).optional(),
  status: z.number().optional(),
  context: z.record(z.any()).optional(),
  extraParams: z.record(z.any()).optional(),
}).transform((v) => {
  return remap$(v, {
    responseTime: "response_time",
    extraParams: "extra_params",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EvalsRequestProperties$ {
  /** @deprecated use `EvalsRequestProperties$inboundSchema` instead. */
  export const inboundSchema = EvalsRequestProperties$inboundSchema;
  /** @deprecated use `EvalsRequestProperties$outboundSchema` instead. */
  export const outboundSchema = EvalsRequestProperties$outboundSchema;
  /** @deprecated use `EvalsRequestProperties$Outbound` instead. */
  export type Outbound = EvalsRequestProperties$Outbound;
}

export function evalsRequestPropertiesToJSON(
  evalsRequestProperties: EvalsRequestProperties,
): string {
  return JSON.stringify(
    EvalsRequestProperties$outboundSchema.parse(evalsRequestProperties),
  );
}

export function evalsRequestPropertiesFromJSON(
  jsonString: string,
): SafeParseResult<EvalsRequestProperties, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => EvalsRequestProperties$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'EvalsRequestProperties' from JSON`,
  );
}

/** @internal */
export const EvalsProductType$inboundSchema: z.ZodNativeEnum<
  typeof EvalsProductType
> = z.nativeEnum(EvalsProductType);

/** @internal */
export const EvalsProductType$outboundSchema: z.ZodNativeEnum<
  typeof EvalsProductType
> = EvalsProductType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EvalsProductType$ {
  /** @deprecated use `EvalsProductType$inboundSchema` instead. */
  export const inboundSchema = EvalsProductType$inboundSchema;
  /** @deprecated use `EvalsProductType$outboundSchema` instead. */
  export const outboundSchema = EvalsProductType$outboundSchema;
}

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals7WorkflowRunType$inboundSchema:
  z.ZodNativeEnum<
    typeof GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals7WorkflowRunType
  > = z.nativeEnum(
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals7WorkflowRunType,
  );

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals7WorkflowRunType$outboundSchema:
  z.ZodNativeEnum<
    typeof GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals7WorkflowRunType
  > =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals7WorkflowRunType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals7WorkflowRunType$ {
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals7WorkflowRunType$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals7WorkflowRunType$inboundSchema;
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals7WorkflowRunType$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals7WorkflowRunType$outboundSchema;
}

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals71$inboundSchema:
  z.ZodType<
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals71,
    z.ZodTypeDef,
    unknown
  > = z.object({
    type:
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals7WorkflowRunType$inboundSchema,
    evaluator_id: z.string(),
  }).transform((v) => {
    return remap$(v, {
      "evaluator_id": "evaluatorId",
    });
  });

/** @internal */
export type GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals71$Outbound =
  {
    type: string;
    evaluator_id: string;
  };

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals71$outboundSchema:
  z.ZodType<
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals71$Outbound,
    z.ZodTypeDef,
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals71
  > = z.object({
    type:
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals7WorkflowRunType$outboundSchema,
    evaluatorId: z.string(),
  }).transform((v) => {
    return remap$(v, {
      evaluatorId: "evaluator_id",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals71$ {
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals71$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals71$inboundSchema;
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals71$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals71$outboundSchema;
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals71$Outbound` instead. */
  export type Outbound =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals71$Outbound;
}

export function getV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals71ToJSON(
  getV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals71:
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals71,
): string {
  return JSON.stringify(
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals71$outboundSchema
      .parse(
        getV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals71,
      ),
  );
}

export function getV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals71FromJSON(
  jsonString: string,
): SafeParseResult<
  GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals71,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals71$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals71' from JSON`,
  );
}

/** @internal */
export const GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody17RelatedEntities$inboundSchema:
  z.ZodType<
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody17RelatedEntities,
    z.ZodTypeDef,
    unknown
  > = z.lazy(() =>
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals71$inboundSchema
  );

/** @internal */
export type GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody17RelatedEntities$Outbound =
  GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals71$Outbound;

/** @internal */
export const GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody17RelatedEntities$outboundSchema:
  z.ZodType<
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody17RelatedEntities$Outbound,
    z.ZodTypeDef,
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody17RelatedEntities
  > = z.lazy(() =>
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals71$outboundSchema
  );

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody17RelatedEntities$ {
  /** @deprecated use `GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody17RelatedEntities$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody17RelatedEntities$inboundSchema;
  /** @deprecated use `GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody17RelatedEntities$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody17RelatedEntities$outboundSchema;
  /** @deprecated use `GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody17RelatedEntities$Outbound` instead. */
  export type Outbound =
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody17RelatedEntities$Outbound;
}

export function getV2LogsIdEvalsResponse200ApplicationJSONResponseBody17RelatedEntitiesToJSON(
  getV2LogsIdEvalsResponse200ApplicationJSONResponseBody17RelatedEntities:
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody17RelatedEntities,
): string {
  return JSON.stringify(
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody17RelatedEntities$outboundSchema
      .parse(
        getV2LogsIdEvalsResponse200ApplicationJSONResponseBody17RelatedEntities,
      ),
  );
}

export function getV2LogsIdEvalsResponse200ApplicationJSONResponseBody17RelatedEntitiesFromJSON(
  jsonString: string,
): SafeParseResult<
  GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody17RelatedEntities,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody17RelatedEntities$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody17RelatedEntities' from JSON`,
  );
}

/** @internal */
export const GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody1Evals7WorkflowRun4Type$inboundSchema:
  z.ZodNativeEnum<
    typeof GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody1Evals7WorkflowRun4Type
  > = z.nativeEnum(
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody1Evals7WorkflowRun4Type,
  );

/** @internal */
export const GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody1Evals7WorkflowRun4Type$outboundSchema:
  z.ZodNativeEnum<
    typeof GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody1Evals7WorkflowRun4Type
  > =
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody1Evals7WorkflowRun4Type$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody1Evals7WorkflowRun4Type$ {
  /** @deprecated use `GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody1Evals7WorkflowRun4Type$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody1Evals7WorkflowRun4Type$inboundSchema;
  /** @deprecated use `GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody1Evals7WorkflowRun4Type$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody1Evals7WorkflowRun4Type$outboundSchema;
}

/** @internal */
export const GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody1Evals7Status$inboundSchema:
  z.ZodNativeEnum<
    typeof GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody1Evals7Status
  > = z.nativeEnum(
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody1Evals7Status,
  );

/** @internal */
export const GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody1Evals7Status$outboundSchema:
  z.ZodNativeEnum<
    typeof GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody1Evals7Status
  > =
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody1Evals7Status$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody1Evals7Status$ {
  /** @deprecated use `GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody1Evals7Status$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody1Evals7Status$inboundSchema;
  /** @deprecated use `GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody1Evals7Status$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody1Evals7Status$outboundSchema;
}

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals7WorkflowRunEvals44Type$inboundSchema:
  z.ZodNativeEnum<
    typeof GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals7WorkflowRunEvals44Type
  > = z.nativeEnum(
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals7WorkflowRunEvals44Type,
  );

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals7WorkflowRunEvals44Type$outboundSchema:
  z.ZodNativeEnum<
    typeof GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals7WorkflowRunEvals44Type
  > =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals7WorkflowRunEvals44Type$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals7WorkflowRunEvals44Type$ {
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals7WorkflowRunEvals44Type$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals7WorkflowRunEvals44Type$inboundSchema;
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals7WorkflowRunEvals44Type$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals7WorkflowRunEvals44Type$outboundSchema;
}

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals7WorkflowRunEvals4$inboundSchema:
  z.ZodType<
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals7WorkflowRunEvals4,
    z.ZodTypeDef,
    unknown
  > = z.object({
    type:
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals7WorkflowRunEvals44Type$inboundSchema,
    evaluator_id: z.string(),
  }).transform((v) => {
    return remap$(v, {
      "evaluator_id": "evaluatorId",
    });
  });

/** @internal */
export type GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals7WorkflowRunEvals4$Outbound =
  {
    type: string;
    evaluator_id: string;
  };

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals7WorkflowRunEvals4$outboundSchema:
  z.ZodType<
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals7WorkflowRunEvals4$Outbound,
    z.ZodTypeDef,
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals7WorkflowRunEvals4
  > = z.object({
    type:
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals7WorkflowRunEvals44Type$outboundSchema,
    evaluatorId: z.string(),
  }).transform((v) => {
    return remap$(v, {
      evaluatorId: "evaluator_id",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals7WorkflowRunEvals4$ {
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals7WorkflowRunEvals4$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals7WorkflowRunEvals4$inboundSchema;
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals7WorkflowRunEvals4$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals7WorkflowRunEvals4$outboundSchema;
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals7WorkflowRunEvals4$Outbound` instead. */
  export type Outbound =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals7WorkflowRunEvals4$Outbound;
}

export function getV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals7WorkflowRunEvals4ToJSON(
  getV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals7WorkflowRunEvals4:
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals7WorkflowRunEvals4,
): string {
  return JSON.stringify(
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals7WorkflowRunEvals4$outboundSchema
      .parse(
        getV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals7WorkflowRunEvals4,
      ),
  );
}

export function getV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals7WorkflowRunEvals4FromJSON(
  jsonString: string,
): SafeParseResult<
  GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals7WorkflowRunEvals4,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals7WorkflowRunEvals4$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals7WorkflowRunEvals4' from JSON`,
  );
}

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals7WorkflowRunEvals43Type$inboundSchema:
  z.ZodNativeEnum<
    typeof GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals7WorkflowRunEvals43Type
  > = z.nativeEnum(
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals7WorkflowRunEvals43Type,
  );

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals7WorkflowRunEvals43Type$outboundSchema:
  z.ZodNativeEnum<
    typeof GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals7WorkflowRunEvals43Type
  > =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals7WorkflowRunEvals43Type$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals7WorkflowRunEvals43Type$ {
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals7WorkflowRunEvals43Type$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals7WorkflowRunEvals43Type$inboundSchema;
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals7WorkflowRunEvals43Type$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals7WorkflowRunEvals43Type$outboundSchema;
}

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals7WorkflowRunEvals3$inboundSchema:
  z.ZodType<
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals7WorkflowRunEvals3,
    z.ZodTypeDef,
    unknown
  > = z.object({
    type:
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals7WorkflowRunEvals43Type$inboundSchema,
    human_eval_id: z.string(),
  }).transform((v) => {
    return remap$(v, {
      "human_eval_id": "humanEvalId",
    });
  });

/** @internal */
export type GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals7WorkflowRunEvals3$Outbound =
  {
    type: string;
    human_eval_id: string;
  };

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals7WorkflowRunEvals3$outboundSchema:
  z.ZodType<
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals7WorkflowRunEvals3$Outbound,
    z.ZodTypeDef,
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals7WorkflowRunEvals3
  > = z.object({
    type:
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals7WorkflowRunEvals43Type$outboundSchema,
    humanEvalId: z.string(),
  }).transform((v) => {
    return remap$(v, {
      humanEvalId: "human_eval_id",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals7WorkflowRunEvals3$ {
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals7WorkflowRunEvals3$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals7WorkflowRunEvals3$inboundSchema;
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals7WorkflowRunEvals3$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals7WorkflowRunEvals3$outboundSchema;
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals7WorkflowRunEvals3$Outbound` instead. */
  export type Outbound =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals7WorkflowRunEvals3$Outbound;
}

export function getV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals7WorkflowRunEvals3ToJSON(
  getV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals7WorkflowRunEvals3:
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals7WorkflowRunEvals3,
): string {
  return JSON.stringify(
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals7WorkflowRunEvals3$outboundSchema
      .parse(
        getV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals7WorkflowRunEvals3,
      ),
  );
}

export function getV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals7WorkflowRunEvals3FromJSON(
  jsonString: string,
): SafeParseResult<
  GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals7WorkflowRunEvals3,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals7WorkflowRunEvals3$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals7WorkflowRunEvals3' from JSON`,
  );
}

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals7WorkflowRunEvals42Type$inboundSchema:
  z.ZodNativeEnum<
    typeof GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals7WorkflowRunEvals42Type
  > = z.nativeEnum(
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals7WorkflowRunEvals42Type,
  );

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals7WorkflowRunEvals42Type$outboundSchema:
  z.ZodNativeEnum<
    typeof GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals7WorkflowRunEvals42Type
  > =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals7WorkflowRunEvals42Type$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals7WorkflowRunEvals42Type$ {
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals7WorkflowRunEvals42Type$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals7WorkflowRunEvals42Type$inboundSchema;
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals7WorkflowRunEvals42Type$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals7WorkflowRunEvals42Type$outboundSchema;
}

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals7WorkflowRunEvals2$inboundSchema:
  z.ZodType<
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals7WorkflowRunEvals2,
    z.ZodTypeDef,
    unknown
  > = z.object({
    type:
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals7WorkflowRunEvals42Type$inboundSchema,
    contact_id: z.string(),
  }).transform((v) => {
    return remap$(v, {
      "contact_id": "contactId",
    });
  });

/** @internal */
export type GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals7WorkflowRunEvals2$Outbound =
  {
    type: string;
    contact_id: string;
  };

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals7WorkflowRunEvals2$outboundSchema:
  z.ZodType<
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals7WorkflowRunEvals2$Outbound,
    z.ZodTypeDef,
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals7WorkflowRunEvals2
  > = z.object({
    type:
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals7WorkflowRunEvals42Type$outboundSchema,
    contactId: z.string(),
  }).transform((v) => {
    return remap$(v, {
      contactId: "contact_id",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals7WorkflowRunEvals2$ {
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals7WorkflowRunEvals2$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals7WorkflowRunEvals2$inboundSchema;
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals7WorkflowRunEvals2$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals7WorkflowRunEvals2$outboundSchema;
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals7WorkflowRunEvals2$Outbound` instead. */
  export type Outbound =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals7WorkflowRunEvals2$Outbound;
}

export function getV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals7WorkflowRunEvals2ToJSON(
  getV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals7WorkflowRunEvals2:
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals7WorkflowRunEvals2,
): string {
  return JSON.stringify(
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals7WorkflowRunEvals2$outboundSchema
      .parse(
        getV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals7WorkflowRunEvals2,
      ),
  );
}

export function getV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals7WorkflowRunEvals2FromJSON(
  jsonString: string,
): SafeParseResult<
  GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals7WorkflowRunEvals2,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals7WorkflowRunEvals2$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals7WorkflowRunEvals2' from JSON`,
  );
}

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals7WorkflowRunEvals4Type$inboundSchema:
  z.ZodNativeEnum<
    typeof GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals7WorkflowRunEvals4Type
  > = z.nativeEnum(
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals7WorkflowRunEvals4Type,
  );

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals7WorkflowRunEvals4Type$outboundSchema:
  z.ZodNativeEnum<
    typeof GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals7WorkflowRunEvals4Type
  > =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals7WorkflowRunEvals4Type$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals7WorkflowRunEvals4Type$ {
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals7WorkflowRunEvals4Type$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals7WorkflowRunEvals4Type$inboundSchema;
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals7WorkflowRunEvals4Type$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals7WorkflowRunEvals4Type$outboundSchema;
}

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals7WorkflowRunEvals41$inboundSchema:
  z.ZodType<
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals7WorkflowRunEvals41,
    z.ZodTypeDef,
    unknown
  > = z.object({
    type:
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals7WorkflowRunEvals4Type$inboundSchema,
    account_id: z.string(),
  }).transform((v) => {
    return remap$(v, {
      "account_id": "accountId",
    });
  });

/** @internal */
export type GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals7WorkflowRunEvals41$Outbound =
  {
    type: string;
    account_id: string;
  };

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals7WorkflowRunEvals41$outboundSchema:
  z.ZodType<
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals7WorkflowRunEvals41$Outbound,
    z.ZodTypeDef,
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals7WorkflowRunEvals41
  > = z.object({
    type:
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals7WorkflowRunEvals4Type$outboundSchema,
    accountId: z.string(),
  }).transform((v) => {
    return remap$(v, {
      accountId: "account_id",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals7WorkflowRunEvals41$ {
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals7WorkflowRunEvals41$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals7WorkflowRunEvals41$inboundSchema;
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals7WorkflowRunEvals41$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals7WorkflowRunEvals41$outboundSchema;
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals7WorkflowRunEvals41$Outbound` instead. */
  export type Outbound =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals7WorkflowRunEvals41$Outbound;
}

export function getV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals7WorkflowRunEvals41ToJSON(
  getV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals7WorkflowRunEvals41:
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals7WorkflowRunEvals41,
): string {
  return JSON.stringify(
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals7WorkflowRunEvals41$outboundSchema
      .parse(
        getV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals7WorkflowRunEvals41,
      ),
  );
}

export function getV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals7WorkflowRunEvals41FromJSON(
  jsonString: string,
): SafeParseResult<
  GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals7WorkflowRunEvals41,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals7WorkflowRunEvals41$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals7WorkflowRunEvals41' from JSON`,
  );
}

/** @internal */
export const GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody1Evals7WorkflowRun4RelatedEntities$inboundSchema:
  z.ZodType<
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody1Evals7WorkflowRun4RelatedEntities,
    z.ZodTypeDef,
    unknown
  > = z.union([
    z.lazy(() =>
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals7WorkflowRunEvals41$inboundSchema
    ),
    z.lazy(() =>
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals7WorkflowRunEvals2$inboundSchema
    ),
    z.lazy(() =>
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals7WorkflowRunEvals3$inboundSchema
    ),
    z.lazy(() =>
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals7WorkflowRunEvals4$inboundSchema
    ),
  ]);

/** @internal */
export type GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody1Evals7WorkflowRun4RelatedEntities$Outbound =
  | GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals7WorkflowRunEvals41$Outbound
  | GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals7WorkflowRunEvals2$Outbound
  | GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals7WorkflowRunEvals3$Outbound
  | GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals7WorkflowRunEvals4$Outbound;

/** @internal */
export const GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody1Evals7WorkflowRun4RelatedEntities$outboundSchema:
  z.ZodType<
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody1Evals7WorkflowRun4RelatedEntities$Outbound,
    z.ZodTypeDef,
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody1Evals7WorkflowRun4RelatedEntities
  > = z.union([
    z.lazy(() =>
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals7WorkflowRunEvals41$outboundSchema
    ),
    z.lazy(() =>
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals7WorkflowRunEvals2$outboundSchema
    ),
    z.lazy(() =>
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals7WorkflowRunEvals3$outboundSchema
    ),
    z.lazy(() =>
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals7WorkflowRunEvals4$outboundSchema
    ),
  ]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody1Evals7WorkflowRun4RelatedEntities$ {
  /** @deprecated use `GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody1Evals7WorkflowRun4RelatedEntities$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody1Evals7WorkflowRun4RelatedEntities$inboundSchema;
  /** @deprecated use `GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody1Evals7WorkflowRun4RelatedEntities$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody1Evals7WorkflowRun4RelatedEntities$outboundSchema;
  /** @deprecated use `GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody1Evals7WorkflowRun4RelatedEntities$Outbound` instead. */
  export type Outbound =
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody1Evals7WorkflowRun4RelatedEntities$Outbound;
}

export function getV2LogsIdEvalsResponse200ApplicationJSONResponseBody1Evals7WorkflowRun4RelatedEntitiesToJSON(
  getV2LogsIdEvalsResponse200ApplicationJSONResponseBody1Evals7WorkflowRun4RelatedEntities:
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody1Evals7WorkflowRun4RelatedEntities,
): string {
  return JSON.stringify(
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody1Evals7WorkflowRun4RelatedEntities$outboundSchema
      .parse(
        getV2LogsIdEvalsResponse200ApplicationJSONResponseBody1Evals7WorkflowRun4RelatedEntities,
      ),
  );
}

export function getV2LogsIdEvalsResponse200ApplicationJSONResponseBody1Evals7WorkflowRun4RelatedEntitiesFromJSON(
  jsonString: string,
): SafeParseResult<
  GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody1Evals7WorkflowRun4RelatedEntities,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody1Evals7WorkflowRun4RelatedEntities$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody1Evals7WorkflowRun4RelatedEntities' from JSON`,
  );
}

/** @internal */
export const GetV2LogsIdEvalsResponse200ApplicationJson4$inboundSchema:
  z.ZodType<
    GetV2LogsIdEvalsResponse200ApplicationJson4,
    z.ZodTypeDef,
    unknown
  > = z.object({
    type:
      GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody1Evals7WorkflowRun4Type$inboundSchema,
    values: z.array(z.string()),
    id: z.string(),
    status:
      GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody1Evals7Status$inboundSchema,
    timestamp: z.string().datetime({ offset: true }).transform(v =>
      new Date(v)
    ),
    related_entities: z.array(
      z.union([
        z.lazy(() =>
          GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals7WorkflowRunEvals41$inboundSchema
        ),
        z.lazy(() =>
          GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals7WorkflowRunEvals2$inboundSchema
        ),
        z.lazy(() =>
          GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals7WorkflowRunEvals3$inboundSchema
        ),
        z.lazy(() =>
          GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals7WorkflowRunEvals4$inboundSchema
        ),
      ]),
    ),
  }).transform((v) => {
    return remap$(v, {
      "related_entities": "relatedEntities",
    });
  });

/** @internal */
export type GetV2LogsIdEvalsResponse200ApplicationJson4$Outbound = {
  type: string;
  values: Array<string>;
  id: string;
  status: string;
  timestamp: string;
  related_entities: Array<
    | GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals7WorkflowRunEvals41$Outbound
    | GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals7WorkflowRunEvals2$Outbound
    | GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals7WorkflowRunEvals3$Outbound
    | GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals7WorkflowRunEvals4$Outbound
  >;
};

/** @internal */
export const GetV2LogsIdEvalsResponse200ApplicationJson4$outboundSchema:
  z.ZodType<
    GetV2LogsIdEvalsResponse200ApplicationJson4$Outbound,
    z.ZodTypeDef,
    GetV2LogsIdEvalsResponse200ApplicationJson4
  > = z.object({
    type:
      GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody1Evals7WorkflowRun4Type$outboundSchema,
    values: z.array(z.string()),
    id: z.string(),
    status:
      GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody1Evals7Status$outboundSchema,
    timestamp: z.date().transform(v => v.toISOString()),
    relatedEntities: z.array(
      z.union([
        z.lazy(() =>
          GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals7WorkflowRunEvals41$outboundSchema
        ),
        z.lazy(() =>
          GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals7WorkflowRunEvals2$outboundSchema
        ),
        z.lazy(() =>
          GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals7WorkflowRunEvals3$outboundSchema
        ),
        z.lazy(() =>
          GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals7WorkflowRunEvals4$outboundSchema
        ),
      ]),
    ),
  }).transform((v) => {
    return remap$(v, {
      relatedEntities: "related_entities",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdEvalsResponse200ApplicationJson4$ {
  /** @deprecated use `GetV2LogsIdEvalsResponse200ApplicationJson4$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsIdEvalsResponse200ApplicationJson4$inboundSchema;
  /** @deprecated use `GetV2LogsIdEvalsResponse200ApplicationJson4$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdEvalsResponse200ApplicationJson4$outboundSchema;
  /** @deprecated use `GetV2LogsIdEvalsResponse200ApplicationJson4$Outbound` instead. */
  export type Outbound = GetV2LogsIdEvalsResponse200ApplicationJson4$Outbound;
}

export function getV2LogsIdEvalsResponse200ApplicationJson4ToJSON(
  getV2LogsIdEvalsResponse200ApplicationJson4:
    GetV2LogsIdEvalsResponse200ApplicationJson4,
): string {
  return JSON.stringify(
    GetV2LogsIdEvalsResponse200ApplicationJson4$outboundSchema.parse(
      getV2LogsIdEvalsResponse200ApplicationJson4,
    ),
  );
}

export function getV2LogsIdEvalsResponse200ApplicationJson4FromJSON(
  jsonString: string,
): SafeParseResult<
  GetV2LogsIdEvalsResponse200ApplicationJson4,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetV2LogsIdEvalsResponse200ApplicationJson4$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'GetV2LogsIdEvalsResponse200ApplicationJson4' from JSON`,
  );
}

/** @internal */
export const GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody1Evals7WorkflowRunType$inboundSchema:
  z.ZodNativeEnum<
    typeof GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody1Evals7WorkflowRunType
  > = z.nativeEnum(
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody1Evals7WorkflowRunType,
  );

/** @internal */
export const GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody1Evals7WorkflowRunType$outboundSchema:
  z.ZodNativeEnum<
    typeof GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody1Evals7WorkflowRunType
  > =
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody1Evals7WorkflowRunType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody1Evals7WorkflowRunType$ {
  /** @deprecated use `GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody1Evals7WorkflowRunType$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody1Evals7WorkflowRunType$inboundSchema;
  /** @deprecated use `GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody1Evals7WorkflowRunType$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody1Evals7WorkflowRunType$outboundSchema;
}

/** @internal */
export const GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody1EvalsStatus$inboundSchema:
  z.ZodNativeEnum<
    typeof GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody1EvalsStatus
  > = z.nativeEnum(
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody1EvalsStatus,
  );

/** @internal */
export const GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody1EvalsStatus$outboundSchema:
  z.ZodNativeEnum<
    typeof GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody1EvalsStatus
  > =
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody1EvalsStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody1EvalsStatus$ {
  /** @deprecated use `GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody1EvalsStatus$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody1EvalsStatus$inboundSchema;
  /** @deprecated use `GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody1EvalsStatus$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody1EvalsStatus$outboundSchema;
}

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals7WorkflowRunEvals34Type$inboundSchema:
  z.ZodNativeEnum<
    typeof GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals7WorkflowRunEvals34Type
  > = z.nativeEnum(
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals7WorkflowRunEvals34Type,
  );

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals7WorkflowRunEvals34Type$outboundSchema:
  z.ZodNativeEnum<
    typeof GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals7WorkflowRunEvals34Type
  > =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals7WorkflowRunEvals34Type$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals7WorkflowRunEvals34Type$ {
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals7WorkflowRunEvals34Type$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals7WorkflowRunEvals34Type$inboundSchema;
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals7WorkflowRunEvals34Type$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals7WorkflowRunEvals34Type$outboundSchema;
}

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals7WorkflowRun4$inboundSchema:
  z.ZodType<
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals7WorkflowRun4,
    z.ZodTypeDef,
    unknown
  > = z.object({
    type:
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals7WorkflowRunEvals34Type$inboundSchema,
    evaluator_id: z.string(),
  }).transform((v) => {
    return remap$(v, {
      "evaluator_id": "evaluatorId",
    });
  });

/** @internal */
export type GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals7WorkflowRun4$Outbound =
  {
    type: string;
    evaluator_id: string;
  };

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals7WorkflowRun4$outboundSchema:
  z.ZodType<
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals7WorkflowRun4$Outbound,
    z.ZodTypeDef,
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals7WorkflowRun4
  > = z.object({
    type:
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals7WorkflowRunEvals34Type$outboundSchema,
    evaluatorId: z.string(),
  }).transform((v) => {
    return remap$(v, {
      evaluatorId: "evaluator_id",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals7WorkflowRun4$ {
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals7WorkflowRun4$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals7WorkflowRun4$inboundSchema;
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals7WorkflowRun4$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals7WorkflowRun4$outboundSchema;
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals7WorkflowRun4$Outbound` instead. */
  export type Outbound =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals7WorkflowRun4$Outbound;
}

export function getV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals7WorkflowRun4ToJSON(
  getV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals7WorkflowRun4:
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals7WorkflowRun4,
): string {
  return JSON.stringify(
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals7WorkflowRun4$outboundSchema
      .parse(
        getV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals7WorkflowRun4,
      ),
  );
}

export function getV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals7WorkflowRun4FromJSON(
  jsonString: string,
): SafeParseResult<
  GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals7WorkflowRun4,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals7WorkflowRun4$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals7WorkflowRun4' from JSON`,
  );
}

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals7WorkflowRunEvals33Type$inboundSchema:
  z.ZodNativeEnum<
    typeof GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals7WorkflowRunEvals33Type
  > = z.nativeEnum(
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals7WorkflowRunEvals33Type,
  );

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals7WorkflowRunEvals33Type$outboundSchema:
  z.ZodNativeEnum<
    typeof GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals7WorkflowRunEvals33Type
  > =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals7WorkflowRunEvals33Type$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals7WorkflowRunEvals33Type$ {
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals7WorkflowRunEvals33Type$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals7WorkflowRunEvals33Type$inboundSchema;
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals7WorkflowRunEvals33Type$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals7WorkflowRunEvals33Type$outboundSchema;
}

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals7WorkflowRun3$inboundSchema:
  z.ZodType<
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals7WorkflowRun3,
    z.ZodTypeDef,
    unknown
  > = z.object({
    type:
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals7WorkflowRunEvals33Type$inboundSchema,
    human_eval_id: z.string(),
  }).transform((v) => {
    return remap$(v, {
      "human_eval_id": "humanEvalId",
    });
  });

/** @internal */
export type GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals7WorkflowRun3$Outbound =
  {
    type: string;
    human_eval_id: string;
  };

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals7WorkflowRun3$outboundSchema:
  z.ZodType<
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals7WorkflowRun3$Outbound,
    z.ZodTypeDef,
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals7WorkflowRun3
  > = z.object({
    type:
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals7WorkflowRunEvals33Type$outboundSchema,
    humanEvalId: z.string(),
  }).transform((v) => {
    return remap$(v, {
      humanEvalId: "human_eval_id",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals7WorkflowRun3$ {
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals7WorkflowRun3$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals7WorkflowRun3$inboundSchema;
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals7WorkflowRun3$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals7WorkflowRun3$outboundSchema;
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals7WorkflowRun3$Outbound` instead. */
  export type Outbound =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals7WorkflowRun3$Outbound;
}

export function getV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals7WorkflowRun3ToJSON(
  getV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals7WorkflowRun3:
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals7WorkflowRun3,
): string {
  return JSON.stringify(
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals7WorkflowRun3$outboundSchema
      .parse(
        getV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals7WorkflowRun3,
      ),
  );
}

export function getV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals7WorkflowRun3FromJSON(
  jsonString: string,
): SafeParseResult<
  GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals7WorkflowRun3,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals7WorkflowRun3$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals7WorkflowRun3' from JSON`,
  );
}

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals7WorkflowRunEvals32Type$inboundSchema:
  z.ZodNativeEnum<
    typeof GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals7WorkflowRunEvals32Type
  > = z.nativeEnum(
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals7WorkflowRunEvals32Type,
  );

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals7WorkflowRunEvals32Type$outboundSchema:
  z.ZodNativeEnum<
    typeof GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals7WorkflowRunEvals32Type
  > =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals7WorkflowRunEvals32Type$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals7WorkflowRunEvals32Type$ {
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals7WorkflowRunEvals32Type$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals7WorkflowRunEvals32Type$inboundSchema;
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals7WorkflowRunEvals32Type$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals7WorkflowRunEvals32Type$outboundSchema;
}

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals7WorkflowRun2$inboundSchema:
  z.ZodType<
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals7WorkflowRun2,
    z.ZodTypeDef,
    unknown
  > = z.object({
    type:
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals7WorkflowRunEvals32Type$inboundSchema,
    contact_id: z.string(),
  }).transform((v) => {
    return remap$(v, {
      "contact_id": "contactId",
    });
  });

/** @internal */
export type GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals7WorkflowRun2$Outbound =
  {
    type: string;
    contact_id: string;
  };

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals7WorkflowRun2$outboundSchema:
  z.ZodType<
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals7WorkflowRun2$Outbound,
    z.ZodTypeDef,
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals7WorkflowRun2
  > = z.object({
    type:
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals7WorkflowRunEvals32Type$outboundSchema,
    contactId: z.string(),
  }).transform((v) => {
    return remap$(v, {
      contactId: "contact_id",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals7WorkflowRun2$ {
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals7WorkflowRun2$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals7WorkflowRun2$inboundSchema;
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals7WorkflowRun2$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals7WorkflowRun2$outboundSchema;
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals7WorkflowRun2$Outbound` instead. */
  export type Outbound =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals7WorkflowRun2$Outbound;
}

export function getV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals7WorkflowRun2ToJSON(
  getV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals7WorkflowRun2:
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals7WorkflowRun2,
): string {
  return JSON.stringify(
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals7WorkflowRun2$outboundSchema
      .parse(
        getV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals7WorkflowRun2,
      ),
  );
}

export function getV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals7WorkflowRun2FromJSON(
  jsonString: string,
): SafeParseResult<
  GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals7WorkflowRun2,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals7WorkflowRun2$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals7WorkflowRun2' from JSON`,
  );
}

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals7WorkflowRunEvals3Type$inboundSchema:
  z.ZodNativeEnum<
    typeof GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals7WorkflowRunEvals3Type
  > = z.nativeEnum(
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals7WorkflowRunEvals3Type,
  );

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals7WorkflowRunEvals3Type$outboundSchema:
  z.ZodNativeEnum<
    typeof GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals7WorkflowRunEvals3Type
  > =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals7WorkflowRunEvals3Type$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals7WorkflowRunEvals3Type$ {
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals7WorkflowRunEvals3Type$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals7WorkflowRunEvals3Type$inboundSchema;
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals7WorkflowRunEvals3Type$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals7WorkflowRunEvals3Type$outboundSchema;
}

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals7WorkflowRunEvals1$inboundSchema:
  z.ZodType<
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals7WorkflowRunEvals1,
    z.ZodTypeDef,
    unknown
  > = z.object({
    type:
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals7WorkflowRunEvals3Type$inboundSchema,
    account_id: z.string(),
  }).transform((v) => {
    return remap$(v, {
      "account_id": "accountId",
    });
  });

/** @internal */
export type GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals7WorkflowRunEvals1$Outbound =
  {
    type: string;
    account_id: string;
  };

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals7WorkflowRunEvals1$outboundSchema:
  z.ZodType<
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals7WorkflowRunEvals1$Outbound,
    z.ZodTypeDef,
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals7WorkflowRunEvals1
  > = z.object({
    type:
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals7WorkflowRunEvals3Type$outboundSchema,
    accountId: z.string(),
  }).transform((v) => {
    return remap$(v, {
      accountId: "account_id",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals7WorkflowRunEvals1$ {
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals7WorkflowRunEvals1$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals7WorkflowRunEvals1$inboundSchema;
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals7WorkflowRunEvals1$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals7WorkflowRunEvals1$outboundSchema;
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals7WorkflowRunEvals1$Outbound` instead. */
  export type Outbound =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals7WorkflowRunEvals1$Outbound;
}

export function getV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals7WorkflowRunEvals1ToJSON(
  getV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals7WorkflowRunEvals1:
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals7WorkflowRunEvals1,
): string {
  return JSON.stringify(
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals7WorkflowRunEvals1$outboundSchema
      .parse(
        getV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals7WorkflowRunEvals1,
      ),
  );
}

export function getV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals7WorkflowRunEvals1FromJSON(
  jsonString: string,
): SafeParseResult<
  GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals7WorkflowRunEvals1,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals7WorkflowRunEvals1$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals7WorkflowRunEvals1' from JSON`,
  );
}

/** @internal */
export const GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody1Evals7WorkflowRunRelatedEntities$inboundSchema:
  z.ZodType<
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody1Evals7WorkflowRunRelatedEntities,
    z.ZodTypeDef,
    unknown
  > = z.union([
    z.lazy(() =>
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals7WorkflowRunEvals1$inboundSchema
    ),
    z.lazy(() =>
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals7WorkflowRun2$inboundSchema
    ),
    z.lazy(() =>
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals7WorkflowRun3$inboundSchema
    ),
    z.lazy(() =>
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals7WorkflowRun4$inboundSchema
    ),
  ]);

/** @internal */
export type GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody1Evals7WorkflowRunRelatedEntities$Outbound =
  | GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals7WorkflowRunEvals1$Outbound
  | GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals7WorkflowRun2$Outbound
  | GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals7WorkflowRun3$Outbound
  | GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals7WorkflowRun4$Outbound;

/** @internal */
export const GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody1Evals7WorkflowRunRelatedEntities$outboundSchema:
  z.ZodType<
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody1Evals7WorkflowRunRelatedEntities$Outbound,
    z.ZodTypeDef,
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody1Evals7WorkflowRunRelatedEntities
  > = z.union([
    z.lazy(() =>
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals7WorkflowRunEvals1$outboundSchema
    ),
    z.lazy(() =>
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals7WorkflowRun2$outboundSchema
    ),
    z.lazy(() =>
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals7WorkflowRun3$outboundSchema
    ),
    z.lazy(() =>
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals7WorkflowRun4$outboundSchema
    ),
  ]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody1Evals7WorkflowRunRelatedEntities$ {
  /** @deprecated use `GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody1Evals7WorkflowRunRelatedEntities$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody1Evals7WorkflowRunRelatedEntities$inboundSchema;
  /** @deprecated use `GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody1Evals7WorkflowRunRelatedEntities$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody1Evals7WorkflowRunRelatedEntities$outboundSchema;
  /** @deprecated use `GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody1Evals7WorkflowRunRelatedEntities$Outbound` instead. */
  export type Outbound =
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody1Evals7WorkflowRunRelatedEntities$Outbound;
}

export function getV2LogsIdEvalsResponse200ApplicationJSONResponseBody1Evals7WorkflowRunRelatedEntitiesToJSON(
  getV2LogsIdEvalsResponse200ApplicationJSONResponseBody1Evals7WorkflowRunRelatedEntities:
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody1Evals7WorkflowRunRelatedEntities,
): string {
  return JSON.stringify(
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody1Evals7WorkflowRunRelatedEntities$outboundSchema
      .parse(
        getV2LogsIdEvalsResponse200ApplicationJSONResponseBody1Evals7WorkflowRunRelatedEntities,
      ),
  );
}

export function getV2LogsIdEvalsResponse200ApplicationJSONResponseBody1Evals7WorkflowRunRelatedEntitiesFromJSON(
  jsonString: string,
): SafeParseResult<
  GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody1Evals7WorkflowRunRelatedEntities,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody1Evals7WorkflowRunRelatedEntities$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody1Evals7WorkflowRunRelatedEntities' from JSON`,
  );
}

/** @internal */
export const GetV2LogsIdEvalsResponse200ApplicationJson3$inboundSchema:
  z.ZodType<
    GetV2LogsIdEvalsResponse200ApplicationJson3,
    z.ZodTypeDef,
    unknown
  > = z.object({
    type:
      GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody1Evals7WorkflowRunType$inboundSchema,
    value: z.boolean(),
    id: z.string(),
    status:
      GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody1EvalsStatus$inboundSchema,
    timestamp: z.string().datetime({ offset: true }).transform(v =>
      new Date(v)
    ),
    related_entities: z.array(
      z.union([
        z.lazy(() =>
          GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals7WorkflowRunEvals1$inboundSchema
        ),
        z.lazy(() =>
          GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals7WorkflowRun2$inboundSchema
        ),
        z.lazy(() =>
          GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals7WorkflowRun3$inboundSchema
        ),
        z.lazy(() =>
          GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals7WorkflowRun4$inboundSchema
        ),
      ]),
    ),
  }).transform((v) => {
    return remap$(v, {
      "related_entities": "relatedEntities",
    });
  });

/** @internal */
export type GetV2LogsIdEvalsResponse200ApplicationJson3$Outbound = {
  type: string;
  value: boolean;
  id: string;
  status: string;
  timestamp: string;
  related_entities: Array<
    | GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals7WorkflowRunEvals1$Outbound
    | GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals7WorkflowRun2$Outbound
    | GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals7WorkflowRun3$Outbound
    | GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals7WorkflowRun4$Outbound
  >;
};

/** @internal */
export const GetV2LogsIdEvalsResponse200ApplicationJson3$outboundSchema:
  z.ZodType<
    GetV2LogsIdEvalsResponse200ApplicationJson3$Outbound,
    z.ZodTypeDef,
    GetV2LogsIdEvalsResponse200ApplicationJson3
  > = z.object({
    type:
      GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody1Evals7WorkflowRunType$outboundSchema,
    value: z.boolean(),
    id: z.string(),
    status:
      GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody1EvalsStatus$outboundSchema,
    timestamp: z.date().transform(v => v.toISOString()),
    relatedEntities: z.array(
      z.union([
        z.lazy(() =>
          GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals7WorkflowRunEvals1$outboundSchema
        ),
        z.lazy(() =>
          GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals7WorkflowRun2$outboundSchema
        ),
        z.lazy(() =>
          GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals7WorkflowRun3$outboundSchema
        ),
        z.lazy(() =>
          GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals7WorkflowRun4$outboundSchema
        ),
      ]),
    ),
  }).transform((v) => {
    return remap$(v, {
      relatedEntities: "related_entities",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdEvalsResponse200ApplicationJson3$ {
  /** @deprecated use `GetV2LogsIdEvalsResponse200ApplicationJson3$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsIdEvalsResponse200ApplicationJson3$inboundSchema;
  /** @deprecated use `GetV2LogsIdEvalsResponse200ApplicationJson3$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdEvalsResponse200ApplicationJson3$outboundSchema;
  /** @deprecated use `GetV2LogsIdEvalsResponse200ApplicationJson3$Outbound` instead. */
  export type Outbound = GetV2LogsIdEvalsResponse200ApplicationJson3$Outbound;
}

export function getV2LogsIdEvalsResponse200ApplicationJson3ToJSON(
  getV2LogsIdEvalsResponse200ApplicationJson3:
    GetV2LogsIdEvalsResponse200ApplicationJson3,
): string {
  return JSON.stringify(
    GetV2LogsIdEvalsResponse200ApplicationJson3$outboundSchema.parse(
      getV2LogsIdEvalsResponse200ApplicationJson3,
    ),
  );
}

export function getV2LogsIdEvalsResponse200ApplicationJson3FromJSON(
  jsonString: string,
): SafeParseResult<
  GetV2LogsIdEvalsResponse200ApplicationJson3,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetV2LogsIdEvalsResponse200ApplicationJson3$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'GetV2LogsIdEvalsResponse200ApplicationJson3' from JSON`,
  );
}

/** @internal */
export const GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody1Evals7Type$inboundSchema:
  z.ZodNativeEnum<
    typeof GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody1Evals7Type
  > = z.nativeEnum(
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody1Evals7Type,
  );

/** @internal */
export const GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody1Evals7Type$outboundSchema:
  z.ZodNativeEnum<
    typeof GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody1Evals7Type
  > =
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody1Evals7Type$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody1Evals7Type$ {
  /** @deprecated use `GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody1Evals7Type$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody1Evals7Type$inboundSchema;
  /** @deprecated use `GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody1Evals7Type$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody1Evals7Type$outboundSchema;
}

/** @internal */
export const GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody1Status$inboundSchema:
  z.ZodNativeEnum<
    typeof GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody1Status
  > = z.nativeEnum(
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody1Status,
  );

/** @internal */
export const GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody1Status$outboundSchema:
  z.ZodNativeEnum<
    typeof GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody1Status
  > =
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody1Status$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody1Status$ {
  /** @deprecated use `GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody1Status$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody1Status$inboundSchema;
  /** @deprecated use `GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody1Status$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody1Status$outboundSchema;
}

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals7WorkflowRunEvals24Type$inboundSchema:
  z.ZodNativeEnum<
    typeof GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals7WorkflowRunEvals24Type
  > = z.nativeEnum(
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals7WorkflowRunEvals24Type,
  );

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals7WorkflowRunEvals24Type$outboundSchema:
  z.ZodNativeEnum<
    typeof GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals7WorkflowRunEvals24Type
  > =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals7WorkflowRunEvals24Type$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals7WorkflowRunEvals24Type$ {
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals7WorkflowRunEvals24Type$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals7WorkflowRunEvals24Type$inboundSchema;
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals7WorkflowRunEvals24Type$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals7WorkflowRunEvals24Type$outboundSchema;
}

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals74$inboundSchema:
  z.ZodType<
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals74,
    z.ZodTypeDef,
    unknown
  > = z.object({
    type:
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals7WorkflowRunEvals24Type$inboundSchema,
    evaluator_id: z.string(),
  }).transform((v) => {
    return remap$(v, {
      "evaluator_id": "evaluatorId",
    });
  });

/** @internal */
export type GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals74$Outbound =
  {
    type: string;
    evaluator_id: string;
  };

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals74$outboundSchema:
  z.ZodType<
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals74$Outbound,
    z.ZodTypeDef,
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals74
  > = z.object({
    type:
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals7WorkflowRunEvals24Type$outboundSchema,
    evaluatorId: z.string(),
  }).transform((v) => {
    return remap$(v, {
      evaluatorId: "evaluator_id",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals74$ {
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals74$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals74$inboundSchema;
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals74$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals74$outboundSchema;
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals74$Outbound` instead. */
  export type Outbound =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals74$Outbound;
}

export function getV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals74ToJSON(
  getV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals74:
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals74,
): string {
  return JSON.stringify(
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals74$outboundSchema
      .parse(
        getV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals74,
      ),
  );
}

export function getV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals74FromJSON(
  jsonString: string,
): SafeParseResult<
  GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals74,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals74$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals74' from JSON`,
  );
}

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals7WorkflowRunEvals23Type$inboundSchema:
  z.ZodNativeEnum<
    typeof GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals7WorkflowRunEvals23Type
  > = z.nativeEnum(
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals7WorkflowRunEvals23Type,
  );

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals7WorkflowRunEvals23Type$outboundSchema:
  z.ZodNativeEnum<
    typeof GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals7WorkflowRunEvals23Type
  > =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals7WorkflowRunEvals23Type$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals7WorkflowRunEvals23Type$ {
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals7WorkflowRunEvals23Type$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals7WorkflowRunEvals23Type$inboundSchema;
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals7WorkflowRunEvals23Type$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals7WorkflowRunEvals23Type$outboundSchema;
}

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals73$inboundSchema:
  z.ZodType<
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals73,
    z.ZodTypeDef,
    unknown
  > = z.object({
    type:
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals7WorkflowRunEvals23Type$inboundSchema,
    human_eval_id: z.string(),
  }).transform((v) => {
    return remap$(v, {
      "human_eval_id": "humanEvalId",
    });
  });

/** @internal */
export type GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals73$Outbound =
  {
    type: string;
    human_eval_id: string;
  };

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals73$outboundSchema:
  z.ZodType<
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals73$Outbound,
    z.ZodTypeDef,
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals73
  > = z.object({
    type:
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals7WorkflowRunEvals23Type$outboundSchema,
    humanEvalId: z.string(),
  }).transform((v) => {
    return remap$(v, {
      humanEvalId: "human_eval_id",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals73$ {
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals73$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals73$inboundSchema;
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals73$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals73$outboundSchema;
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals73$Outbound` instead. */
  export type Outbound =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals73$Outbound;
}

export function getV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals73ToJSON(
  getV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals73:
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals73,
): string {
  return JSON.stringify(
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals73$outboundSchema
      .parse(
        getV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals73,
      ),
  );
}

export function getV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals73FromJSON(
  jsonString: string,
): SafeParseResult<
  GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals73,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals73$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals73' from JSON`,
  );
}

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals7WorkflowRunEvals22Type$inboundSchema:
  z.ZodNativeEnum<
    typeof GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals7WorkflowRunEvals22Type
  > = z.nativeEnum(
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals7WorkflowRunEvals22Type,
  );

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals7WorkflowRunEvals22Type$outboundSchema:
  z.ZodNativeEnum<
    typeof GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals7WorkflowRunEvals22Type
  > =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals7WorkflowRunEvals22Type$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals7WorkflowRunEvals22Type$ {
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals7WorkflowRunEvals22Type$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals7WorkflowRunEvals22Type$inboundSchema;
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals7WorkflowRunEvals22Type$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals7WorkflowRunEvals22Type$outboundSchema;
}

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals72$inboundSchema:
  z.ZodType<
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals72,
    z.ZodTypeDef,
    unknown
  > = z.object({
    type:
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals7WorkflowRunEvals22Type$inboundSchema,
    contact_id: z.string(),
  }).transform((v) => {
    return remap$(v, {
      "contact_id": "contactId",
    });
  });

/** @internal */
export type GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals72$Outbound =
  {
    type: string;
    contact_id: string;
  };

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals72$outboundSchema:
  z.ZodType<
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals72$Outbound,
    z.ZodTypeDef,
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals72
  > = z.object({
    type:
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals7WorkflowRunEvals22Type$outboundSchema,
    contactId: z.string(),
  }).transform((v) => {
    return remap$(v, {
      contactId: "contact_id",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals72$ {
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals72$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals72$inboundSchema;
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals72$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals72$outboundSchema;
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals72$Outbound` instead. */
  export type Outbound =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals72$Outbound;
}

export function getV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals72ToJSON(
  getV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals72:
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals72,
): string {
  return JSON.stringify(
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals72$outboundSchema
      .parse(
        getV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals72,
      ),
  );
}

export function getV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals72FromJSON(
  jsonString: string,
): SafeParseResult<
  GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals72,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals72$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals72' from JSON`,
  );
}

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals7WorkflowRunEvals2Type$inboundSchema:
  z.ZodNativeEnum<
    typeof GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals7WorkflowRunEvals2Type
  > = z.nativeEnum(
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals7WorkflowRunEvals2Type,
  );

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals7WorkflowRunEvals2Type$outboundSchema:
  z.ZodNativeEnum<
    typeof GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals7WorkflowRunEvals2Type
  > =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals7WorkflowRunEvals2Type$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals7WorkflowRunEvals2Type$ {
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals7WorkflowRunEvals2Type$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals7WorkflowRunEvals2Type$inboundSchema;
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals7WorkflowRunEvals2Type$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals7WorkflowRunEvals2Type$outboundSchema;
}

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals7WorkflowRun1$inboundSchema:
  z.ZodType<
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals7WorkflowRun1,
    z.ZodTypeDef,
    unknown
  > = z.object({
    type:
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals7WorkflowRunEvals2Type$inboundSchema,
    account_id: z.string(),
  }).transform((v) => {
    return remap$(v, {
      "account_id": "accountId",
    });
  });

/** @internal */
export type GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals7WorkflowRun1$Outbound =
  {
    type: string;
    account_id: string;
  };

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals7WorkflowRun1$outboundSchema:
  z.ZodType<
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals7WorkflowRun1$Outbound,
    z.ZodTypeDef,
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals7WorkflowRun1
  > = z.object({
    type:
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals7WorkflowRunEvals2Type$outboundSchema,
    accountId: z.string(),
  }).transform((v) => {
    return remap$(v, {
      accountId: "account_id",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals7WorkflowRun1$ {
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals7WorkflowRun1$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals7WorkflowRun1$inboundSchema;
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals7WorkflowRun1$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals7WorkflowRun1$outboundSchema;
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals7WorkflowRun1$Outbound` instead. */
  export type Outbound =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals7WorkflowRun1$Outbound;
}

export function getV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals7WorkflowRun1ToJSON(
  getV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals7WorkflowRun1:
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals7WorkflowRun1,
): string {
  return JSON.stringify(
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals7WorkflowRun1$outboundSchema
      .parse(
        getV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals7WorkflowRun1,
      ),
  );
}

export function getV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals7WorkflowRun1FromJSON(
  jsonString: string,
): SafeParseResult<
  GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals7WorkflowRun1,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals7WorkflowRun1$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals7WorkflowRun1' from JSON`,
  );
}

/** @internal */
export const GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody1Evals7RelatedEntities$inboundSchema:
  z.ZodType<
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody1Evals7RelatedEntities,
    z.ZodTypeDef,
    unknown
  > = z.union([
    z.lazy(() =>
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals7WorkflowRun1$inboundSchema
    ),
    z.lazy(() =>
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals72$inboundSchema
    ),
    z.lazy(() =>
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals73$inboundSchema
    ),
    z.lazy(() =>
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals74$inboundSchema
    ),
  ]);

/** @internal */
export type GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody1Evals7RelatedEntities$Outbound =
  | GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals7WorkflowRun1$Outbound
  | GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals72$Outbound
  | GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals73$Outbound
  | GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals74$Outbound;

/** @internal */
export const GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody1Evals7RelatedEntities$outboundSchema:
  z.ZodType<
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody1Evals7RelatedEntities$Outbound,
    z.ZodTypeDef,
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody1Evals7RelatedEntities
  > = z.union([
    z.lazy(() =>
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals7WorkflowRun1$outboundSchema
    ),
    z.lazy(() =>
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals72$outboundSchema
    ),
    z.lazy(() =>
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals73$outboundSchema
    ),
    z.lazy(() =>
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals74$outboundSchema
    ),
  ]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody1Evals7RelatedEntities$ {
  /** @deprecated use `GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody1Evals7RelatedEntities$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody1Evals7RelatedEntities$inboundSchema;
  /** @deprecated use `GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody1Evals7RelatedEntities$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody1Evals7RelatedEntities$outboundSchema;
  /** @deprecated use `GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody1Evals7RelatedEntities$Outbound` instead. */
  export type Outbound =
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody1Evals7RelatedEntities$Outbound;
}

export function getV2LogsIdEvalsResponse200ApplicationJSONResponseBody1Evals7RelatedEntitiesToJSON(
  getV2LogsIdEvalsResponse200ApplicationJSONResponseBody1Evals7RelatedEntities:
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody1Evals7RelatedEntities,
): string {
  return JSON.stringify(
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody1Evals7RelatedEntities$outboundSchema
      .parse(
        getV2LogsIdEvalsResponse200ApplicationJSONResponseBody1Evals7RelatedEntities,
      ),
  );
}

export function getV2LogsIdEvalsResponse200ApplicationJSONResponseBody1Evals7RelatedEntitiesFromJSON(
  jsonString: string,
): SafeParseResult<
  GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody1Evals7RelatedEntities,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody1Evals7RelatedEntities$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody1Evals7RelatedEntities' from JSON`,
  );
}

/** @internal */
export const GetV2LogsIdEvalsResponse200ApplicationJson2$inboundSchema:
  z.ZodType<
    GetV2LogsIdEvalsResponse200ApplicationJson2,
    z.ZodTypeDef,
    unknown
  > = z.object({
    type:
      GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody1Evals7Type$inboundSchema,
    value: z.number(),
    id: z.string(),
    status:
      GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody1Status$inboundSchema,
    timestamp: z.string().datetime({ offset: true }).transform(v =>
      new Date(v)
    ),
    related_entities: z.array(
      z.union([
        z.lazy(() =>
          GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals7WorkflowRun1$inboundSchema
        ),
        z.lazy(() =>
          GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals72$inboundSchema
        ),
        z.lazy(() =>
          GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals73$inboundSchema
        ),
        z.lazy(() =>
          GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals74$inboundSchema
        ),
      ]),
    ),
  }).transform((v) => {
    return remap$(v, {
      "related_entities": "relatedEntities",
    });
  });

/** @internal */
export type GetV2LogsIdEvalsResponse200ApplicationJson2$Outbound = {
  type: string;
  value: number;
  id: string;
  status: string;
  timestamp: string;
  related_entities: Array<
    | GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals7WorkflowRun1$Outbound
    | GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals72$Outbound
    | GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals73$Outbound
    | GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals74$Outbound
  >;
};

/** @internal */
export const GetV2LogsIdEvalsResponse200ApplicationJson2$outboundSchema:
  z.ZodType<
    GetV2LogsIdEvalsResponse200ApplicationJson2$Outbound,
    z.ZodTypeDef,
    GetV2LogsIdEvalsResponse200ApplicationJson2
  > = z.object({
    type:
      GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody1Evals7Type$outboundSchema,
    value: z.number(),
    id: z.string(),
    status:
      GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody1Status$outboundSchema,
    timestamp: z.date().transform(v => v.toISOString()),
    relatedEntities: z.array(
      z.union([
        z.lazy(() =>
          GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals7WorkflowRun1$outboundSchema
        ),
        z.lazy(() =>
          GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals72$outboundSchema
        ),
        z.lazy(() =>
          GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals73$outboundSchema
        ),
        z.lazy(() =>
          GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals74$outboundSchema
        ),
      ]),
    ),
  }).transform((v) => {
    return remap$(v, {
      relatedEntities: "related_entities",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdEvalsResponse200ApplicationJson2$ {
  /** @deprecated use `GetV2LogsIdEvalsResponse200ApplicationJson2$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsIdEvalsResponse200ApplicationJson2$inboundSchema;
  /** @deprecated use `GetV2LogsIdEvalsResponse200ApplicationJson2$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdEvalsResponse200ApplicationJson2$outboundSchema;
  /** @deprecated use `GetV2LogsIdEvalsResponse200ApplicationJson2$Outbound` instead. */
  export type Outbound = GetV2LogsIdEvalsResponse200ApplicationJson2$Outbound;
}

export function getV2LogsIdEvalsResponse200ApplicationJson2ToJSON(
  getV2LogsIdEvalsResponse200ApplicationJson2:
    GetV2LogsIdEvalsResponse200ApplicationJson2,
): string {
  return JSON.stringify(
    GetV2LogsIdEvalsResponse200ApplicationJson2$outboundSchema.parse(
      getV2LogsIdEvalsResponse200ApplicationJson2,
    ),
  );
}

export function getV2LogsIdEvalsResponse200ApplicationJson2FromJSON(
  jsonString: string,
): SafeParseResult<
  GetV2LogsIdEvalsResponse200ApplicationJson2,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetV2LogsIdEvalsResponse200ApplicationJson2$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'GetV2LogsIdEvalsResponse200ApplicationJson2' from JSON`,
  );
}

/** @internal */
export const GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody1EvalsType$inboundSchema:
  z.ZodNativeEnum<
    typeof GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody1EvalsType
  > = z.nativeEnum(
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody1EvalsType,
  );

/** @internal */
export const GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody1EvalsType$outboundSchema:
  z.ZodNativeEnum<
    typeof GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody1EvalsType
  > =
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody1EvalsType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody1EvalsType$ {
  /** @deprecated use `GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody1EvalsType$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody1EvalsType$inboundSchema;
  /** @deprecated use `GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody1EvalsType$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody1EvalsType$outboundSchema;
}

/** @internal */
export const GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody1Evals7WorkflowRunStatus$inboundSchema:
  z.ZodNativeEnum<
    typeof GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody1Evals7WorkflowRunStatus
  > = z.nativeEnum(
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody1Evals7WorkflowRunStatus,
  );

/** @internal */
export const GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody1Evals7WorkflowRunStatus$outboundSchema:
  z.ZodNativeEnum<
    typeof GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody1Evals7WorkflowRunStatus
  > =
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody1Evals7WorkflowRunStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody1Evals7WorkflowRunStatus$ {
  /** @deprecated use `GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody1Evals7WorkflowRunStatus$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody1Evals7WorkflowRunStatus$inboundSchema;
  /** @deprecated use `GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody1Evals7WorkflowRunStatus$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody1Evals7WorkflowRunStatus$outboundSchema;
}

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals7WorkflowRunEvals14Type$inboundSchema:
  z.ZodNativeEnum<
    typeof GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals7WorkflowRunEvals14Type
  > = z.nativeEnum(
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals7WorkflowRunEvals14Type,
  );

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals7WorkflowRunEvals14Type$outboundSchema:
  z.ZodNativeEnum<
    typeof GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals7WorkflowRunEvals14Type
  > =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals7WorkflowRunEvals14Type$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals7WorkflowRunEvals14Type$ {
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals7WorkflowRunEvals14Type$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals7WorkflowRunEvals14Type$inboundSchema;
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals7WorkflowRunEvals14Type$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals7WorkflowRunEvals14Type$outboundSchema;
}

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals7WorkflowRunEvals14$inboundSchema:
  z.ZodType<
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals7WorkflowRunEvals14,
    z.ZodTypeDef,
    unknown
  > = z.object({
    type:
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals7WorkflowRunEvals14Type$inboundSchema,
    evaluator_id: z.string(),
  }).transform((v) => {
    return remap$(v, {
      "evaluator_id": "evaluatorId",
    });
  });

/** @internal */
export type GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals7WorkflowRunEvals14$Outbound =
  {
    type: string;
    evaluator_id: string;
  };

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals7WorkflowRunEvals14$outboundSchema:
  z.ZodType<
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals7WorkflowRunEvals14$Outbound,
    z.ZodTypeDef,
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals7WorkflowRunEvals14
  > = z.object({
    type:
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals7WorkflowRunEvals14Type$outboundSchema,
    evaluatorId: z.string(),
  }).transform((v) => {
    return remap$(v, {
      evaluatorId: "evaluator_id",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals7WorkflowRunEvals14$ {
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals7WorkflowRunEvals14$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals7WorkflowRunEvals14$inboundSchema;
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals7WorkflowRunEvals14$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals7WorkflowRunEvals14$outboundSchema;
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals7WorkflowRunEvals14$Outbound` instead. */
  export type Outbound =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals7WorkflowRunEvals14$Outbound;
}

export function getV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals7WorkflowRunEvals14ToJSON(
  getV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals7WorkflowRunEvals14:
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals7WorkflowRunEvals14,
): string {
  return JSON.stringify(
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals7WorkflowRunEvals14$outboundSchema
      .parse(
        getV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals7WorkflowRunEvals14,
      ),
  );
}

export function getV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals7WorkflowRunEvals14FromJSON(
  jsonString: string,
): SafeParseResult<
  GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals7WorkflowRunEvals14,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals7WorkflowRunEvals14$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals7WorkflowRunEvals14' from JSON`,
  );
}

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals7WorkflowRunEvals1Type$inboundSchema:
  z.ZodNativeEnum<
    typeof GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals7WorkflowRunEvals1Type
  > = z.nativeEnum(
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals7WorkflowRunEvals1Type,
  );

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals7WorkflowRunEvals1Type$outboundSchema:
  z.ZodNativeEnum<
    typeof GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals7WorkflowRunEvals1Type
  > =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals7WorkflowRunEvals1Type$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals7WorkflowRunEvals1Type$ {
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals7WorkflowRunEvals1Type$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals7WorkflowRunEvals1Type$inboundSchema;
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals7WorkflowRunEvals1Type$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals7WorkflowRunEvals1Type$outboundSchema;
}

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals7WorkflowRunEvals13$inboundSchema:
  z.ZodType<
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals7WorkflowRunEvals13,
    z.ZodTypeDef,
    unknown
  > = z.object({
    type:
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals7WorkflowRunEvals1Type$inboundSchema,
    human_eval_id: z.string(),
  }).transform((v) => {
    return remap$(v, {
      "human_eval_id": "humanEvalId",
    });
  });

/** @internal */
export type GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals7WorkflowRunEvals13$Outbound =
  {
    type: string;
    human_eval_id: string;
  };

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals7WorkflowRunEvals13$outboundSchema:
  z.ZodType<
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals7WorkflowRunEvals13$Outbound,
    z.ZodTypeDef,
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals7WorkflowRunEvals13
  > = z.object({
    type:
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals7WorkflowRunEvals1Type$outboundSchema,
    humanEvalId: z.string(),
  }).transform((v) => {
    return remap$(v, {
      humanEvalId: "human_eval_id",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals7WorkflowRunEvals13$ {
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals7WorkflowRunEvals13$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals7WorkflowRunEvals13$inboundSchema;
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals7WorkflowRunEvals13$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals7WorkflowRunEvals13$outboundSchema;
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals7WorkflowRunEvals13$Outbound` instead. */
  export type Outbound =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals7WorkflowRunEvals13$Outbound;
}

export function getV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals7WorkflowRunEvals13ToJSON(
  getV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals7WorkflowRunEvals13:
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals7WorkflowRunEvals13,
): string {
  return JSON.stringify(
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals7WorkflowRunEvals13$outboundSchema
      .parse(
        getV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals7WorkflowRunEvals13,
      ),
  );
}

export function getV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals7WorkflowRunEvals13FromJSON(
  jsonString: string,
): SafeParseResult<
  GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals7WorkflowRunEvals13,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals7WorkflowRunEvals13$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals7WorkflowRunEvals13' from JSON`,
  );
}

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals7WorkflowRunEvalsType$inboundSchema:
  z.ZodNativeEnum<
    typeof GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals7WorkflowRunEvalsType
  > = z.nativeEnum(
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals7WorkflowRunEvalsType,
  );

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals7WorkflowRunEvalsType$outboundSchema:
  z.ZodNativeEnum<
    typeof GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals7WorkflowRunEvalsType
  > =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals7WorkflowRunEvalsType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals7WorkflowRunEvalsType$ {
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals7WorkflowRunEvalsType$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals7WorkflowRunEvalsType$inboundSchema;
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals7WorkflowRunEvalsType$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals7WorkflowRunEvalsType$outboundSchema;
}

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals7WorkflowRunEvals12$inboundSchema:
  z.ZodType<
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals7WorkflowRunEvals12,
    z.ZodTypeDef,
    unknown
  > = z.object({
    type:
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals7WorkflowRunEvalsType$inboundSchema,
    contact_id: z.string(),
  }).transform((v) => {
    return remap$(v, {
      "contact_id": "contactId",
    });
  });

/** @internal */
export type GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals7WorkflowRunEvals12$Outbound =
  {
    type: string;
    contact_id: string;
  };

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals7WorkflowRunEvals12$outboundSchema:
  z.ZodType<
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals7WorkflowRunEvals12$Outbound,
    z.ZodTypeDef,
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals7WorkflowRunEvals12
  > = z.object({
    type:
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals7WorkflowRunEvalsType$outboundSchema,
    contactId: z.string(),
  }).transform((v) => {
    return remap$(v, {
      contactId: "contact_id",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals7WorkflowRunEvals12$ {
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals7WorkflowRunEvals12$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals7WorkflowRunEvals12$inboundSchema;
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals7WorkflowRunEvals12$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals7WorkflowRunEvals12$outboundSchema;
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals7WorkflowRunEvals12$Outbound` instead. */
  export type Outbound =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals7WorkflowRunEvals12$Outbound;
}

export function getV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals7WorkflowRunEvals12ToJSON(
  getV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals7WorkflowRunEvals12:
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals7WorkflowRunEvals12,
): string {
  return JSON.stringify(
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals7WorkflowRunEvals12$outboundSchema
      .parse(
        getV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals7WorkflowRunEvals12,
      ),
  );
}

export function getV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals7WorkflowRunEvals12FromJSON(
  jsonString: string,
): SafeParseResult<
  GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals7WorkflowRunEvals12,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals7WorkflowRunEvals12$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals7WorkflowRunEvals12' from JSON`,
  );
}

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals7WorkflowRunEvals11Type$inboundSchema:
  z.ZodNativeEnum<
    typeof GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals7WorkflowRunEvals11Type
  > = z.nativeEnum(
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals7WorkflowRunEvals11Type,
  );

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals7WorkflowRunEvals11Type$outboundSchema:
  z.ZodNativeEnum<
    typeof GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals7WorkflowRunEvals11Type
  > =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals7WorkflowRunEvals11Type$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals7WorkflowRunEvals11Type$ {
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals7WorkflowRunEvals11Type$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals7WorkflowRunEvals11Type$inboundSchema;
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals7WorkflowRunEvals11Type$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals7WorkflowRunEvals11Type$outboundSchema;
}

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals7WorkflowRunEvals11$inboundSchema:
  z.ZodType<
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals7WorkflowRunEvals11,
    z.ZodTypeDef,
    unknown
  > = z.object({
    type:
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals7WorkflowRunEvals11Type$inboundSchema,
    account_id: z.string(),
  }).transform((v) => {
    return remap$(v, {
      "account_id": "accountId",
    });
  });

/** @internal */
export type GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals7WorkflowRunEvals11$Outbound =
  {
    type: string;
    account_id: string;
  };

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals7WorkflowRunEvals11$outboundSchema:
  z.ZodType<
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals7WorkflowRunEvals11$Outbound,
    z.ZodTypeDef,
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals7WorkflowRunEvals11
  > = z.object({
    type:
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals7WorkflowRunEvals11Type$outboundSchema,
    accountId: z.string(),
  }).transform((v) => {
    return remap$(v, {
      accountId: "account_id",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals7WorkflowRunEvals11$ {
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals7WorkflowRunEvals11$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals7WorkflowRunEvals11$inboundSchema;
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals7WorkflowRunEvals11$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals7WorkflowRunEvals11$outboundSchema;
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals7WorkflowRunEvals11$Outbound` instead. */
  export type Outbound =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals7WorkflowRunEvals11$Outbound;
}

export function getV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals7WorkflowRunEvals11ToJSON(
  getV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals7WorkflowRunEvals11:
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals7WorkflowRunEvals11,
): string {
  return JSON.stringify(
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals7WorkflowRunEvals11$outboundSchema
      .parse(
        getV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals7WorkflowRunEvals11,
      ),
  );
}

export function getV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals7WorkflowRunEvals11FromJSON(
  jsonString: string,
): SafeParseResult<
  GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals7WorkflowRunEvals11,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals7WorkflowRunEvals11$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals7WorkflowRunEvals11' from JSON`,
  );
}

/** @internal */
export const GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody1EvalsRelatedEntities$inboundSchema:
  z.ZodType<
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody1EvalsRelatedEntities,
    z.ZodTypeDef,
    unknown
  > = z.union([
    z.lazy(() =>
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals7WorkflowRunEvals11$inboundSchema
    ),
    z.lazy(() =>
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals7WorkflowRunEvals12$inboundSchema
    ),
    z.lazy(() =>
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals7WorkflowRunEvals13$inboundSchema
    ),
    z.lazy(() =>
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals7WorkflowRunEvals14$inboundSchema
    ),
  ]);

/** @internal */
export type GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody1EvalsRelatedEntities$Outbound =
  | GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals7WorkflowRunEvals11$Outbound
  | GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals7WorkflowRunEvals12$Outbound
  | GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals7WorkflowRunEvals13$Outbound
  | GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals7WorkflowRunEvals14$Outbound;

/** @internal */
export const GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody1EvalsRelatedEntities$outboundSchema:
  z.ZodType<
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody1EvalsRelatedEntities$Outbound,
    z.ZodTypeDef,
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody1EvalsRelatedEntities
  > = z.union([
    z.lazy(() =>
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals7WorkflowRunEvals11$outboundSchema
    ),
    z.lazy(() =>
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals7WorkflowRunEvals12$outboundSchema
    ),
    z.lazy(() =>
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals7WorkflowRunEvals13$outboundSchema
    ),
    z.lazy(() =>
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals7WorkflowRunEvals14$outboundSchema
    ),
  ]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody1EvalsRelatedEntities$ {
  /** @deprecated use `GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody1EvalsRelatedEntities$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody1EvalsRelatedEntities$inboundSchema;
  /** @deprecated use `GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody1EvalsRelatedEntities$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody1EvalsRelatedEntities$outboundSchema;
  /** @deprecated use `GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody1EvalsRelatedEntities$Outbound` instead. */
  export type Outbound =
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody1EvalsRelatedEntities$Outbound;
}

export function getV2LogsIdEvalsResponse200ApplicationJSONResponseBody1EvalsRelatedEntitiesToJSON(
  getV2LogsIdEvalsResponse200ApplicationJSONResponseBody1EvalsRelatedEntities:
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody1EvalsRelatedEntities,
): string {
  return JSON.stringify(
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody1EvalsRelatedEntities$outboundSchema
      .parse(
        getV2LogsIdEvalsResponse200ApplicationJSONResponseBody1EvalsRelatedEntities,
      ),
  );
}

export function getV2LogsIdEvalsResponse200ApplicationJSONResponseBody1EvalsRelatedEntitiesFromJSON(
  jsonString: string,
): SafeParseResult<
  GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody1EvalsRelatedEntities,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody1EvalsRelatedEntities$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody1EvalsRelatedEntities' from JSON`,
  );
}

/** @internal */
export const GetV2LogsIdEvalsResponse200ApplicationJson1$inboundSchema:
  z.ZodType<
    GetV2LogsIdEvalsResponse200ApplicationJson1,
    z.ZodTypeDef,
    unknown
  > = z.object({
    type:
      GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody1EvalsType$inboundSchema,
    value: z.string(),
    id: z.string(),
    status:
      GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody1Evals7WorkflowRunStatus$inboundSchema,
    timestamp: z.string().datetime({ offset: true }).transform(v =>
      new Date(v)
    ),
    related_entities: z.array(
      z.union([
        z.lazy(() =>
          GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals7WorkflowRunEvals11$inboundSchema
        ),
        z.lazy(() =>
          GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals7WorkflowRunEvals12$inboundSchema
        ),
        z.lazy(() =>
          GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals7WorkflowRunEvals13$inboundSchema
        ),
        z.lazy(() =>
          GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals7WorkflowRunEvals14$inboundSchema
        ),
      ]),
    ),
  }).transform((v) => {
    return remap$(v, {
      "related_entities": "relatedEntities",
    });
  });

/** @internal */
export type GetV2LogsIdEvalsResponse200ApplicationJson1$Outbound = {
  type: string;
  value: string;
  id: string;
  status: string;
  timestamp: string;
  related_entities: Array<
    | GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals7WorkflowRunEvals11$Outbound
    | GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals7WorkflowRunEvals12$Outbound
    | GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals7WorkflowRunEvals13$Outbound
    | GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals7WorkflowRunEvals14$Outbound
  >;
};

/** @internal */
export const GetV2LogsIdEvalsResponse200ApplicationJson1$outboundSchema:
  z.ZodType<
    GetV2LogsIdEvalsResponse200ApplicationJson1$Outbound,
    z.ZodTypeDef,
    GetV2LogsIdEvalsResponse200ApplicationJson1
  > = z.object({
    type:
      GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody1EvalsType$outboundSchema,
    value: z.string(),
    id: z.string(),
    status:
      GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody1Evals7WorkflowRunStatus$outboundSchema,
    timestamp: z.date().transform(v => v.toISOString()),
    relatedEntities: z.array(
      z.union([
        z.lazy(() =>
          GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals7WorkflowRunEvals11$outboundSchema
        ),
        z.lazy(() =>
          GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals7WorkflowRunEvals12$outboundSchema
        ),
        z.lazy(() =>
          GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals7WorkflowRunEvals13$outboundSchema
        ),
        z.lazy(() =>
          GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals7WorkflowRunEvals14$outboundSchema
        ),
      ]),
    ),
  }).transform((v) => {
    return remap$(v, {
      relatedEntities: "related_entities",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdEvalsResponse200ApplicationJson1$ {
  /** @deprecated use `GetV2LogsIdEvalsResponse200ApplicationJson1$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsIdEvalsResponse200ApplicationJson1$inboundSchema;
  /** @deprecated use `GetV2LogsIdEvalsResponse200ApplicationJson1$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdEvalsResponse200ApplicationJson1$outboundSchema;
  /** @deprecated use `GetV2LogsIdEvalsResponse200ApplicationJson1$Outbound` instead. */
  export type Outbound = GetV2LogsIdEvalsResponse200ApplicationJson1$Outbound;
}

export function getV2LogsIdEvalsResponse200ApplicationJson1ToJSON(
  getV2LogsIdEvalsResponse200ApplicationJson1:
    GetV2LogsIdEvalsResponse200ApplicationJson1,
): string {
  return JSON.stringify(
    GetV2LogsIdEvalsResponse200ApplicationJson1$outboundSchema.parse(
      getV2LogsIdEvalsResponse200ApplicationJson1,
    ),
  );
}

export function getV2LogsIdEvalsResponse200ApplicationJson1FromJSON(
  jsonString: string,
): SafeParseResult<
  GetV2LogsIdEvalsResponse200ApplicationJson1,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetV2LogsIdEvalsResponse200ApplicationJson1$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'GetV2LogsIdEvalsResponse200ApplicationJson1' from JSON`,
  );
}

/** @internal */
export const EvalsEvals$inboundSchema: z.ZodType<
  EvalsEvals,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => GetV2LogsIdEvalsResponse200ApplicationJson1$inboundSchema),
  z.lazy(() => GetV2LogsIdEvalsResponse200ApplicationJson2$inboundSchema),
  z.lazy(() => GetV2LogsIdEvalsResponse200ApplicationJson3$inboundSchema),
  z.lazy(() => GetV2LogsIdEvalsResponse200ApplicationJson4$inboundSchema),
]);

/** @internal */
export type EvalsEvals$Outbound =
  | GetV2LogsIdEvalsResponse200ApplicationJson1$Outbound
  | GetV2LogsIdEvalsResponse200ApplicationJson2$Outbound
  | GetV2LogsIdEvalsResponse200ApplicationJson3$Outbound
  | GetV2LogsIdEvalsResponse200ApplicationJson4$Outbound;

/** @internal */
export const EvalsEvals$outboundSchema: z.ZodType<
  EvalsEvals$Outbound,
  z.ZodTypeDef,
  EvalsEvals
> = z.union([
  z.lazy(() => GetV2LogsIdEvalsResponse200ApplicationJson1$outboundSchema),
  z.lazy(() => GetV2LogsIdEvalsResponse200ApplicationJson2$outboundSchema),
  z.lazy(() => GetV2LogsIdEvalsResponse200ApplicationJson3$outboundSchema),
  z.lazy(() => GetV2LogsIdEvalsResponse200ApplicationJson4$outboundSchema),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EvalsEvals$ {
  /** @deprecated use `EvalsEvals$inboundSchema` instead. */
  export const inboundSchema = EvalsEvals$inboundSchema;
  /** @deprecated use `EvalsEvals$outboundSchema` instead. */
  export const outboundSchema = EvalsEvals$outboundSchema;
  /** @deprecated use `EvalsEvals$Outbound` instead. */
  export type Outbound = EvalsEvals$Outbound;
}

export function evalsEvalsToJSON(evalsEvals: EvalsEvals): string {
  return JSON.stringify(EvalsEvals$outboundSchema.parse(evalsEvals));
}

export function evalsEvalsFromJSON(
  jsonString: string,
): SafeParseResult<EvalsEvals, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => EvalsEvals$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'EvalsEvals' from JSON`,
  );
}

/** @internal */
export const GetV2LogsIdMessageResponse200ApplicationJSONResponseBody1Evals7Role$inboundSchema:
  z.ZodNativeEnum<
    typeof GetV2LogsIdMessageResponse200ApplicationJSONResponseBody1Evals7Role
  > = z.nativeEnum(
    GetV2LogsIdMessageResponse200ApplicationJSONResponseBody1Evals7Role,
  );

/** @internal */
export const GetV2LogsIdMessageResponse200ApplicationJSONResponseBody1Evals7Role$outboundSchema:
  z.ZodNativeEnum<
    typeof GetV2LogsIdMessageResponse200ApplicationJSONResponseBody1Evals7Role
  > =
    GetV2LogsIdMessageResponse200ApplicationJSONResponseBody1Evals7Role$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdMessageResponse200ApplicationJSONResponseBody1Evals7Role$ {
  /** @deprecated use `GetV2LogsIdMessageResponse200ApplicationJSONResponseBody1Evals7Role$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsIdMessageResponse200ApplicationJSONResponseBody1Evals7Role$inboundSchema;
  /** @deprecated use `GetV2LogsIdMessageResponse200ApplicationJSONResponseBody1Evals7Role$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdMessageResponse200ApplicationJSONResponseBody1Evals7Role$outboundSchema;
}

/** @internal */
export const GetV2LogsIdMessageResponse200ApplicationJSONResponseBody13$inboundSchema:
  z.ZodType<
    GetV2LogsIdMessageResponse200ApplicationJSONResponseBody13,
    z.ZodTypeDef,
    unknown
  > = z.object({
    role:
      GetV2LogsIdMessageResponse200ApplicationJSONResponseBody1Evals7Role$inboundSchema,
    url: z.string(),
  });

/** @internal */
export type GetV2LogsIdMessageResponse200ApplicationJSONResponseBody13$Outbound =
  {
    role: string;
    url: string;
  };

/** @internal */
export const GetV2LogsIdMessageResponse200ApplicationJSONResponseBody13$outboundSchema:
  z.ZodType<
    GetV2LogsIdMessageResponse200ApplicationJSONResponseBody13$Outbound,
    z.ZodTypeDef,
    GetV2LogsIdMessageResponse200ApplicationJSONResponseBody13
  > = z.object({
    role:
      GetV2LogsIdMessageResponse200ApplicationJSONResponseBody1Evals7Role$outboundSchema,
    url: z.string(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdMessageResponse200ApplicationJSONResponseBody13$ {
  /** @deprecated use `GetV2LogsIdMessageResponse200ApplicationJSONResponseBody13$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsIdMessageResponse200ApplicationJSONResponseBody13$inboundSchema;
  /** @deprecated use `GetV2LogsIdMessageResponse200ApplicationJSONResponseBody13$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdMessageResponse200ApplicationJSONResponseBody13$outboundSchema;
  /** @deprecated use `GetV2LogsIdMessageResponse200ApplicationJSONResponseBody13$Outbound` instead. */
  export type Outbound =
    GetV2LogsIdMessageResponse200ApplicationJSONResponseBody13$Outbound;
}

export function getV2LogsIdMessageResponse200ApplicationJSONResponseBody13ToJSON(
  getV2LogsIdMessageResponse200ApplicationJSONResponseBody13:
    GetV2LogsIdMessageResponse200ApplicationJSONResponseBody13,
): string {
  return JSON.stringify(
    GetV2LogsIdMessageResponse200ApplicationJSONResponseBody13$outboundSchema
      .parse(getV2LogsIdMessageResponse200ApplicationJSONResponseBody13),
  );
}

export function getV2LogsIdMessageResponse200ApplicationJSONResponseBody13FromJSON(
  jsonString: string,
): SafeParseResult<
  GetV2LogsIdMessageResponse200ApplicationJSONResponseBody13,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetV2LogsIdMessageResponse200ApplicationJSONResponseBody13$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'GetV2LogsIdMessageResponse200ApplicationJSONResponseBody13' from JSON`,
  );
}

/** @internal */
export const GetV2LogsIdMessageResponse200ApplicationJSONResponseBody1EvalsRole$inboundSchema:
  z.ZodNativeEnum<
    typeof GetV2LogsIdMessageResponse200ApplicationJSONResponseBody1EvalsRole
  > = z.nativeEnum(
    GetV2LogsIdMessageResponse200ApplicationJSONResponseBody1EvalsRole,
  );

/** @internal */
export const GetV2LogsIdMessageResponse200ApplicationJSONResponseBody1EvalsRole$outboundSchema:
  z.ZodNativeEnum<
    typeof GetV2LogsIdMessageResponse200ApplicationJSONResponseBody1EvalsRole
  > =
    GetV2LogsIdMessageResponse200ApplicationJSONResponseBody1EvalsRole$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdMessageResponse200ApplicationJSONResponseBody1EvalsRole$ {
  /** @deprecated use `GetV2LogsIdMessageResponse200ApplicationJSONResponseBody1EvalsRole$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsIdMessageResponse200ApplicationJSONResponseBody1EvalsRole$inboundSchema;
  /** @deprecated use `GetV2LogsIdMessageResponse200ApplicationJSONResponseBody1EvalsRole$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdMessageResponse200ApplicationJSONResponseBody1EvalsRole$outboundSchema;
}

/** @internal */
export const GetV2LogsIdMessageResponse200ApplicationJSONResponseBody12$inboundSchema:
  z.ZodType<
    GetV2LogsIdMessageResponse200ApplicationJSONResponseBody12,
    z.ZodTypeDef,
    unknown
  > = z.object({
    role:
      GetV2LogsIdMessageResponse200ApplicationJSONResponseBody1EvalsRole$inboundSchema,
    content: z.nullable(z.string()),
  });

/** @internal */
export type GetV2LogsIdMessageResponse200ApplicationJSONResponseBody12$Outbound =
  {
    role: string;
    content: string | null;
  };

/** @internal */
export const GetV2LogsIdMessageResponse200ApplicationJSONResponseBody12$outboundSchema:
  z.ZodType<
    GetV2LogsIdMessageResponse200ApplicationJSONResponseBody12$Outbound,
    z.ZodTypeDef,
    GetV2LogsIdMessageResponse200ApplicationJSONResponseBody12
  > = z.object({
    role:
      GetV2LogsIdMessageResponse200ApplicationJSONResponseBody1EvalsRole$outboundSchema,
    content: z.nullable(z.string()),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdMessageResponse200ApplicationJSONResponseBody12$ {
  /** @deprecated use `GetV2LogsIdMessageResponse200ApplicationJSONResponseBody12$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsIdMessageResponse200ApplicationJSONResponseBody12$inboundSchema;
  /** @deprecated use `GetV2LogsIdMessageResponse200ApplicationJSONResponseBody12$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdMessageResponse200ApplicationJSONResponseBody12$outboundSchema;
  /** @deprecated use `GetV2LogsIdMessageResponse200ApplicationJSONResponseBody12$Outbound` instead. */
  export type Outbound =
    GetV2LogsIdMessageResponse200ApplicationJSONResponseBody12$Outbound;
}

export function getV2LogsIdMessageResponse200ApplicationJSONResponseBody12ToJSON(
  getV2LogsIdMessageResponse200ApplicationJSONResponseBody12:
    GetV2LogsIdMessageResponse200ApplicationJSONResponseBody12,
): string {
  return JSON.stringify(
    GetV2LogsIdMessageResponse200ApplicationJSONResponseBody12$outboundSchema
      .parse(getV2LogsIdMessageResponse200ApplicationJSONResponseBody12),
  );
}

export function getV2LogsIdMessageResponse200ApplicationJSONResponseBody12FromJSON(
  jsonString: string,
): SafeParseResult<
  GetV2LogsIdMessageResponse200ApplicationJSONResponseBody12,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetV2LogsIdMessageResponse200ApplicationJSONResponseBody12$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'GetV2LogsIdMessageResponse200ApplicationJSONResponseBody12' from JSON`,
  );
}

/** @internal */
export const GetV2LogsIdMessageResponse200ApplicationJSONResponseBody1Role$inboundSchema:
  z.ZodNativeEnum<
    typeof GetV2LogsIdMessageResponse200ApplicationJSONResponseBody1Role
  > = z.nativeEnum(
    GetV2LogsIdMessageResponse200ApplicationJSONResponseBody1Role,
  );

/** @internal */
export const GetV2LogsIdMessageResponse200ApplicationJSONResponseBody1Role$outboundSchema:
  z.ZodNativeEnum<
    typeof GetV2LogsIdMessageResponse200ApplicationJSONResponseBody1Role
  > =
    GetV2LogsIdMessageResponse200ApplicationJSONResponseBody1Role$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdMessageResponse200ApplicationJSONResponseBody1Role$ {
  /** @deprecated use `GetV2LogsIdMessageResponse200ApplicationJSONResponseBody1Role$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsIdMessageResponse200ApplicationJSONResponseBody1Role$inboundSchema;
  /** @deprecated use `GetV2LogsIdMessageResponse200ApplicationJSONResponseBody1Role$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdMessageResponse200ApplicationJSONResponseBody1Role$outboundSchema;
}

/** @internal */
export const GetV2LogsIdMessageResponse200ApplicationJSONResponseBody1Type$inboundSchema:
  z.ZodNativeEnum<
    typeof GetV2LogsIdMessageResponse200ApplicationJSONResponseBody1Type
  > = z.nativeEnum(
    GetV2LogsIdMessageResponse200ApplicationJSONResponseBody1Type,
  );

/** @internal */
export const GetV2LogsIdMessageResponse200ApplicationJSONResponseBody1Type$outboundSchema:
  z.ZodNativeEnum<
    typeof GetV2LogsIdMessageResponse200ApplicationJSONResponseBody1Type
  > =
    GetV2LogsIdMessageResponse200ApplicationJSONResponseBody1Type$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdMessageResponse200ApplicationJSONResponseBody1Type$ {
  /** @deprecated use `GetV2LogsIdMessageResponse200ApplicationJSONResponseBody1Type$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsIdMessageResponse200ApplicationJSONResponseBody1Type$inboundSchema;
  /** @deprecated use `GetV2LogsIdMessageResponse200ApplicationJSONResponseBody1Type$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdMessageResponse200ApplicationJSONResponseBody1Type$outboundSchema;
}

/** @internal */
export const GetV2LogsIdMessageResponse200ApplicationJSONResponseBody1Function$inboundSchema:
  z.ZodType<
    GetV2LogsIdMessageResponse200ApplicationJSONResponseBody1Function,
    z.ZodTypeDef,
    unknown
  > = z.object({
    name: z.string(),
    arguments: z.string(),
  });

/** @internal */
export type GetV2LogsIdMessageResponse200ApplicationJSONResponseBody1Function$Outbound =
  {
    name: string;
    arguments: string;
  };

/** @internal */
export const GetV2LogsIdMessageResponse200ApplicationJSONResponseBody1Function$outboundSchema:
  z.ZodType<
    GetV2LogsIdMessageResponse200ApplicationJSONResponseBody1Function$Outbound,
    z.ZodTypeDef,
    GetV2LogsIdMessageResponse200ApplicationJSONResponseBody1Function
  > = z.object({
    name: z.string(),
    arguments: z.string(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdMessageResponse200ApplicationJSONResponseBody1Function$ {
  /** @deprecated use `GetV2LogsIdMessageResponse200ApplicationJSONResponseBody1Function$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsIdMessageResponse200ApplicationJSONResponseBody1Function$inboundSchema;
  /** @deprecated use `GetV2LogsIdMessageResponse200ApplicationJSONResponseBody1Function$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdMessageResponse200ApplicationJSONResponseBody1Function$outboundSchema;
  /** @deprecated use `GetV2LogsIdMessageResponse200ApplicationJSONResponseBody1Function$Outbound` instead. */
  export type Outbound =
    GetV2LogsIdMessageResponse200ApplicationJSONResponseBody1Function$Outbound;
}

export function getV2LogsIdMessageResponse200ApplicationJSONResponseBody1FunctionToJSON(
  getV2LogsIdMessageResponse200ApplicationJSONResponseBody1Function:
    GetV2LogsIdMessageResponse200ApplicationJSONResponseBody1Function,
): string {
  return JSON.stringify(
    GetV2LogsIdMessageResponse200ApplicationJSONResponseBody1Function$outboundSchema
      .parse(getV2LogsIdMessageResponse200ApplicationJSONResponseBody1Function),
  );
}

export function getV2LogsIdMessageResponse200ApplicationJSONResponseBody1FunctionFromJSON(
  jsonString: string,
): SafeParseResult<
  GetV2LogsIdMessageResponse200ApplicationJSONResponseBody1Function,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetV2LogsIdMessageResponse200ApplicationJSONResponseBody1Function$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'GetV2LogsIdMessageResponse200ApplicationJSONResponseBody1Function' from JSON`,
  );
}

/** @internal */
export const GetV2LogsIdMessageResponse200ApplicationJSONResponseBody1ToolCalls$inboundSchema:
  z.ZodType<
    GetV2LogsIdMessageResponse200ApplicationJSONResponseBody1ToolCalls,
    z.ZodTypeDef,
    unknown
  > = z.object({
    id: z.string().optional(),
    index: z.number().optional(),
    type:
      GetV2LogsIdMessageResponse200ApplicationJSONResponseBody1Type$inboundSchema,
    function: z.lazy(() =>
      GetV2LogsIdMessageResponse200ApplicationJSONResponseBody1Function$inboundSchema
    ),
  });

/** @internal */
export type GetV2LogsIdMessageResponse200ApplicationJSONResponseBody1ToolCalls$Outbound =
  {
    id?: string | undefined;
    index?: number | undefined;
    type: string;
    function:
      GetV2LogsIdMessageResponse200ApplicationJSONResponseBody1Function$Outbound;
  };

/** @internal */
export const GetV2LogsIdMessageResponse200ApplicationJSONResponseBody1ToolCalls$outboundSchema:
  z.ZodType<
    GetV2LogsIdMessageResponse200ApplicationJSONResponseBody1ToolCalls$Outbound,
    z.ZodTypeDef,
    GetV2LogsIdMessageResponse200ApplicationJSONResponseBody1ToolCalls
  > = z.object({
    id: z.string().optional(),
    index: z.number().optional(),
    type:
      GetV2LogsIdMessageResponse200ApplicationJSONResponseBody1Type$outboundSchema,
    function: z.lazy(() =>
      GetV2LogsIdMessageResponse200ApplicationJSONResponseBody1Function$outboundSchema
    ),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdMessageResponse200ApplicationJSONResponseBody1ToolCalls$ {
  /** @deprecated use `GetV2LogsIdMessageResponse200ApplicationJSONResponseBody1ToolCalls$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsIdMessageResponse200ApplicationJSONResponseBody1ToolCalls$inboundSchema;
  /** @deprecated use `GetV2LogsIdMessageResponse200ApplicationJSONResponseBody1ToolCalls$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdMessageResponse200ApplicationJSONResponseBody1ToolCalls$outboundSchema;
  /** @deprecated use `GetV2LogsIdMessageResponse200ApplicationJSONResponseBody1ToolCalls$Outbound` instead. */
  export type Outbound =
    GetV2LogsIdMessageResponse200ApplicationJSONResponseBody1ToolCalls$Outbound;
}

export function getV2LogsIdMessageResponse200ApplicationJSONResponseBody1ToolCallsToJSON(
  getV2LogsIdMessageResponse200ApplicationJSONResponseBody1ToolCalls:
    GetV2LogsIdMessageResponse200ApplicationJSONResponseBody1ToolCalls,
): string {
  return JSON.stringify(
    GetV2LogsIdMessageResponse200ApplicationJSONResponseBody1ToolCalls$outboundSchema
      .parse(
        getV2LogsIdMessageResponse200ApplicationJSONResponseBody1ToolCalls,
      ),
  );
}

export function getV2LogsIdMessageResponse200ApplicationJSONResponseBody1ToolCallsFromJSON(
  jsonString: string,
): SafeParseResult<
  GetV2LogsIdMessageResponse200ApplicationJSONResponseBody1ToolCalls,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetV2LogsIdMessageResponse200ApplicationJSONResponseBody1ToolCalls$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'GetV2LogsIdMessageResponse200ApplicationJSONResponseBody1ToolCalls' from JSON`,
  );
}

/** @internal */
export const GetV2LogsIdMessageResponse200ApplicationJSONResponseBody11$inboundSchema:
  z.ZodType<
    GetV2LogsIdMessageResponse200ApplicationJSONResponseBody11,
    z.ZodTypeDef,
    unknown
  > = z.object({
    role:
      GetV2LogsIdMessageResponse200ApplicationJSONResponseBody1Role$inboundSchema,
    content: z.nullable(z.string()).optional(),
    tool_calls: z.array(
      z.lazy(() =>
        GetV2LogsIdMessageResponse200ApplicationJSONResponseBody1ToolCalls$inboundSchema
      ),
    ),
  }).transform((v) => {
    return remap$(v, {
      "tool_calls": "toolCalls",
    });
  });

/** @internal */
export type GetV2LogsIdMessageResponse200ApplicationJSONResponseBody11$Outbound =
  {
    role: string;
    content?: string | null | undefined;
    tool_calls: Array<
      GetV2LogsIdMessageResponse200ApplicationJSONResponseBody1ToolCalls$Outbound
    >;
  };

/** @internal */
export const GetV2LogsIdMessageResponse200ApplicationJSONResponseBody11$outboundSchema:
  z.ZodType<
    GetV2LogsIdMessageResponse200ApplicationJSONResponseBody11$Outbound,
    z.ZodTypeDef,
    GetV2LogsIdMessageResponse200ApplicationJSONResponseBody11
  > = z.object({
    role:
      GetV2LogsIdMessageResponse200ApplicationJSONResponseBody1Role$outboundSchema,
    content: z.nullable(z.string()).optional(),
    toolCalls: z.array(
      z.lazy(() =>
        GetV2LogsIdMessageResponse200ApplicationJSONResponseBody1ToolCalls$outboundSchema
      ),
    ),
  }).transform((v) => {
    return remap$(v, {
      toolCalls: "tool_calls",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdMessageResponse200ApplicationJSONResponseBody11$ {
  /** @deprecated use `GetV2LogsIdMessageResponse200ApplicationJSONResponseBody11$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsIdMessageResponse200ApplicationJSONResponseBody11$inboundSchema;
  /** @deprecated use `GetV2LogsIdMessageResponse200ApplicationJSONResponseBody11$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdMessageResponse200ApplicationJSONResponseBody11$outboundSchema;
  /** @deprecated use `GetV2LogsIdMessageResponse200ApplicationJSONResponseBody11$Outbound` instead. */
  export type Outbound =
    GetV2LogsIdMessageResponse200ApplicationJSONResponseBody11$Outbound;
}

export function getV2LogsIdMessageResponse200ApplicationJSONResponseBody11ToJSON(
  getV2LogsIdMessageResponse200ApplicationJSONResponseBody11:
    GetV2LogsIdMessageResponse200ApplicationJSONResponseBody11,
): string {
  return JSON.stringify(
    GetV2LogsIdMessageResponse200ApplicationJSONResponseBody11$outboundSchema
      .parse(getV2LogsIdMessageResponse200ApplicationJSONResponseBody11),
  );
}

export function getV2LogsIdMessageResponse200ApplicationJSONResponseBody11FromJSON(
  jsonString: string,
): SafeParseResult<
  GetV2LogsIdMessageResponse200ApplicationJSONResponseBody11,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetV2LogsIdMessageResponse200ApplicationJSONResponseBody11$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'GetV2LogsIdMessageResponse200ApplicationJSONResponseBody11' from JSON`,
  );
}

/** @internal */
export const EvalsMessage$inboundSchema: z.ZodType<
  EvalsMessage,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() =>
    GetV2LogsIdMessageResponse200ApplicationJSONResponseBody12$inboundSchema
  ),
  z.lazy(() =>
    GetV2LogsIdMessageResponse200ApplicationJSONResponseBody13$inboundSchema
  ),
  z.lazy(() =>
    GetV2LogsIdMessageResponse200ApplicationJSONResponseBody11$inboundSchema
  ),
]);

/** @internal */
export type EvalsMessage$Outbound =
  | GetV2LogsIdMessageResponse200ApplicationJSONResponseBody12$Outbound
  | GetV2LogsIdMessageResponse200ApplicationJSONResponseBody13$Outbound
  | GetV2LogsIdMessageResponse200ApplicationJSONResponseBody11$Outbound;

/** @internal */
export const EvalsMessage$outboundSchema: z.ZodType<
  EvalsMessage$Outbound,
  z.ZodTypeDef,
  EvalsMessage
> = z.union([
  z.lazy(() =>
    GetV2LogsIdMessageResponse200ApplicationJSONResponseBody12$outboundSchema
  ),
  z.lazy(() =>
    GetV2LogsIdMessageResponse200ApplicationJSONResponseBody13$outboundSchema
  ),
  z.lazy(() =>
    GetV2LogsIdMessageResponse200ApplicationJSONResponseBody11$outboundSchema
  ),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EvalsMessage$ {
  /** @deprecated use `EvalsMessage$inboundSchema` instead. */
  export const inboundSchema = EvalsMessage$inboundSchema;
  /** @deprecated use `EvalsMessage$outboundSchema` instead. */
  export const outboundSchema = EvalsMessage$outboundSchema;
  /** @deprecated use `EvalsMessage$Outbound` instead. */
  export type Outbound = EvalsMessage$Outbound;
}

export function evalsMessageToJSON(evalsMessage: EvalsMessage): string {
  return JSON.stringify(EvalsMessage$outboundSchema.parse(evalsMessage));
}

export function evalsMessageFromJSON(
  jsonString: string,
): SafeParseResult<EvalsMessage, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => EvalsMessage$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'EvalsMessage' from JSON`,
  );
}

/** @internal */
export const EvalsChoices$inboundSchema: z.ZodType<
  EvalsChoices,
  z.ZodTypeDef,
  unknown
> = z.object({
  index: z.number(),
  message: z.union([
    z.lazy(() =>
      GetV2LogsIdMessageResponse200ApplicationJSONResponseBody12$inboundSchema
    ),
    z.lazy(() =>
      GetV2LogsIdMessageResponse200ApplicationJSONResponseBody13$inboundSchema
    ),
    z.lazy(() =>
      GetV2LogsIdMessageResponse200ApplicationJSONResponseBody11$inboundSchema
    ),
  ]).optional(),
  finish_reason: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    "finish_reason": "finishReason",
  });
});

/** @internal */
export type EvalsChoices$Outbound = {
  index: number;
  message?:
    | GetV2LogsIdMessageResponse200ApplicationJSONResponseBody12$Outbound
    | GetV2LogsIdMessageResponse200ApplicationJSONResponseBody13$Outbound
    | GetV2LogsIdMessageResponse200ApplicationJSONResponseBody11$Outbound
    | undefined;
  finish_reason?: string | null | undefined;
};

/** @internal */
export const EvalsChoices$outboundSchema: z.ZodType<
  EvalsChoices$Outbound,
  z.ZodTypeDef,
  EvalsChoices
> = z.object({
  index: z.number(),
  message: z.union([
    z.lazy(() =>
      GetV2LogsIdMessageResponse200ApplicationJSONResponseBody12$outboundSchema
    ),
    z.lazy(() =>
      GetV2LogsIdMessageResponse200ApplicationJSONResponseBody13$outboundSchema
    ),
    z.lazy(() =>
      GetV2LogsIdMessageResponse200ApplicationJSONResponseBody11$outboundSchema
    ),
  ]).optional(),
  finishReason: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    finishReason: "finish_reason",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EvalsChoices$ {
  /** @deprecated use `EvalsChoices$inboundSchema` instead. */
  export const inboundSchema = EvalsChoices$inboundSchema;
  /** @deprecated use `EvalsChoices$outboundSchema` instead. */
  export const outboundSchema = EvalsChoices$outboundSchema;
  /** @deprecated use `EvalsChoices$Outbound` instead. */
  export type Outbound = EvalsChoices$Outbound;
}

export function evalsChoicesToJSON(evalsChoices: EvalsChoices): string {
  return JSON.stringify(EvalsChoices$outboundSchema.parse(evalsChoices));
}

export function evalsChoicesFromJSON(
  jsonString: string,
): SafeParseResult<EvalsChoices, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => EvalsChoices$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'EvalsChoices' from JSON`,
  );
}

/** @internal */
export const EvalsAction$inboundSchema: z.ZodNativeEnum<typeof EvalsAction> = z
  .nativeEnum(EvalsAction);

/** @internal */
export const EvalsAction$outboundSchema: z.ZodNativeEnum<typeof EvalsAction> =
  EvalsAction$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EvalsAction$ {
  /** @deprecated use `EvalsAction$inboundSchema` instead. */
  export const inboundSchema = EvalsAction$inboundSchema;
  /** @deprecated use `EvalsAction$outboundSchema` instead. */
  export const outboundSchema = EvalsAction$outboundSchema;
}

/** @internal */
export const EvalsModelType$inboundSchema: z.ZodNativeEnum<
  typeof EvalsModelType
> = z.nativeEnum(EvalsModelType);

/** @internal */
export const EvalsModelType$outboundSchema: z.ZodNativeEnum<
  typeof EvalsModelType
> = EvalsModelType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EvalsModelType$ {
  /** @deprecated use `EvalsModelType$inboundSchema` instead. */
  export const inboundSchema = EvalsModelType$inboundSchema;
  /** @deprecated use `EvalsModelType$outboundSchema` instead. */
  export const outboundSchema = EvalsModelType$outboundSchema;
}

/** @internal */
export const EvalsFormat$inboundSchema: z.ZodNativeEnum<typeof EvalsFormat> = z
  .nativeEnum(EvalsFormat);

/** @internal */
export const EvalsFormat$outboundSchema: z.ZodNativeEnum<typeof EvalsFormat> =
  EvalsFormat$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EvalsFormat$ {
  /** @deprecated use `EvalsFormat$inboundSchema` instead. */
  export const inboundSchema = EvalsFormat$inboundSchema;
  /** @deprecated use `EvalsFormat$outboundSchema` instead. */
  export const outboundSchema = EvalsFormat$outboundSchema;
}

/** @internal */
export const EvalsQuality$inboundSchema: z.ZodNativeEnum<typeof EvalsQuality> =
  z.nativeEnum(EvalsQuality);

/** @internal */
export const EvalsQuality$outboundSchema: z.ZodNativeEnum<typeof EvalsQuality> =
  EvalsQuality$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EvalsQuality$ {
  /** @deprecated use `EvalsQuality$inboundSchema` instead. */
  export const inboundSchema = EvalsQuality$inboundSchema;
  /** @deprecated use `EvalsQuality$outboundSchema` instead. */
  export const outboundSchema = EvalsQuality$outboundSchema;
}

/** @internal */
export const GetV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody1Type$inboundSchema:
  z.ZodNativeEnum<
    typeof GetV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody1Type
  > = z.nativeEnum(
    GetV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody1Type,
  );

/** @internal */
export const GetV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody1Type$outboundSchema:
  z.ZodNativeEnum<
    typeof GetV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody1Type
  > =
    GetV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody1Type$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody1Type$ {
  /** @deprecated use `GetV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody1Type$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody1Type$inboundSchema;
  /** @deprecated use `GetV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody1Type$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody1Type$outboundSchema;
}

/** @internal */
export const GetV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody12$inboundSchema:
  z.ZodType<
    GetV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody12,
    z.ZodTypeDef,
    unknown
  > = z.object({
    type:
      GetV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody1Type$inboundSchema,
  });

/** @internal */
export type GetV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody12$Outbound =
  {
    type: string;
  };

/** @internal */
export const GetV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody12$outboundSchema:
  z.ZodType<
    GetV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody12$Outbound,
    z.ZodTypeDef,
    GetV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody12
  > = z.object({
    type:
      GetV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody1Type$outboundSchema,
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody12$ {
  /** @deprecated use `GetV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody12$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody12$inboundSchema;
  /** @deprecated use `GetV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody12$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody12$outboundSchema;
  /** @deprecated use `GetV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody12$Outbound` instead. */
  export type Outbound =
    GetV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody12$Outbound;
}

export function getV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody12ToJSON(
  getV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody12:
    GetV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody12,
): string {
  return JSON.stringify(
    GetV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody12$outboundSchema
      .parse(getV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody12),
  );
}

export function getV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody12FromJSON(
  jsonString: string,
): SafeParseResult<
  GetV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody12,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody12$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'GetV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody12' from JSON`,
  );
}

/** @internal */
export const GetV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody1EvalsType$inboundSchema:
  z.ZodNativeEnum<
    typeof GetV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody1EvalsType
  > = z.nativeEnum(
    GetV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody1EvalsType,
  );

/** @internal */
export const GetV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody1EvalsType$outboundSchema:
  z.ZodNativeEnum<
    typeof GetV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody1EvalsType
  > =
    GetV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody1EvalsType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody1EvalsType$ {
  /** @deprecated use `GetV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody1EvalsType$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody1EvalsType$inboundSchema;
  /** @deprecated use `GetV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody1EvalsType$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody1EvalsType$outboundSchema;
}

/** @internal */
export const GetV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody1JSONSchema$inboundSchema:
  z.ZodType<
    GetV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody1JSONSchema,
    z.ZodTypeDef,
    unknown
  > = z.object({
    name: z.string(),
    strict: z.boolean(),
    schema: z.record(z.any()),
  });

/** @internal */
export type GetV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody1JSONSchema$Outbound =
  {
    name: string;
    strict: boolean;
    schema: { [k: string]: any };
  };

/** @internal */
export const GetV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody1JSONSchema$outboundSchema:
  z.ZodType<
    GetV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody1JSONSchema$Outbound,
    z.ZodTypeDef,
    GetV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody1JSONSchema
  > = z.object({
    name: z.string(),
    strict: z.boolean(),
    schema: z.record(z.any()),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody1JSONSchema$ {
  /** @deprecated use `GetV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody1JSONSchema$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody1JSONSchema$inboundSchema;
  /** @deprecated use `GetV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody1JSONSchema$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody1JSONSchema$outboundSchema;
  /** @deprecated use `GetV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody1JSONSchema$Outbound` instead. */
  export type Outbound =
    GetV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody1JSONSchema$Outbound;
}

export function getV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody1JSONSchemaToJSON(
  getV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody1JSONSchema:
    GetV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody1JSONSchema,
): string {
  return JSON.stringify(
    GetV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody1JSONSchema$outboundSchema
      .parse(
        getV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody1JSONSchema,
      ),
  );
}

export function getV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody1JSONSchemaFromJSON(
  jsonString: string,
): SafeParseResult<
  GetV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody1JSONSchema,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody1JSONSchema$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'GetV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody1JSONSchema' from JSON`,
  );
}

/** @internal */
export const GetV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody11$inboundSchema:
  z.ZodType<
    GetV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody11,
    z.ZodTypeDef,
    unknown
  > = z.object({
    type:
      GetV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody1EvalsType$inboundSchema,
    json_schema: z.lazy(() =>
      GetV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody1JSONSchema$inboundSchema
    ),
  }).transform((v) => {
    return remap$(v, {
      "json_schema": "jsonSchema",
    });
  });

/** @internal */
export type GetV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody11$Outbound =
  {
    type: string;
    json_schema:
      GetV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody1JSONSchema$Outbound;
  };

/** @internal */
export const GetV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody11$outboundSchema:
  z.ZodType<
    GetV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody11$Outbound,
    z.ZodTypeDef,
    GetV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody11
  > = z.object({
    type:
      GetV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody1EvalsType$outboundSchema,
    jsonSchema: z.lazy(() =>
      GetV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody1JSONSchema$outboundSchema
    ),
  }).transform((v) => {
    return remap$(v, {
      jsonSchema: "json_schema",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody11$ {
  /** @deprecated use `GetV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody11$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody11$inboundSchema;
  /** @deprecated use `GetV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody11$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody11$outboundSchema;
  /** @deprecated use `GetV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody11$Outbound` instead. */
  export type Outbound =
    GetV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody11$Outbound;
}

export function getV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody11ToJSON(
  getV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody11:
    GetV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody11,
): string {
  return JSON.stringify(
    GetV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody11$outboundSchema
      .parse(getV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody11),
  );
}

export function getV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody11FromJSON(
  jsonString: string,
): SafeParseResult<
  GetV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody11,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody11$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'GetV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody11' from JSON`,
  );
}

/** @internal */
export const EvalsResponseFormat$inboundSchema: z.ZodType<
  EvalsResponseFormat,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() =>
    GetV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody12$inboundSchema
  ),
  z.lazy(() =>
    GetV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody11$inboundSchema
  ),
]);

/** @internal */
export type EvalsResponseFormat$Outbound =
  | GetV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody12$Outbound
  | GetV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody11$Outbound;

/** @internal */
export const EvalsResponseFormat$outboundSchema: z.ZodType<
  EvalsResponseFormat$Outbound,
  z.ZodTypeDef,
  EvalsResponseFormat
> = z.union([
  z.lazy(() =>
    GetV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody12$outboundSchema
  ),
  z.lazy(() =>
    GetV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody11$outboundSchema
  ),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EvalsResponseFormat$ {
  /** @deprecated use `EvalsResponseFormat$inboundSchema` instead. */
  export const inboundSchema = EvalsResponseFormat$inboundSchema;
  /** @deprecated use `EvalsResponseFormat$outboundSchema` instead. */
  export const outboundSchema = EvalsResponseFormat$outboundSchema;
  /** @deprecated use `EvalsResponseFormat$Outbound` instead. */
  export type Outbound = EvalsResponseFormat$Outbound;
}

export function evalsResponseFormatToJSON(
  evalsResponseFormat: EvalsResponseFormat,
): string {
  return JSON.stringify(
    EvalsResponseFormat$outboundSchema.parse(evalsResponseFormat),
  );
}

export function evalsResponseFormatFromJSON(
  jsonString: string,
): SafeParseResult<EvalsResponseFormat, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => EvalsResponseFormat$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'EvalsResponseFormat' from JSON`,
  );
}

/** @internal */
export const EvalsPhotoRealVersion$inboundSchema: z.ZodNativeEnum<
  typeof EvalsPhotoRealVersion
> = z.nativeEnum(EvalsPhotoRealVersion);

/** @internal */
export const EvalsPhotoRealVersion$outboundSchema: z.ZodNativeEnum<
  typeof EvalsPhotoRealVersion
> = EvalsPhotoRealVersion$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EvalsPhotoRealVersion$ {
  /** @deprecated use `EvalsPhotoRealVersion$inboundSchema` instead. */
  export const inboundSchema = EvalsPhotoRealVersion$inboundSchema;
  /** @deprecated use `EvalsPhotoRealVersion$outboundSchema` instead. */
  export const outboundSchema = EvalsPhotoRealVersion$outboundSchema;
}

/** @internal */
export const EvalsEncodingFormat$inboundSchema: z.ZodNativeEnum<
  typeof EvalsEncodingFormat
> = z.nativeEnum(EvalsEncodingFormat);

/** @internal */
export const EvalsEncodingFormat$outboundSchema: z.ZodNativeEnum<
  typeof EvalsEncodingFormat
> = EvalsEncodingFormat$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EvalsEncodingFormat$ {
  /** @deprecated use `EvalsEncodingFormat$inboundSchema` instead. */
  export const inboundSchema = EvalsEncodingFormat$inboundSchema;
  /** @deprecated use `EvalsEncodingFormat$outboundSchema` instead. */
  export const outboundSchema = EvalsEncodingFormat$outboundSchema;
}

/** @internal */
export const EvalsModelParameters$inboundSchema: z.ZodType<
  EvalsModelParameters,
  z.ZodTypeDef,
  unknown
> = z.object({
  temperature: z.number().optional(),
  maxTokens: z.number().optional(),
  topK: z.number().optional(),
  topP: z.number().optional(),
  frequencyPenalty: z.number().optional(),
  presencePenalty: z.number().optional(),
  numImages: z.number().optional(),
  seed: z.number().optional(),
  format: EvalsFormat$inboundSchema.optional(),
  dimensions: z.string().optional(),
  quality: EvalsQuality$inboundSchema.optional(),
  style: z.string().optional(),
  responseFormat: z.nullable(
    z.union([
      z.lazy(() =>
        GetV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody12$inboundSchema
      ),
      z.lazy(() =>
        GetV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody11$inboundSchema
      ),
    ]),
  ).optional(),
  photoRealVersion: EvalsPhotoRealVersion$inboundSchema.optional(),
  encoding_format: EvalsEncodingFormat$inboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    "encoding_format": "encodingFormat",
  });
});

/** @internal */
export type EvalsModelParameters$Outbound = {
  temperature?: number | undefined;
  maxTokens?: number | undefined;
  topK?: number | undefined;
  topP?: number | undefined;
  frequencyPenalty?: number | undefined;
  presencePenalty?: number | undefined;
  numImages?: number | undefined;
  seed?: number | undefined;
  format?: string | undefined;
  dimensions?: string | undefined;
  quality?: string | undefined;
  style?: string | undefined;
  responseFormat?:
    | GetV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody12$Outbound
    | GetV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody11$Outbound
    | null
    | undefined;
  photoRealVersion?: string | undefined;
  encoding_format?: string | undefined;
};

/** @internal */
export const EvalsModelParameters$outboundSchema: z.ZodType<
  EvalsModelParameters$Outbound,
  z.ZodTypeDef,
  EvalsModelParameters
> = z.object({
  temperature: z.number().optional(),
  maxTokens: z.number().optional(),
  topK: z.number().optional(),
  topP: z.number().optional(),
  frequencyPenalty: z.number().optional(),
  presencePenalty: z.number().optional(),
  numImages: z.number().optional(),
  seed: z.number().optional(),
  format: EvalsFormat$outboundSchema.optional(),
  dimensions: z.string().optional(),
  quality: EvalsQuality$outboundSchema.optional(),
  style: z.string().optional(),
  responseFormat: z.nullable(
    z.union([
      z.lazy(() =>
        GetV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody12$outboundSchema
      ),
      z.lazy(() =>
        GetV2LogsIdResponseFormatResponse200ApplicationJSONResponseBody11$outboundSchema
      ),
    ]),
  ).optional(),
  photoRealVersion: EvalsPhotoRealVersion$outboundSchema.optional(),
  encodingFormat: EvalsEncodingFormat$outboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    encodingFormat: "encoding_format",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EvalsModelParameters$ {
  /** @deprecated use `EvalsModelParameters$inboundSchema` instead. */
  export const inboundSchema = EvalsModelParameters$inboundSchema;
  /** @deprecated use `EvalsModelParameters$outboundSchema` instead. */
  export const outboundSchema = EvalsModelParameters$outboundSchema;
  /** @deprecated use `EvalsModelParameters$Outbound` instead. */
  export type Outbound = EvalsModelParameters$Outbound;
}

export function evalsModelParametersToJSON(
  evalsModelParameters: EvalsModelParameters,
): string {
  return JSON.stringify(
    EvalsModelParameters$outboundSchema.parse(evalsModelParameters),
  );
}

export function evalsModelParametersFromJSON(
  jsonString: string,
): SafeParseResult<EvalsModelParameters, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => EvalsModelParameters$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'EvalsModelParameters' from JSON`,
  );
}

/** @internal */
export const EvalsProvider$inboundSchema: z.ZodNativeEnum<
  typeof EvalsProvider
> = z.nativeEnum(EvalsProvider);

/** @internal */
export const EvalsProvider$outboundSchema: z.ZodNativeEnum<
  typeof EvalsProvider
> = EvalsProvider$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EvalsProvider$ {
  /** @deprecated use `EvalsProvider$inboundSchema` instead. */
  export const inboundSchema = EvalsProvider$inboundSchema;
  /** @deprecated use `EvalsProvider$outboundSchema` instead. */
  export const outboundSchema = EvalsProvider$outboundSchema;
}

/** @internal */
export const EvalsRole$inboundSchema: z.ZodNativeEnum<typeof EvalsRole> = z
  .nativeEnum(EvalsRole);

/** @internal */
export const EvalsRole$outboundSchema: z.ZodNativeEnum<typeof EvalsRole> =
  EvalsRole$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EvalsRole$ {
  /** @deprecated use `EvalsRole$inboundSchema` instead. */
  export const inboundSchema = EvalsRole$inboundSchema;
  /** @deprecated use `EvalsRole$outboundSchema` instead. */
  export const outboundSchema = EvalsRole$outboundSchema;
}

/** @internal */
export const GetV2LogsId2Response200ApplicationJSONResponseBody1Type$inboundSchema:
  z.ZodNativeEnum<
    typeof GetV2LogsId2Response200ApplicationJSONResponseBody1Type
  > = z.nativeEnum(GetV2LogsId2Response200ApplicationJSONResponseBody1Type);

/** @internal */
export const GetV2LogsId2Response200ApplicationJSONResponseBody1Type$outboundSchema:
  z.ZodNativeEnum<
    typeof GetV2LogsId2Response200ApplicationJSONResponseBody1Type
  > = GetV2LogsId2Response200ApplicationJSONResponseBody1Type$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsId2Response200ApplicationJSONResponseBody1Type$ {
  /** @deprecated use `GetV2LogsId2Response200ApplicationJSONResponseBody1Type$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsId2Response200ApplicationJSONResponseBody1Type$inboundSchema;
  /** @deprecated use `GetV2LogsId2Response200ApplicationJSONResponseBody1Type$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsId2Response200ApplicationJSONResponseBody1Type$outboundSchema;
}

/** @internal */
export const GetV2LogsId2Response200ApplicationJSONResponseBody1ImageUrl$inboundSchema:
  z.ZodType<
    GetV2LogsId2Response200ApplicationJSONResponseBody1ImageUrl,
    z.ZodTypeDef,
    unknown
  > = z.object({
    id: z.string().optional(),
    url: z.string(),
    detail: z.string().optional(),
  });

/** @internal */
export type GetV2LogsId2Response200ApplicationJSONResponseBody1ImageUrl$Outbound =
  {
    id?: string | undefined;
    url: string;
    detail?: string | undefined;
  };

/** @internal */
export const GetV2LogsId2Response200ApplicationJSONResponseBody1ImageUrl$outboundSchema:
  z.ZodType<
    GetV2LogsId2Response200ApplicationJSONResponseBody1ImageUrl$Outbound,
    z.ZodTypeDef,
    GetV2LogsId2Response200ApplicationJSONResponseBody1ImageUrl
  > = z.object({
    id: z.string().optional(),
    url: z.string(),
    detail: z.string().optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsId2Response200ApplicationJSONResponseBody1ImageUrl$ {
  /** @deprecated use `GetV2LogsId2Response200ApplicationJSONResponseBody1ImageUrl$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsId2Response200ApplicationJSONResponseBody1ImageUrl$inboundSchema;
  /** @deprecated use `GetV2LogsId2Response200ApplicationJSONResponseBody1ImageUrl$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsId2Response200ApplicationJSONResponseBody1ImageUrl$outboundSchema;
  /** @deprecated use `GetV2LogsId2Response200ApplicationJSONResponseBody1ImageUrl$Outbound` instead. */
  export type Outbound =
    GetV2LogsId2Response200ApplicationJSONResponseBody1ImageUrl$Outbound;
}

export function getV2LogsId2Response200ApplicationJSONResponseBody1ImageUrlToJSON(
  getV2LogsId2Response200ApplicationJSONResponseBody1ImageUrl:
    GetV2LogsId2Response200ApplicationJSONResponseBody1ImageUrl,
): string {
  return JSON.stringify(
    GetV2LogsId2Response200ApplicationJSONResponseBody1ImageUrl$outboundSchema
      .parse(getV2LogsId2Response200ApplicationJSONResponseBody1ImageUrl),
  );
}

export function getV2LogsId2Response200ApplicationJSONResponseBody1ImageUrlFromJSON(
  jsonString: string,
): SafeParseResult<
  GetV2LogsId2Response200ApplicationJSONResponseBody1ImageUrl,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetV2LogsId2Response200ApplicationJSONResponseBody1ImageUrl$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'GetV2LogsId2Response200ApplicationJSONResponseBody1ImageUrl' from JSON`,
  );
}

/** @internal */
export const GetV2LogsId2Response200ApplicationJSONResponseBody12$inboundSchema:
  z.ZodType<
    GetV2LogsId2Response200ApplicationJSONResponseBody12,
    z.ZodTypeDef,
    unknown
  > = z.object({
    type: GetV2LogsId2Response200ApplicationJSONResponseBody1Type$inboundSchema,
    image_url: z.lazy(() =>
      GetV2LogsId2Response200ApplicationJSONResponseBody1ImageUrl$inboundSchema
    ),
  }).transform((v) => {
    return remap$(v, {
      "image_url": "imageUrl",
    });
  });

/** @internal */
export type GetV2LogsId2Response200ApplicationJSONResponseBody12$Outbound = {
  type: string;
  image_url:
    GetV2LogsId2Response200ApplicationJSONResponseBody1ImageUrl$Outbound;
};

/** @internal */
export const GetV2LogsId2Response200ApplicationJSONResponseBody12$outboundSchema:
  z.ZodType<
    GetV2LogsId2Response200ApplicationJSONResponseBody12$Outbound,
    z.ZodTypeDef,
    GetV2LogsId2Response200ApplicationJSONResponseBody12
  > = z.object({
    type:
      GetV2LogsId2Response200ApplicationJSONResponseBody1Type$outboundSchema,
    imageUrl: z.lazy(() =>
      GetV2LogsId2Response200ApplicationJSONResponseBody1ImageUrl$outboundSchema
    ),
  }).transform((v) => {
    return remap$(v, {
      imageUrl: "image_url",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsId2Response200ApplicationJSONResponseBody12$ {
  /** @deprecated use `GetV2LogsId2Response200ApplicationJSONResponseBody12$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsId2Response200ApplicationJSONResponseBody12$inboundSchema;
  /** @deprecated use `GetV2LogsId2Response200ApplicationJSONResponseBody12$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsId2Response200ApplicationJSONResponseBody12$outboundSchema;
  /** @deprecated use `GetV2LogsId2Response200ApplicationJSONResponseBody12$Outbound` instead. */
  export type Outbound =
    GetV2LogsId2Response200ApplicationJSONResponseBody12$Outbound;
}

export function getV2LogsId2Response200ApplicationJSONResponseBody12ToJSON(
  getV2LogsId2Response200ApplicationJSONResponseBody12:
    GetV2LogsId2Response200ApplicationJSONResponseBody12,
): string {
  return JSON.stringify(
    GetV2LogsId2Response200ApplicationJSONResponseBody12$outboundSchema.parse(
      getV2LogsId2Response200ApplicationJSONResponseBody12,
    ),
  );
}

export function getV2LogsId2Response200ApplicationJSONResponseBody12FromJSON(
  jsonString: string,
): SafeParseResult<
  GetV2LogsId2Response200ApplicationJSONResponseBody12,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetV2LogsId2Response200ApplicationJSONResponseBody12$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'GetV2LogsId2Response200ApplicationJSONResponseBody12' from JSON`,
  );
}

/** @internal */
export const GetV2LogsId2Response200ApplicationJSONResponseBody1EvalsType$inboundSchema:
  z.ZodNativeEnum<
    typeof GetV2LogsId2Response200ApplicationJSONResponseBody1EvalsType
  > = z.nativeEnum(
    GetV2LogsId2Response200ApplicationJSONResponseBody1EvalsType,
  );

/** @internal */
export const GetV2LogsId2Response200ApplicationJSONResponseBody1EvalsType$outboundSchema:
  z.ZodNativeEnum<
    typeof GetV2LogsId2Response200ApplicationJSONResponseBody1EvalsType
  > =
    GetV2LogsId2Response200ApplicationJSONResponseBody1EvalsType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsId2Response200ApplicationJSONResponseBody1EvalsType$ {
  /** @deprecated use `GetV2LogsId2Response200ApplicationJSONResponseBody1EvalsType$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsId2Response200ApplicationJSONResponseBody1EvalsType$inboundSchema;
  /** @deprecated use `GetV2LogsId2Response200ApplicationJSONResponseBody1EvalsType$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsId2Response200ApplicationJSONResponseBody1EvalsType$outboundSchema;
}

/** @internal */
export const GetV2LogsId2Response200ApplicationJSONResponseBody11$inboundSchema:
  z.ZodType<
    GetV2LogsId2Response200ApplicationJSONResponseBody11,
    z.ZodTypeDef,
    unknown
  > = z.object({
    type:
      GetV2LogsId2Response200ApplicationJSONResponseBody1EvalsType$inboundSchema,
    text: z.string(),
  });

/** @internal */
export type GetV2LogsId2Response200ApplicationJSONResponseBody11$Outbound = {
  type: string;
  text: string;
};

/** @internal */
export const GetV2LogsId2Response200ApplicationJSONResponseBody11$outboundSchema:
  z.ZodType<
    GetV2LogsId2Response200ApplicationJSONResponseBody11$Outbound,
    z.ZodTypeDef,
    GetV2LogsId2Response200ApplicationJSONResponseBody11
  > = z.object({
    type:
      GetV2LogsId2Response200ApplicationJSONResponseBody1EvalsType$outboundSchema,
    text: z.string(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsId2Response200ApplicationJSONResponseBody11$ {
  /** @deprecated use `GetV2LogsId2Response200ApplicationJSONResponseBody11$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsId2Response200ApplicationJSONResponseBody11$inboundSchema;
  /** @deprecated use `GetV2LogsId2Response200ApplicationJSONResponseBody11$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsId2Response200ApplicationJSONResponseBody11$outboundSchema;
  /** @deprecated use `GetV2LogsId2Response200ApplicationJSONResponseBody11$Outbound` instead. */
  export type Outbound =
    GetV2LogsId2Response200ApplicationJSONResponseBody11$Outbound;
}

export function getV2LogsId2Response200ApplicationJSONResponseBody11ToJSON(
  getV2LogsId2Response200ApplicationJSONResponseBody11:
    GetV2LogsId2Response200ApplicationJSONResponseBody11,
): string {
  return JSON.stringify(
    GetV2LogsId2Response200ApplicationJSONResponseBody11$outboundSchema.parse(
      getV2LogsId2Response200ApplicationJSONResponseBody11,
    ),
  );
}

export function getV2LogsId2Response200ApplicationJSONResponseBody11FromJSON(
  jsonString: string,
): SafeParseResult<
  GetV2LogsId2Response200ApplicationJSONResponseBody11,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetV2LogsId2Response200ApplicationJSONResponseBody11$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'GetV2LogsId2Response200ApplicationJSONResponseBody11' from JSON`,
  );
}

/** @internal */
export const GetV2LogsIdContentResponse200ApplicationJSONResponseBody12$inboundSchema:
  z.ZodType<
    GetV2LogsIdContentResponse200ApplicationJSONResponseBody12,
    z.ZodTypeDef,
    unknown
  > = z.union([
    z.lazy(() =>
      GetV2LogsId2Response200ApplicationJSONResponseBody11$inboundSchema
    ),
    z.lazy(() =>
      GetV2LogsId2Response200ApplicationJSONResponseBody12$inboundSchema
    ),
  ]);

/** @internal */
export type GetV2LogsIdContentResponse200ApplicationJSONResponseBody12$Outbound =
  | GetV2LogsId2Response200ApplicationJSONResponseBody11$Outbound
  | GetV2LogsId2Response200ApplicationJSONResponseBody12$Outbound;

/** @internal */
export const GetV2LogsIdContentResponse200ApplicationJSONResponseBody12$outboundSchema:
  z.ZodType<
    GetV2LogsIdContentResponse200ApplicationJSONResponseBody12$Outbound,
    z.ZodTypeDef,
    GetV2LogsIdContentResponse200ApplicationJSONResponseBody12
  > = z.union([
    z.lazy(() =>
      GetV2LogsId2Response200ApplicationJSONResponseBody11$outboundSchema
    ),
    z.lazy(() =>
      GetV2LogsId2Response200ApplicationJSONResponseBody12$outboundSchema
    ),
  ]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdContentResponse200ApplicationJSONResponseBody12$ {
  /** @deprecated use `GetV2LogsIdContentResponse200ApplicationJSONResponseBody12$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsIdContentResponse200ApplicationJSONResponseBody12$inboundSchema;
  /** @deprecated use `GetV2LogsIdContentResponse200ApplicationJSONResponseBody12$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdContentResponse200ApplicationJSONResponseBody12$outboundSchema;
  /** @deprecated use `GetV2LogsIdContentResponse200ApplicationJSONResponseBody12$Outbound` instead. */
  export type Outbound =
    GetV2LogsIdContentResponse200ApplicationJSONResponseBody12$Outbound;
}

export function getV2LogsIdContentResponse200ApplicationJSONResponseBody12ToJSON(
  getV2LogsIdContentResponse200ApplicationJSONResponseBody12:
    GetV2LogsIdContentResponse200ApplicationJSONResponseBody12,
): string {
  return JSON.stringify(
    GetV2LogsIdContentResponse200ApplicationJSONResponseBody12$outboundSchema
      .parse(getV2LogsIdContentResponse200ApplicationJSONResponseBody12),
  );
}

export function getV2LogsIdContentResponse200ApplicationJSONResponseBody12FromJSON(
  jsonString: string,
): SafeParseResult<
  GetV2LogsIdContentResponse200ApplicationJSONResponseBody12,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetV2LogsIdContentResponse200ApplicationJSONResponseBody12$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'GetV2LogsIdContentResponse200ApplicationJSONResponseBody12' from JSON`,
  );
}

/** @internal */
export const EvalsContent$inboundSchema: z.ZodType<
  EvalsContent,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.string(),
  z.array(z.union([
    z.lazy(() =>
      GetV2LogsId2Response200ApplicationJSONResponseBody11$inboundSchema
    ),
    z.lazy(() =>
      GetV2LogsId2Response200ApplicationJSONResponseBody12$inboundSchema
    ),
  ])),
]);

/** @internal */
export type EvalsContent$Outbound =
  | string
  | Array<
    | GetV2LogsId2Response200ApplicationJSONResponseBody11$Outbound
    | GetV2LogsId2Response200ApplicationJSONResponseBody12$Outbound
  >;

/** @internal */
export const EvalsContent$outboundSchema: z.ZodType<
  EvalsContent$Outbound,
  z.ZodTypeDef,
  EvalsContent
> = z.union([
  z.string(),
  z.array(z.union([
    z.lazy(() =>
      GetV2LogsId2Response200ApplicationJSONResponseBody11$outboundSchema
    ),
    z.lazy(() =>
      GetV2LogsId2Response200ApplicationJSONResponseBody12$outboundSchema
    ),
  ])),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EvalsContent$ {
  /** @deprecated use `EvalsContent$inboundSchema` instead. */
  export const inboundSchema = EvalsContent$inboundSchema;
  /** @deprecated use `EvalsContent$outboundSchema` instead. */
  export const outboundSchema = EvalsContent$outboundSchema;
  /** @deprecated use `EvalsContent$Outbound` instead. */
  export type Outbound = EvalsContent$Outbound;
}

export function evalsContentToJSON(evalsContent: EvalsContent): string {
  return JSON.stringify(EvalsContent$outboundSchema.parse(evalsContent));
}

export function evalsContentFromJSON(
  jsonString: string,
): SafeParseResult<EvalsContent, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => EvalsContent$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'EvalsContent' from JSON`,
  );
}

/** @internal */
export const GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody17WorkflowRunType$inboundSchema:
  z.ZodNativeEnum<
    typeof GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody17WorkflowRunType
  > = z.nativeEnum(
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody17WorkflowRunType,
  );

/** @internal */
export const GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody17WorkflowRunType$outboundSchema:
  z.ZodNativeEnum<
    typeof GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody17WorkflowRunType
  > =
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody17WorkflowRunType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody17WorkflowRunType$ {
  /** @deprecated use `GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody17WorkflowRunType$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody17WorkflowRunType$inboundSchema;
  /** @deprecated use `GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody17WorkflowRunType$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody17WorkflowRunType$outboundSchema;
}

/** @internal */
export const GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody1Function$inboundSchema:
  z.ZodType<
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody1Function,
    z.ZodTypeDef,
    unknown
  > = z.object({
    name: z.string(),
    arguments: z.string(),
  });

/** @internal */
export type GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody1Function$Outbound =
  {
    name: string;
    arguments: string;
  };

/** @internal */
export const GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody1Function$outboundSchema:
  z.ZodType<
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody1Function$Outbound,
    z.ZodTypeDef,
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody1Function
  > = z.object({
    name: z.string(),
    arguments: z.string(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody1Function$ {
  /** @deprecated use `GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody1Function$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody1Function$inboundSchema;
  /** @deprecated use `GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody1Function$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody1Function$outboundSchema;
  /** @deprecated use `GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody1Function$Outbound` instead. */
  export type Outbound =
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody1Function$Outbound;
}

export function getV2LogsIdEvalsResponse200ApplicationJSONResponseBody1FunctionToJSON(
  getV2LogsIdEvalsResponse200ApplicationJSONResponseBody1Function:
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody1Function,
): string {
  return JSON.stringify(
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody1Function$outboundSchema
      .parse(getV2LogsIdEvalsResponse200ApplicationJSONResponseBody1Function),
  );
}

export function getV2LogsIdEvalsResponse200ApplicationJSONResponseBody1FunctionFromJSON(
  jsonString: string,
): SafeParseResult<
  GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody1Function,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody1Function$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody1Function' from JSON`,
  );
}

/** @internal */
export const EvalsToolCalls$inboundSchema: z.ZodType<
  EvalsToolCalls,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string().optional(),
  index: z.number().optional(),
  type:
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody17WorkflowRunType$inboundSchema,
  function: z.lazy(() =>
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody1Function$inboundSchema
  ),
});

/** @internal */
export type EvalsToolCalls$Outbound = {
  id?: string | undefined;
  index?: number | undefined;
  type: string;
  function:
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody1Function$Outbound;
};

/** @internal */
export const EvalsToolCalls$outboundSchema: z.ZodType<
  EvalsToolCalls$Outbound,
  z.ZodTypeDef,
  EvalsToolCalls
> = z.object({
  id: z.string().optional(),
  index: z.number().optional(),
  type:
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody17WorkflowRunType$outboundSchema,
  function: z.lazy(() =>
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody1Function$outboundSchema
  ),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EvalsToolCalls$ {
  /** @deprecated use `EvalsToolCalls$inboundSchema` instead. */
  export const inboundSchema = EvalsToolCalls$inboundSchema;
  /** @deprecated use `EvalsToolCalls$outboundSchema` instead. */
  export const outboundSchema = EvalsToolCalls$outboundSchema;
  /** @deprecated use `EvalsToolCalls$Outbound` instead. */
  export type Outbound = EvalsToolCalls$Outbound;
}

export function evalsToolCallsToJSON(evalsToolCalls: EvalsToolCalls): string {
  return JSON.stringify(EvalsToolCalls$outboundSchema.parse(evalsToolCalls));
}

export function evalsToolCallsFromJSON(
  jsonString: string,
): SafeParseResult<EvalsToolCalls, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => EvalsToolCalls$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'EvalsToolCalls' from JSON`,
  );
}

/** @internal */
export const EvalsMessages$inboundSchema: z.ZodType<
  EvalsMessages,
  z.ZodTypeDef,
  unknown
> = z.object({
  role: EvalsRole$inboundSchema,
  content: z.union([
    z.string(),
    z.array(z.union([
      z.lazy(() =>
        GetV2LogsId2Response200ApplicationJSONResponseBody11$inboundSchema
      ),
      z.lazy(() =>
        GetV2LogsId2Response200ApplicationJSONResponseBody12$inboundSchema
      ),
    ])),
  ]),
  tool_calls: z.array(z.lazy(() => EvalsToolCalls$inboundSchema)).optional(),
  id: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "tool_calls": "toolCalls",
  });
});

/** @internal */
export type EvalsMessages$Outbound = {
  role: string;
  content:
    | string
    | Array<
      | GetV2LogsId2Response200ApplicationJSONResponseBody11$Outbound
      | GetV2LogsId2Response200ApplicationJSONResponseBody12$Outbound
    >;
  tool_calls?: Array<EvalsToolCalls$Outbound> | undefined;
  id?: string | undefined;
};

/** @internal */
export const EvalsMessages$outboundSchema: z.ZodType<
  EvalsMessages$Outbound,
  z.ZodTypeDef,
  EvalsMessages
> = z.object({
  role: EvalsRole$outboundSchema,
  content: z.union([
    z.string(),
    z.array(z.union([
      z.lazy(() =>
        GetV2LogsId2Response200ApplicationJSONResponseBody11$outboundSchema
      ),
      z.lazy(() =>
        GetV2LogsId2Response200ApplicationJSONResponseBody12$outboundSchema
      ),
    ])),
  ]),
  toolCalls: z.array(z.lazy(() => EvalsToolCalls$outboundSchema)).optional(),
  id: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    toolCalls: "tool_calls",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EvalsMessages$ {
  /** @deprecated use `EvalsMessages$inboundSchema` instead. */
  export const inboundSchema = EvalsMessages$inboundSchema;
  /** @deprecated use `EvalsMessages$outboundSchema` instead. */
  export const outboundSchema = EvalsMessages$outboundSchema;
  /** @deprecated use `EvalsMessages$Outbound` instead. */
  export type Outbound = EvalsMessages$Outbound;
}

export function evalsMessagesToJSON(evalsMessages: EvalsMessages): string {
  return JSON.stringify(EvalsMessages$outboundSchema.parse(evalsMessages));
}

export function evalsMessagesFromJSON(
  jsonString: string,
): SafeParseResult<EvalsMessages, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => EvalsMessages$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'EvalsMessages' from JSON`,
  );
}

/** @internal */
export const EvalsPromptConfig$inboundSchema: z.ZodType<
  EvalsPromptConfig,
  z.ZodTypeDef,
  unknown
> = z.object({
  stream: z.boolean(),
  model: z.string(),
  model_db_id: z.string(),
  model_type: EvalsModelType$inboundSchema,
  model_parameters: z.lazy(() => EvalsModelParameters$inboundSchema),
  provider: EvalsProvider$inboundSchema,
  messages: z.array(z.lazy(() => EvalsMessages$inboundSchema)),
  integration_id: z.nullable(z.string()).optional(),
  version: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "model_db_id": "modelDbId",
    "model_type": "modelType",
    "model_parameters": "modelParameters",
    "integration_id": "integrationId",
  });
});

/** @internal */
export type EvalsPromptConfig$Outbound = {
  stream: boolean;
  model: string;
  model_db_id: string;
  model_type: string;
  model_parameters: EvalsModelParameters$Outbound;
  provider: string;
  messages: Array<EvalsMessages$Outbound>;
  integration_id?: string | null | undefined;
  version?: string | undefined;
};

/** @internal */
export const EvalsPromptConfig$outboundSchema: z.ZodType<
  EvalsPromptConfig$Outbound,
  z.ZodTypeDef,
  EvalsPromptConfig
> = z.object({
  stream: z.boolean(),
  model: z.string(),
  modelDbId: z.string(),
  modelType: EvalsModelType$outboundSchema,
  modelParameters: z.lazy(() => EvalsModelParameters$outboundSchema),
  provider: EvalsProvider$outboundSchema,
  messages: z.array(z.lazy(() => EvalsMessages$outboundSchema)),
  integrationId: z.nullable(z.string()).optional(),
  version: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    modelDbId: "model_db_id",
    modelType: "model_type",
    modelParameters: "model_parameters",
    integrationId: "integration_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EvalsPromptConfig$ {
  /** @deprecated use `EvalsPromptConfig$inboundSchema` instead. */
  export const inboundSchema = EvalsPromptConfig$inboundSchema;
  /** @deprecated use `EvalsPromptConfig$outboundSchema` instead. */
  export const outboundSchema = EvalsPromptConfig$outboundSchema;
  /** @deprecated use `EvalsPromptConfig$Outbound` instead. */
  export type Outbound = EvalsPromptConfig$Outbound;
}

export function evalsPromptConfigToJSON(
  evalsPromptConfig: EvalsPromptConfig,
): string {
  return JSON.stringify(
    EvalsPromptConfig$outboundSchema.parse(evalsPromptConfig),
  );
}

export function evalsPromptConfigFromJSON(
  jsonString: string,
): SafeParseResult<EvalsPromptConfig, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => EvalsPromptConfig$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'EvalsPromptConfig' from JSON`,
  );
}

/** @internal */
export const EvalsVariables$inboundSchema: z.ZodType<
  EvalsVariables,
  z.ZodTypeDef,
  unknown
> = z.object({
  key: z.string(),
  value: z.any().optional(),
  is_pii: z.boolean().default(false),
}).transform((v) => {
  return remap$(v, {
    "is_pii": "isPii",
  });
});

/** @internal */
export type EvalsVariables$Outbound = {
  key: string;
  value?: any | undefined;
  is_pii: boolean;
};

/** @internal */
export const EvalsVariables$outboundSchema: z.ZodType<
  EvalsVariables$Outbound,
  z.ZodTypeDef,
  EvalsVariables
> = z.object({
  key: z.string(),
  value: z.any().optional(),
  isPii: z.boolean().default(false),
}).transform((v) => {
  return remap$(v, {
    isPii: "is_pii",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EvalsVariables$ {
  /** @deprecated use `EvalsVariables$inboundSchema` instead. */
  export const inboundSchema = EvalsVariables$inboundSchema;
  /** @deprecated use `EvalsVariables$outboundSchema` instead. */
  export const outboundSchema = EvalsVariables$outboundSchema;
  /** @deprecated use `EvalsVariables$Outbound` instead. */
  export type Outbound = EvalsVariables$Outbound;
}

export function evalsVariablesToJSON(evalsVariables: EvalsVariables): string {
  return JSON.stringify(EvalsVariables$outboundSchema.parse(evalsVariables));
}

export function evalsVariablesFromJSON(
  jsonString: string,
): SafeParseResult<EvalsVariables, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => EvalsVariables$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'EvalsVariables' from JSON`,
  );
}

/** @internal */
export const EvalsPerformance$inboundSchema: z.ZodType<
  EvalsPerformance,
  z.ZodTypeDef,
  unknown
> = z.object({
  latency: z.number(),
  first_time_to_token: z.nullable(z.number()).optional(),
  tokens_per_second: z.nullable(z.number()).optional(),
}).transform((v) => {
  return remap$(v, {
    "first_time_to_token": "firstTimeToToken",
    "tokens_per_second": "tokensPerSecond",
  });
});

/** @internal */
export type EvalsPerformance$Outbound = {
  latency: number;
  first_time_to_token?: number | null | undefined;
  tokens_per_second?: number | null | undefined;
};

/** @internal */
export const EvalsPerformance$outboundSchema: z.ZodType<
  EvalsPerformance$Outbound,
  z.ZodTypeDef,
  EvalsPerformance
> = z.object({
  latency: z.number(),
  firstTimeToToken: z.nullable(z.number()).optional(),
  tokensPerSecond: z.nullable(z.number()).optional(),
}).transform((v) => {
  return remap$(v, {
    firstTimeToToken: "first_time_to_token",
    tokensPerSecond: "tokens_per_second",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EvalsPerformance$ {
  /** @deprecated use `EvalsPerformance$inboundSchema` instead. */
  export const inboundSchema = EvalsPerformance$inboundSchema;
  /** @deprecated use `EvalsPerformance$outboundSchema` instead. */
  export const outboundSchema = EvalsPerformance$outboundSchema;
  /** @deprecated use `EvalsPerformance$Outbound` instead. */
  export type Outbound = EvalsPerformance$Outbound;
}

export function evalsPerformanceToJSON(
  evalsPerformance: EvalsPerformance,
): string {
  return JSON.stringify(
    EvalsPerformance$outboundSchema.parse(evalsPerformance),
  );
}

export function evalsPerformanceFromJSON(
  jsonString: string,
): SafeParseResult<EvalsPerformance, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => EvalsPerformance$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'EvalsPerformance' from JSON`,
  );
}

/** @internal */
export const EvalsPromptTokensDetails$inboundSchema: z.ZodType<
  EvalsPromptTokensDetails,
  z.ZodTypeDef,
  unknown
> = z.object({
  cached_tokens: z.number().optional(),
}).transform((v) => {
  return remap$(v, {
    "cached_tokens": "cachedTokens",
  });
});

/** @internal */
export type EvalsPromptTokensDetails$Outbound = {
  cached_tokens?: number | undefined;
};

/** @internal */
export const EvalsPromptTokensDetails$outboundSchema: z.ZodType<
  EvalsPromptTokensDetails$Outbound,
  z.ZodTypeDef,
  EvalsPromptTokensDetails
> = z.object({
  cachedTokens: z.number().optional(),
}).transform((v) => {
  return remap$(v, {
    cachedTokens: "cached_tokens",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EvalsPromptTokensDetails$ {
  /** @deprecated use `EvalsPromptTokensDetails$inboundSchema` instead. */
  export const inboundSchema = EvalsPromptTokensDetails$inboundSchema;
  /** @deprecated use `EvalsPromptTokensDetails$outboundSchema` instead. */
  export const outboundSchema = EvalsPromptTokensDetails$outboundSchema;
  /** @deprecated use `EvalsPromptTokensDetails$Outbound` instead. */
  export type Outbound = EvalsPromptTokensDetails$Outbound;
}

export function evalsPromptTokensDetailsToJSON(
  evalsPromptTokensDetails: EvalsPromptTokensDetails,
): string {
  return JSON.stringify(
    EvalsPromptTokensDetails$outboundSchema.parse(evalsPromptTokensDetails),
  );
}

export function evalsPromptTokensDetailsFromJSON(
  jsonString: string,
): SafeParseResult<EvalsPromptTokensDetails, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => EvalsPromptTokensDetails$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'EvalsPromptTokensDetails' from JSON`,
  );
}

/** @internal */
export const EvalsCompletionTokensDetails$inboundSchema: z.ZodType<
  EvalsCompletionTokensDetails,
  z.ZodTypeDef,
  unknown
> = z.object({
  reasoning_tokens: z.number().optional(),
}).transform((v) => {
  return remap$(v, {
    "reasoning_tokens": "reasoningTokens",
  });
});

/** @internal */
export type EvalsCompletionTokensDetails$Outbound = {
  reasoning_tokens?: number | undefined;
};

/** @internal */
export const EvalsCompletionTokensDetails$outboundSchema: z.ZodType<
  EvalsCompletionTokensDetails$Outbound,
  z.ZodTypeDef,
  EvalsCompletionTokensDetails
> = z.object({
  reasoningTokens: z.number().optional(),
}).transform((v) => {
  return remap$(v, {
    reasoningTokens: "reasoning_tokens",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EvalsCompletionTokensDetails$ {
  /** @deprecated use `EvalsCompletionTokensDetails$inboundSchema` instead. */
  export const inboundSchema = EvalsCompletionTokensDetails$inboundSchema;
  /** @deprecated use `EvalsCompletionTokensDetails$outboundSchema` instead. */
  export const outboundSchema = EvalsCompletionTokensDetails$outboundSchema;
  /** @deprecated use `EvalsCompletionTokensDetails$Outbound` instead. */
  export type Outbound = EvalsCompletionTokensDetails$Outbound;
}

export function evalsCompletionTokensDetailsToJSON(
  evalsCompletionTokensDetails: EvalsCompletionTokensDetails,
): string {
  return JSON.stringify(
    EvalsCompletionTokensDetails$outboundSchema.parse(
      evalsCompletionTokensDetails,
    ),
  );
}

export function evalsCompletionTokensDetailsFromJSON(
  jsonString: string,
): SafeParseResult<EvalsCompletionTokensDetails, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => EvalsCompletionTokensDetails$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'EvalsCompletionTokensDetails' from JSON`,
  );
}

/** @internal */
export const EvalsUsage$inboundSchema: z.ZodType<
  EvalsUsage,
  z.ZodTypeDef,
  unknown
> = z.object({
  total_tokens: z.number().optional(),
  prompt_tokens: z.number().optional(),
  completion_tokens: z.number().optional(),
  prompt_tokens_details: z.lazy(() => EvalsPromptTokensDetails$inboundSchema)
    .optional(),
  completion_tokens_details: z.lazy(() =>
    EvalsCompletionTokensDetails$inboundSchema
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    "total_tokens": "totalTokens",
    "prompt_tokens": "promptTokens",
    "completion_tokens": "completionTokens",
    "prompt_tokens_details": "promptTokensDetails",
    "completion_tokens_details": "completionTokensDetails",
  });
});

/** @internal */
export type EvalsUsage$Outbound = {
  total_tokens?: number | undefined;
  prompt_tokens?: number | undefined;
  completion_tokens?: number | undefined;
  prompt_tokens_details?: EvalsPromptTokensDetails$Outbound | undefined;
  completion_tokens_details?: EvalsCompletionTokensDetails$Outbound | undefined;
};

/** @internal */
export const EvalsUsage$outboundSchema: z.ZodType<
  EvalsUsage$Outbound,
  z.ZodTypeDef,
  EvalsUsage
> = z.object({
  totalTokens: z.number().optional(),
  promptTokens: z.number().optional(),
  completionTokens: z.number().optional(),
  promptTokensDetails: z.lazy(() => EvalsPromptTokensDetails$outboundSchema)
    .optional(),
  completionTokensDetails: z.lazy(() =>
    EvalsCompletionTokensDetails$outboundSchema
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    totalTokens: "total_tokens",
    promptTokens: "prompt_tokens",
    completionTokens: "completion_tokens",
    promptTokensDetails: "prompt_tokens_details",
    completionTokensDetails: "completion_tokens_details",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EvalsUsage$ {
  /** @deprecated use `EvalsUsage$inboundSchema` instead. */
  export const inboundSchema = EvalsUsage$inboundSchema;
  /** @deprecated use `EvalsUsage$outboundSchema` instead. */
  export const outboundSchema = EvalsUsage$outboundSchema;
  /** @deprecated use `EvalsUsage$Outbound` instead. */
  export type Outbound = EvalsUsage$Outbound;
}

export function evalsUsageToJSON(evalsUsage: EvalsUsage): string {
  return JSON.stringify(EvalsUsage$outboundSchema.parse(evalsUsage));
}

export function evalsUsageFromJSON(
  jsonString: string,
): SafeParseResult<EvalsUsage, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => EvalsUsage$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'EvalsUsage' from JSON`,
  );
}

/** @internal */
export const EvalsBilling$inboundSchema: z.ZodType<
  EvalsBilling,
  z.ZodTypeDef,
  unknown
> = z.object({
  total_cost: z.nullable(z.number()).optional(),
  input_cost: z.nullable(z.number()).optional(),
  output_cost: z.nullable(z.number()).optional(),
  billable: z.boolean(),
}).transform((v) => {
  return remap$(v, {
    "total_cost": "totalCost",
    "input_cost": "inputCost",
    "output_cost": "outputCost",
  });
});

/** @internal */
export type EvalsBilling$Outbound = {
  total_cost?: number | null | undefined;
  input_cost?: number | null | undefined;
  output_cost?: number | null | undefined;
  billable: boolean;
};

/** @internal */
export const EvalsBilling$outboundSchema: z.ZodType<
  EvalsBilling$Outbound,
  z.ZodTypeDef,
  EvalsBilling
> = z.object({
  totalCost: z.nullable(z.number()).optional(),
  inputCost: z.nullable(z.number()).optional(),
  outputCost: z.nullable(z.number()).optional(),
  billable: z.boolean(),
}).transform((v) => {
  return remap$(v, {
    totalCost: "total_cost",
    inputCost: "input_cost",
    outputCost: "output_cost",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EvalsBilling$ {
  /** @deprecated use `EvalsBilling$inboundSchema` instead. */
  export const inboundSchema = EvalsBilling$inboundSchema;
  /** @deprecated use `EvalsBilling$outboundSchema` instead. */
  export const outboundSchema = EvalsBilling$outboundSchema;
  /** @deprecated use `EvalsBilling$Outbound` instead. */
  export type Outbound = EvalsBilling$Outbound;
}

export function evalsBillingToJSON(evalsBilling: EvalsBilling): string {
  return JSON.stringify(EvalsBilling$outboundSchema.parse(evalsBilling));
}

export function evalsBillingFromJSON(
  jsonString: string,
): SafeParseResult<EvalsBilling, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => EvalsBilling$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'EvalsBilling' from JSON`,
  );
}

/** @internal */
export const GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody17Type$inboundSchema:
  z.ZodNativeEnum<
    typeof GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody17Type
  > = z.nativeEnum(
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody17Type,
  );

/** @internal */
export const GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody17Type$outboundSchema:
  z.ZodNativeEnum<
    typeof GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody17Type
  > =
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody17Type$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody17Type$ {
  /** @deprecated use `GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody17Type$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody17Type$inboundSchema;
  /** @deprecated use `GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody17Type$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody17Type$outboundSchema;
}

/** @internal */
export const GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody17WorkflowRunDataType$inboundSchema:
  z.ZodNativeEnum<
    typeof GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody17WorkflowRunDataType
  > = z.nativeEnum(
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody17WorkflowRunDataType,
  );

/** @internal */
export const GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody17WorkflowRunDataType$outboundSchema:
  z.ZodNativeEnum<
    typeof GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody17WorkflowRunDataType
  > =
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody17WorkflowRunDataType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody17WorkflowRunDataType$ {
  /** @deprecated use `GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody17WorkflowRunDataType$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody17WorkflowRunDataType$inboundSchema;
  /** @deprecated use `GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody17WorkflowRunDataType$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody17WorkflowRunDataType$outboundSchema;
}

/** @internal */
export const EvalsParameters$inboundSchema: z.ZodType<
  EvalsParameters,
  z.ZodTypeDef,
  unknown
> = z.object({
  type:
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody17WorkflowRunDataType$inboundSchema,
  properties: z.record(z.any()),
  required: z.array(z.string()).optional(),
  additionalProperties: z.boolean().optional(),
});

/** @internal */
export type EvalsParameters$Outbound = {
  type: string;
  properties: { [k: string]: any };
  required?: Array<string> | undefined;
  additionalProperties?: boolean | undefined;
};

/** @internal */
export const EvalsParameters$outboundSchema: z.ZodType<
  EvalsParameters$Outbound,
  z.ZodTypeDef,
  EvalsParameters
> = z.object({
  type:
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody17WorkflowRunDataType$outboundSchema,
  properties: z.record(z.any()),
  required: z.array(z.string()).optional(),
  additionalProperties: z.boolean().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EvalsParameters$ {
  /** @deprecated use `EvalsParameters$inboundSchema` instead. */
  export const inboundSchema = EvalsParameters$inboundSchema;
  /** @deprecated use `EvalsParameters$outboundSchema` instead. */
  export const outboundSchema = EvalsParameters$outboundSchema;
  /** @deprecated use `EvalsParameters$Outbound` instead. */
  export type Outbound = EvalsParameters$Outbound;
}

export function evalsParametersToJSON(
  evalsParameters: EvalsParameters,
): string {
  return JSON.stringify(EvalsParameters$outboundSchema.parse(evalsParameters));
}

export function evalsParametersFromJSON(
  jsonString: string,
): SafeParseResult<EvalsParameters, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => EvalsParameters$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'EvalsParameters' from JSON`,
  );
}

/** @internal */
export const EvalsFunction$inboundSchema: z.ZodType<
  EvalsFunction,
  z.ZodTypeDef,
  unknown
> = z.object({
  name: z.string(),
  description: z.string().optional(),
  strict: z.boolean().optional(),
  parameters: z.lazy(() => EvalsParameters$inboundSchema),
});

/** @internal */
export type EvalsFunction$Outbound = {
  name: string;
  description?: string | undefined;
  strict?: boolean | undefined;
  parameters: EvalsParameters$Outbound;
};

/** @internal */
export const EvalsFunction$outboundSchema: z.ZodType<
  EvalsFunction$Outbound,
  z.ZodTypeDef,
  EvalsFunction
> = z.object({
  name: z.string(),
  description: z.string().optional(),
  strict: z.boolean().optional(),
  parameters: z.lazy(() => EvalsParameters$outboundSchema),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EvalsFunction$ {
  /** @deprecated use `EvalsFunction$inboundSchema` instead. */
  export const inboundSchema = EvalsFunction$inboundSchema;
  /** @deprecated use `EvalsFunction$outboundSchema` instead. */
  export const outboundSchema = EvalsFunction$outboundSchema;
  /** @deprecated use `EvalsFunction$Outbound` instead. */
  export type Outbound = EvalsFunction$Outbound;
}

export function evalsFunctionToJSON(evalsFunction: EvalsFunction): string {
  return JSON.stringify(EvalsFunction$outboundSchema.parse(evalsFunction));
}

export function evalsFunctionFromJSON(
  jsonString: string,
): SafeParseResult<EvalsFunction, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => EvalsFunction$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'EvalsFunction' from JSON`,
  );
}

/** @internal */
export const EvalsTools$inboundSchema: z.ZodType<
  EvalsTools,
  z.ZodTypeDef,
  unknown
> = z.object({
  type:
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody17Type$inboundSchema,
  function: z.lazy(() => EvalsFunction$inboundSchema),
});

/** @internal */
export type EvalsTools$Outbound = {
  type: string;
  function: EvalsFunction$Outbound;
};

/** @internal */
export const EvalsTools$outboundSchema: z.ZodType<
  EvalsTools$Outbound,
  z.ZodTypeDef,
  EvalsTools
> = z.object({
  type:
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody17Type$outboundSchema,
  function: z.lazy(() => EvalsFunction$outboundSchema),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EvalsTools$ {
  /** @deprecated use `EvalsTools$inboundSchema` instead. */
  export const inboundSchema = EvalsTools$inboundSchema;
  /** @deprecated use `EvalsTools$outboundSchema` instead. */
  export const outboundSchema = EvalsTools$outboundSchema;
  /** @deprecated use `EvalsTools$Outbound` instead. */
  export type Outbound = EvalsTools$Outbound;
}

export function evalsToolsToJSON(evalsTools: EvalsTools): string {
  return JSON.stringify(EvalsTools$outboundSchema.parse(evalsTools));
}

export function evalsToolsFromJSON(
  jsonString: string,
): SafeParseResult<EvalsTools, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => EvalsTools$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'EvalsTools' from JSON`,
  );
}

/** @internal */
export const EvalsPromptSnippets$inboundSchema: z.ZodType<
  EvalsPromptSnippets,
  z.ZodTypeDef,
  unknown
> = z.object({
  _id: z.string(),
  key: z.string(),
  value: z.string(),
}).transform((v) => {
  return remap$(v, {
    "_id": "id",
  });
});

/** @internal */
export type EvalsPromptSnippets$Outbound = {
  _id: string;
  key: string;
  value: string;
};

/** @internal */
export const EvalsPromptSnippets$outboundSchema: z.ZodType<
  EvalsPromptSnippets$Outbound,
  z.ZodTypeDef,
  EvalsPromptSnippets
> = z.object({
  id: z.string(),
  key: z.string(),
  value: z.string(),
}).transform((v) => {
  return remap$(v, {
    id: "_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EvalsPromptSnippets$ {
  /** @deprecated use `EvalsPromptSnippets$inboundSchema` instead. */
  export const inboundSchema = EvalsPromptSnippets$inboundSchema;
  /** @deprecated use `EvalsPromptSnippets$outboundSchema` instead. */
  export const outboundSchema = EvalsPromptSnippets$outboundSchema;
  /** @deprecated use `EvalsPromptSnippets$Outbound` instead. */
  export type Outbound = EvalsPromptSnippets$Outbound;
}

export function evalsPromptSnippetsToJSON(
  evalsPromptSnippets: EvalsPromptSnippets,
): string {
  return JSON.stringify(
    EvalsPromptSnippets$outboundSchema.parse(evalsPromptSnippets),
  );
}

export function evalsPromptSnippetsFromJSON(
  jsonString: string,
): SafeParseResult<EvalsPromptSnippets, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => EvalsPromptSnippets$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'EvalsPromptSnippets' from JSON`,
  );
}

/** @internal */
export const EvalsData$inboundSchema: z.ZodType<
  EvalsData,
  z.ZodTypeDef,
  unknown
> = z.object({
  choices: z.array(z.lazy(() => EvalsChoices$inboundSchema)).optional(),
  action: EvalsAction$inboundSchema,
  prompt_config: z.lazy(() => EvalsPromptConfig$inboundSchema),
  variables: z.array(z.lazy(() => EvalsVariables$inboundSchema)),
  performance: z.lazy(() => EvalsPerformance$inboundSchema).optional(),
  usage: z.lazy(() => EvalsUsage$inboundSchema).optional(),
  billing: z.lazy(() => EvalsBilling$inboundSchema).optional(),
  tools: z.array(z.lazy(() => EvalsTools$inboundSchema)).optional(),
  prompt_snippets: z.array(z.lazy(() => EvalsPromptSnippets$inboundSchema)),
}).transform((v) => {
  return remap$(v, {
    "prompt_config": "promptConfig",
    "prompt_snippets": "promptSnippets",
  });
});

/** @internal */
export type EvalsData$Outbound = {
  choices?: Array<EvalsChoices$Outbound> | undefined;
  action: string;
  prompt_config: EvalsPromptConfig$Outbound;
  variables: Array<EvalsVariables$Outbound>;
  performance?: EvalsPerformance$Outbound | undefined;
  usage?: EvalsUsage$Outbound | undefined;
  billing?: EvalsBilling$Outbound | undefined;
  tools?: Array<EvalsTools$Outbound> | undefined;
  prompt_snippets: Array<EvalsPromptSnippets$Outbound>;
};

/** @internal */
export const EvalsData$outboundSchema: z.ZodType<
  EvalsData$Outbound,
  z.ZodTypeDef,
  EvalsData
> = z.object({
  choices: z.array(z.lazy(() => EvalsChoices$outboundSchema)).optional(),
  action: EvalsAction$outboundSchema,
  promptConfig: z.lazy(() => EvalsPromptConfig$outboundSchema),
  variables: z.array(z.lazy(() => EvalsVariables$outboundSchema)),
  performance: z.lazy(() => EvalsPerformance$outboundSchema).optional(),
  usage: z.lazy(() => EvalsUsage$outboundSchema).optional(),
  billing: z.lazy(() => EvalsBilling$outboundSchema).optional(),
  tools: z.array(z.lazy(() => EvalsTools$outboundSchema)).optional(),
  promptSnippets: z.array(z.lazy(() => EvalsPromptSnippets$outboundSchema)),
}).transform((v) => {
  return remap$(v, {
    promptConfig: "prompt_config",
    promptSnippets: "prompt_snippets",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EvalsData$ {
  /** @deprecated use `EvalsData$inboundSchema` instead. */
  export const inboundSchema = EvalsData$inboundSchema;
  /** @deprecated use `EvalsData$outboundSchema` instead. */
  export const outboundSchema = EvalsData$outboundSchema;
  /** @deprecated use `EvalsData$Outbound` instead. */
  export type Outbound = EvalsData$Outbound;
}

export function evalsDataToJSON(evalsData: EvalsData): string {
  return JSON.stringify(EvalsData$outboundSchema.parse(evalsData));
}

export function evalsDataFromJSON(
  jsonString: string,
): SafeParseResult<EvalsData, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => EvalsData$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'EvalsData' from JSON`,
  );
}

/** @internal */
export const WorkflowRun$inboundSchema: z.ZodType<
  WorkflowRun,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  workflow_metadata: z.record(z.any()).optional(),
  workflow_input: z.record(z.any()).optional(),
  workflow_output: z.record(z.any()).optional(),
  request_properties: z.lazy(() => EvalsRequestProperties$inboundSchema)
    .optional(),
  started_at: z.string().datetime({ offset: true }).transform(v => new Date(v)),
  finished_at: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
  product_type: EvalsProductType$inboundSchema,
  related_entities: z.array(
    z.lazy(() =>
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals71$inboundSchema
    ),
  ),
  evals: z.array(
    z.union([
      z.lazy(() => GetV2LogsIdEvalsResponse200ApplicationJson1$inboundSchema),
      z.lazy(() => GetV2LogsIdEvalsResponse200ApplicationJson2$inboundSchema),
      z.lazy(() => GetV2LogsIdEvalsResponse200ApplicationJson3$inboundSchema),
      z.lazy(() => GetV2LogsIdEvalsResponse200ApplicationJson4$inboundSchema),
    ]),
  ),
  data: z.lazy(() => EvalsData$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "workflow_metadata": "workflowMetadata",
    "workflow_input": "workflowInput",
    "workflow_output": "workflowOutput",
    "request_properties": "requestProperties",
    "started_at": "startedAt",
    "finished_at": "finishedAt",
    "product_type": "productType",
    "related_entities": "relatedEntities",
  });
});

/** @internal */
export type WorkflowRun$Outbound = {
  id: string;
  workflow_metadata?: { [k: string]: any } | undefined;
  workflow_input?: { [k: string]: any } | undefined;
  workflow_output?: { [k: string]: any } | undefined;
  request_properties?: EvalsRequestProperties$Outbound | undefined;
  started_at: string;
  finished_at?: string | undefined;
  product_type: string;
  related_entities: Array<
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals71$Outbound
  >;
  evals: Array<
    | GetV2LogsIdEvalsResponse200ApplicationJson1$Outbound
    | GetV2LogsIdEvalsResponse200ApplicationJson2$Outbound
    | GetV2LogsIdEvalsResponse200ApplicationJson3$Outbound
    | GetV2LogsIdEvalsResponse200ApplicationJson4$Outbound
  >;
  data: EvalsData$Outbound;
};

/** @internal */
export const WorkflowRun$outboundSchema: z.ZodType<
  WorkflowRun$Outbound,
  z.ZodTypeDef,
  WorkflowRun
> = z.object({
  id: z.string(),
  workflowMetadata: z.record(z.any()).optional(),
  workflowInput: z.record(z.any()).optional(),
  workflowOutput: z.record(z.any()).optional(),
  requestProperties: z.lazy(() => EvalsRequestProperties$outboundSchema)
    .optional(),
  startedAt: z.date().transform(v => v.toISOString()),
  finishedAt: z.date().transform(v => v.toISOString()).optional(),
  productType: EvalsProductType$outboundSchema,
  relatedEntities: z.array(
    z.lazy(() =>
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals71$outboundSchema
    ),
  ),
  evals: z.array(
    z.union([
      z.lazy(() => GetV2LogsIdEvalsResponse200ApplicationJson1$outboundSchema),
      z.lazy(() => GetV2LogsIdEvalsResponse200ApplicationJson2$outboundSchema),
      z.lazy(() => GetV2LogsIdEvalsResponse200ApplicationJson3$outboundSchema),
      z.lazy(() => GetV2LogsIdEvalsResponse200ApplicationJson4$outboundSchema),
    ]),
  ),
  data: z.lazy(() => EvalsData$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    workflowMetadata: "workflow_metadata",
    workflowInput: "workflow_input",
    workflowOutput: "workflow_output",
    requestProperties: "request_properties",
    startedAt: "started_at",
    finishedAt: "finished_at",
    productType: "product_type",
    relatedEntities: "related_entities",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace WorkflowRun$ {
  /** @deprecated use `WorkflowRun$inboundSchema` instead. */
  export const inboundSchema = WorkflowRun$inboundSchema;
  /** @deprecated use `WorkflowRun$outboundSchema` instead. */
  export const outboundSchema = WorkflowRun$outboundSchema;
  /** @deprecated use `WorkflowRun$Outbound` instead. */
  export type Outbound = WorkflowRun$Outbound;
}

export function workflowRunToJSON(workflowRun: WorkflowRun): string {
  return JSON.stringify(WorkflowRun$outboundSchema.parse(workflowRun));
}

export function workflowRunFromJSON(
  jsonString: string,
): SafeParseResult<WorkflowRun, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => WorkflowRun$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'WorkflowRun' from JSON`,
  );
}

/** @internal */
export const GetV2LogsIdEvalsResponse200ApplicationJSONResponseBodyStatus$inboundSchema:
  z.ZodNativeEnum<
    typeof GetV2LogsIdEvalsResponse200ApplicationJSONResponseBodyStatus
  > = z.nativeEnum(
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBodyStatus,
  );

/** @internal */
export const GetV2LogsIdEvalsResponse200ApplicationJSONResponseBodyStatus$outboundSchema:
  z.ZodNativeEnum<
    typeof GetV2LogsIdEvalsResponse200ApplicationJSONResponseBodyStatus
  > =
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBodyStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdEvalsResponse200ApplicationJSONResponseBodyStatus$ {
  /** @deprecated use `GetV2LogsIdEvalsResponse200ApplicationJSONResponseBodyStatus$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBodyStatus$inboundSchema;
  /** @deprecated use `GetV2LogsIdEvalsResponse200ApplicationJSONResponseBodyStatus$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBodyStatus$outboundSchema;
}

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals74Type$inboundSchema:
  z.ZodNativeEnum<
    typeof GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals74Type
  > = z.nativeEnum(
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals74Type,
  );

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals74Type$outboundSchema:
  z.ZodNativeEnum<
    typeof GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals74Type
  > =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals74Type$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals74Type$ {
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals74Type$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals74Type$inboundSchema;
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals74Type$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals74Type$outboundSchema;
}

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals4$inboundSchema:
  z.ZodType<
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals4,
    z.ZodTypeDef,
    unknown
  > = z.object({
    type:
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals74Type$inboundSchema,
    evaluator_id: z.string(),
  }).transform((v) => {
    return remap$(v, {
      "evaluator_id": "evaluatorId",
    });
  });

/** @internal */
export type GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals4$Outbound =
  {
    type: string;
    evaluator_id: string;
  };

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals4$outboundSchema:
  z.ZodType<
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals4$Outbound,
    z.ZodTypeDef,
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals4
  > = z.object({
    type:
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals74Type$outboundSchema,
    evaluatorId: z.string(),
  }).transform((v) => {
    return remap$(v, {
      evaluatorId: "evaluator_id",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals4$ {
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals4$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals4$inboundSchema;
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals4$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals4$outboundSchema;
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals4$Outbound` instead. */
  export type Outbound =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals4$Outbound;
}

export function getV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals4ToJSON(
  getV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals4:
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals4,
): string {
  return JSON.stringify(
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals4$outboundSchema
      .parse(
        getV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals4,
      ),
  );
}

export function getV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals4FromJSON(
  jsonString: string,
): SafeParseResult<
  GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals4,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals4$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals4' from JSON`,
  );
}

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals73Type$inboundSchema:
  z.ZodNativeEnum<
    typeof GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals73Type
  > = z.nativeEnum(
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals73Type,
  );

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals73Type$outboundSchema:
  z.ZodNativeEnum<
    typeof GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals73Type
  > =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals73Type$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals73Type$ {
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals73Type$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals73Type$inboundSchema;
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals73Type$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals73Type$outboundSchema;
}

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals3$inboundSchema:
  z.ZodType<
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals3,
    z.ZodTypeDef,
    unknown
  > = z.object({
    type:
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals73Type$inboundSchema,
    human_eval_id: z.string(),
  }).transform((v) => {
    return remap$(v, {
      "human_eval_id": "humanEvalId",
    });
  });

/** @internal */
export type GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals3$Outbound =
  {
    type: string;
    human_eval_id: string;
  };

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals3$outboundSchema:
  z.ZodType<
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals3$Outbound,
    z.ZodTypeDef,
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals3
  > = z.object({
    type:
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals73Type$outboundSchema,
    humanEvalId: z.string(),
  }).transform((v) => {
    return remap$(v, {
      humanEvalId: "human_eval_id",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals3$ {
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals3$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals3$inboundSchema;
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals3$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals3$outboundSchema;
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals3$Outbound` instead. */
  export type Outbound =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals3$Outbound;
}

export function getV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals3ToJSON(
  getV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals3:
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals3,
): string {
  return JSON.stringify(
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals3$outboundSchema
      .parse(
        getV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals3,
      ),
  );
}

export function getV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals3FromJSON(
  jsonString: string,
): SafeParseResult<
  GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals3,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals3$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals3' from JSON`,
  );
}

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals72Type$inboundSchema:
  z.ZodNativeEnum<
    typeof GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals72Type
  > = z.nativeEnum(
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals72Type,
  );

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals72Type$outboundSchema:
  z.ZodNativeEnum<
    typeof GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals72Type
  > =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals72Type$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals72Type$ {
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals72Type$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals72Type$inboundSchema;
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals72Type$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals72Type$outboundSchema;
}

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals2$inboundSchema:
  z.ZodType<
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals2,
    z.ZodTypeDef,
    unknown
  > = z.object({
    type:
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals72Type$inboundSchema,
    contact_id: z.string(),
  }).transform((v) => {
    return remap$(v, {
      "contact_id": "contactId",
    });
  });

/** @internal */
export type GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals2$Outbound =
  {
    type: string;
    contact_id: string;
  };

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals2$outboundSchema:
  z.ZodType<
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals2$Outbound,
    z.ZodTypeDef,
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals2
  > = z.object({
    type:
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals72Type$outboundSchema,
    contactId: z.string(),
  }).transform((v) => {
    return remap$(v, {
      contactId: "contact_id",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals2$ {
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals2$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals2$inboundSchema;
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals2$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals2$outboundSchema;
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals2$Outbound` instead. */
  export type Outbound =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals2$Outbound;
}

export function getV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals2ToJSON(
  getV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals2:
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals2,
): string {
  return JSON.stringify(
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals2$outboundSchema
      .parse(
        getV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals2,
      ),
  );
}

export function getV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals2FromJSON(
  jsonString: string,
): SafeParseResult<
  GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals2,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals2$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals2' from JSON`,
  );
}

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals7Type$inboundSchema:
  z.ZodNativeEnum<
    typeof GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals7Type
  > = z.nativeEnum(
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals7Type,
  );

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals7Type$outboundSchema:
  z.ZodNativeEnum<
    typeof GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals7Type
  > =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals7Type$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals7Type$ {
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals7Type$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals7Type$inboundSchema;
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals7Type$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals7Type$outboundSchema;
}

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals1$inboundSchema:
  z.ZodType<
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals1,
    z.ZodTypeDef,
    unknown
  > = z.object({
    type:
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals7Type$inboundSchema,
    account_id: z.string(),
  }).transform((v) => {
    return remap$(v, {
      "account_id": "accountId",
    });
  });

/** @internal */
export type GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals1$Outbound =
  {
    type: string;
    account_id: string;
  };

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals1$outboundSchema:
  z.ZodType<
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals1$Outbound,
    z.ZodTypeDef,
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals1
  > = z.object({
    type:
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals7Type$outboundSchema,
    accountId: z.string(),
  }).transform((v) => {
    return remap$(v, {
      accountId: "account_id",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals1$ {
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals1$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals1$inboundSchema;
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals1$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals1$outboundSchema;
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals1$Outbound` instead. */
  export type Outbound =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals1$Outbound;
}

export function getV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals1ToJSON(
  getV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals1:
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals1,
): string {
  return JSON.stringify(
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals1$outboundSchema
      .parse(
        getV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals1,
      ),
  );
}

export function getV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals1FromJSON(
  jsonString: string,
): SafeParseResult<
  GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals1,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals1$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals1' from JSON`,
  );
}

/** @internal */
export const GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody1RelatedEntities$inboundSchema:
  z.ZodType<
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody1RelatedEntities,
    z.ZodTypeDef,
    unknown
  > = z.union([
    z.lazy(() =>
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals1$inboundSchema
    ),
    z.lazy(() =>
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals2$inboundSchema
    ),
    z.lazy(() =>
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals3$inboundSchema
    ),
    z.lazy(() =>
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals4$inboundSchema
    ),
  ]);

/** @internal */
export type GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody1RelatedEntities$Outbound =
  | GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals1$Outbound
  | GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals2$Outbound
  | GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals3$Outbound
  | GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals4$Outbound;

/** @internal */
export const GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody1RelatedEntities$outboundSchema:
  z.ZodType<
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody1RelatedEntities$Outbound,
    z.ZodTypeDef,
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody1RelatedEntities
  > = z.union([
    z.lazy(() =>
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals1$outboundSchema
    ),
    z.lazy(() =>
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals2$outboundSchema
    ),
    z.lazy(() =>
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals3$outboundSchema
    ),
    z.lazy(() =>
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals4$outboundSchema
    ),
  ]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody1RelatedEntities$ {
  /** @deprecated use `GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody1RelatedEntities$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody1RelatedEntities$inboundSchema;
  /** @deprecated use `GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody1RelatedEntities$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody1RelatedEntities$outboundSchema;
  /** @deprecated use `GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody1RelatedEntities$Outbound` instead. */
  export type Outbound =
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody1RelatedEntities$Outbound;
}

export function getV2LogsIdEvalsResponse200ApplicationJSONResponseBody1RelatedEntitiesToJSON(
  getV2LogsIdEvalsResponse200ApplicationJSONResponseBody1RelatedEntities:
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody1RelatedEntities,
): string {
  return JSON.stringify(
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody1RelatedEntities$outboundSchema
      .parse(
        getV2LogsIdEvalsResponse200ApplicationJSONResponseBody1RelatedEntities,
      ),
  );
}

export function getV2LogsIdEvalsResponse200ApplicationJSONResponseBody1RelatedEntitiesFromJSON(
  jsonString: string,
): SafeParseResult<
  GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody1RelatedEntities,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody1RelatedEntities$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody1RelatedEntities' from JSON`,
  );
}

/** @internal */
export const Evals7$inboundSchema: z.ZodType<Evals7, z.ZodTypeDef, unknown> = z
  .object({
    type:
      GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody1Type$inboundSchema,
    workflow_run: z.lazy(() => WorkflowRun$inboundSchema),
    id: z.string(),
    status:
      GetV2LogsIdEvalsResponse200ApplicationJSONResponseBodyStatus$inboundSchema,
    timestamp: z.string().datetime({ offset: true }).transform(v =>
      new Date(v)
    ),
    related_entities: z.array(
      z.union([
        z.lazy(() =>
          GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals1$inboundSchema
        ),
        z.lazy(() =>
          GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals2$inboundSchema
        ),
        z.lazy(() =>
          GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals3$inboundSchema
        ),
        z.lazy(() =>
          GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals4$inboundSchema
        ),
      ]),
    ),
  }).transform((v) => {
    return remap$(v, {
      "workflow_run": "workflowRun",
      "related_entities": "relatedEntities",
    });
  });

/** @internal */
export type Evals7$Outbound = {
  type: string;
  workflow_run: WorkflowRun$Outbound;
  id: string;
  status: string;
  timestamp: string;
  related_entities: Array<
    | GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals1$Outbound
    | GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals2$Outbound
    | GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals3$Outbound
    | GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals4$Outbound
  >;
};

/** @internal */
export const Evals7$outboundSchema: z.ZodType<
  Evals7$Outbound,
  z.ZodTypeDef,
  Evals7
> = z.object({
  type:
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBody1Type$outboundSchema,
  workflowRun: z.lazy(() => WorkflowRun$outboundSchema),
  id: z.string(),
  status:
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBodyStatus$outboundSchema,
  timestamp: z.date().transform(v => v.toISOString()),
  relatedEntities: z.array(
    z.union([
      z.lazy(() =>
        GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals1$outboundSchema
      ),
      z.lazy(() =>
        GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals2$outboundSchema
      ),
      z.lazy(() =>
        GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals3$outboundSchema
      ),
      z.lazy(() =>
        GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals4$outboundSchema
      ),
    ]),
  ),
}).transform((v) => {
  return remap$(v, {
    workflowRun: "workflow_run",
    relatedEntities: "related_entities",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Evals7$ {
  /** @deprecated use `Evals7$inboundSchema` instead. */
  export const inboundSchema = Evals7$inboundSchema;
  /** @deprecated use `Evals7$outboundSchema` instead. */
  export const outboundSchema = Evals7$outboundSchema;
  /** @deprecated use `Evals7$Outbound` instead. */
  export type Outbound = Evals7$Outbound;
}

export function evals7ToJSON(evals7: Evals7): string {
  return JSON.stringify(Evals7$outboundSchema.parse(evals7));
}

export function evals7FromJSON(
  jsonString: string,
): SafeParseResult<Evals7, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Evals7$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Evals7' from JSON`,
  );
}

/** @internal */
export const GetV2LogsIdEvalsResponse200ApplicationJSONResponseBodyType$inboundSchema:
  z.ZodNativeEnum<
    typeof GetV2LogsIdEvalsResponse200ApplicationJSONResponseBodyType
  > = z.nativeEnum(GetV2LogsIdEvalsResponse200ApplicationJSONResponseBodyType);

/** @internal */
export const GetV2LogsIdEvalsResponse200ApplicationJSONResponseBodyType$outboundSchema:
  z.ZodNativeEnum<
    typeof GetV2LogsIdEvalsResponse200ApplicationJSONResponseBodyType
  > = GetV2LogsIdEvalsResponse200ApplicationJSONResponseBodyType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdEvalsResponse200ApplicationJSONResponseBodyType$ {
  /** @deprecated use `GetV2LogsIdEvalsResponse200ApplicationJSONResponseBodyType$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBodyType$inboundSchema;
  /** @deprecated use `GetV2LogsIdEvalsResponse200ApplicationJSONResponseBodyType$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBodyType$outboundSchema;
}

/** @internal */
export const GetV2LogsIdEvalsValue$inboundSchema: z.ZodType<
  GetV2LogsIdEvalsValue,
  z.ZodTypeDef,
  unknown
> = z.object({
  f1: z.number(),
  precision: z.number(),
  recall: z.number(),
});

/** @internal */
export type GetV2LogsIdEvalsValue$Outbound = {
  f1: number;
  precision: number;
  recall: number;
};

/** @internal */
export const GetV2LogsIdEvalsValue$outboundSchema: z.ZodType<
  GetV2LogsIdEvalsValue$Outbound,
  z.ZodTypeDef,
  GetV2LogsIdEvalsValue
> = z.object({
  f1: z.number(),
  precision: z.number(),
  recall: z.number(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdEvalsValue$ {
  /** @deprecated use `GetV2LogsIdEvalsValue$inboundSchema` instead. */
  export const inboundSchema = GetV2LogsIdEvalsValue$inboundSchema;
  /** @deprecated use `GetV2LogsIdEvalsValue$outboundSchema` instead. */
  export const outboundSchema = GetV2LogsIdEvalsValue$outboundSchema;
  /** @deprecated use `GetV2LogsIdEvalsValue$Outbound` instead. */
  export type Outbound = GetV2LogsIdEvalsValue$Outbound;
}

export function getV2LogsIdEvalsValueToJSON(
  getV2LogsIdEvalsValue: GetV2LogsIdEvalsValue,
): string {
  return JSON.stringify(
    GetV2LogsIdEvalsValue$outboundSchema.parse(getV2LogsIdEvalsValue),
  );
}

export function getV2LogsIdEvalsValueFromJSON(
  jsonString: string,
): SafeParseResult<GetV2LogsIdEvalsValue, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetV2LogsIdEvalsValue$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetV2LogsIdEvalsValue' from JSON`,
  );
}

/** @internal */
export const GetV2LogsIdEvalsResponse200ApplicationJSONStatus$inboundSchema:
  z.ZodNativeEnum<typeof GetV2LogsIdEvalsResponse200ApplicationJSONStatus> = z
    .nativeEnum(GetV2LogsIdEvalsResponse200ApplicationJSONStatus);

/** @internal */
export const GetV2LogsIdEvalsResponse200ApplicationJSONStatus$outboundSchema:
  z.ZodNativeEnum<typeof GetV2LogsIdEvalsResponse200ApplicationJSONStatus> =
    GetV2LogsIdEvalsResponse200ApplicationJSONStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdEvalsResponse200ApplicationJSONStatus$ {
  /** @deprecated use `GetV2LogsIdEvalsResponse200ApplicationJSONStatus$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsIdEvalsResponse200ApplicationJSONStatus$inboundSchema;
  /** @deprecated use `GetV2LogsIdEvalsResponse200ApplicationJSONStatus$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdEvalsResponse200ApplicationJSONStatus$outboundSchema;
}

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals64Type$inboundSchema:
  z.ZodNativeEnum<
    typeof GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals64Type
  > = z.nativeEnum(
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals64Type,
  );

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals64Type$outboundSchema:
  z.ZodNativeEnum<
    typeof GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals64Type
  > =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals64Type$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals64Type$ {
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals64Type$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals64Type$inboundSchema;
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals64Type$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals64Type$outboundSchema;
}

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody14$inboundSchema:
  z.ZodType<
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody14,
    z.ZodTypeDef,
    unknown
  > = z.object({
    type:
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals64Type$inboundSchema,
    evaluator_id: z.string(),
  }).transform((v) => {
    return remap$(v, {
      "evaluator_id": "evaluatorId",
    });
  });

/** @internal */
export type GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody14$Outbound =
  {
    type: string;
    evaluator_id: string;
  };

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody14$outboundSchema:
  z.ZodType<
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody14$Outbound,
    z.ZodTypeDef,
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody14
  > = z.object({
    type:
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals64Type$outboundSchema,
    evaluatorId: z.string(),
  }).transform((v) => {
    return remap$(v, {
      evaluatorId: "evaluator_id",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody14$ {
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody14$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody14$inboundSchema;
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody14$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody14$outboundSchema;
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody14$Outbound` instead. */
  export type Outbound =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody14$Outbound;
}

export function getV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody14ToJSON(
  getV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody14:
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody14,
): string {
  return JSON.stringify(
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody14$outboundSchema
      .parse(
        getV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody14,
      ),
  );
}

export function getV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody14FromJSON(
  jsonString: string,
): SafeParseResult<
  GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody14,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody14$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody14' from JSON`,
  );
}

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals63Type$inboundSchema:
  z.ZodNativeEnum<
    typeof GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals63Type
  > = z.nativeEnum(
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals63Type,
  );

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals63Type$outboundSchema:
  z.ZodNativeEnum<
    typeof GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals63Type
  > =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals63Type$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals63Type$ {
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals63Type$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals63Type$inboundSchema;
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals63Type$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals63Type$outboundSchema;
}

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody13$inboundSchema:
  z.ZodType<
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody13,
    z.ZodTypeDef,
    unknown
  > = z.object({
    type:
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals63Type$inboundSchema,
    human_eval_id: z.string(),
  }).transform((v) => {
    return remap$(v, {
      "human_eval_id": "humanEvalId",
    });
  });

/** @internal */
export type GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody13$Outbound =
  {
    type: string;
    human_eval_id: string;
  };

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody13$outboundSchema:
  z.ZodType<
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody13$Outbound,
    z.ZodTypeDef,
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody13
  > = z.object({
    type:
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals63Type$outboundSchema,
    humanEvalId: z.string(),
  }).transform((v) => {
    return remap$(v, {
      humanEvalId: "human_eval_id",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody13$ {
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody13$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody13$inboundSchema;
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody13$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody13$outboundSchema;
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody13$Outbound` instead. */
  export type Outbound =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody13$Outbound;
}

export function getV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody13ToJSON(
  getV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody13:
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody13,
): string {
  return JSON.stringify(
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody13$outboundSchema
      .parse(
        getV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody13,
      ),
  );
}

export function getV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody13FromJSON(
  jsonString: string,
): SafeParseResult<
  GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody13,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody13$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody13' from JSON`,
  );
}

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals62Type$inboundSchema:
  z.ZodNativeEnum<
    typeof GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals62Type
  > = z.nativeEnum(
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals62Type,
  );

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals62Type$outboundSchema:
  z.ZodNativeEnum<
    typeof GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals62Type
  > =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals62Type$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals62Type$ {
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals62Type$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals62Type$inboundSchema;
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals62Type$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals62Type$outboundSchema;
}

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody12$inboundSchema:
  z.ZodType<
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody12,
    z.ZodTypeDef,
    unknown
  > = z.object({
    type:
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals62Type$inboundSchema,
    contact_id: z.string(),
  }).transform((v) => {
    return remap$(v, {
      "contact_id": "contactId",
    });
  });

/** @internal */
export type GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody12$Outbound =
  {
    type: string;
    contact_id: string;
  };

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody12$outboundSchema:
  z.ZodType<
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody12$Outbound,
    z.ZodTypeDef,
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody12
  > = z.object({
    type:
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals62Type$outboundSchema,
    contactId: z.string(),
  }).transform((v) => {
    return remap$(v, {
      contactId: "contact_id",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody12$ {
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody12$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody12$inboundSchema;
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody12$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody12$outboundSchema;
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody12$Outbound` instead. */
  export type Outbound =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody12$Outbound;
}

export function getV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody12ToJSON(
  getV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody12:
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody12,
): string {
  return JSON.stringify(
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody12$outboundSchema
      .parse(
        getV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody12,
      ),
  );
}

export function getV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody12FromJSON(
  jsonString: string,
): SafeParseResult<
  GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody12,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody12$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody12' from JSON`,
  );
}

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals6Type$inboundSchema:
  z.ZodNativeEnum<
    typeof GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals6Type
  > = z.nativeEnum(
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals6Type,
  );

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals6Type$outboundSchema:
  z.ZodNativeEnum<
    typeof GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals6Type
  > =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals6Type$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals6Type$ {
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals6Type$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals6Type$inboundSchema;
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals6Type$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals6Type$outboundSchema;
}

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody11$inboundSchema:
  z.ZodType<
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody11,
    z.ZodTypeDef,
    unknown
  > = z.object({
    type:
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals6Type$inboundSchema,
    account_id: z.string(),
  }).transform((v) => {
    return remap$(v, {
      "account_id": "accountId",
    });
  });

/** @internal */
export type GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody11$Outbound =
  {
    type: string;
    account_id: string;
  };

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody11$outboundSchema:
  z.ZodType<
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody11$Outbound,
    z.ZodTypeDef,
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody11
  > = z.object({
    type:
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals6Type$outboundSchema,
    accountId: z.string(),
  }).transform((v) => {
    return remap$(v, {
      accountId: "account_id",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody11$ {
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody11$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody11$inboundSchema;
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody11$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody11$outboundSchema;
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody11$Outbound` instead. */
  export type Outbound =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody11$Outbound;
}

export function getV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody11ToJSON(
  getV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody11:
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody11,
): string {
  return JSON.stringify(
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody11$outboundSchema
      .parse(
        getV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody11,
      ),
  );
}

export function getV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody11FromJSON(
  jsonString: string,
): SafeParseResult<
  GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody11,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody11$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody11' from JSON`,
  );
}

/** @internal */
export const GetV2LogsIdEvalsResponse200ApplicationJSONResponseBodyRelatedEntities$inboundSchema:
  z.ZodType<
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBodyRelatedEntities,
    z.ZodTypeDef,
    unknown
  > = z.union([
    z.lazy(() =>
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody11$inboundSchema
    ),
    z.lazy(() =>
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody12$inboundSchema
    ),
    z.lazy(() =>
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody13$inboundSchema
    ),
    z.lazy(() =>
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody14$inboundSchema
    ),
  ]);

/** @internal */
export type GetV2LogsIdEvalsResponse200ApplicationJSONResponseBodyRelatedEntities$Outbound =
  | GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody11$Outbound
  | GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody12$Outbound
  | GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody13$Outbound
  | GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody14$Outbound;

/** @internal */
export const GetV2LogsIdEvalsResponse200ApplicationJSONResponseBodyRelatedEntities$outboundSchema:
  z.ZodType<
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBodyRelatedEntities$Outbound,
    z.ZodTypeDef,
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBodyRelatedEntities
  > = z.union([
    z.lazy(() =>
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody11$outboundSchema
    ),
    z.lazy(() =>
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody12$outboundSchema
    ),
    z.lazy(() =>
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody13$outboundSchema
    ),
    z.lazy(() =>
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody14$outboundSchema
    ),
  ]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdEvalsResponse200ApplicationJSONResponseBodyRelatedEntities$ {
  /** @deprecated use `GetV2LogsIdEvalsResponse200ApplicationJSONResponseBodyRelatedEntities$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBodyRelatedEntities$inboundSchema;
  /** @deprecated use `GetV2LogsIdEvalsResponse200ApplicationJSONResponseBodyRelatedEntities$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBodyRelatedEntities$outboundSchema;
  /** @deprecated use `GetV2LogsIdEvalsResponse200ApplicationJSONResponseBodyRelatedEntities$Outbound` instead. */
  export type Outbound =
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBodyRelatedEntities$Outbound;
}

export function getV2LogsIdEvalsResponse200ApplicationJSONResponseBodyRelatedEntitiesToJSON(
  getV2LogsIdEvalsResponse200ApplicationJSONResponseBodyRelatedEntities:
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBodyRelatedEntities,
): string {
  return JSON.stringify(
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBodyRelatedEntities$outboundSchema
      .parse(
        getV2LogsIdEvalsResponse200ApplicationJSONResponseBodyRelatedEntities,
      ),
  );
}

export function getV2LogsIdEvalsResponse200ApplicationJSONResponseBodyRelatedEntitiesFromJSON(
  jsonString: string,
): SafeParseResult<
  GetV2LogsIdEvalsResponse200ApplicationJSONResponseBodyRelatedEntities,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetV2LogsIdEvalsResponse200ApplicationJSONResponseBodyRelatedEntities$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'GetV2LogsIdEvalsResponse200ApplicationJSONResponseBodyRelatedEntities' from JSON`,
  );
}

/** @internal */
export const Evals6$inboundSchema: z.ZodType<Evals6, z.ZodTypeDef, unknown> = z
  .object({
    type:
      GetV2LogsIdEvalsResponse200ApplicationJSONResponseBodyType$inboundSchema,
    value: z.lazy(() => GetV2LogsIdEvalsValue$inboundSchema),
    id: z.string(),
    status: GetV2LogsIdEvalsResponse200ApplicationJSONStatus$inboundSchema,
    timestamp: z.string().datetime({ offset: true }).transform(v =>
      new Date(v)
    ),
    related_entities: z.array(
      z.union([
        z.lazy(() =>
          GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody11$inboundSchema
        ),
        z.lazy(() =>
          GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody12$inboundSchema
        ),
        z.lazy(() =>
          GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody13$inboundSchema
        ),
        z.lazy(() =>
          GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody14$inboundSchema
        ),
      ]),
    ),
  }).transform((v) => {
    return remap$(v, {
      "related_entities": "relatedEntities",
    });
  });

/** @internal */
export type Evals6$Outbound = {
  type: string;
  value: GetV2LogsIdEvalsValue$Outbound;
  id: string;
  status: string;
  timestamp: string;
  related_entities: Array<
    | GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody11$Outbound
    | GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody12$Outbound
    | GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody13$Outbound
    | GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody14$Outbound
  >;
};

/** @internal */
export const Evals6$outboundSchema: z.ZodType<
  Evals6$Outbound,
  z.ZodTypeDef,
  Evals6
> = z.object({
  type:
    GetV2LogsIdEvalsResponse200ApplicationJSONResponseBodyType$outboundSchema,
  value: z.lazy(() => GetV2LogsIdEvalsValue$outboundSchema),
  id: z.string(),
  status: GetV2LogsIdEvalsResponse200ApplicationJSONStatus$outboundSchema,
  timestamp: z.date().transform(v => v.toISOString()),
  relatedEntities: z.array(
    z.union([
      z.lazy(() =>
        GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody11$outboundSchema
      ),
      z.lazy(() =>
        GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody12$outboundSchema
      ),
      z.lazy(() =>
        GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody13$outboundSchema
      ),
      z.lazy(() =>
        GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody14$outboundSchema
      ),
    ]),
  ),
}).transform((v) => {
  return remap$(v, {
    relatedEntities: "related_entities",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Evals6$ {
  /** @deprecated use `Evals6$inboundSchema` instead. */
  export const inboundSchema = Evals6$inboundSchema;
  /** @deprecated use `Evals6$outboundSchema` instead. */
  export const outboundSchema = Evals6$outboundSchema;
  /** @deprecated use `Evals6$Outbound` instead. */
  export type Outbound = Evals6$Outbound;
}

export function evals6ToJSON(evals6: Evals6): string {
  return JSON.stringify(Evals6$outboundSchema.parse(evals6));
}

export function evals6FromJSON(
  jsonString: string,
): SafeParseResult<Evals6, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Evals6$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Evals6' from JSON`,
  );
}

/** @internal */
export const GetV2LogsIdEvalsResponse200ApplicationJSONType$inboundSchema:
  z.ZodNativeEnum<typeof GetV2LogsIdEvalsResponse200ApplicationJSONType> = z
    .nativeEnum(GetV2LogsIdEvalsResponse200ApplicationJSONType);

/** @internal */
export const GetV2LogsIdEvalsResponse200ApplicationJSONType$outboundSchema:
  z.ZodNativeEnum<typeof GetV2LogsIdEvalsResponse200ApplicationJSONType> =
    GetV2LogsIdEvalsResponse200ApplicationJSONType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdEvalsResponse200ApplicationJSONType$ {
  /** @deprecated use `GetV2LogsIdEvalsResponse200ApplicationJSONType$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsIdEvalsResponse200ApplicationJSONType$inboundSchema;
  /** @deprecated use `GetV2LogsIdEvalsResponse200ApplicationJSONType$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdEvalsResponse200ApplicationJSONType$outboundSchema;
}

/** @internal */
export const Rouge1$inboundSchema: z.ZodType<Rouge1, z.ZodTypeDef, unknown> = z
  .object({
    f1: z.number(),
    precision: z.number(),
    recall: z.number(),
  });

/** @internal */
export type Rouge1$Outbound = {
  f1: number;
  precision: number;
  recall: number;
};

/** @internal */
export const Rouge1$outboundSchema: z.ZodType<
  Rouge1$Outbound,
  z.ZodTypeDef,
  Rouge1
> = z.object({
  f1: z.number(),
  precision: z.number(),
  recall: z.number(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Rouge1$ {
  /** @deprecated use `Rouge1$inboundSchema` instead. */
  export const inboundSchema = Rouge1$inboundSchema;
  /** @deprecated use `Rouge1$outboundSchema` instead. */
  export const outboundSchema = Rouge1$outboundSchema;
  /** @deprecated use `Rouge1$Outbound` instead. */
  export type Outbound = Rouge1$Outbound;
}

export function rouge1ToJSON(rouge1: Rouge1): string {
  return JSON.stringify(Rouge1$outboundSchema.parse(rouge1));
}

export function rouge1FromJSON(
  jsonString: string,
): SafeParseResult<Rouge1, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Rouge1$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Rouge1' from JSON`,
  );
}

/** @internal */
export const Rouge2$inboundSchema: z.ZodType<Rouge2, z.ZodTypeDef, unknown> = z
  .object({
    f1: z.number(),
    precision: z.number(),
    recall: z.number(),
  });

/** @internal */
export type Rouge2$Outbound = {
  f1: number;
  precision: number;
  recall: number;
};

/** @internal */
export const Rouge2$outboundSchema: z.ZodType<
  Rouge2$Outbound,
  z.ZodTypeDef,
  Rouge2
> = z.object({
  f1: z.number(),
  precision: z.number(),
  recall: z.number(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Rouge2$ {
  /** @deprecated use `Rouge2$inboundSchema` instead. */
  export const inboundSchema = Rouge2$inboundSchema;
  /** @deprecated use `Rouge2$outboundSchema` instead. */
  export const outboundSchema = Rouge2$outboundSchema;
  /** @deprecated use `Rouge2$Outbound` instead. */
  export type Outbound = Rouge2$Outbound;
}

export function rouge2ToJSON(rouge2: Rouge2): string {
  return JSON.stringify(Rouge2$outboundSchema.parse(rouge2));
}

export function rouge2FromJSON(
  jsonString: string,
): SafeParseResult<Rouge2, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Rouge2$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Rouge2' from JSON`,
  );
}

/** @internal */
export const RougeL$inboundSchema: z.ZodType<RougeL, z.ZodTypeDef, unknown> = z
  .object({
    f1: z.number(),
    precision: z.number(),
    recall: z.number(),
  });

/** @internal */
export type RougeL$Outbound = {
  f1: number;
  precision: number;
  recall: number;
};

/** @internal */
export const RougeL$outboundSchema: z.ZodType<
  RougeL$Outbound,
  z.ZodTypeDef,
  RougeL
> = z.object({
  f1: z.number(),
  precision: z.number(),
  recall: z.number(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RougeL$ {
  /** @deprecated use `RougeL$inboundSchema` instead. */
  export const inboundSchema = RougeL$inboundSchema;
  /** @deprecated use `RougeL$outboundSchema` instead. */
  export const outboundSchema = RougeL$outboundSchema;
  /** @deprecated use `RougeL$Outbound` instead. */
  export type Outbound = RougeL$Outbound;
}

export function rougeLToJSON(rougeL: RougeL): string {
  return JSON.stringify(RougeL$outboundSchema.parse(rougeL));
}

export function rougeLFromJSON(
  jsonString: string,
): SafeParseResult<RougeL, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => RougeL$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RougeL' from JSON`,
  );
}

/** @internal */
export const EvalsValue$inboundSchema: z.ZodType<
  EvalsValue,
  z.ZodTypeDef,
  unknown
> = z.object({
  rouge_1: z.lazy(() => Rouge1$inboundSchema),
  rouge_2: z.lazy(() => Rouge2$inboundSchema),
  rouge_l: z.lazy(() => RougeL$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "rouge_1": "rouge1",
    "rouge_2": "rouge2",
    "rouge_l": "rougeL",
  });
});

/** @internal */
export type EvalsValue$Outbound = {
  rouge_1: Rouge1$Outbound;
  rouge_2: Rouge2$Outbound;
  rouge_l: RougeL$Outbound;
};

/** @internal */
export const EvalsValue$outboundSchema: z.ZodType<
  EvalsValue$Outbound,
  z.ZodTypeDef,
  EvalsValue
> = z.object({
  rouge1: z.lazy(() => Rouge1$outboundSchema),
  rouge2: z.lazy(() => Rouge2$outboundSchema),
  rougeL: z.lazy(() => RougeL$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    rouge1: "rouge_1",
    rouge2: "rouge_2",
    rougeL: "rouge_l",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EvalsValue$ {
  /** @deprecated use `EvalsValue$inboundSchema` instead. */
  export const inboundSchema = EvalsValue$inboundSchema;
  /** @deprecated use `EvalsValue$outboundSchema` instead. */
  export const outboundSchema = EvalsValue$outboundSchema;
  /** @deprecated use `EvalsValue$Outbound` instead. */
  export type Outbound = EvalsValue$Outbound;
}

export function evalsValueToJSON(evalsValue: EvalsValue): string {
  return JSON.stringify(EvalsValue$outboundSchema.parse(evalsValue));
}

export function evalsValueFromJSON(
  jsonString: string,
): SafeParseResult<EvalsValue, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => EvalsValue$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'EvalsValue' from JSON`,
  );
}

/** @internal */
export const GetV2LogsIdEvalsResponse200Status$inboundSchema: z.ZodNativeEnum<
  typeof GetV2LogsIdEvalsResponse200Status
> = z.nativeEnum(GetV2LogsIdEvalsResponse200Status);

/** @internal */
export const GetV2LogsIdEvalsResponse200Status$outboundSchema: z.ZodNativeEnum<
  typeof GetV2LogsIdEvalsResponse200Status
> = GetV2LogsIdEvalsResponse200Status$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdEvalsResponse200Status$ {
  /** @deprecated use `GetV2LogsIdEvalsResponse200Status$inboundSchema` instead. */
  export const inboundSchema = GetV2LogsIdEvalsResponse200Status$inboundSchema;
  /** @deprecated use `GetV2LogsIdEvalsResponse200Status$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdEvalsResponse200Status$outboundSchema;
}

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals54Type$inboundSchema:
  z.ZodNativeEnum<
    typeof GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals54Type
  > = z.nativeEnum(
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals54Type,
  );

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals54Type$outboundSchema:
  z.ZodNativeEnum<
    typeof GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals54Type
  > =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals54Type$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals54Type$ {
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals54Type$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals54Type$inboundSchema;
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals54Type$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals54Type$outboundSchema;
}

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4$inboundSchema:
  z.ZodType<
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4,
    z.ZodTypeDef,
    unknown
  > = z.object({
    type:
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals54Type$inboundSchema,
    evaluator_id: z.string(),
  }).transform((v) => {
    return remap$(v, {
      "evaluator_id": "evaluatorId",
    });
  });

/** @internal */
export type GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4$Outbound =
  {
    type: string;
    evaluator_id: string;
  };

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4$outboundSchema:
  z.ZodType<
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4$Outbound,
    z.ZodTypeDef,
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4
  > = z.object({
    type:
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals54Type$outboundSchema,
    evaluatorId: z.string(),
  }).transform((v) => {
    return remap$(v, {
      evaluatorId: "evaluator_id",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4$ {
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4$inboundSchema;
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4$outboundSchema;
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4$Outbound` instead. */
  export type Outbound =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4$Outbound;
}

export function getV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4ToJSON(
  getV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4:
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4,
): string {
  return JSON.stringify(
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4$outboundSchema
      .parse(getV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4),
  );
}

export function getV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4FromJSON(
  jsonString: string,
): SafeParseResult<
  GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4' from JSON`,
  );
}

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals53Type$inboundSchema:
  z.ZodNativeEnum<
    typeof GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals53Type
  > = z.nativeEnum(
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals53Type,
  );

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals53Type$outboundSchema:
  z.ZodNativeEnum<
    typeof GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals53Type
  > =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals53Type$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals53Type$ {
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals53Type$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals53Type$inboundSchema;
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals53Type$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals53Type$outboundSchema;
}

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3$inboundSchema:
  z.ZodType<
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3,
    z.ZodTypeDef,
    unknown
  > = z.object({
    type:
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals53Type$inboundSchema,
    human_eval_id: z.string(),
  }).transform((v) => {
    return remap$(v, {
      "human_eval_id": "humanEvalId",
    });
  });

/** @internal */
export type GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3$Outbound =
  {
    type: string;
    human_eval_id: string;
  };

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3$outboundSchema:
  z.ZodType<
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3$Outbound,
    z.ZodTypeDef,
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3
  > = z.object({
    type:
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals53Type$outboundSchema,
    humanEvalId: z.string(),
  }).transform((v) => {
    return remap$(v, {
      humanEvalId: "human_eval_id",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3$ {
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3$inboundSchema;
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3$outboundSchema;
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3$Outbound` instead. */
  export type Outbound =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3$Outbound;
}

export function getV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3ToJSON(
  getV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3:
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3,
): string {
  return JSON.stringify(
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3$outboundSchema
      .parse(getV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3),
  );
}

export function getV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3FromJSON(
  jsonString: string,
): SafeParseResult<
  GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3' from JSON`,
  );
}

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals52Type$inboundSchema:
  z.ZodNativeEnum<
    typeof GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals52Type
  > = z.nativeEnum(
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals52Type,
  );

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals52Type$outboundSchema:
  z.ZodNativeEnum<
    typeof GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals52Type
  > =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals52Type$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals52Type$ {
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals52Type$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals52Type$inboundSchema;
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals52Type$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals52Type$outboundSchema;
}

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2$inboundSchema:
  z.ZodType<
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2,
    z.ZodTypeDef,
    unknown
  > = z.object({
    type:
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals52Type$inboundSchema,
    contact_id: z.string(),
  }).transform((v) => {
    return remap$(v, {
      "contact_id": "contactId",
    });
  });

/** @internal */
export type GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2$Outbound =
  {
    type: string;
    contact_id: string;
  };

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2$outboundSchema:
  z.ZodType<
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2$Outbound,
    z.ZodTypeDef,
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2
  > = z.object({
    type:
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals52Type$outboundSchema,
    contactId: z.string(),
  }).transform((v) => {
    return remap$(v, {
      contactId: "contact_id",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2$ {
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2$inboundSchema;
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2$outboundSchema;
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2$Outbound` instead. */
  export type Outbound =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2$Outbound;
}

export function getV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2ToJSON(
  getV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2:
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2,
): string {
  return JSON.stringify(
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2$outboundSchema
      .parse(getV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2),
  );
}

export function getV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2FromJSON(
  jsonString: string,
): SafeParseResult<
  GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2' from JSON`,
  );
}

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals5Type$inboundSchema:
  z.ZodNativeEnum<
    typeof GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals5Type
  > = z.nativeEnum(
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals5Type,
  );

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals5Type$outboundSchema:
  z.ZodNativeEnum<
    typeof GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals5Type
  > =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals5Type$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals5Type$ {
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals5Type$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals5Type$inboundSchema;
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals5Type$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals5Type$outboundSchema;
}

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1$inboundSchema:
  z.ZodType<
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1,
    z.ZodTypeDef,
    unknown
  > = z.object({
    type:
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals5Type$inboundSchema,
    account_id: z.string(),
  }).transform((v) => {
    return remap$(v, {
      "account_id": "accountId",
    });
  });

/** @internal */
export type GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1$Outbound =
  {
    type: string;
    account_id: string;
  };

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1$outboundSchema:
  z.ZodType<
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1$Outbound,
    z.ZodTypeDef,
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1
  > = z.object({
    type:
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals5Type$outboundSchema,
    accountId: z.string(),
  }).transform((v) => {
    return remap$(v, {
      accountId: "account_id",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1$ {
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1$inboundSchema;
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1$outboundSchema;
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1$Outbound` instead. */
  export type Outbound =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1$Outbound;
}

export function getV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1ToJSON(
  getV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1:
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1,
): string {
  return JSON.stringify(
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1$outboundSchema
      .parse(getV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1),
  );
}

export function getV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1FromJSON(
  jsonString: string,
): SafeParseResult<
  GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1' from JSON`,
  );
}

/** @internal */
export const GetV2LogsIdEvalsResponse200ApplicationJSONRelatedEntities$inboundSchema:
  z.ZodType<
    GetV2LogsIdEvalsResponse200ApplicationJSONRelatedEntities,
    z.ZodTypeDef,
    unknown
  > = z.union([
    z.lazy(() =>
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1$inboundSchema
    ),
    z.lazy(() =>
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2$inboundSchema
    ),
    z.lazy(() =>
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3$inboundSchema
    ),
    z.lazy(() =>
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4$inboundSchema
    ),
  ]);

/** @internal */
export type GetV2LogsIdEvalsResponse200ApplicationJSONRelatedEntities$Outbound =
  | GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1$Outbound
  | GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2$Outbound
  | GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3$Outbound
  | GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4$Outbound;

/** @internal */
export const GetV2LogsIdEvalsResponse200ApplicationJSONRelatedEntities$outboundSchema:
  z.ZodType<
    GetV2LogsIdEvalsResponse200ApplicationJSONRelatedEntities$Outbound,
    z.ZodTypeDef,
    GetV2LogsIdEvalsResponse200ApplicationJSONRelatedEntities
  > = z.union([
    z.lazy(() =>
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1$outboundSchema
    ),
    z.lazy(() =>
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2$outboundSchema
    ),
    z.lazy(() =>
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3$outboundSchema
    ),
    z.lazy(() =>
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4$outboundSchema
    ),
  ]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdEvalsResponse200ApplicationJSONRelatedEntities$ {
  /** @deprecated use `GetV2LogsIdEvalsResponse200ApplicationJSONRelatedEntities$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsIdEvalsResponse200ApplicationJSONRelatedEntities$inboundSchema;
  /** @deprecated use `GetV2LogsIdEvalsResponse200ApplicationJSONRelatedEntities$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdEvalsResponse200ApplicationJSONRelatedEntities$outboundSchema;
  /** @deprecated use `GetV2LogsIdEvalsResponse200ApplicationJSONRelatedEntities$Outbound` instead. */
  export type Outbound =
    GetV2LogsIdEvalsResponse200ApplicationJSONRelatedEntities$Outbound;
}

export function getV2LogsIdEvalsResponse200ApplicationJSONRelatedEntitiesToJSON(
  getV2LogsIdEvalsResponse200ApplicationJSONRelatedEntities:
    GetV2LogsIdEvalsResponse200ApplicationJSONRelatedEntities,
): string {
  return JSON.stringify(
    GetV2LogsIdEvalsResponse200ApplicationJSONRelatedEntities$outboundSchema
      .parse(getV2LogsIdEvalsResponse200ApplicationJSONRelatedEntities),
  );
}

export function getV2LogsIdEvalsResponse200ApplicationJSONRelatedEntitiesFromJSON(
  jsonString: string,
): SafeParseResult<
  GetV2LogsIdEvalsResponse200ApplicationJSONRelatedEntities,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetV2LogsIdEvalsResponse200ApplicationJSONRelatedEntities$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'GetV2LogsIdEvalsResponse200ApplicationJSONRelatedEntities' from JSON`,
  );
}

/** @internal */
export const Evals5$inboundSchema: z.ZodType<Evals5, z.ZodTypeDef, unknown> = z
  .object({
    type: GetV2LogsIdEvalsResponse200ApplicationJSONType$inboundSchema,
    value: z.lazy(() => EvalsValue$inboundSchema),
    id: z.string(),
    status: GetV2LogsIdEvalsResponse200Status$inboundSchema,
    timestamp: z.string().datetime({ offset: true }).transform(v =>
      new Date(v)
    ),
    related_entities: z.array(
      z.union([
        z.lazy(() =>
          GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1$inboundSchema
        ),
        z.lazy(() =>
          GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2$inboundSchema
        ),
        z.lazy(() =>
          GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3$inboundSchema
        ),
        z.lazy(() =>
          GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4$inboundSchema
        ),
      ]),
    ),
  }).transform((v) => {
    return remap$(v, {
      "related_entities": "relatedEntities",
    });
  });

/** @internal */
export type Evals5$Outbound = {
  type: string;
  value: EvalsValue$Outbound;
  id: string;
  status: string;
  timestamp: string;
  related_entities: Array<
    | GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1$Outbound
    | GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2$Outbound
    | GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3$Outbound
    | GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4$Outbound
  >;
};

/** @internal */
export const Evals5$outboundSchema: z.ZodType<
  Evals5$Outbound,
  z.ZodTypeDef,
  Evals5
> = z.object({
  type: GetV2LogsIdEvalsResponse200ApplicationJSONType$outboundSchema,
  value: z.lazy(() => EvalsValue$outboundSchema),
  id: z.string(),
  status: GetV2LogsIdEvalsResponse200Status$outboundSchema,
  timestamp: z.date().transform(v => v.toISOString()),
  relatedEntities: z.array(
    z.union([
      z.lazy(() =>
        GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1$outboundSchema
      ),
      z.lazy(() =>
        GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody2$outboundSchema
      ),
      z.lazy(() =>
        GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody3$outboundSchema
      ),
      z.lazy(() =>
        GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody4$outboundSchema
      ),
    ]),
  ),
}).transform((v) => {
  return remap$(v, {
    relatedEntities: "related_entities",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Evals5$ {
  /** @deprecated use `Evals5$inboundSchema` instead. */
  export const inboundSchema = Evals5$inboundSchema;
  /** @deprecated use `Evals5$outboundSchema` instead. */
  export const outboundSchema = Evals5$outboundSchema;
  /** @deprecated use `Evals5$Outbound` instead. */
  export type Outbound = Evals5$Outbound;
}

export function evals5ToJSON(evals5: Evals5): string {
  return JSON.stringify(Evals5$outboundSchema.parse(evals5));
}

export function evals5FromJSON(
  jsonString: string,
): SafeParseResult<Evals5, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Evals5$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Evals5' from JSON`,
  );
}

/** @internal */
export const GetV2LogsIdEvalsResponse200Type$inboundSchema: z.ZodNativeEnum<
  typeof GetV2LogsIdEvalsResponse200Type
> = z.nativeEnum(GetV2LogsIdEvalsResponse200Type);

/** @internal */
export const GetV2LogsIdEvalsResponse200Type$outboundSchema: z.ZodNativeEnum<
  typeof GetV2LogsIdEvalsResponse200Type
> = GetV2LogsIdEvalsResponse200Type$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdEvalsResponse200Type$ {
  /** @deprecated use `GetV2LogsIdEvalsResponse200Type$inboundSchema` instead. */
  export const inboundSchema = GetV2LogsIdEvalsResponse200Type$inboundSchema;
  /** @deprecated use `GetV2LogsIdEvalsResponse200Type$outboundSchema` instead. */
  export const outboundSchema = GetV2LogsIdEvalsResponse200Type$outboundSchema;
}

/** @internal */
export const GetV2LogsIdEvalsResponseStatus$inboundSchema: z.ZodNativeEnum<
  typeof GetV2LogsIdEvalsResponseStatus
> = z.nativeEnum(GetV2LogsIdEvalsResponseStatus);

/** @internal */
export const GetV2LogsIdEvalsResponseStatus$outboundSchema: z.ZodNativeEnum<
  typeof GetV2LogsIdEvalsResponseStatus
> = GetV2LogsIdEvalsResponseStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdEvalsResponseStatus$ {
  /** @deprecated use `GetV2LogsIdEvalsResponseStatus$inboundSchema` instead. */
  export const inboundSchema = GetV2LogsIdEvalsResponseStatus$inboundSchema;
  /** @deprecated use `GetV2LogsIdEvalsResponseStatus$outboundSchema` instead. */
  export const outboundSchema = GetV2LogsIdEvalsResponseStatus$outboundSchema;
}

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals44Type$inboundSchema:
  z.ZodNativeEnum<
    typeof GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals44Type
  > = z.nativeEnum(
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals44Type,
  );

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals44Type$outboundSchema:
  z.ZodNativeEnum<
    typeof GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals44Type
  > =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals44Type$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals44Type$ {
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals44Type$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals44Type$inboundSchema;
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals44Type$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals44Type$outboundSchema;
}

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJson4$inboundSchema:
  z.ZodType<
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJson4,
    z.ZodTypeDef,
    unknown
  > = z.object({
    type:
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals44Type$inboundSchema,
    evaluator_id: z.string(),
  }).transform((v) => {
    return remap$(v, {
      "evaluator_id": "evaluatorId",
    });
  });

/** @internal */
export type GetV2LogsIdRelatedEntitiesResponse200ApplicationJson4$Outbound = {
  type: string;
  evaluator_id: string;
};

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJson4$outboundSchema:
  z.ZodType<
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJson4$Outbound,
    z.ZodTypeDef,
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJson4
  > = z.object({
    type:
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals44Type$outboundSchema,
    evaluatorId: z.string(),
  }).transform((v) => {
    return remap$(v, {
      evaluatorId: "evaluator_id",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdRelatedEntitiesResponse200ApplicationJson4$ {
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJson4$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJson4$inboundSchema;
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJson4$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJson4$outboundSchema;
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJson4$Outbound` instead. */
  export type Outbound =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJson4$Outbound;
}

export function getV2LogsIdRelatedEntitiesResponse200ApplicationJson4ToJSON(
  getV2LogsIdRelatedEntitiesResponse200ApplicationJson4:
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJson4,
): string {
  return JSON.stringify(
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJson4$outboundSchema.parse(
      getV2LogsIdRelatedEntitiesResponse200ApplicationJson4,
    ),
  );
}

export function getV2LogsIdRelatedEntitiesResponse200ApplicationJson4FromJSON(
  jsonString: string,
): SafeParseResult<
  GetV2LogsIdRelatedEntitiesResponse200ApplicationJson4,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJson4$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'GetV2LogsIdRelatedEntitiesResponse200ApplicationJson4' from JSON`,
  );
}

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals43Type$inboundSchema:
  z.ZodNativeEnum<
    typeof GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals43Type
  > = z.nativeEnum(
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals43Type,
  );

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals43Type$outboundSchema:
  z.ZodNativeEnum<
    typeof GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals43Type
  > =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals43Type$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals43Type$ {
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals43Type$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals43Type$inboundSchema;
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals43Type$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals43Type$outboundSchema;
}

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJson3$inboundSchema:
  z.ZodType<
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJson3,
    z.ZodTypeDef,
    unknown
  > = z.object({
    type:
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals43Type$inboundSchema,
    human_eval_id: z.string(),
  }).transform((v) => {
    return remap$(v, {
      "human_eval_id": "humanEvalId",
    });
  });

/** @internal */
export type GetV2LogsIdRelatedEntitiesResponse200ApplicationJson3$Outbound = {
  type: string;
  human_eval_id: string;
};

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJson3$outboundSchema:
  z.ZodType<
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJson3$Outbound,
    z.ZodTypeDef,
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJson3
  > = z.object({
    type:
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals43Type$outboundSchema,
    humanEvalId: z.string(),
  }).transform((v) => {
    return remap$(v, {
      humanEvalId: "human_eval_id",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdRelatedEntitiesResponse200ApplicationJson3$ {
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJson3$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJson3$inboundSchema;
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJson3$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJson3$outboundSchema;
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJson3$Outbound` instead. */
  export type Outbound =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJson3$Outbound;
}

export function getV2LogsIdRelatedEntitiesResponse200ApplicationJson3ToJSON(
  getV2LogsIdRelatedEntitiesResponse200ApplicationJson3:
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJson3,
): string {
  return JSON.stringify(
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJson3$outboundSchema.parse(
      getV2LogsIdRelatedEntitiesResponse200ApplicationJson3,
    ),
  );
}

export function getV2LogsIdRelatedEntitiesResponse200ApplicationJson3FromJSON(
  jsonString: string,
): SafeParseResult<
  GetV2LogsIdRelatedEntitiesResponse200ApplicationJson3,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJson3$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'GetV2LogsIdRelatedEntitiesResponse200ApplicationJson3' from JSON`,
  );
}

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals42Type$inboundSchema:
  z.ZodNativeEnum<
    typeof GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals42Type
  > = z.nativeEnum(
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals42Type,
  );

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals42Type$outboundSchema:
  z.ZodNativeEnum<
    typeof GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals42Type
  > =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals42Type$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals42Type$ {
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals42Type$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals42Type$inboundSchema;
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals42Type$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals42Type$outboundSchema;
}

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJson2$inboundSchema:
  z.ZodType<
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJson2,
    z.ZodTypeDef,
    unknown
  > = z.object({
    type:
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals42Type$inboundSchema,
    contact_id: z.string(),
  }).transform((v) => {
    return remap$(v, {
      "contact_id": "contactId",
    });
  });

/** @internal */
export type GetV2LogsIdRelatedEntitiesResponse200ApplicationJson2$Outbound = {
  type: string;
  contact_id: string;
};

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJson2$outboundSchema:
  z.ZodType<
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJson2$Outbound,
    z.ZodTypeDef,
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJson2
  > = z.object({
    type:
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals42Type$outboundSchema,
    contactId: z.string(),
  }).transform((v) => {
    return remap$(v, {
      contactId: "contact_id",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdRelatedEntitiesResponse200ApplicationJson2$ {
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJson2$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJson2$inboundSchema;
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJson2$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJson2$outboundSchema;
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJson2$Outbound` instead. */
  export type Outbound =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJson2$Outbound;
}

export function getV2LogsIdRelatedEntitiesResponse200ApplicationJson2ToJSON(
  getV2LogsIdRelatedEntitiesResponse200ApplicationJson2:
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJson2,
): string {
  return JSON.stringify(
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJson2$outboundSchema.parse(
      getV2LogsIdRelatedEntitiesResponse200ApplicationJson2,
    ),
  );
}

export function getV2LogsIdRelatedEntitiesResponse200ApplicationJson2FromJSON(
  jsonString: string,
): SafeParseResult<
  GetV2LogsIdRelatedEntitiesResponse200ApplicationJson2,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJson2$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'GetV2LogsIdRelatedEntitiesResponse200ApplicationJson2' from JSON`,
  );
}

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals4Type$inboundSchema:
  z.ZodNativeEnum<
    typeof GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals4Type
  > = z.nativeEnum(
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals4Type,
  );

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals4Type$outboundSchema:
  z.ZodNativeEnum<
    typeof GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals4Type
  > =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals4Type$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals4Type$ {
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals4Type$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals4Type$inboundSchema;
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals4Type$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals4Type$outboundSchema;
}

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJson1$inboundSchema:
  z.ZodType<
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJson1,
    z.ZodTypeDef,
    unknown
  > = z.object({
    type:
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals4Type$inboundSchema,
    account_id: z.string(),
  }).transform((v) => {
    return remap$(v, {
      "account_id": "accountId",
    });
  });

/** @internal */
export type GetV2LogsIdRelatedEntitiesResponse200ApplicationJson1$Outbound = {
  type: string;
  account_id: string;
};

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJson1$outboundSchema:
  z.ZodType<
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJson1$Outbound,
    z.ZodTypeDef,
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJson1
  > = z.object({
    type:
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals4Type$outboundSchema,
    accountId: z.string(),
  }).transform((v) => {
    return remap$(v, {
      accountId: "account_id",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdRelatedEntitiesResponse200ApplicationJson1$ {
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJson1$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJson1$inboundSchema;
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJson1$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJson1$outboundSchema;
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJson1$Outbound` instead. */
  export type Outbound =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJson1$Outbound;
}

export function getV2LogsIdRelatedEntitiesResponse200ApplicationJson1ToJSON(
  getV2LogsIdRelatedEntitiesResponse200ApplicationJson1:
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJson1,
): string {
  return JSON.stringify(
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJson1$outboundSchema.parse(
      getV2LogsIdRelatedEntitiesResponse200ApplicationJson1,
    ),
  );
}

export function getV2LogsIdRelatedEntitiesResponse200ApplicationJson1FromJSON(
  jsonString: string,
): SafeParseResult<
  GetV2LogsIdRelatedEntitiesResponse200ApplicationJson1,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJson1$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'GetV2LogsIdRelatedEntitiesResponse200ApplicationJson1' from JSON`,
  );
}

/** @internal */
export const GetV2LogsIdEvalsResponse200RelatedEntities$inboundSchema:
  z.ZodType<GetV2LogsIdEvalsResponse200RelatedEntities, z.ZodTypeDef, unknown> =
    z.union([
      z.lazy(() =>
        GetV2LogsIdRelatedEntitiesResponse200ApplicationJson1$inboundSchema
      ),
      z.lazy(() =>
        GetV2LogsIdRelatedEntitiesResponse200ApplicationJson2$inboundSchema
      ),
      z.lazy(() =>
        GetV2LogsIdRelatedEntitiesResponse200ApplicationJson3$inboundSchema
      ),
      z.lazy(() =>
        GetV2LogsIdRelatedEntitiesResponse200ApplicationJson4$inboundSchema
      ),
    ]);

/** @internal */
export type GetV2LogsIdEvalsResponse200RelatedEntities$Outbound =
  | GetV2LogsIdRelatedEntitiesResponse200ApplicationJson1$Outbound
  | GetV2LogsIdRelatedEntitiesResponse200ApplicationJson2$Outbound
  | GetV2LogsIdRelatedEntitiesResponse200ApplicationJson3$Outbound
  | GetV2LogsIdRelatedEntitiesResponse200ApplicationJson4$Outbound;

/** @internal */
export const GetV2LogsIdEvalsResponse200RelatedEntities$outboundSchema:
  z.ZodType<
    GetV2LogsIdEvalsResponse200RelatedEntities$Outbound,
    z.ZodTypeDef,
    GetV2LogsIdEvalsResponse200RelatedEntities
  > = z.union([
    z.lazy(() =>
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJson1$outboundSchema
    ),
    z.lazy(() =>
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJson2$outboundSchema
    ),
    z.lazy(() =>
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJson3$outboundSchema
    ),
    z.lazy(() =>
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJson4$outboundSchema
    ),
  ]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdEvalsResponse200RelatedEntities$ {
  /** @deprecated use `GetV2LogsIdEvalsResponse200RelatedEntities$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsIdEvalsResponse200RelatedEntities$inboundSchema;
  /** @deprecated use `GetV2LogsIdEvalsResponse200RelatedEntities$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdEvalsResponse200RelatedEntities$outboundSchema;
  /** @deprecated use `GetV2LogsIdEvalsResponse200RelatedEntities$Outbound` instead. */
  export type Outbound = GetV2LogsIdEvalsResponse200RelatedEntities$Outbound;
}

export function getV2LogsIdEvalsResponse200RelatedEntitiesToJSON(
  getV2LogsIdEvalsResponse200RelatedEntities:
    GetV2LogsIdEvalsResponse200RelatedEntities,
): string {
  return JSON.stringify(
    GetV2LogsIdEvalsResponse200RelatedEntities$outboundSchema.parse(
      getV2LogsIdEvalsResponse200RelatedEntities,
    ),
  );
}

export function getV2LogsIdEvalsResponse200RelatedEntitiesFromJSON(
  jsonString: string,
): SafeParseResult<
  GetV2LogsIdEvalsResponse200RelatedEntities,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetV2LogsIdEvalsResponse200RelatedEntities$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'GetV2LogsIdEvalsResponse200RelatedEntities' from JSON`,
  );
}

/** @internal */
export const Evals4$inboundSchema: z.ZodType<Evals4, z.ZodTypeDef, unknown> = z
  .object({
    type: GetV2LogsIdEvalsResponse200Type$inboundSchema,
    values: z.array(z.string()),
    id: z.string(),
    status: GetV2LogsIdEvalsResponseStatus$inboundSchema,
    timestamp: z.string().datetime({ offset: true }).transform(v =>
      new Date(v)
    ),
    related_entities: z.array(
      z.union([
        z.lazy(() =>
          GetV2LogsIdRelatedEntitiesResponse200ApplicationJson1$inboundSchema
        ),
        z.lazy(() =>
          GetV2LogsIdRelatedEntitiesResponse200ApplicationJson2$inboundSchema
        ),
        z.lazy(() =>
          GetV2LogsIdRelatedEntitiesResponse200ApplicationJson3$inboundSchema
        ),
        z.lazy(() =>
          GetV2LogsIdRelatedEntitiesResponse200ApplicationJson4$inboundSchema
        ),
      ]),
    ),
  }).transform((v) => {
    return remap$(v, {
      "related_entities": "relatedEntities",
    });
  });

/** @internal */
export type Evals4$Outbound = {
  type: string;
  values: Array<string>;
  id: string;
  status: string;
  timestamp: string;
  related_entities: Array<
    | GetV2LogsIdRelatedEntitiesResponse200ApplicationJson1$Outbound
    | GetV2LogsIdRelatedEntitiesResponse200ApplicationJson2$Outbound
    | GetV2LogsIdRelatedEntitiesResponse200ApplicationJson3$Outbound
    | GetV2LogsIdRelatedEntitiesResponse200ApplicationJson4$Outbound
  >;
};

/** @internal */
export const Evals4$outboundSchema: z.ZodType<
  Evals4$Outbound,
  z.ZodTypeDef,
  Evals4
> = z.object({
  type: GetV2LogsIdEvalsResponse200Type$outboundSchema,
  values: z.array(z.string()),
  id: z.string(),
  status: GetV2LogsIdEvalsResponseStatus$outboundSchema,
  timestamp: z.date().transform(v => v.toISOString()),
  relatedEntities: z.array(
    z.union([
      z.lazy(() =>
        GetV2LogsIdRelatedEntitiesResponse200ApplicationJson1$outboundSchema
      ),
      z.lazy(() =>
        GetV2LogsIdRelatedEntitiesResponse200ApplicationJson2$outboundSchema
      ),
      z.lazy(() =>
        GetV2LogsIdRelatedEntitiesResponse200ApplicationJson3$outboundSchema
      ),
      z.lazy(() =>
        GetV2LogsIdRelatedEntitiesResponse200ApplicationJson4$outboundSchema
      ),
    ]),
  ),
}).transform((v) => {
  return remap$(v, {
    relatedEntities: "related_entities",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Evals4$ {
  /** @deprecated use `Evals4$inboundSchema` instead. */
  export const inboundSchema = Evals4$inboundSchema;
  /** @deprecated use `Evals4$outboundSchema` instead. */
  export const outboundSchema = Evals4$outboundSchema;
  /** @deprecated use `Evals4$Outbound` instead. */
  export type Outbound = Evals4$Outbound;
}

export function evals4ToJSON(evals4: Evals4): string {
  return JSON.stringify(Evals4$outboundSchema.parse(evals4));
}

export function evals4FromJSON(
  jsonString: string,
): SafeParseResult<Evals4, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Evals4$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Evals4' from JSON`,
  );
}

/** @internal */
export const GetV2LogsIdEvalsResponseType$inboundSchema: z.ZodNativeEnum<
  typeof GetV2LogsIdEvalsResponseType
> = z.nativeEnum(GetV2LogsIdEvalsResponseType);

/** @internal */
export const GetV2LogsIdEvalsResponseType$outboundSchema: z.ZodNativeEnum<
  typeof GetV2LogsIdEvalsResponseType
> = GetV2LogsIdEvalsResponseType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdEvalsResponseType$ {
  /** @deprecated use `GetV2LogsIdEvalsResponseType$inboundSchema` instead. */
  export const inboundSchema = GetV2LogsIdEvalsResponseType$inboundSchema;
  /** @deprecated use `GetV2LogsIdEvalsResponseType$outboundSchema` instead. */
  export const outboundSchema = GetV2LogsIdEvalsResponseType$outboundSchema;
}

/** @internal */
export const GetV2LogsIdEvalsStatus$inboundSchema: z.ZodNativeEnum<
  typeof GetV2LogsIdEvalsStatus
> = z.nativeEnum(GetV2LogsIdEvalsStatus);

/** @internal */
export const GetV2LogsIdEvalsStatus$outboundSchema: z.ZodNativeEnum<
  typeof GetV2LogsIdEvalsStatus
> = GetV2LogsIdEvalsStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdEvalsStatus$ {
  /** @deprecated use `GetV2LogsIdEvalsStatus$inboundSchema` instead. */
  export const inboundSchema = GetV2LogsIdEvalsStatus$inboundSchema;
  /** @deprecated use `GetV2LogsIdEvalsStatus$outboundSchema` instead. */
  export const outboundSchema = GetV2LogsIdEvalsStatus$outboundSchema;
}

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals34Type$inboundSchema:
  z.ZodNativeEnum<
    typeof GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals34Type
  > = z.nativeEnum(
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals34Type,
  );

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals34Type$outboundSchema:
  z.ZodNativeEnum<
    typeof GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals34Type
  > =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals34Type$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals34Type$ {
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals34Type$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals34Type$inboundSchema;
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals34Type$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals34Type$outboundSchema;
}

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse2004$inboundSchema: z.ZodType<
  GetV2LogsIdRelatedEntitiesResponse2004,
  z.ZodTypeDef,
  unknown
> = z.object({
  type:
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals34Type$inboundSchema,
  evaluator_id: z.string(),
}).transform((v) => {
  return remap$(v, {
    "evaluator_id": "evaluatorId",
  });
});

/** @internal */
export type GetV2LogsIdRelatedEntitiesResponse2004$Outbound = {
  type: string;
  evaluator_id: string;
};

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse2004$outboundSchema: z.ZodType<
  GetV2LogsIdRelatedEntitiesResponse2004$Outbound,
  z.ZodTypeDef,
  GetV2LogsIdRelatedEntitiesResponse2004
> = z.object({
  type:
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals34Type$outboundSchema,
  evaluatorId: z.string(),
}).transform((v) => {
  return remap$(v, {
    evaluatorId: "evaluator_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdRelatedEntitiesResponse2004$ {
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse2004$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsIdRelatedEntitiesResponse2004$inboundSchema;
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse2004$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdRelatedEntitiesResponse2004$outboundSchema;
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse2004$Outbound` instead. */
  export type Outbound = GetV2LogsIdRelatedEntitiesResponse2004$Outbound;
}

export function getV2LogsIdRelatedEntitiesResponse2004ToJSON(
  getV2LogsIdRelatedEntitiesResponse2004:
    GetV2LogsIdRelatedEntitiesResponse2004,
): string {
  return JSON.stringify(
    GetV2LogsIdRelatedEntitiesResponse2004$outboundSchema.parse(
      getV2LogsIdRelatedEntitiesResponse2004,
    ),
  );
}

export function getV2LogsIdRelatedEntitiesResponse2004FromJSON(
  jsonString: string,
): SafeParseResult<GetV2LogsIdRelatedEntitiesResponse2004, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      GetV2LogsIdRelatedEntitiesResponse2004$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetV2LogsIdRelatedEntitiesResponse2004' from JSON`,
  );
}

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals33Type$inboundSchema:
  z.ZodNativeEnum<
    typeof GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals33Type
  > = z.nativeEnum(
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals33Type,
  );

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals33Type$outboundSchema:
  z.ZodNativeEnum<
    typeof GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals33Type
  > =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals33Type$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals33Type$ {
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals33Type$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals33Type$inboundSchema;
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals33Type$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals33Type$outboundSchema;
}

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals33$inboundSchema:
  z.ZodType<
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals33,
    z.ZodTypeDef,
    unknown
  > = z.object({
    type:
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals33Type$inboundSchema,
    human_eval_id: z.string(),
  }).transform((v) => {
    return remap$(v, {
      "human_eval_id": "humanEvalId",
    });
  });

/** @internal */
export type GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals33$Outbound =
  {
    type: string;
    human_eval_id: string;
  };

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals33$outboundSchema:
  z.ZodType<
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals33$Outbound,
    z.ZodTypeDef,
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals33
  > = z.object({
    type:
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals33Type$outboundSchema,
    humanEvalId: z.string(),
  }).transform((v) => {
    return remap$(v, {
      humanEvalId: "human_eval_id",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals33$ {
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals33$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals33$inboundSchema;
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals33$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals33$outboundSchema;
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals33$Outbound` instead. */
  export type Outbound =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals33$Outbound;
}

export function getV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals33ToJSON(
  getV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals33:
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals33,
): string {
  return JSON.stringify(
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals33$outboundSchema
      .parse(
        getV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals33,
      ),
  );
}

export function getV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals33FromJSON(
  jsonString: string,
): SafeParseResult<
  GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals33,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals33$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals33' from JSON`,
  );
}

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals32Type$inboundSchema:
  z.ZodNativeEnum<
    typeof GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals32Type
  > = z.nativeEnum(
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals32Type,
  );

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals32Type$outboundSchema:
  z.ZodNativeEnum<
    typeof GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals32Type
  > =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals32Type$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals32Type$ {
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals32Type$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals32Type$inboundSchema;
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals32Type$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals32Type$outboundSchema;
}

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals32$inboundSchema:
  z.ZodType<
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals32,
    z.ZodTypeDef,
    unknown
  > = z.object({
    type:
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals32Type$inboundSchema,
    contact_id: z.string(),
  }).transform((v) => {
    return remap$(v, {
      "contact_id": "contactId",
    });
  });

/** @internal */
export type GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals32$Outbound =
  {
    type: string;
    contact_id: string;
  };

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals32$outboundSchema:
  z.ZodType<
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals32$Outbound,
    z.ZodTypeDef,
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals32
  > = z.object({
    type:
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals32Type$outboundSchema,
    contactId: z.string(),
  }).transform((v) => {
    return remap$(v, {
      contactId: "contact_id",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals32$ {
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals32$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals32$inboundSchema;
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals32$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals32$outboundSchema;
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals32$Outbound` instead. */
  export type Outbound =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals32$Outbound;
}

export function getV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals32ToJSON(
  getV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals32:
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals32,
): string {
  return JSON.stringify(
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals32$outboundSchema
      .parse(
        getV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals32,
      ),
  );
}

export function getV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals32FromJSON(
  jsonString: string,
): SafeParseResult<
  GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals32,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals32$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals32' from JSON`,
  );
}

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals3Type$inboundSchema:
  z.ZodNativeEnum<
    typeof GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals3Type
  > = z.nativeEnum(
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals3Type,
  );

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals3Type$outboundSchema:
  z.ZodNativeEnum<
    typeof GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals3Type
  > =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals3Type$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals3Type$ {
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals3Type$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals3Type$inboundSchema;
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals3Type$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals3Type$outboundSchema;
}

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals31$inboundSchema:
  z.ZodType<
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals31,
    z.ZodTypeDef,
    unknown
  > = z.object({
    type:
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals3Type$inboundSchema,
    account_id: z.string(),
  }).transform((v) => {
    return remap$(v, {
      "account_id": "accountId",
    });
  });

/** @internal */
export type GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals31$Outbound =
  {
    type: string;
    account_id: string;
  };

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals31$outboundSchema:
  z.ZodType<
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals31$Outbound,
    z.ZodTypeDef,
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals31
  > = z.object({
    type:
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals3Type$outboundSchema,
    accountId: z.string(),
  }).transform((v) => {
    return remap$(v, {
      accountId: "account_id",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals31$ {
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals31$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals31$inboundSchema;
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals31$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals31$outboundSchema;
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals31$Outbound` instead. */
  export type Outbound =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals31$Outbound;
}

export function getV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals31ToJSON(
  getV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals31:
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals31,
): string {
  return JSON.stringify(
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals31$outboundSchema
      .parse(
        getV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals31,
      ),
  );
}

export function getV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals31FromJSON(
  jsonString: string,
): SafeParseResult<
  GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals31,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals31$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals31' from JSON`,
  );
}

/** @internal */
export const GetV2LogsIdEvalsResponseRelatedEntities$inboundSchema: z.ZodType<
  GetV2LogsIdEvalsResponseRelatedEntities,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() =>
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals31$inboundSchema
  ),
  z.lazy(() =>
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals32$inboundSchema
  ),
  z.lazy(() =>
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals33$inboundSchema
  ),
  z.lazy(() => GetV2LogsIdRelatedEntitiesResponse2004$inboundSchema),
]);

/** @internal */
export type GetV2LogsIdEvalsResponseRelatedEntities$Outbound =
  | GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals31$Outbound
  | GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals32$Outbound
  | GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals33$Outbound
  | GetV2LogsIdRelatedEntitiesResponse2004$Outbound;

/** @internal */
export const GetV2LogsIdEvalsResponseRelatedEntities$outboundSchema: z.ZodType<
  GetV2LogsIdEvalsResponseRelatedEntities$Outbound,
  z.ZodTypeDef,
  GetV2LogsIdEvalsResponseRelatedEntities
> = z.union([
  z.lazy(() =>
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals31$outboundSchema
  ),
  z.lazy(() =>
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals32$outboundSchema
  ),
  z.lazy(() =>
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals33$outboundSchema
  ),
  z.lazy(() => GetV2LogsIdRelatedEntitiesResponse2004$outboundSchema),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdEvalsResponseRelatedEntities$ {
  /** @deprecated use `GetV2LogsIdEvalsResponseRelatedEntities$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsIdEvalsResponseRelatedEntities$inboundSchema;
  /** @deprecated use `GetV2LogsIdEvalsResponseRelatedEntities$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdEvalsResponseRelatedEntities$outboundSchema;
  /** @deprecated use `GetV2LogsIdEvalsResponseRelatedEntities$Outbound` instead. */
  export type Outbound = GetV2LogsIdEvalsResponseRelatedEntities$Outbound;
}

export function getV2LogsIdEvalsResponseRelatedEntitiesToJSON(
  getV2LogsIdEvalsResponseRelatedEntities:
    GetV2LogsIdEvalsResponseRelatedEntities,
): string {
  return JSON.stringify(
    GetV2LogsIdEvalsResponseRelatedEntities$outboundSchema.parse(
      getV2LogsIdEvalsResponseRelatedEntities,
    ),
  );
}

export function getV2LogsIdEvalsResponseRelatedEntitiesFromJSON(
  jsonString: string,
): SafeParseResult<
  GetV2LogsIdEvalsResponseRelatedEntities,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetV2LogsIdEvalsResponseRelatedEntities$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'GetV2LogsIdEvalsResponseRelatedEntities' from JSON`,
  );
}

/** @internal */
export const Evals3$inboundSchema: z.ZodType<Evals3, z.ZodTypeDef, unknown> = z
  .object({
    type: GetV2LogsIdEvalsResponseType$inboundSchema,
    value: z.boolean(),
    id: z.string(),
    status: GetV2LogsIdEvalsStatus$inboundSchema,
    timestamp: z.string().datetime({ offset: true }).transform(v =>
      new Date(v)
    ),
    related_entities: z.array(
      z.union([
        z.lazy(() =>
          GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals31$inboundSchema
        ),
        z.lazy(() =>
          GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals32$inboundSchema
        ),
        z.lazy(() =>
          GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals33$inboundSchema
        ),
        z.lazy(() => GetV2LogsIdRelatedEntitiesResponse2004$inboundSchema),
      ]),
    ),
  }).transform((v) => {
    return remap$(v, {
      "related_entities": "relatedEntities",
    });
  });

/** @internal */
export type Evals3$Outbound = {
  type: string;
  value: boolean;
  id: string;
  status: string;
  timestamp: string;
  related_entities: Array<
    | GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals31$Outbound
    | GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals32$Outbound
    | GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals33$Outbound
    | GetV2LogsIdRelatedEntitiesResponse2004$Outbound
  >;
};

/** @internal */
export const Evals3$outboundSchema: z.ZodType<
  Evals3$Outbound,
  z.ZodTypeDef,
  Evals3
> = z.object({
  type: GetV2LogsIdEvalsResponseType$outboundSchema,
  value: z.boolean(),
  id: z.string(),
  status: GetV2LogsIdEvalsStatus$outboundSchema,
  timestamp: z.date().transform(v => v.toISOString()),
  relatedEntities: z.array(
    z.union([
      z.lazy(() =>
        GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals31$outboundSchema
      ),
      z.lazy(() =>
        GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals32$outboundSchema
      ),
      z.lazy(() =>
        GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals33$outboundSchema
      ),
      z.lazy(() => GetV2LogsIdRelatedEntitiesResponse2004$outboundSchema),
    ]),
  ),
}).transform((v) => {
  return remap$(v, {
    relatedEntities: "related_entities",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Evals3$ {
  /** @deprecated use `Evals3$inboundSchema` instead. */
  export const inboundSchema = Evals3$inboundSchema;
  /** @deprecated use `Evals3$outboundSchema` instead. */
  export const outboundSchema = Evals3$outboundSchema;
  /** @deprecated use `Evals3$Outbound` instead. */
  export type Outbound = Evals3$Outbound;
}

export function evals3ToJSON(evals3: Evals3): string {
  return JSON.stringify(Evals3$outboundSchema.parse(evals3));
}

export function evals3FromJSON(
  jsonString: string,
): SafeParseResult<Evals3, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Evals3$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Evals3' from JSON`,
  );
}

/** @internal */
export const GetV2LogsIdEvalsType$inboundSchema: z.ZodNativeEnum<
  typeof GetV2LogsIdEvalsType
> = z.nativeEnum(GetV2LogsIdEvalsType);

/** @internal */
export const GetV2LogsIdEvalsType$outboundSchema: z.ZodNativeEnum<
  typeof GetV2LogsIdEvalsType
> = GetV2LogsIdEvalsType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdEvalsType$ {
  /** @deprecated use `GetV2LogsIdEvalsType$inboundSchema` instead. */
  export const inboundSchema = GetV2LogsIdEvalsType$inboundSchema;
  /** @deprecated use `GetV2LogsIdEvalsType$outboundSchema` instead. */
  export const outboundSchema = GetV2LogsIdEvalsType$outboundSchema;
}

/** @internal */
export const EvalsStatus$inboundSchema: z.ZodNativeEnum<typeof EvalsStatus> = z
  .nativeEnum(EvalsStatus);

/** @internal */
export const EvalsStatus$outboundSchema: z.ZodNativeEnum<typeof EvalsStatus> =
  EvalsStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EvalsStatus$ {
  /** @deprecated use `EvalsStatus$inboundSchema` instead. */
  export const inboundSchema = EvalsStatus$inboundSchema;
  /** @deprecated use `EvalsStatus$outboundSchema` instead. */
  export const outboundSchema = EvalsStatus$outboundSchema;
}

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals2Type$inboundSchema:
  z.ZodNativeEnum<
    typeof GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals2Type
  > = z.nativeEnum(
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals2Type,
  );

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals2Type$outboundSchema:
  z.ZodNativeEnum<
    typeof GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals2Type
  > =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals2Type$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals2Type$ {
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals2Type$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals2Type$inboundSchema;
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals2Type$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals2Type$outboundSchema;
}

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals24$inboundSchema:
  z.ZodType<
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals24,
    z.ZodTypeDef,
    unknown
  > = z.object({
    type:
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals2Type$inboundSchema,
    evaluator_id: z.string(),
  }).transform((v) => {
    return remap$(v, {
      "evaluator_id": "evaluatorId",
    });
  });

/** @internal */
export type GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals24$Outbound =
  {
    type: string;
    evaluator_id: string;
  };

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals24$outboundSchema:
  z.ZodType<
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals24$Outbound,
    z.ZodTypeDef,
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals24
  > = z.object({
    type:
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals2Type$outboundSchema,
    evaluatorId: z.string(),
  }).transform((v) => {
    return remap$(v, {
      evaluatorId: "evaluator_id",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals24$ {
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals24$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals24$inboundSchema;
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals24$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals24$outboundSchema;
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals24$Outbound` instead. */
  export type Outbound =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals24$Outbound;
}

export function getV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals24ToJSON(
  getV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals24:
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals24,
): string {
  return JSON.stringify(
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals24$outboundSchema
      .parse(
        getV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals24,
      ),
  );
}

export function getV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals24FromJSON(
  jsonString: string,
): SafeParseResult<
  GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals24,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals24$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals24' from JSON`,
  );
}

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1EvalsType$inboundSchema:
  z.ZodNativeEnum<
    typeof GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1EvalsType
  > = z.nativeEnum(
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1EvalsType,
  );

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1EvalsType$outboundSchema:
  z.ZodNativeEnum<
    typeof GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1EvalsType
  > =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1EvalsType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1EvalsType$ {
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1EvalsType$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1EvalsType$inboundSchema;
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1EvalsType$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1EvalsType$outboundSchema;
}

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals23$inboundSchema:
  z.ZodType<
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals23,
    z.ZodTypeDef,
    unknown
  > = z.object({
    type:
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1EvalsType$inboundSchema,
    human_eval_id: z.string(),
  }).transform((v) => {
    return remap$(v, {
      "human_eval_id": "humanEvalId",
    });
  });

/** @internal */
export type GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals23$Outbound =
  {
    type: string;
    human_eval_id: string;
  };

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals23$outboundSchema:
  z.ZodType<
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals23$Outbound,
    z.ZodTypeDef,
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals23
  > = z.object({
    type:
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1EvalsType$outboundSchema,
    humanEvalId: z.string(),
  }).transform((v) => {
    return remap$(v, {
      humanEvalId: "human_eval_id",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals23$ {
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals23$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals23$inboundSchema;
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals23$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals23$outboundSchema;
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals23$Outbound` instead. */
  export type Outbound =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals23$Outbound;
}

export function getV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals23ToJSON(
  getV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals23:
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals23,
): string {
  return JSON.stringify(
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals23$outboundSchema
      .parse(
        getV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals23,
      ),
  );
}

export function getV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals23FromJSON(
  jsonString: string,
): SafeParseResult<
  GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals23,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals23$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals23' from JSON`,
  );
}

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Type$inboundSchema:
  z.ZodNativeEnum<
    typeof GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Type
  > = z.nativeEnum(
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Type,
  );

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Type$outboundSchema:
  z.ZodNativeEnum<
    typeof GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Type
  > =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Type$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Type$ {
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Type$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Type$inboundSchema;
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Type$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Type$outboundSchema;
}

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals22$inboundSchema:
  z.ZodType<
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals22,
    z.ZodTypeDef,
    unknown
  > = z.object({
    type:
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Type$inboundSchema,
    contact_id: z.string(),
  }).transform((v) => {
    return remap$(v, {
      "contact_id": "contactId",
    });
  });

/** @internal */
export type GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals22$Outbound =
  {
    type: string;
    contact_id: string;
  };

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals22$outboundSchema:
  z.ZodType<
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals22$Outbound,
    z.ZodTypeDef,
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals22
  > = z.object({
    type:
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Type$outboundSchema,
    contactId: z.string(),
  }).transform((v) => {
    return remap$(v, {
      contactId: "contact_id",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals22$ {
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals22$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals22$inboundSchema;
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals22$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals22$outboundSchema;
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals22$Outbound` instead. */
  export type Outbound =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals22$Outbound;
}

export function getV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals22ToJSON(
  getV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals22:
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals22,
): string {
  return JSON.stringify(
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals22$outboundSchema
      .parse(
        getV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals22,
      ),
  );
}

export function getV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals22FromJSON(
  jsonString: string,
): SafeParseResult<
  GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals22,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals22$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals22' from JSON`,
  );
}

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals21Type$inboundSchema:
  z.ZodNativeEnum<
    typeof GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals21Type
  > = z.nativeEnum(
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals21Type,
  );

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals21Type$outboundSchema:
  z.ZodNativeEnum<
    typeof GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals21Type
  > =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals21Type$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals21Type$ {
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals21Type$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals21Type$inboundSchema;
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals21Type$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals21Type$outboundSchema;
}

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals21$inboundSchema:
  z.ZodType<
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals21,
    z.ZodTypeDef,
    unknown
  > = z.object({
    type:
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals21Type$inboundSchema,
    account_id: z.string(),
  }).transform((v) => {
    return remap$(v, {
      "account_id": "accountId",
    });
  });

/** @internal */
export type GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals21$Outbound =
  {
    type: string;
    account_id: string;
  };

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals21$outboundSchema:
  z.ZodType<
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals21$Outbound,
    z.ZodTypeDef,
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals21
  > = z.object({
    type:
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals21Type$outboundSchema,
    accountId: z.string(),
  }).transform((v) => {
    return remap$(v, {
      accountId: "account_id",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals21$ {
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals21$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals21$inboundSchema;
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals21$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals21$outboundSchema;
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals21$Outbound` instead. */
  export type Outbound =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals21$Outbound;
}

export function getV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals21ToJSON(
  getV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals21:
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals21,
): string {
  return JSON.stringify(
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals21$outboundSchema
      .parse(
        getV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals21,
      ),
  );
}

export function getV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals21FromJSON(
  jsonString: string,
): SafeParseResult<
  GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals21,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals21$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals21' from JSON`,
  );
}

/** @internal */
export const GetV2LogsIdEvalsRelatedEntities$inboundSchema: z.ZodType<
  GetV2LogsIdEvalsRelatedEntities,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() =>
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals21$inboundSchema
  ),
  z.lazy(() =>
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals22$inboundSchema
  ),
  z.lazy(() =>
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals23$inboundSchema
  ),
  z.lazy(() =>
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals24$inboundSchema
  ),
]);

/** @internal */
export type GetV2LogsIdEvalsRelatedEntities$Outbound =
  | GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals21$Outbound
  | GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals22$Outbound
  | GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals23$Outbound
  | GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals24$Outbound;

/** @internal */
export const GetV2LogsIdEvalsRelatedEntities$outboundSchema: z.ZodType<
  GetV2LogsIdEvalsRelatedEntities$Outbound,
  z.ZodTypeDef,
  GetV2LogsIdEvalsRelatedEntities
> = z.union([
  z.lazy(() =>
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals21$outboundSchema
  ),
  z.lazy(() =>
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals22$outboundSchema
  ),
  z.lazy(() =>
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals23$outboundSchema
  ),
  z.lazy(() =>
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals24$outboundSchema
  ),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdEvalsRelatedEntities$ {
  /** @deprecated use `GetV2LogsIdEvalsRelatedEntities$inboundSchema` instead. */
  export const inboundSchema = GetV2LogsIdEvalsRelatedEntities$inboundSchema;
  /** @deprecated use `GetV2LogsIdEvalsRelatedEntities$outboundSchema` instead. */
  export const outboundSchema = GetV2LogsIdEvalsRelatedEntities$outboundSchema;
  /** @deprecated use `GetV2LogsIdEvalsRelatedEntities$Outbound` instead. */
  export type Outbound = GetV2LogsIdEvalsRelatedEntities$Outbound;
}

export function getV2LogsIdEvalsRelatedEntitiesToJSON(
  getV2LogsIdEvalsRelatedEntities: GetV2LogsIdEvalsRelatedEntities,
): string {
  return JSON.stringify(
    GetV2LogsIdEvalsRelatedEntities$outboundSchema.parse(
      getV2LogsIdEvalsRelatedEntities,
    ),
  );
}

export function getV2LogsIdEvalsRelatedEntitiesFromJSON(
  jsonString: string,
): SafeParseResult<GetV2LogsIdEvalsRelatedEntities, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetV2LogsIdEvalsRelatedEntities$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetV2LogsIdEvalsRelatedEntities' from JSON`,
  );
}

/** @internal */
export const Evals2$inboundSchema: z.ZodType<Evals2, z.ZodTypeDef, unknown> = z
  .object({
    type: GetV2LogsIdEvalsType$inboundSchema,
    value: z.number(),
    id: z.string(),
    status: EvalsStatus$inboundSchema,
    timestamp: z.string().datetime({ offset: true }).transform(v =>
      new Date(v)
    ),
    related_entities: z.array(
      z.union([
        z.lazy(() =>
          GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals21$inboundSchema
        ),
        z.lazy(() =>
          GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals22$inboundSchema
        ),
        z.lazy(() =>
          GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals23$inboundSchema
        ),
        z.lazy(() =>
          GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals24$inboundSchema
        ),
      ]),
    ),
  }).transform((v) => {
    return remap$(v, {
      "related_entities": "relatedEntities",
    });
  });

/** @internal */
export type Evals2$Outbound = {
  type: string;
  value: number;
  id: string;
  status: string;
  timestamp: string;
  related_entities: Array<
    | GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals21$Outbound
    | GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals22$Outbound
    | GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals23$Outbound
    | GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals24$Outbound
  >;
};

/** @internal */
export const Evals2$outboundSchema: z.ZodType<
  Evals2$Outbound,
  z.ZodTypeDef,
  Evals2
> = z.object({
  type: GetV2LogsIdEvalsType$outboundSchema,
  value: z.number(),
  id: z.string(),
  status: EvalsStatus$outboundSchema,
  timestamp: z.date().transform(v => v.toISOString()),
  relatedEntities: z.array(
    z.union([
      z.lazy(() =>
        GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals21$outboundSchema
      ),
      z.lazy(() =>
        GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals22$outboundSchema
      ),
      z.lazy(() =>
        GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals23$outboundSchema
      ),
      z.lazy(() =>
        GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals24$outboundSchema
      ),
    ]),
  ),
}).transform((v) => {
  return remap$(v, {
    relatedEntities: "related_entities",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Evals2$ {
  /** @deprecated use `Evals2$inboundSchema` instead. */
  export const inboundSchema = Evals2$inboundSchema;
  /** @deprecated use `Evals2$outboundSchema` instead. */
  export const outboundSchema = Evals2$outboundSchema;
  /** @deprecated use `Evals2$Outbound` instead. */
  export type Outbound = Evals2$Outbound;
}

export function evals2ToJSON(evals2: Evals2): string {
  return JSON.stringify(Evals2$outboundSchema.parse(evals2));
}

export function evals2FromJSON(
  jsonString: string,
): SafeParseResult<Evals2, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Evals2$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Evals2' from JSON`,
  );
}

/** @internal */
export const EvalsType$inboundSchema: z.ZodNativeEnum<typeof EvalsType> = z
  .nativeEnum(EvalsType);

/** @internal */
export const EvalsType$outboundSchema: z.ZodNativeEnum<typeof EvalsType> =
  EvalsType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EvalsType$ {
  /** @deprecated use `EvalsType$inboundSchema` instead. */
  export const inboundSchema = EvalsType$inboundSchema;
  /** @deprecated use `EvalsType$outboundSchema` instead. */
  export const outboundSchema = EvalsType$outboundSchema;
}

/** @internal */
export const Status$inboundSchema: z.ZodNativeEnum<typeof Status> = z
  .nativeEnum(Status);

/** @internal */
export const Status$outboundSchema: z.ZodNativeEnum<typeof Status> =
  Status$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Status$ {
  /** @deprecated use `Status$inboundSchema` instead. */
  export const inboundSchema = Status$inboundSchema;
  /** @deprecated use `Status$outboundSchema` instead. */
  export const outboundSchema = Status$outboundSchema;
}

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals14Type$inboundSchema:
  z.ZodNativeEnum<
    typeof GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals14Type
  > = z.nativeEnum(
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals14Type,
  );

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals14Type$outboundSchema:
  z.ZodNativeEnum<
    typeof GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals14Type
  > =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals14Type$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals14Type$ {
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals14Type$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals14Type$inboundSchema;
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals14Type$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals14Type$outboundSchema;
}

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals14$inboundSchema:
  z.ZodType<
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals14,
    z.ZodTypeDef,
    unknown
  > = z.object({
    type:
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals14Type$inboundSchema,
    evaluator_id: z.string(),
  }).transform((v) => {
    return remap$(v, {
      "evaluator_id": "evaluatorId",
    });
  });

/** @internal */
export type GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals14$Outbound =
  {
    type: string;
    evaluator_id: string;
  };

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals14$outboundSchema:
  z.ZodType<
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals14$Outbound,
    z.ZodTypeDef,
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals14
  > = z.object({
    type:
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals14Type$outboundSchema,
    evaluatorId: z.string(),
  }).transform((v) => {
    return remap$(v, {
      evaluatorId: "evaluator_id",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals14$ {
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals14$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals14$inboundSchema;
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals14$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals14$outboundSchema;
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals14$Outbound` instead. */
  export type Outbound =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals14$Outbound;
}

export function getV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals14ToJSON(
  getV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals14:
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals14,
): string {
  return JSON.stringify(
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals14$outboundSchema
      .parse(
        getV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals14,
      ),
  );
}

export function getV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals14FromJSON(
  jsonString: string,
): SafeParseResult<
  GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals14,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals14$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals14' from JSON`,
  );
}

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals13Type$inboundSchema:
  z.ZodNativeEnum<
    typeof GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals13Type
  > = z.nativeEnum(
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals13Type,
  );

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals13Type$outboundSchema:
  z.ZodNativeEnum<
    typeof GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals13Type
  > =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals13Type$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals13Type$ {
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals13Type$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals13Type$inboundSchema;
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals13Type$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals13Type$outboundSchema;
}

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals13$inboundSchema:
  z.ZodType<
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals13,
    z.ZodTypeDef,
    unknown
  > = z.object({
    type:
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals13Type$inboundSchema,
    human_eval_id: z.string(),
  }).transform((v) => {
    return remap$(v, {
      "human_eval_id": "humanEvalId",
    });
  });

/** @internal */
export type GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals13$Outbound =
  {
    type: string;
    human_eval_id: string;
  };

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals13$outboundSchema:
  z.ZodType<
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals13$Outbound,
    z.ZodTypeDef,
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals13
  > = z.object({
    type:
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals13Type$outboundSchema,
    humanEvalId: z.string(),
  }).transform((v) => {
    return remap$(v, {
      humanEvalId: "human_eval_id",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals13$ {
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals13$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals13$inboundSchema;
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals13$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals13$outboundSchema;
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals13$Outbound` instead. */
  export type Outbound =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals13$Outbound;
}

export function getV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals13ToJSON(
  getV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals13:
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals13,
): string {
  return JSON.stringify(
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals13$outboundSchema
      .parse(
        getV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals13,
      ),
  );
}

export function getV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals13FromJSON(
  jsonString: string,
): SafeParseResult<
  GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals13,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals13$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals13' from JSON`,
  );
}

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals12Type$inboundSchema:
  z.ZodNativeEnum<
    typeof GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals12Type
  > = z.nativeEnum(
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals12Type,
  );

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals12Type$outboundSchema:
  z.ZodNativeEnum<
    typeof GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals12Type
  > =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals12Type$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals12Type$ {
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals12Type$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals12Type$inboundSchema;
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals12Type$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals12Type$outboundSchema;
}

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals12$inboundSchema:
  z.ZodType<
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals12,
    z.ZodTypeDef,
    unknown
  > = z.object({
    type:
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals12Type$inboundSchema,
    contact_id: z.string(),
  }).transform((v) => {
    return remap$(v, {
      "contact_id": "contactId",
    });
  });

/** @internal */
export type GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals12$Outbound =
  {
    type: string;
    contact_id: string;
  };

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals12$outboundSchema:
  z.ZodType<
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals12$Outbound,
    z.ZodTypeDef,
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals12
  > = z.object({
    type:
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals12Type$outboundSchema,
    contactId: z.string(),
  }).transform((v) => {
    return remap$(v, {
      contactId: "contact_id",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals12$ {
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals12$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals12$inboundSchema;
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals12$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals12$outboundSchema;
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals12$Outbound` instead. */
  export type Outbound =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals12$Outbound;
}

export function getV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals12ToJSON(
  getV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals12:
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals12,
): string {
  return JSON.stringify(
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals12$outboundSchema
      .parse(
        getV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals12,
      ),
  );
}

export function getV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals12FromJSON(
  jsonString: string,
): SafeParseResult<
  GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals12,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals12$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals12' from JSON`,
  );
}

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals1Type$inboundSchema:
  z.ZodNativeEnum<
    typeof GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals1Type
  > = z.nativeEnum(
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals1Type,
  );

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals1Type$outboundSchema:
  z.ZodNativeEnum<
    typeof GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals1Type
  > =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals1Type$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals1Type$ {
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals1Type$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals1Type$inboundSchema;
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals1Type$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals1Type$outboundSchema;
}

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals11$inboundSchema:
  z.ZodType<
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals11,
    z.ZodTypeDef,
    unknown
  > = z.object({
    type:
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals1Type$inboundSchema,
    account_id: z.string(),
  }).transform((v) => {
    return remap$(v, {
      "account_id": "accountId",
    });
  });

/** @internal */
export type GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals11$Outbound =
  {
    type: string;
    account_id: string;
  };

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals11$outboundSchema:
  z.ZodType<
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals11$Outbound,
    z.ZodTypeDef,
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals11
  > = z.object({
    type:
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals1Type$outboundSchema,
    accountId: z.string(),
  }).transform((v) => {
    return remap$(v, {
      accountId: "account_id",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals11$ {
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals11$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals11$inboundSchema;
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals11$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals11$outboundSchema;
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals11$Outbound` instead. */
  export type Outbound =
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals11$Outbound;
}

export function getV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals11ToJSON(
  getV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals11:
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals11,
): string {
  return JSON.stringify(
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals11$outboundSchema
      .parse(
        getV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals11,
      ),
  );
}

export function getV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals11FromJSON(
  jsonString: string,
): SafeParseResult<
  GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals11,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals11$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals11' from JSON`,
  );
}

/** @internal */
export const EvalsRelatedEntities$inboundSchema: z.ZodType<
  EvalsRelatedEntities,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() =>
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals11$inboundSchema
  ),
  z.lazy(() =>
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals12$inboundSchema
  ),
  z.lazy(() =>
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals13$inboundSchema
  ),
  z.lazy(() =>
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals14$inboundSchema
  ),
]);

/** @internal */
export type EvalsRelatedEntities$Outbound =
  | GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals11$Outbound
  | GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals12$Outbound
  | GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals13$Outbound
  | GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals14$Outbound;

/** @internal */
export const EvalsRelatedEntities$outboundSchema: z.ZodType<
  EvalsRelatedEntities$Outbound,
  z.ZodTypeDef,
  EvalsRelatedEntities
> = z.union([
  z.lazy(() =>
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals11$outboundSchema
  ),
  z.lazy(() =>
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals12$outboundSchema
  ),
  z.lazy(() =>
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals13$outboundSchema
  ),
  z.lazy(() =>
    GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals14$outboundSchema
  ),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EvalsRelatedEntities$ {
  /** @deprecated use `EvalsRelatedEntities$inboundSchema` instead. */
  export const inboundSchema = EvalsRelatedEntities$inboundSchema;
  /** @deprecated use `EvalsRelatedEntities$outboundSchema` instead. */
  export const outboundSchema = EvalsRelatedEntities$outboundSchema;
  /** @deprecated use `EvalsRelatedEntities$Outbound` instead. */
  export type Outbound = EvalsRelatedEntities$Outbound;
}

export function evalsRelatedEntitiesToJSON(
  evalsRelatedEntities: EvalsRelatedEntities,
): string {
  return JSON.stringify(
    EvalsRelatedEntities$outboundSchema.parse(evalsRelatedEntities),
  );
}

export function evalsRelatedEntitiesFromJSON(
  jsonString: string,
): SafeParseResult<EvalsRelatedEntities, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => EvalsRelatedEntities$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'EvalsRelatedEntities' from JSON`,
  );
}

/** @internal */
export const Evals1$inboundSchema: z.ZodType<Evals1, z.ZodTypeDef, unknown> = z
  .object({
    type: EvalsType$inboundSchema,
    value: z.string(),
    id: z.string(),
    status: Status$inboundSchema,
    timestamp: z.string().datetime({ offset: true }).transform(v =>
      new Date(v)
    ),
    related_entities: z.array(
      z.union([
        z.lazy(() =>
          GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals11$inboundSchema
        ),
        z.lazy(() =>
          GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals12$inboundSchema
        ),
        z.lazy(() =>
          GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals13$inboundSchema
        ),
        z.lazy(() =>
          GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals14$inboundSchema
        ),
      ]),
    ),
  }).transform((v) => {
    return remap$(v, {
      "related_entities": "relatedEntities",
    });
  });

/** @internal */
export type Evals1$Outbound = {
  type: string;
  value: string;
  id: string;
  status: string;
  timestamp: string;
  related_entities: Array<
    | GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals11$Outbound
    | GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals12$Outbound
    | GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals13$Outbound
    | GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals14$Outbound
  >;
};

/** @internal */
export const Evals1$outboundSchema: z.ZodType<
  Evals1$Outbound,
  z.ZodTypeDef,
  Evals1
> = z.object({
  type: EvalsType$outboundSchema,
  value: z.string(),
  id: z.string(),
  status: Status$outboundSchema,
  timestamp: z.date().transform(v => v.toISOString()),
  relatedEntities: z.array(
    z.union([
      z.lazy(() =>
        GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals11$outboundSchema
      ),
      z.lazy(() =>
        GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals12$outboundSchema
      ),
      z.lazy(() =>
        GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals13$outboundSchema
      ),
      z.lazy(() =>
        GetV2LogsIdRelatedEntitiesResponse200ApplicationJSONResponseBody1Evals14$outboundSchema
      ),
    ]),
  ),
}).transform((v) => {
  return remap$(v, {
    relatedEntities: "related_entities",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Evals1$ {
  /** @deprecated use `Evals1$inboundSchema` instead. */
  export const inboundSchema = Evals1$inboundSchema;
  /** @deprecated use `Evals1$outboundSchema` instead. */
  export const outboundSchema = Evals1$outboundSchema;
  /** @deprecated use `Evals1$Outbound` instead. */
  export type Outbound = Evals1$Outbound;
}

export function evals1ToJSON(evals1: Evals1): string {
  return JSON.stringify(Evals1$outboundSchema.parse(evals1));
}

export function evals1FromJSON(
  jsonString: string,
): SafeParseResult<Evals1, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Evals1$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Evals1' from JSON`,
  );
}

/** @internal */
export const Evals$inboundSchema: z.ZodType<Evals, z.ZodTypeDef, unknown> = z
  .union([
    z.lazy(() => Evals1$inboundSchema),
    z.lazy(() => Evals2$inboundSchema),
    z.lazy(() => Evals3$inboundSchema),
    z.lazy(() => Evals4$inboundSchema),
    z.lazy(() => Evals5$inboundSchema),
    z.lazy(() => Evals6$inboundSchema),
    z.lazy(() => Evals7$inboundSchema),
  ]);

/** @internal */
export type Evals$Outbound =
  | Evals1$Outbound
  | Evals2$Outbound
  | Evals3$Outbound
  | Evals4$Outbound
  | Evals5$Outbound
  | Evals6$Outbound
  | Evals7$Outbound;

/** @internal */
export const Evals$outboundSchema: z.ZodType<
  Evals$Outbound,
  z.ZodTypeDef,
  Evals
> = z.union([
  z.lazy(() => Evals1$outboundSchema),
  z.lazy(() => Evals2$outboundSchema),
  z.lazy(() => Evals3$outboundSchema),
  z.lazy(() => Evals4$outboundSchema),
  z.lazy(() => Evals5$outboundSchema),
  z.lazy(() => Evals6$outboundSchema),
  z.lazy(() => Evals7$outboundSchema),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Evals$ {
  /** @deprecated use `Evals$inboundSchema` instead. */
  export const inboundSchema = Evals$inboundSchema;
  /** @deprecated use `Evals$outboundSchema` instead. */
  export const outboundSchema = Evals$outboundSchema;
  /** @deprecated use `Evals$Outbound` instead. */
  export type Outbound = Evals$Outbound;
}

export function evalsToJSON(evals: Evals): string {
  return JSON.stringify(Evals$outboundSchema.parse(evals));
}

export function evalsFromJSON(
  jsonString: string,
): SafeParseResult<Evals, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Evals$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Evals' from JSON`,
  );
}

/** @internal */
export const ProductType$inboundSchema: z.ZodNativeEnum<typeof ProductType> = z
  .nativeEnum(ProductType);

/** @internal */
export const ProductType$outboundSchema: z.ZodNativeEnum<typeof ProductType> =
  ProductType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ProductType$ {
  /** @deprecated use `ProductType$inboundSchema` instead. */
  export const inboundSchema = ProductType$inboundSchema;
  /** @deprecated use `ProductType$outboundSchema` instead. */
  export const outboundSchema = ProductType$outboundSchema;
}

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponseType$inboundSchema:
  z.ZodNativeEnum<typeof GetV2LogsIdRelatedEntitiesResponseType> = z.nativeEnum(
    GetV2LogsIdRelatedEntitiesResponseType,
  );

/** @internal */
export const GetV2LogsIdRelatedEntitiesResponseType$outboundSchema:
  z.ZodNativeEnum<typeof GetV2LogsIdRelatedEntitiesResponseType> =
    GetV2LogsIdRelatedEntitiesResponseType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdRelatedEntitiesResponseType$ {
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponseType$inboundSchema` instead. */
  export const inboundSchema =
    GetV2LogsIdRelatedEntitiesResponseType$inboundSchema;
  /** @deprecated use `GetV2LogsIdRelatedEntitiesResponseType$outboundSchema` instead. */
  export const outboundSchema =
    GetV2LogsIdRelatedEntitiesResponseType$outboundSchema;
}

/** @internal */
export const RelatedEntities3$inboundSchema: z.ZodType<
  RelatedEntities3,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: GetV2LogsIdRelatedEntitiesResponseType$inboundSchema,
  contact_id: z.string(),
}).transform((v) => {
  return remap$(v, {
    "contact_id": "contactId",
  });
});

/** @internal */
export type RelatedEntities3$Outbound = {
  type: string;
  contact_id: string;
};

/** @internal */
export const RelatedEntities3$outboundSchema: z.ZodType<
  RelatedEntities3$Outbound,
  z.ZodTypeDef,
  RelatedEntities3
> = z.object({
  type: GetV2LogsIdRelatedEntitiesResponseType$outboundSchema,
  contactId: z.string(),
}).transform((v) => {
  return remap$(v, {
    contactId: "contact_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RelatedEntities3$ {
  /** @deprecated use `RelatedEntities3$inboundSchema` instead. */
  export const inboundSchema = RelatedEntities3$inboundSchema;
  /** @deprecated use `RelatedEntities3$outboundSchema` instead. */
  export const outboundSchema = RelatedEntities3$outboundSchema;
  /** @deprecated use `RelatedEntities3$Outbound` instead. */
  export type Outbound = RelatedEntities3$Outbound;
}

export function relatedEntities3ToJSON(
  relatedEntities3: RelatedEntities3,
): string {
  return JSON.stringify(
    RelatedEntities3$outboundSchema.parse(relatedEntities3),
  );
}

export function relatedEntities3FromJSON(
  jsonString: string,
): SafeParseResult<RelatedEntities3, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => RelatedEntities3$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RelatedEntities3' from JSON`,
  );
}

/** @internal */
export const GetV2LogsIdRelatedEntitiesType$inboundSchema: z.ZodNativeEnum<
  typeof GetV2LogsIdRelatedEntitiesType
> = z.nativeEnum(GetV2LogsIdRelatedEntitiesType);

/** @internal */
export const GetV2LogsIdRelatedEntitiesType$outboundSchema: z.ZodNativeEnum<
  typeof GetV2LogsIdRelatedEntitiesType
> = GetV2LogsIdRelatedEntitiesType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdRelatedEntitiesType$ {
  /** @deprecated use `GetV2LogsIdRelatedEntitiesType$inboundSchema` instead. */
  export const inboundSchema = GetV2LogsIdRelatedEntitiesType$inboundSchema;
  /** @deprecated use `GetV2LogsIdRelatedEntitiesType$outboundSchema` instead. */
  export const outboundSchema = GetV2LogsIdRelatedEntitiesType$outboundSchema;
}

/** @internal */
export const RelatedEntities2$inboundSchema: z.ZodType<
  RelatedEntities2,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: GetV2LogsIdRelatedEntitiesType$inboundSchema,
  remote_config_variant_id: z.string(),
}).transform((v) => {
  return remap$(v, {
    "remote_config_variant_id": "remoteConfigVariantId",
  });
});

/** @internal */
export type RelatedEntities2$Outbound = {
  type: string;
  remote_config_variant_id: string;
};

/** @internal */
export const RelatedEntities2$outboundSchema: z.ZodType<
  RelatedEntities2$Outbound,
  z.ZodTypeDef,
  RelatedEntities2
> = z.object({
  type: GetV2LogsIdRelatedEntitiesType$outboundSchema,
  remoteConfigVariantId: z.string(),
}).transform((v) => {
  return remap$(v, {
    remoteConfigVariantId: "remote_config_variant_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RelatedEntities2$ {
  /** @deprecated use `RelatedEntities2$inboundSchema` instead. */
  export const inboundSchema = RelatedEntities2$inboundSchema;
  /** @deprecated use `RelatedEntities2$outboundSchema` instead. */
  export const outboundSchema = RelatedEntities2$outboundSchema;
  /** @deprecated use `RelatedEntities2$Outbound` instead. */
  export type Outbound = RelatedEntities2$Outbound;
}

export function relatedEntities2ToJSON(
  relatedEntities2: RelatedEntities2,
): string {
  return JSON.stringify(
    RelatedEntities2$outboundSchema.parse(relatedEntities2),
  );
}

export function relatedEntities2FromJSON(
  jsonString: string,
): SafeParseResult<RelatedEntities2, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => RelatedEntities2$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RelatedEntities2' from JSON`,
  );
}

/** @internal */
export const RelatedEntitiesType$inboundSchema: z.ZodNativeEnum<
  typeof RelatedEntitiesType
> = z.nativeEnum(RelatedEntitiesType);

/** @internal */
export const RelatedEntitiesType$outboundSchema: z.ZodNativeEnum<
  typeof RelatedEntitiesType
> = RelatedEntitiesType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RelatedEntitiesType$ {
  /** @deprecated use `RelatedEntitiesType$inboundSchema` instead. */
  export const inboundSchema = RelatedEntitiesType$inboundSchema;
  /** @deprecated use `RelatedEntitiesType$outboundSchema` instead. */
  export const outboundSchema = RelatedEntitiesType$outboundSchema;
}

/** @internal */
export const RelatedEntities1$inboundSchema: z.ZodType<
  RelatedEntities1,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: RelatedEntitiesType$inboundSchema,
  remote_config_id: z.string(),
}).transform((v) => {
  return remap$(v, {
    "remote_config_id": "remoteConfigId",
  });
});

/** @internal */
export type RelatedEntities1$Outbound = {
  type: string;
  remote_config_id: string;
};

/** @internal */
export const RelatedEntities1$outboundSchema: z.ZodType<
  RelatedEntities1$Outbound,
  z.ZodTypeDef,
  RelatedEntities1
> = z.object({
  type: RelatedEntitiesType$outboundSchema,
  remoteConfigId: z.string(),
}).transform((v) => {
  return remap$(v, {
    remoteConfigId: "remote_config_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RelatedEntities1$ {
  /** @deprecated use `RelatedEntities1$inboundSchema` instead. */
  export const inboundSchema = RelatedEntities1$inboundSchema;
  /** @deprecated use `RelatedEntities1$outboundSchema` instead. */
  export const outboundSchema = RelatedEntities1$outboundSchema;
  /** @deprecated use `RelatedEntities1$Outbound` instead. */
  export type Outbound = RelatedEntities1$Outbound;
}

export function relatedEntities1ToJSON(
  relatedEntities1: RelatedEntities1,
): string {
  return JSON.stringify(
    RelatedEntities1$outboundSchema.parse(relatedEntities1),
  );
}

export function relatedEntities1FromJSON(
  jsonString: string,
): SafeParseResult<RelatedEntities1, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => RelatedEntities1$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RelatedEntities1' from JSON`,
  );
}

/** @internal */
export const RelatedEntities$inboundSchema: z.ZodType<
  RelatedEntities,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => RelatedEntities1$inboundSchema),
  z.lazy(() => RelatedEntities2$inboundSchema),
  z.lazy(() => RelatedEntities3$inboundSchema),
]);

/** @internal */
export type RelatedEntities$Outbound =
  | RelatedEntities1$Outbound
  | RelatedEntities2$Outbound
  | RelatedEntities3$Outbound;

/** @internal */
export const RelatedEntities$outboundSchema: z.ZodType<
  RelatedEntities$Outbound,
  z.ZodTypeDef,
  RelatedEntities
> = z.union([
  z.lazy(() => RelatedEntities1$outboundSchema),
  z.lazy(() => RelatedEntities2$outboundSchema),
  z.lazy(() => RelatedEntities3$outboundSchema),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RelatedEntities$ {
  /** @deprecated use `RelatedEntities$inboundSchema` instead. */
  export const inboundSchema = RelatedEntities$inboundSchema;
  /** @deprecated use `RelatedEntities$outboundSchema` instead. */
  export const outboundSchema = RelatedEntities$outboundSchema;
  /** @deprecated use `RelatedEntities$Outbound` instead. */
  export type Outbound = RelatedEntities$Outbound;
}

export function relatedEntitiesToJSON(
  relatedEntities: RelatedEntities,
): string {
  return JSON.stringify(RelatedEntities$outboundSchema.parse(relatedEntities));
}

export function relatedEntitiesFromJSON(
  jsonString: string,
): SafeParseResult<RelatedEntities, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => RelatedEntities$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RelatedEntities' from JSON`,
  );
}

/** @internal */
export const Action$inboundSchema: z.ZodNativeEnum<typeof Action> = z
  .nativeEnum(Action);

/** @internal */
export const Action$outboundSchema: z.ZodNativeEnum<typeof Action> =
  Action$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Action$ {
  /** @deprecated use `Action$inboundSchema` instead. */
  export const inboundSchema = Action$inboundSchema;
  /** @deprecated use `Action$outboundSchema` instead. */
  export const outboundSchema = Action$outboundSchema;
}

/** @internal */
export const ResponseBodyData$inboundSchema: z.ZodType<
  ResponseBodyData,
  z.ZodTypeDef,
  unknown
> = z.object({
  remote_config_id: z.string(),
  remote_config_key: z.string(),
  remote_config_type: z.string(),
  remote_config_version: z.number(),
  remote_config_variant_id: z.string(),
  remote_config_variant_position: z.number(),
  remote_config_value: z.any().optional(),
  is_default_matched: z.boolean(),
  action: Action$inboundSchema,
}).transform((v) => {
  return remap$(v, {
    "remote_config_id": "remoteConfigId",
    "remote_config_key": "remoteConfigKey",
    "remote_config_type": "remoteConfigType",
    "remote_config_version": "remoteConfigVersion",
    "remote_config_variant_id": "remoteConfigVariantId",
    "remote_config_variant_position": "remoteConfigVariantPosition",
    "remote_config_value": "remoteConfigValue",
    "is_default_matched": "isDefaultMatched",
  });
});

/** @internal */
export type ResponseBodyData$Outbound = {
  remote_config_id: string;
  remote_config_key: string;
  remote_config_type: string;
  remote_config_version: number;
  remote_config_variant_id: string;
  remote_config_variant_position: number;
  remote_config_value?: any | undefined;
  is_default_matched: boolean;
  action: string;
};

/** @internal */
export const ResponseBodyData$outboundSchema: z.ZodType<
  ResponseBodyData$Outbound,
  z.ZodTypeDef,
  ResponseBodyData
> = z.object({
  remoteConfigId: z.string(),
  remoteConfigKey: z.string(),
  remoteConfigType: z.string(),
  remoteConfigVersion: z.number(),
  remoteConfigVariantId: z.string(),
  remoteConfigVariantPosition: z.number(),
  remoteConfigValue: z.any().optional(),
  isDefaultMatched: z.boolean(),
  action: Action$outboundSchema,
}).transform((v) => {
  return remap$(v, {
    remoteConfigId: "remote_config_id",
    remoteConfigKey: "remote_config_key",
    remoteConfigType: "remote_config_type",
    remoteConfigVersion: "remote_config_version",
    remoteConfigVariantId: "remote_config_variant_id",
    remoteConfigVariantPosition: "remote_config_variant_position",
    remoteConfigValue: "remote_config_value",
    isDefaultMatched: "is_default_matched",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ResponseBodyData$ {
  /** @deprecated use `ResponseBodyData$inboundSchema` instead. */
  export const inboundSchema = ResponseBodyData$inboundSchema;
  /** @deprecated use `ResponseBodyData$outboundSchema` instead. */
  export const outboundSchema = ResponseBodyData$outboundSchema;
  /** @deprecated use `ResponseBodyData$Outbound` instead. */
  export type Outbound = ResponseBodyData$Outbound;
}

export function responseBodyDataToJSON(
  responseBodyData: ResponseBodyData,
): string {
  return JSON.stringify(
    ResponseBodyData$outboundSchema.parse(responseBodyData),
  );
}

export function responseBodyDataFromJSON(
  jsonString: string,
): SafeParseResult<ResponseBodyData, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ResponseBodyData$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ResponseBodyData' from JSON`,
  );
}

/** @internal */
export const ResponseBody1$inboundSchema: z.ZodType<
  ResponseBody1,
  z.ZodTypeDef,
  unknown
> = z.object({
  _id: z.string(),
  workspace_id: z.string(),
  workflow_metadata: z.record(z.any()).optional(),
  workflow_input: z.record(z.any()).optional(),
  workflow_output: z.record(z.any()).optional(),
  project_id: z.string().optional(),
  request_properties: z.lazy(() => RequestProperties$inboundSchema).optional(),
  started_at: z.string().datetime({ offset: true }).transform(v => new Date(v)),
  finished_at: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
  evals: z.array(
    z.union([
      z.lazy(() => Evals1$inboundSchema),
      z.lazy(() => Evals2$inboundSchema),
      z.lazy(() => Evals3$inboundSchema),
      z.lazy(() => Evals4$inboundSchema),
      z.lazy(() => Evals5$inboundSchema),
      z.lazy(() => Evals6$inboundSchema),
      z.lazy(() => Evals7$inboundSchema),
    ]),
  ),
  product_type: ProductType$inboundSchema,
  related_entities: z.array(
    z.union([
      z.lazy(() => RelatedEntities1$inboundSchema),
      z.lazy(() => RelatedEntities2$inboundSchema),
      z.lazy(() => RelatedEntities3$inboundSchema),
    ]),
  ),
  data: z.lazy(() => ResponseBodyData$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "_id": "id",
    "workspace_id": "workspaceId",
    "workflow_metadata": "workflowMetadata",
    "workflow_input": "workflowInput",
    "workflow_output": "workflowOutput",
    "project_id": "projectId",
    "request_properties": "requestProperties",
    "started_at": "startedAt",
    "finished_at": "finishedAt",
    "product_type": "productType",
    "related_entities": "relatedEntities",
  });
});

/** @internal */
export type ResponseBody1$Outbound = {
  _id: string;
  workspace_id: string;
  workflow_metadata?: { [k: string]: any } | undefined;
  workflow_input?: { [k: string]: any } | undefined;
  workflow_output?: { [k: string]: any } | undefined;
  project_id?: string | undefined;
  request_properties?: RequestProperties$Outbound | undefined;
  started_at: string;
  finished_at?: string | undefined;
  evals: Array<
    | Evals1$Outbound
    | Evals2$Outbound
    | Evals3$Outbound
    | Evals4$Outbound
    | Evals5$Outbound
    | Evals6$Outbound
    | Evals7$Outbound
  >;
  product_type: string;
  related_entities: Array<
    | RelatedEntities1$Outbound
    | RelatedEntities2$Outbound
    | RelatedEntities3$Outbound
  >;
  data: ResponseBodyData$Outbound;
};

/** @internal */
export const ResponseBody1$outboundSchema: z.ZodType<
  ResponseBody1$Outbound,
  z.ZodTypeDef,
  ResponseBody1
> = z.object({
  id: z.string(),
  workspaceId: z.string(),
  workflowMetadata: z.record(z.any()).optional(),
  workflowInput: z.record(z.any()).optional(),
  workflowOutput: z.record(z.any()).optional(),
  projectId: z.string().optional(),
  requestProperties: z.lazy(() => RequestProperties$outboundSchema).optional(),
  startedAt: z.date().transform(v => v.toISOString()),
  finishedAt: z.date().transform(v => v.toISOString()).optional(),
  evals: z.array(
    z.union([
      z.lazy(() => Evals1$outboundSchema),
      z.lazy(() => Evals2$outboundSchema),
      z.lazy(() => Evals3$outboundSchema),
      z.lazy(() => Evals4$outboundSchema),
      z.lazy(() => Evals5$outboundSchema),
      z.lazy(() => Evals6$outboundSchema),
      z.lazy(() => Evals7$outboundSchema),
    ]),
  ),
  productType: ProductType$outboundSchema,
  relatedEntities: z.array(
    z.union([
      z.lazy(() => RelatedEntities1$outboundSchema),
      z.lazy(() => RelatedEntities2$outboundSchema),
      z.lazy(() => RelatedEntities3$outboundSchema),
    ]),
  ),
  data: z.lazy(() => ResponseBodyData$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    id: "_id",
    workspaceId: "workspace_id",
    workflowMetadata: "workflow_metadata",
    workflowInput: "workflow_input",
    workflowOutput: "workflow_output",
    projectId: "project_id",
    requestProperties: "request_properties",
    startedAt: "started_at",
    finishedAt: "finished_at",
    productType: "product_type",
    relatedEntities: "related_entities",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ResponseBody1$ {
  /** @deprecated use `ResponseBody1$inboundSchema` instead. */
  export const inboundSchema = ResponseBody1$inboundSchema;
  /** @deprecated use `ResponseBody1$outboundSchema` instead. */
  export const outboundSchema = ResponseBody1$outboundSchema;
  /** @deprecated use `ResponseBody1$Outbound` instead. */
  export type Outbound = ResponseBody1$Outbound;
}

export function responseBody1ToJSON(responseBody1: ResponseBody1): string {
  return JSON.stringify(ResponseBody1$outboundSchema.parse(responseBody1));
}

export function responseBody1FromJSON(
  jsonString: string,
): SafeParseResult<ResponseBody1, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ResponseBody1$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ResponseBody1' from JSON`,
  );
}

/** @internal */
export const GetV2LogsIdResponseBody$inboundSchema: z.ZodType<
  GetV2LogsIdResponseBody,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => ResponseBody1$inboundSchema),
  z.lazy(() => ResponseBody2$inboundSchema),
  z.lazy(() => ResponseBody3$inboundSchema),
  z.lazy(() => ResponseBody4$inboundSchema),
]);

/** @internal */
export type GetV2LogsIdResponseBody$Outbound =
  | ResponseBody1$Outbound
  | ResponseBody2$Outbound
  | ResponseBody3$Outbound
  | ResponseBody4$Outbound;

/** @internal */
export const GetV2LogsIdResponseBody$outboundSchema: z.ZodType<
  GetV2LogsIdResponseBody$Outbound,
  z.ZodTypeDef,
  GetV2LogsIdResponseBody
> = z.union([
  z.lazy(() => ResponseBody1$outboundSchema),
  z.lazy(() => ResponseBody2$outboundSchema),
  z.lazy(() => ResponseBody3$outboundSchema),
  z.lazy(() => ResponseBody4$outboundSchema),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV2LogsIdResponseBody$ {
  /** @deprecated use `GetV2LogsIdResponseBody$inboundSchema` instead. */
  export const inboundSchema = GetV2LogsIdResponseBody$inboundSchema;
  /** @deprecated use `GetV2LogsIdResponseBody$outboundSchema` instead. */
  export const outboundSchema = GetV2LogsIdResponseBody$outboundSchema;
  /** @deprecated use `GetV2LogsIdResponseBody$Outbound` instead. */
  export type Outbound = GetV2LogsIdResponseBody$Outbound;
}

export function getV2LogsIdResponseBodyToJSON(
  getV2LogsIdResponseBody: GetV2LogsIdResponseBody,
): string {
  return JSON.stringify(
    GetV2LogsIdResponseBody$outboundSchema.parse(getV2LogsIdResponseBody),
  );
}

export function getV2LogsIdResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<GetV2LogsIdResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetV2LogsIdResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetV2LogsIdResponseBody' from JSON`,
  );
}
